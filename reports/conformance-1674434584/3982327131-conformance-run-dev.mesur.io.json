{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "e3275f92-9221-4692-9fe4-3dd1b35a88a5",
        "name": "Clear Cache",
        "item": [
          {
            "id": "b8223b13-1998-4d6a-a442-6e95465e01ac",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "39e36151-49ef-47c0-ae7f-8b1a1365722d",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "79cb8c49-6d5e-433e-a985-03de6943d378"
                }
              }
            ]
          },
          {
            "id": "7649be03-84ea-4b81-9cb4-0b95f5fbcae6",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "678ac4e4-a5ce-44c7-8aea-910436aac579",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "de1ad0bc-c2d0-485f-adeb-294acffdbe23"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "deb4a6cf-1bd5-45a4-b9e4-5c51034def7f",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "d5869d45-dabb-4d58-85fa-1afb5e75d2ac",
            "name": "Positive Testing",
            "item": [
              {
                "id": "df767c1c-5df2-4e22-a165-e5ec01699db6",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5aa5c7e3-31eb-41bb-a017-224611bd1fd0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9c9a23b4-10d1-4376-8163-8cb60dd14d43"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "c8f595ae-f864-4490-81f6-ec5c775d1929",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "4ce52d9b-9b4a-4d90-a3ed-51de93eb19c8"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "bb66bd9c-468a-45cb-877c-6ebca6a22dc5",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "209dabcb-b5b5-40a6-adde-689e02ee8c06"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "61c03bad-c419-4a12-aaa9-59b96e7040d7",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "b3a70d3b-0059-45e1-a6c1-b3643e757947"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "47061ccd-3b58-4b0e-9abf-af44b9b48f45",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "7e21b6d8-47d4-4689-bb13-d8bbfddb02a5"
            }
          }
        ]
      },
      {
        "id": "78209dfd-b854-455a-b570-5301800c30dd",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "8bed96ca-087e-4163-acf5-cbd153923d18",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d8ca0ca6-6057-4553-9b34-833c3eb76931",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "95f5dfeb-8110-4356-86cf-9225611e5447",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bcc3a3c3-5e0a-4835-9cd4-4d7febb67c3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "566a06f6-22fb-4773-91a6-93811e6af2dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6dcfa282-ab10-41e7-a384-6bed57d6f8e3",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5746e32d-a7a7-4116-8a4d-eef9b33d3486",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0f38e4f2-e34c-42d8-914d-0d72535b1d32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa5eea72-44de-44a0-b585-5472539816e4",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18027b80-29a7-4c9e-b6c5-844da1df8ee7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b008d1ba-7ad7-486e-9bd0-0fb5e8f46a30"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "4220309f-9cf6-42fa-a648-fa175fa18eda",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a9cf1095-344a-4196-94c5-574573ce36c9",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd2f0575-0176-49cd-a095-1beabc6fd518",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2ad4acb6-d76e-4db5-883a-565b547d9308"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0633e2ab-a35f-4d30-a776-60cb61e4be68",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2545db0d-e606-4b59-a179-98196b3ce441"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7cb2aea1-fb31-4af1-8c00-1c9940d70a54",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b601cc27-33f8-4df7-8cd1-a238917c1528",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f454acd7-9876-42d6-ae69-57b45040d0f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99ce562d-8e28-4d29-8167-773d64d4a66e",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "1daf5897-1b03-482c-8a80-da982e3ebb71"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "9202a41f-5f62-4652-a8ae-2c9ec73de3a2",
            "name": "Positive Testing",
            "item": [
              {
                "id": "8b004b85-03d3-40ec-a09a-b1eedda6e4e6",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "cf8e7a2b-8bcd-4ff8-ab68-60685329d9d3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "c9f59480-3ab7-40d7-a4ae-f6c74cb88497"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9a3c485a-3045-4211-9737-f83ad1e36cd0",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "11195ecb-0e43-4e48-9e45-6f630d1a50b0"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "fa66799b-4ee8-42e3-8a03-4a941f527b02",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a7c52d76-ee2c-4222-b41b-d56fe40894d8"
            }
          }
        ]
      },
      {
        "id": "3047e6a3-b3d9-4653-9c2e-49f0423bbb40",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "1ec42293-5822-4d79-ba01-8c7c86d117d4",
            "name": "Negative Testing",
            "item": [
              {
                "id": "40fb922a-d4f3-4d90-b357-32b5c49b1f73",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "cef826ae-b5ae-402b-8e3a-19d4dc20e975",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ab35063-0f89-43bb-b3fe-b98d3e3fdf2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94937f24-94cf-4687-ae80-59a4068fe482"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5883f7d-0dda-4a17-ac01-c4d24c8222dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "75f7aa21-8f25-4731-8713-a66650d5613a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5797ccf4-d04e-49af-a4ce-471055c761fd",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a29e18c5-fc13-4eb9-89f6-8c50b8d1a243",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86f50ee0-e611-4ecd-ad85-18292d0294b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cce7501b-bd9a-473a-abc4-8fa9ccf838d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9437f2d1-2416-4d32-873d-9e3b5a0ee1d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "679cac9b-b9ee-454c-b443-e224985f95eb",
                    "name": "credentials_issue:credential.@context:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6b03a9a-d0f1-4e2f-9daa-f54c55ce8fe5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60a4923c-da1f-47e7-8392-e8d977c40dc3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a349e0e-b6a7-4fd9-b55e-5f2c00767de2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must contain \"https://w3id.org/traceability/v1\"",
                            "    req.credential[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f62ae593-bf82-450d-a431-9fd1a337f2dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1da5d0c6-dc8b-4b29-adfe-2f6facd6b40b",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da066872-d595-46c8-9bf2-fbb1b4020095",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f756763f-24d8-4bd1-b115-2dfd684d533e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b673d37-21ca-4f9a-8db3-c759ef7147a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2e3a78c4-f7de-4b97-8354-09c2cdf29a93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a59abecd-8aad-4efe-bcc8-263a113ad251",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "868f9ee9-6e69-486a-a633-a30d5ea712bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb6c3e3d-4550-4df5-aec9-7b07a4b6beb4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e454b09e-b9d0-499d-bee8-086b54d8e0b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "734ae76c-6fe7-450d-b393-9819c9d29f0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e49de62-73b4-4f08-ab03-2245a95079c0",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3e47aa5-6727-496a-bc0f-84574d6c105f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1e4c26a-981d-4fff-a034-13be9171bbaa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b048de0-49e4-4467-a59d-39760cd5bb0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1264e8b4-2a85-459e-8558-04b248e8cbda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a5dea67-13ec-40f8-bc70-694f6890429c",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8104f495-efbf-4c4c-bb91-2febbdce6df8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6457885b-a1cb-4283-bd96-b090a9efd729"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74378488-bed7-42df-829c-b0606a2ca8a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6725d861-d19f-4a88-9f14-c90fc1a897ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bca519ba-abdb-455a-8673-c83fd829b0bd",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4de20ff-76c8-42a9-a642-4eddd650c5d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc305c71-0bb1-4c1b-8d8b-6d50e069758f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea18f0e6-3543-42ae-8ffa-33961f37c40f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5fc74623-62e4-47f4-b275-57add63bdedb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "540c2335-0682-41e1-9b4d-623ee2e077fa",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d77741e5-1039-4790-856e-6131481328f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16bebb34-b2c1-4ef9-9b4e-fd197283a23f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cdda8e2-4c3d-4907-b583-8cf7b4883363",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f86dc1d5-db80-4875-8b5f-063b260bd2fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d71f1f96-3b0e-4e36-9855-713230f54234",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87259c6c-4900-4fd0-b69f-47c33fd5e14c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ae4a073-cec1-4e98-a2d8-ea385d4fc451"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9c788f6-45cd-459d-9bb1-02b0c2db1b29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "df24f1ec-677d-4f5d-b963-181d0640a7e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2fb375d-e479-4a3e-9159-423c40007646",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7505807-476e-403e-a343-763e4f72a9b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb7feb72-945f-477a-abd7-be3dffc799fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c8800b8-d346-42c0-b769-1afa0025c6c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "587bef00-a060-41d0-8ff7-a436e3be2be8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "345bb6dc-2815-4142-a3e6-1812010548eb",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a0d312c-e600-4f47-afdd-768776677616",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ed28bf6-085e-4d95-bbe2-e244ad54a212"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b9ac782-e717-4319-ab6f-af579596a65d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "34341d83-f100-4ccd-ad7e-28898115e3e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc9e47b5-0e2a-44df-ab27-80b9c1a9bc11",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35a04835-7d1d-4214-8eda-6608c2aca294",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44cbd892-7881-427f-85b7-a24066f712b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7d14a27-a895-4a1e-bb09-9f1e7230b683",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b5154ceb-d467-4759-afd1-9805aa85e917"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cd4c9c0-5c90-46de-b7e2-09059256f198",
                    "name": "credentials_issue:credential.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85adbb01-b97c-424b-ab01-f26b5eee4ab8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4c3d8d4-ba9d-420f-b0b2-42c31d0fb0d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19e42a4a-6160-4eef-a411-ecaf29cf4405",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.id is a required property",
                            "    delete req.credential.id;",
                            "}));"
                          ],
                          "_lastExecutionId": "50715829-c340-4b67-82c7-9530857fe0f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "101dcfd1-9269-4453-9a13-ebc92ff77ee3",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e58f217-acbd-48c6-be30-8ff5b89670ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3683d60-6220-4f0a-8db1-50dfd23a2858"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a506498-8840-4270-804e-3cc506708a3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6c96641f-b6a0-4d11-b63a-45ba6be9f3ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24a41b22-61e3-48a7-abcc-ecc3217635a4",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6a39621-3532-439a-9ae3-842c1f1cc39a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e995509-17b5-4f72-b497-d5acdde5d8f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5cd862fe-96e7-4e2b-99f0-b057cfe3f2ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "07ae8fc8-aa53-49b5-a4c0-e629f6f2c0df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8afb359-a55f-4aa0-b00b-f440b26224c1",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e636820-b92a-4b60-85ec-22aeee9bf110",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "552b97af-1cd8-4f9b-90f3-b51d4a6b18ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8cb5384-e21f-459c-b11e-c51a72e06ed4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "be33e25b-d791-4a03-9992-12cdbf987f98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5bd597fc-b1b7-4819-9ad1-14d0d3f90368",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9e818a7-fd30-4a6a-8b53-5c3f8448b46d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f6206cd-6d70-4978-b13c-30de23500553"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b271b361-701a-4256-a8f2-2cbb00781fef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "52f0f201-aaaa-4689-8f9c-53d92b498215"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5cf63bd-42ef-45f7-a421-5e2d7d67ddd3",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42b1b534-a3a8-4ce0-b548-7c2f7a225b61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4b446e1-b3d5-469e-b528-36b314df22eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "844dc1c5-1166-4edc-9737-af16c3ce5698",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "69a512ff-3642-4de7-88f3-ad84434ed048"
                        }
                      }
                    ]
                  },
                  {
                    "id": "006942e7-64a7-4d60-a601-e6e65bdc5afc",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a50ca687-b7aa-48c2-9cc5-0f96a55ee605",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22a6ef75-b7a2-4e60-b3f0-0e145e0509f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0fe2a36b-ad73-4d56-b0db-0ecb7cb2178d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "2bc7ef9f-0100-4a05-8618-472de7a57d0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "132bad77-d6d1-4872-96ad-78b48f61b25b",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "096215f2-c5b6-450c-887d-77dffcb00cef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84b5458a-fa05-4b28-91c4-51713227302e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27de0a43-b802-4ede-b17f-f0a078617545",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d09d0554-2f72-4772-8f2c-3bc11a053735"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f08a048c-7751-441b-aaf7-2a1884489905",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "477f66a2-46f0-413e-96bd-2db5c86779a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "093a3ac7-ac04-4d59-8b20-ba263011fcae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f40b7e3-8769-4305-94fe-e2ce57941cad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4793582f-9c2e-4974-9b05-3e125dac6981"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d0ca521-174b-41b4-ba07-9c996bde2e1a",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "820fd1ba-00e8-44ab-ba75-ccef32b4918b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e10d4275-b6e8-42fe-9fd1-a1040b1662f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f1600f7-634c-4c5d-866c-e3bbde593cb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c2c3325e-879a-408b-94ac-f3d3867b0378"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f08f54cd-9875-4ecc-8b81-bcee7d211a8e",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00d4eaac-f351-42c8-9a04-fd24061d892a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "199b05fb-7149-4357-a5ba-fda9ba327256"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2af20d09-02d4-4d04-8a8d-03fea76fb25c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "38b9cc47-fa64-4268-a128-dd32d6cfed53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d77ed5d8-dea8-43a7-8ed7-41a036e212e5",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f717f1e1-bb6d-485e-8f16-d0a0baee60a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1c852fe-59af-471b-bbc5-38780f650081"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f37e5607-5493-45b2-8c83-864f3e3cf673",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "68ef5586-4f78-40bb-a02a-7be94bc2af5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6659cf65-374c-43ab-bf8d-ad4e8f1c33c2",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa7496a9-5860-4a0e-94b1-0a5dd067168b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "215253e8-06e7-4a09-bfa8-7d70c558d33b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de4b7615-3e14-41df-a815-046fc647c90c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "4233b9d3-9879-4204-8e1b-7923c338462a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9144bc33-b57c-4ab0-91fd-af645007a0f2",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e76c8978-6f85-4856-858e-37add847e23f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e75a25a6-31d7-40a3-aa2e-dd642f8d95a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c49a5f2e-352a-48a8-b991-6b4bcb77ea11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "16a760ff-b328-4421-a7b1-659287c0fb7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a713b20f-2ead-4d8d-af2b-95abf5577982",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d534619-bff8-4b83-8f79-ec54104d329f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9694c6ac-5c94-46d2-9a69-d5b669e2e126"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cde3c075-ea71-4c60-adbb-d81ab3c52359",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "972d726e-41e1-4f71-a755-d84a8b25de35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60ba72e4-b58a-4f2b-b7bf-571b652d45f4",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6501878d-8d80-4c85-9aa3-c6622a40cae0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85b963ba-e597-4be4-979b-3e505a7829d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae8b570e-dfaf-4d59-a7f7-a86940afe5cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "e32592eb-e277-4966-9a62-c546660d9943"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e311730a-a8b1-4c9c-86e5-7258d524e061",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8227bad0-4e36-443d-bbd7-ea9f45bad26c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "835cd2a3-858a-41c6-b9e5-abd66f4a9082"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdcc9236-6107-4771-aea8-82b4326977bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "32ae9f70-f188-4ea5-a179-542107e0aa50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c2070c2-d7a3-490b-9d3b-ef87cdb96346",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "212fbcfb-5880-4590-9d3d-d2752cb0ef10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f30b99c-5fee-4e14-afe8-050595127691"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "806cc29f-384c-4c46-82ad-94ac94d5edd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "6043e760-bde9-4f0a-bf49-04164f424eb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5c78997-d7d2-4597-84db-f1b6b9344d72",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91b47612-257e-4654-8d16-c1d850deb334",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2d906cc-4699-4237-85c4-09855a03275c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fd9beca-fe43-483a-9164-5c062e9a3964",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "eb079654-63f1-4bda-b5fe-4b9483c0e880"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98ea0a69-9246-42c5-9c3b-c02936d86bd8",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a65ba55-5116-4ba4-a01c-b84a2167a460",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dfda16db-a9c9-40df-893e-8f4629d4e032"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdb4c103-6487-47e1-92a2-37dec212f323",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "b2da8e71-0021-474b-961c-286da41926d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f033a00-5e93-44a2-bc6a-5d0c6c96c2f3",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bc9dc62-c931-48a6-94fc-dcea5827dbae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e6b77bf-2522-406e-b74b-c6ff4a464380"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00365ba1-dd4b-47e9-a83e-25ce6bf6cd95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d3478b72-f285-4e19-85f0-f1dd3abcce22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18d3bfb2-487b-4902-9596-09e8ca99e51d",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fbd0f53-04c9-42de-aec4-a2032f685b29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4783803a-7970-4674-bea0-ac6f6b118ff2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1ac099d-2b4c-49dc-b717-152a70053cdd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "64815bdb-d434-4926-9d7d-af3cc23db529"
                        }
                      }
                    ]
                  },
                  {
                    "id": "020b0631-7478-4eea-be2d-6900da10dd8e",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef1cb609-81ee-41b7-bcdd-4b7eca859067",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93d74020-b36b-49b5-a8bb-1debee849f57"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5cd9096b-7c14-4207-b3ac-8bdd75cc7c7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "06e35073-3540-4eda-be4c-e4506abeccbd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67c5f69c-c60a-464e-a6d5-62833d4324f7",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f72e593-f1e2-4b3e-9105-d98c53224a68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a12a4273-4f3e-48fa-8c1f-128f4848f184"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d656a7f5-51a2-44a0-8913-42317110aa96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "126a8a82-622d-4d38-b2d4-9017730b585a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "981a5850-9198-4938-8fef-c835eaa3b235",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04c66b78-dbbb-4f68-a788-c482fb94e475",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5b0dd951-979f-4e32-acc8-377421126901"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "581c7e0b-a7b4-4829-95eb-5d3eb271561c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1b78f0a5-34ac-4f0b-b00f-65466164753b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e3a633b-08f5-4183-8a11-831e7571eba4",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b47b8508-357b-46f0-b647-6545e506f0c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8603b89e-2ba2-47a7-a7e9-39aba8f80d58"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49458808-1ebb-4ec3-ba70-cd91ec227552",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "6a544aca-8b91-43cb-bd65-e145b18ef2bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d65df7e-22ee-46ab-9ed4-b895c592d6c2",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39584fc1-0cbb-4832-a3dd-7a56cca2d72c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7752b3d5-e59a-4cb0-b397-31b28235159b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24d71b3a-93cb-4a6b-884a-e97affd1fdd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "4c915217-f29e-4d7e-b883-72118a725965"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e5e0fa1-e2b9-4a91-a95e-91476c0aa55d",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5e99046-c2a4-452a-9660-8f3f8f903487",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fac784fa-dc35-4f05-a5b5-e0a1ff098eaf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8217cd8b-b72a-41f7-980f-4a298361297f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "f36b7182-42ac-463f-a1c8-a685c49dc4ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3bbbb84-6920-4111-ab1c-cbb42b2a83ce",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da793112-0737-470d-95d8-d5303ad4b79b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e87e5782-df95-464f-a1a3-ecdf349828a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02a4960c-bc2d-4b3e-b651-aece51a18fd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "2efc25b2-ccb8-413b-8799-009a212f2347"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce95ec75-f8b5-480d-8af1-9242273c6a11",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a80844d-1f28-42c5-8c00-4edc5ed0a990",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0144fb5-9f80-4b5e-b0cb-5b00b2604589"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "644e9881-1d12-41d2-94c4-8adc03073743",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "18ec64c4-1e47-4ede-808b-e28492c33d17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44ffeb45-508a-45e9-9325-562e61535912",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3a53ca4-001b-4c94-84ae-33bb2dc3c80d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d12c3097-0184-42e7-8a87-eff7cec52cbf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a6d8ec4-e3d3-4612-b490-2f7101c6bce1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "3f6cbfd5-a3df-48d0-b21c-98f2e293d041"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec118cbb-1667-4eb2-b967-652befd35717",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0006f1cd-6383-4281-826c-fb4007aee629",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cbf737da-dfb6-48de-8869-ff0afb7fcfa0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75e78416-3c1a-47da-a6a5-6b1c62377a16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "44f08367-12f2-4458-bd2d-27940232b1fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a886521b-cbed-48ee-8bf9-27a3f5b12f3a",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f41e5427-cf18-4274-b4ad-bd59f3057843",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a48d55f-4c1d-4721-b322-578b61ec2ccc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5e20a08-6fe9-40b4-b5d2-2c199c58d75a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "0033bc69-bfc5-4c4d-a2f3-63595ac5c9bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35a05e31-8e5d-4a82-9df9-4c48ea9732f7",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "470f5472-d13c-4770-8319-6d3d2c170a4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df42019d-1e89-4a50-8c82-a311eb1ff7aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "430a3340-ec7b-47d4-a7bc-16177b4cdf95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "7c509e59-f865-48db-8bbb-8dd30f53ab97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7deaabc2-1a3b-47b1-bf90-679ab8c1d75c",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ef0d249-ad70-4449-b061-119b1b602215",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a00f635-c6f7-418a-bbbe-811889a21ae3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "feadb453-e0be-45df-9dac-f371f7af1053",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5c69ffa9-aa7b-4d37-8eba-0874d0611c2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b167d0d-975c-4f59-9c74-c14de4c6d1e3",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1d148d2-3900-40ca-8c9c-2e5a596a7b6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d027c7d6-0195-4344-9391-1c988691e7af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81497dae-521b-4535-929b-4727b2634718",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4c4f0ae5-02ce-4ee5-a201-fa183b7def47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "131c5491-d449-4190-9394-aa46aa92e7fd",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e782c13-557e-4c06-a045-1f826ca4baee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e1e6faf-11ec-46b3-8bb4-0a4a3b55b543"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1de9dd09-8c45-4149-b0ed-c5e31dbebca5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5e0301e0-9b64-4eea-aefc-4e8c669a0278"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cdd7290-b411-4008-8bd1-9bc1327ded04",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dedb4eaa-8e13-4fcc-9899-093c86e5a703",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0db14f6d-abf3-4e3f-b651-95f43b9a9455"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ceffbe0d-0c12-4fc6-bd6b-eba3ced40a85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "92cdad2b-1296-4c54-84a2-ef3412077997"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8ccd148-dd4d-4605-8aae-f6e3254f643b",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef0c1b3a-18e8-4c4e-8f04-eba18b1d94a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09bec6e9-69e4-4a93-811f-cdec4cf0f7da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e59388d6-0b49-4228-8ac9-eea9ec74e6f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1b0fac62-8155-40a6-b230-e13198c8342a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45abdd05-f7f7-44e8-bf43-c6dfebd261e5",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9549c506-e2e6-4e17-b1eb-20b7db6b8487",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4229e4d4-e2fe-4888-aa32-223477bf6959"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d49395a-e914-4910-b0c9-907acd9e3a5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "34dd4804-e338-4f85-a1a2-8594acadba0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6177ca9-83d8-48b6-8c0e-8ac42afc0985",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88392128-e88d-470a-8917-af68f1ee80d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fdf5719c-cab0-484a-aaff-30d44a6de460"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f699b75-2b13-4be4-b90b-56c782da1c02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "a71ff255-583a-4ced-832a-f403561ee686"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b61eaae-7909-4966-9475-ee97e3e13c1d",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84e677cc-3fc5-4c3b-b049-aa8fa4042ad4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc7d8701-26aa-46e3-898c-06334fd7cb86"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56c0ac5b-089b-4161-a47d-32491206df0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "cf8e912d-77e5-40ec-9d75-c9f1d55fd5e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3dd56379-c217-4477-bd2d-212df2ccd723",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bba0fda7-892d-4ff5-8f46-dac4cd1cef70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d79cd6b-b5ac-45d2-8ad0-d077f4a4ee58"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33cf5cc9-a51e-419a-a7ed-daa3e38f20b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "13955cd7-f5c3-48d4-8603-56b84aa3e9f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3ea4aeb-5fc2-4ee3-8a36-5f6f8c024c4b",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "820409a4-2e86-48ee-8ae8-a1f8a4783d55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "887dc0cd-9a47-4519-81d9-0e0ea1021ecc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9f17022-a633-4401-b9eb-ee74b76cdc0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "41993ef3-1174-4de4-a22a-b22f3d4c4d7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4536a01-ded0-48fc-8ae2-8cd527e16472",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bf70696-6393-4f70-bd71-f02fb2cb7e44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c095921f-f8a4-408c-b6bf-23b5f93eafd5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe93f21a-d56a-42f4-8f34-09f4a9a9c23e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "dff8506a-a694-4f1e-9544-e116b94668c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "822fcc32-9a15-4c36-ae2a-9b0081a0d397",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c0b4fc6-8faa-422b-a04c-06c00cf1d714",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32a3cb18-13e6-447f-a18b-c73cd98d582b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46cca826-b351-418d-927b-9ef8ed1cf49f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "f4ed2656-d3b1-49c9-bc9e-d273d4274fc7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2352e16f-0aed-4a38-9e6a-1e016668c60a",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3eab1122-6a1f-4bba-8d5a-6f47d905203b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9148464b-b1cd-4bca-a79f-dd015699dfa8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ec80056-9383-496b-8844-d5137c15780d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "74cacc70-ef7d-4583-bc2d-060e0e34f7f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "069bf2a5-3a48-487e-a65b-087893c78bd9",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0dc872ce-51ef-4d68-b009-abbd9c387a83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "406fd004-d814-4278-8ff4-143d6ffa9e4b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c823a4c2-1c22-4617-b1e5-559e3d55d09e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "e270aaf0-3a97-40ac-8364-63f85a370674"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2a876f2-8e6e-4041-a0ac-11cc1d38159a",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a322adf-f17d-4cb2-9350-0681434accdc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad6ad428-f083-4396-8d2a-228c9f9cb6df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8b36e18-67f5-4203-85cf-f74610392ded",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "84fab124-e187-4624-8669-ddcecaeb8500"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fa47197-b976-435f-8504-b9f120060305",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2c50d4a-bd1c-4935-af00-6cdb90def48d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc01ad6b-ac7d-466f-821a-7a08f01e2d8f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44e23659-b2dc-45db-9545-6dab06e5080c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "791ffe02-036d-4c4e-847a-a231fb61b0c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21746092-9d1e-4c58-919d-781a468df0e0",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19d8f4e2-e75f-4e6e-9151-592df1132150",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5bf9410b-4656-4dbc-8e86-c649d1a3bcd6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19d7bb95-97e6-4395-91b4-59e911ec1a41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "58fc1250-b557-49d3-8be9-8aa36536141d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90cb417c-eb5e-492d-b57f-8cd761f31583",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8180177f-cd1a-4b76-a1e3-4391ad7f2e30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af5cac96-a12b-43d4-9a18-2d5b7caf1ec9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0df6f070-a590-4105-ab12-836c1ae4f9d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "9b14702b-a02c-4426-b29f-5b79027f8b92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "973eb2f8-f19b-4b6e-b6a0-341e2ca184f9",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed1c0f42-cbab-475f-8937-06c98a99a606",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5cab9f1-751b-4b4a-a2bd-9af84bb03d85"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fcef1a5-3051-4aa9-a81d-56b2e3662eed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "622fc274-afdb-40b6-be97-8a2798a1ee2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d9a09b4-14e7-43e0-9445-cf30f6592810",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3018ba9f-e3f0-4916-a1f7-2a6ae722f123",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9cef2f3c-a0a0-405e-8014-5e21b1bf3b0c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a454adab-29a6-4d9d-bf4e-91210d4f8dfd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "877a6273-cfbe-438e-8056-6d6052cb43fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "294fb4b0-d84f-408a-b844-fc3cf1aff930",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38af946a-8eb4-4549-a96c-41083c2fdcb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "350ddae0-6eac-4433-8823-684c054d29ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2795b907-d870-4d43-8907-e4f38b7631c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "df6c3d59-7801-40fd-9d37-d4b387b57cd6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4411864d-6d0b-4038-aca3-b2d976739668",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6bea9fc8-d84f-430a-bf6d-7891e74cf655",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b106077e-9937-458e-83f5-92e9f99598f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7dec858f-182d-4704-946a-f9079c56f11a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1d8da071-d452-4c56-a616-0b2de04f2017"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3078d16a-434b-4c7e-bb30-aca081f3b470",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7258504-0fad-4154-b1a7-5c3bc0affb6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0d0e826-f31d-4548-96b1-bec4b389c4cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd0ff581-a0c4-42bc-9618-107879c01f6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "27852a84-5410-4c36-b07b-9023c99f7b6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0ab04f0-7ad2-4e2c-88fa-2ab08821f29e",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "467625b4-1722-4d3f-83ed-ee8582ea4423",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94f88d2b-ad0b-488e-8109-212e4a3c646a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59045c0c-2960-4568-909d-3704bf209854",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "3d55d646-9e79-4ebb-85da-14b4da679ec6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b84359d-9bf0-49fe-aa94-356b558f9c2e",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d734be14-f32d-46d8-9e53-03b8d2c93aba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "455ce3bb-8656-49ab-b905-c9b476c4513d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6c4f6b9-ede1-4836-80ec-2fbe8dd8bc80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7c5f88b1-6b94-45de-b7f0-66a1b24f864a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bef4a2ca-ddc9-4ae8-8d01-38d2e6d615b9",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fe27996-880f-4494-bb6b-0a30d9a1808e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6fdfbbc-8652-46c2-a28b-760e990da0ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be4f2f27-f666-4c91-b6fa-896eb5f20b2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3063f1f7-d3be-46a5-8345-ee19a7465f00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d1b4cb7-a5b8-442d-bc2c-c4335bb1af7a",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "daa96727-9fce-4c43-9aa5-7a34f6a4a542",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd2a73e1-6e09-4de3-9b9a-415e792ddaea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de0f851a-41f9-4da4-bd0c-aeef439ea2ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "54b6c0d7-f2df-437e-b3f3-a2c696cddd59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ae257a0-dad5-4bc9-8a20-44db391795fa",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70cfdf19-ee86-41d9-bf45-26312730fdc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d5ee200-c067-4115-8cf9-41191e76612f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4a4b64d-2dd4-450a-8c73-6a2d67fbb87f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "6b264ba7-00f5-4c21-aca9-2b152697b8c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84022e33-df26-486f-93f6-fd1b3a3cf607",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e35eef12-21f3-4eb4-a009-1341f9b37764",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1684b4c7-dd32-4bda-af8e-23d76e7b4b17"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae3c37aa-715d-4c40-b6d8-63403e1de2eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "6ce7a889-b69f-45a7-ad07-34f98209e22b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7c85a71-1f0f-4f3e-9506-c599cc168d17",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ede8551-dc4e-4f37-8bb7-d18e3b728ee9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2bfff486-8e15-4671-9ac2-4ea10de48bff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d26e5c3f-7d7a-41c1-81dd-5f687af2c29d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "f90fcb4c-700d-4970-9d99-144b582f8937"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ebb82c0-28a6-4445-b8dc-1f4d3987dcd0",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b24fa2cc-4ee7-4941-84da-3847c6d5ff20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04ff6664-1c57-4162-92dd-863ee83bf24f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4082267-7315-41d3-9b45-fbf1ebf79983",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e829ed2c-bed9-4282-8bfc-45144fe144ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1408ba01-77dc-4c7f-96f9-5d26faeb9294",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b8812f9-b7ef-4ca6-b12f-e280b26bbcf7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3cd5e64-95a6-41ba-9381-972e8805001f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17bc1e80-5b28-4d03-997a-608f66bc6dc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "735a82ec-9343-4259-b848-0c5c336c2a28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4d97550-22bc-49db-9b11-d34d580ea323",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd4d177b-6245-4ca7-a853-a44ed0f601aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "898131d1-1887-4aaf-9e1a-1c9afd2bf680"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53d5c5b9-8c29-4bdd-b5a2-b4af5c68d050",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5fade1f8-6fea-4776-85f5-db344b2a8dc2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f1f4725-6b74-4cd0-8794-8a57d112918c",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb85b532-bf24-4263-bcbe-bf2c715ecda2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "adcbc0ed-68c4-44d9-bd62-aacc19a96d02"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4572dd3-3a04-4a18-95af-61751fcd1e5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b1d1d2fa-1087-455c-a01a-52a4c9390638"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4be0e8db-3fcc-4e2c-b861-1bd37fff7bf2",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "989e0a79-73e5-4576-9269-8d21515ccef9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66c2cb85-be8a-431f-8b1c-3be8e8841e20"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7d8f29c-939f-4b43-8741-ee35b87aa2d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "539537a3-2057-4283-97ae-747adba3160a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a0ebc6c-5bf3-4a42-b8c2-09d888f8ff0a",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e606336a-4b44-4e3b-aa48-02ba01633026",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc996595-3438-4ce4-a6a4-3cb21bc0c64b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67ee5241-8336-47d4-b5cf-628f427220ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "99d605a6-bd8b-4519-a8fe-9254c9158306"
                        }
                      }
                    ]
                  },
                  {
                    "id": "166f40c9-b25e-45fa-b2c4-0ce53fb2767e",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91761263-6d6c-4923-92fa-39f2a62bc0a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d681b7df-a3e2-4624-bdbe-fdfda5e0b368"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c4829b0-922d-4afa-91ab-2fd908d45e51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "01595e6d-605c-4e84-a907-6012b19b8361"
                        }
                      }
                    ]
                  },
                  {
                    "id": "559fdf88-4589-4f28-bf2f-8dff5b2ac755",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f17088f-dddf-4845-8372-b78208a651a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3bd46cb1-11aa-40db-b067-ba64884e8983"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45e9786f-41b5-42bc-992a-dbd712e4c01b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9f41e018-8fe0-439b-8bb2-4268324fc100"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83ff48d2-94a2-4d08-b6ed-2b3ac52c1166",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c71fa19-784a-4d4f-bc19-89c169174d03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b08a071a-5178-42b3-a3a4-b273bd1d63e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a97e2b44-0ff5-4f01-9deb-5ac4610d60de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ef13c5bc-a0a0-4056-bacb-f179a4244ff2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "551675e7-6ad3-4426-bfbc-8fe0cf06e1a4",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b399323-1194-44d7-9f16-f3d2ebb2b0e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2cb43cba-01d5-4e9a-afb3-4368aa17e570"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfaa2819-bb33-49d0-ab6f-acc6290fc915",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "fe211af2-0ef5-4383-beb5-b5e09d062fbf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d089be26-65bc-4c78-821b-324c0ebf5085",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61d46f42-acd8-462a-b231-d34dc1fd233d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "423d8c3b-5e2b-4f2e-810c-7bf8d23eae15"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3009ec4e-9e7a-4a1a-a25d-e52da5987888",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b2e429fb-aa1b-4c0d-8eaa-36b118ac0f47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d4f3fdb-c02f-4611-8175-b39c8c1f3644",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "757de13d-440b-4676-afe1-0c0a2930b05e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4fa06249-4f2f-45aa-a2ae-87b7e538d683"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37c1c7de-883c-4c5c-afcf-cec8a482a024",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "266d0e51-adad-4db9-89df-cf92625f0fb8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71de9d4a-6ff8-41ea-9b28-000db83c3644",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a5a77ef-a499-4195-ac3f-245b5acd442b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0e1576f-7455-4f2a-8420-ab18ae97b6f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "421eb540-3410-4260-977b-b4b93d53b907",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "3fad2500-11a1-46d5-9e98-71de5273df66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41125ec7-83ba-4473-8d77-00fae1fa7a1b",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6028de4-2d9e-4b02-8880-f5f8c1811d1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "002af535-1d3f-4d7a-9044-5ca681938253"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1d29e81-d007-4516-a6ce-513171ca854d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "c4b8bcbd-cdd2-43cd-9220-ab32307ae951"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0ebcc44-ce75-4992-9053-b0c18d41e640",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac24be11-b6ae-4c14-baca-8824e61250fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8fec7dff-204b-4429-948d-b0c5b91e0473"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "436779c5-18dc-445f-ad26-06737445782d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "d00e28ad-05f5-4e7c-8ea3-24688475e54c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f5407ee-c5dd-4ce2-abf8-12239d7da81e",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6f55e9d-9d5e-4870-af28-7c07aee5d5cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "56313641-de69-47f4-b606-9249556d7c4e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c0663ab-9887-42ce-bd00-dcb74c9520b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "533aec41-09be-4bc1-82a0-c58157385ef2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63492c85-57ad-4285-b409-6a1dc3cc0593",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4327422-cca5-4dfb-845e-c82538f7a73e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "9ffd8e9e-49ec-4f73-aa76-110920ce6604"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4e0dbbb-7162-4358-b508-b21299842e0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "4c3b6c5f-b68f-4118-a785-22dac6cc820f"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "31de221a-006a-47d8-aad6-7efa6eb28fe7",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "56a9e1fa-8031-46ee-9be2-6c8ed149345f",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c56f418a-a39c-496c-b8dd-5ca9594717ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "61555a1e-0980-4bd3-94ee-7e222a260a60"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a51e2f70-3acb-4f38-9511-473de52104cd",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "61653f89-7164-43d5-8a93-9f4f8ab5abba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7a7f1ec-741c-4216-80b7-149533cf2e19",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da462abb-9cd3-4947-bae5-55b56c69f921",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0640bc52-2a1f-4b67-b19d-3d4132f1e71b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82a1012f-692a-4f93-82e9-04780f308743",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "d54abe4f-baa2-40f3-aaba-dcf55cb3ffac"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b813dc5b-7f16-4bcb-b144-afab571bc86d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0d8da180-227c-418d-93cd-54c626f2002e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "531da99c-1a28-4d0f-8794-7feb865c5d7e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c8182897-9b3b-442f-90fa-4bbb0965129a"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "817e48f1-ff4b-43be-a4ba-75b934cab9ee",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ecf121cf-7e7d-49bd-9ebc-9cdb144f930e"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "f48c6add-b200-492a-aa9e-0395e9c322a4",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "cba4249d-169e-4075-b68a-bc1254534570"
                }
              }
            ]
          },
          {
            "id": "def7dadc-232f-4569-9279-a43724b52a47",
            "name": "Positive Testing",
            "item": [
              {
                "id": "1c488b51-d226-4f93-9a56-0d51bc7b1191",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3c47ef5e-bdc7-444b-b893-ef51044019de",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f7cdf5f3-5c79-4268-9d9e-4f745638708a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cfe09ad6-c8d7-4fc2-b77e-98ef8a85962a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "3a079526-f4a2-4c16-982c-c10d788cb0ad"
                    }
                  }
                ]
              },
              {
                "id": "45722b57-98d0-44c2-9ca6-fe186b25adde",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a996d23a-a3c8-4cb5-a9aa-659281bf7a91",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "95f006ff-74be-4e12-bea9-caeb3ae430e0"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "169b8189-a55f-4bbb-9044-29ffd108ae81",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "cf95fd08-95eb-4bf9-b68a-01de30227257"
                    }
                  }
                ]
              },
              {
                "id": "a3534263-6727-40b6-a377-7c83f4fe070e",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b4b55be5-3caf-4b7a-a98f-90cba81f3a64",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "cc289e8d-07e1-4ec1-8d70-a53d688539e5"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "083dcf5a-6923-42f7-8701-206d9f88a0b3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "b30a33c9-6ea0-4c22-8e08-80fb06e2b842"
                    }
                  }
                ]
              },
              {
                "id": "207dac4f-3895-4571-9ce5-23d0c8a28e1e",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1242762a-97f7-4cb2-a544-a364fa5ec426",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "24378946-99cf-4f26-9c14-a7ebd9822244"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6d179778-45ff-46a9-a142-9a224d74e063",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "8e16f171-6ec3-4b19-92d5-d5c4139e5c47"
                    }
                  }
                ]
              },
              {
                "id": "e1df89b8-5a80-46f5-934f-d606af25e3a1",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "586eae5f-920d-45df-bc3c-d1c5a41cb076",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ba4b405f-43fa-4a08-b041-bf7870c28c15"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8bf1d25b-37b2-43b1-b297-b5bb7f8fccfe",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "c616f4e8-9d73-4a0b-86f2-44b7c241e57f"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "8bb1a01d-67ed-43db-b8b8-2d4d1d3b77ce",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "adf845bc-21ba-42ae-ac6e-0e123898ad98"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "26e651ec-b6af-4fa7-b0f1-f8b2bdc333a3",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "1afe25ff-5777-446e-bbd2-6decf8486db1"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c9aa87bf-1625-49bb-9609-2a0b4815c275",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"id\": pm.variables.get(\"credentialId\"),",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "5b9ceace-c9bf-46dc-a3c9-c70ec6150248"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "73077d01-38e2-4ecb-8c6c-356a713247a9",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0ee6f4e6-f1e3-487a-a140-34953e7a5c09"
            }
          }
        ]
      },
      {
        "id": "7832d243-899a-4bbf-b29a-451ca775ff35",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "e77df4ff-a01a-4c12-b94c-91c1537c31a2",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5a078a08-87d3-4a1a-bc6b-69fcfb78ab9e",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "de7db197-74d2-41d7-b637-658e0e0458dd",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f68bf1ee-ed73-4029-9b3f-a7c87e7d97bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5cca64a4-21da-4cdd-b6f4-8733b5a82d9b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70a21ecd-54de-4398-8959-92425db12f3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "906db21b-0164-43c7-9b04-35a953ebdc00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c57d9f73-525c-42c6-ada4-6853b8569066",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1826da0-7ea3-48f7-ab3e-e807a299bdbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ab940a4-49ad-4050-9911-32637385eab2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c657baf1-a66c-4705-9294-a4833e8219c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "0b53cc73-c5a6-4344-a1c5-4640f8220b35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5c35bbe-682b-44ae-929f-5795602d3020",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53ecc462-e6dd-441c-83a3-1e98a119c838",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1ec504e-225e-456e-a8e1-0c20cead78db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "187df509-97bd-4f6a-8c74-78332bead07f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "cb1553c5-6688-413c-97a0-2df0896c63c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83d2cca3-437c-41e2-8f21-7f8305f4c8b8",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57551bcc-0f01-45df-83a5-d2adfc817228",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0782850-6531-460b-a416-79df7a2ae153"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0b5497c-ed1e-4f25-8b0d-2dfc6154f237",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6155f081-8b9d-46aa-b40d-6daf2c6e2c72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfd492f9-c5f9-4c8c-9ab2-d0e1b72e510e",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae265c4f-5ea3-4a4f-a047-90d83487cc5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98a4db41-651e-43ea-b886-0482c90bcda6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1c346db-9871-43fd-be9e-15dc94b793b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ec7627e2-8d2e-4024-adc5-a45def3c0089"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a649129b-3698-4007-8dcf-064f2f5ab974",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "242e244d-e2b5-42ac-b973-09ecb9566180",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5568323-ff52-4aa4-9a44-dff8922a17e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9105280-873c-4539-bbe8-4f093084c41d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "67483ba5-9b71-4bdf-8d66-445831cb10f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0c65010-6532-4c3b-b9e0-64ee72b92c08",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bbf555a-3064-4946-88bd-244db9a21085",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0fb0ca19-b9e3-4dc2-a2c4-ee4fdd5c9977"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6822c789-f97b-4ddc-beaa-0ce7868f8f2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "777ed801-fdb1-434b-b688-89a66a4c6953"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8dcb9d0c-b7a9-451e-bb8f-762f5ea07c89",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84572095-0930-4e41-a0c4-6c823651348b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "287b3e66-8a8e-49cf-9494-948919ec69b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5edf42aa-0938-4bb3-a093-faa7e2689b9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3698781f-7e2f-43c2-aed1-901cdc3aac46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e14220c-50f1-43c6-ab64-c404799afb88",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "928c901f-a52f-497b-95d1-afa6d31f11d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "326af29d-c355-490e-8f54-2f5faddaa5ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5221f5b7-1f2b-487d-a26d-847a47644513",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d551b3cc-fff3-4783-8335-127faef8890d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c0cae29-8ebc-411e-a3a3-1c1592d52138",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9da151b7-4248-4d5f-ba01-cc58f7418bfb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c3d7a26-83ad-44de-8e27-f3df0c00eb6c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ddb07a3-6e94-4d90-8b25-cf4f5fb7267f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a4073126-c5cb-44fb-a1c6-24dd87740545"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b43e69e-3e44-4f51-80fa-7169ddfa034b",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6d0e62d-20fb-42e9-8b2c-f9c8bf1376a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f751ff5b-9d43-424c-8417-1991e0389e9c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87a1a123-cbf4-45b0-a80c-0314e344c031",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "4b3671e2-a5a2-4530-80f1-8a94b3ad710b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7aa5cb8-42ef-4620-90bf-0782fb91546b",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a431542-2ddc-4198-a061-f1588540f2d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dee13618-ffe4-4838-a0be-4ba8640ac817"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53c57354-1f24-46a6-bd86-df42903cc282",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2cf35884-1cd2-4392-a2e7-b2955efd27ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3b99e6c-12f3-4911-8986-16e113a6dcbb",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24118998-03c1-4b73-bd1d-006f90d60230",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83d9af5a-a7fd-425d-98d3-62f759003d93"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "788a3961-f810-4e14-9f09-e1f4c0a4bc82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c38e45c6-9875-4871-a8c0-5b673d81269f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ad591f3-a8b2-4a29-8b72-4e2145897700",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "418c2af0-3b0c-43ed-92dd-f0f5690fae6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9eabc57a-cfbe-4ce2-b67b-b21123f1218a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a6b1bcb-99b5-416e-ac73-d9ff25afc37f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "9fe17b68-7969-4548-9af5-66003a63b423"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fffd43ca-32f3-4179-988d-895d7849c571",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bcadb9d-07df-4acd-8be9-5616e5a6d915",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41c7907d-a91a-4105-b2fc-532321f3ee7f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9245b8c7-069a-4518-9882-ca80d506e0f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "0a9f4f18-0c38-400b-b2de-9357c8be39ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5984f08-dfb9-4e6b-a0f2-de0d8f65ba01",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55a47306-f698-4257-b099-649eb137fe72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60ef8abe-1a71-4cfa-a76c-e35f0beba60a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6742d226-3987-4f83-b85b-db5955962d6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "8cea955d-6996-4eb5-a211-25a91eaa092a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a5af5e9-2385-4465-a6cf-eb9952032fec",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d69b563b-82ea-440f-9c05-183b6473e29b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc0c2f1d-24b5-463c-8f8a-eb8013db172d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "527df9bf-6755-4d1f-8b80-126e736a9cee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "ac5e9994-e157-488e-a341-9552fc7be4ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "442dea90-520e-4191-8a49-e95c9acaac75",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "acb9540b-8eda-487a-8b49-4a50e6d96118",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aac7579e-4d2c-431d-842f-34b33eafaee4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0234a81-93cf-46ba-83f2-d6962d34aa57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "c2ad0d26-51cd-4954-ac62-285601e3b878"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cac0beff-c29d-4ddd-9e82-ab3bdf605e2a",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffbe1bad-ec86-4635-90c5-44eb02194513",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7711a46-5489-40e7-9814-dd607b1fa69e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91b1ff50-7a77-4160-b505-1aef3816e900",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0318d0f3-153c-4f7e-82ca-cabe5fdfa84a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fc12408-fe85-40d7-8b06-447d54627167",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d975ac9-72ec-4a17-920c-614050746629",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6d38801-5aa0-4953-a5e9-42176fa95e24"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4a10f0a-0ac7-4466-82c4-e9e56c4d6aa6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c05be83f-f300-4f82-bfcc-6b7af081d58c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa28cfd4-3c8a-4ad1-b1b3-f9078368210f",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e83bff85-eabc-4444-8ae0-b3d02cf219ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dedb1b19-8077-4678-aa86-ab6944eb2274"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45822084-cdae-47f0-9ed1-90be417fa1be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5a44ccd0-31f6-47cb-ab4a-6a39307633d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08dba280-3c55-4735-a29c-d11419e23aba",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89fdaf95-24e1-4a51-840b-0efc6e20ac3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2416d80c-68af-4ede-a075-63a4ea6dd243"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e5ead18-bdac-4f12-8772-f55b1e37df92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "dd5bd5d7-86c0-4a50-91db-967e5d8682bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67cf7c24-6986-4e14-a5eb-81c64aacfbfc",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54503201-2f2a-48bf-9bbb-6a57ba6df4e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "670990e4-72bc-421c-b2d9-144b49f3f952"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b75eb27e-db58-40ef-a6eb-975edcc383a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7d681dbc-1553-40b8-9640-0bb64edc93d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9bdb57d-a1d9-42f2-a2c9-fad408603e55",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f8ec4f8-5b55-4853-8e7a-b2cf75deafea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a46173fc-ea5b-4d2e-bece-8c05d8e51b85"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdc913f4-e1ac-42a5-8640-9f3c4ce20aed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "58334e0a-97b4-450e-9e4c-8dfdddadcd2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f5fde4e-d213-4b5b-bfe2-2c05b308f5f4",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e03d1f25-e598-47e6-a366-c9758a7ee1dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2b78c23-577e-4008-95b3-f5e7605569e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fccac7e-9665-4e7e-bebe-105bf200aaa1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9f0f1ed4-cfcb-4d9a-9dfd-5e526876ddc4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bcad077a-25b5-4a9b-809f-b3ac22b730ac",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4b07d9a-05c2-4a38-8f18-3018c5f5c996",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a885149d-b4f5-4424-bc5f-b55e474e3741"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f236dc57-0f8e-4871-afce-a61d9df7b2df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "56ceaeb7-4b5b-4212-9e73-44afca41d859"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8198f283-82d4-4daa-8c69-00338ea130c9",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe4e779e-75f8-4778-b3f6-f5e14982e74d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7665fe91-3dd1-4524-9442-ed4999c04b38"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7d80ba9-5a09-4838-b1f3-d2ab16ffac09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e47e037c-b52e-4c1d-92b9-7453858f966f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c57a424f-3bf8-4bf8-b298-c935dada5429",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b300499-223a-4e79-81b7-ec2fb93c4fa1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5f797a1-0630-4470-b3a4-dc3d62ace415"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b0466f2-8909-4885-bafe-f01d5f534190",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "21dd83c3-a01a-4a21-8899-0383da3ec528"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bea94721-7c8e-4ff5-af0d-02c4b930260f",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e95ce05-04a6-42ed-b658-83027f79b953",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3568115b-d23d-47c7-8807-ef5cbb6ccc3f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdb8bcab-d8d0-4ce2-b0a8-dd409d4a1028",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "496cc066-2970-4ef9-850f-b600cf258dc2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9836d90-2e19-4d4e-84f9-539e2be70d27",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c3d77d8-7b2f-47b3-a1fe-7cfbd327bb99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5fd3d78b-47d8-4ef9-b16e-e97b421afb9c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c17bc479-9998-48e4-9a8d-239964a01321",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c8503651-9ecf-4063-bd65-e52fc98017d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff7c5466-1324-4a59-863d-19be05854f9a",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26951ac5-19cc-42cb-8c31-3be166fca8b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27e74a46-0061-4daa-9336-ae0041fa974a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4decdb2f-f78e-4554-b2b6-73ea58038737",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1efb200a-4f87-42b1-a3b5-1af3e5f74b6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe248611-eb15-4aa6-945a-0ca6b1326975",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c390e62f-61ca-4fff-a5c0-ad2051c70598",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "667b275b-d20b-49f4-a419-ca4fd8029809"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4357222-65c3-41c6-8b10-dac4678b9c21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6c8006ac-6e2e-4851-8c23-8b040297c384"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "ba57aaf9-0b2d-4bf0-ba96-e178a0d7953e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "4c3f78d8-6a70-4ea5-a810-ad6c6f9827fa",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8edf2c7-b687-4e54-a6d9-589c97a254c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9c15bc6-abeb-484b-a6b4-faace6ea3e8b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e777ac46-cf39-4a82-96b9-1d258f543cfe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "94140f7d-1d5e-4a06-b28a-2a344edbe06e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28c09a55-0207-4851-8e46-4031ac7ca6e9",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5adb47b2-2028-44f4-883e-8aad39baea28",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "6e3c344a-26ea-4feb-96f9-3f785c037d23"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "878d3838-d9b7-459b-8355-8566c9e69a1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6f170643-4458-4fea-8bdd-cd5b6fce73ac"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7ae9c183-6418-4349-b7a3-2fdeebd0f9b3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1dfa5c97-ba64-4bea-a015-d824d9ad5a8c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a7405360-d313-4506-aef8-d7a7338b4b30",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b136e291-73a9-4bca-b006-48335f2dbd9d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8ffc4eb3-f730-407a-b7a7-5d0caf7db976",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "bdd5085f-d1af-4498-9e3e-17317c201e31"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c1c48f64-a9ba-45fd-84a5-691e2127b887",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b962c748-97ee-4545-b641-64bec4b82f95"
            }
          }
        ]
      },
      {
        "id": "50c49d36-94bb-49c2-b0ca-08374e6c710a",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "ab1feb2c-38af-47c0-8674-a70734b65a1a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b68d1731-8101-4ab2-95df-eb1cebeb76ea",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "caaa5600-956c-467a-bf54-3ed0d0263fe3",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a359026a-0f8e-4ed0-aa9a-0c9c7648457e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "974afd33-ded3-46d4-a51e-e58eab396b3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9beb5f19-5b90-4da1-8c84-c29439e72081",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7270c68-e00a-4e9f-9172-afa361afad79",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "efefe6d5-9c75-4004-beaa-e4b616e64574"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd0a9f80-f488-4f99-91ed-e1aeb2f1b061",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07bfdb0d-d70e-40f3-8261-12337103affd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c46ca9f4-c093-4703-b40c-537409a23981"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bcedbffd-fd1f-47ec-8694-13ca78a829e3",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e36fc092-5a3e-47ec-8248-edfe69d0e1d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2eeda6d-7eee-47ee-824f-eeeba815e65d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47677bfd-c31c-42df-9e60-f191cd3cf84c",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "adc08dbf-6036-40bf-a391-34c3ebdacc60",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "922e3525-ab68-4e94-8d14-c6364a65e915"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba9cb1fb-8f51-4edd-b57d-b7f9188bba55",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59d1447e-7a11-4209-86cc-e8074321309e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f216207a-b8a8-42ad-bb55-e3e9000d3419"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48bf093f-a21b-424a-ad87-63292f6ed003",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6353ebfa-64ec-480d-8b14-d309c81e3be3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5f0b808-2e11-409a-b023-09fef9f4bee9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f4153d3-a45a-44ce-9ae6-8a7685d77b52",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75e910c4-3c31-4d52-bf7f-0317b11346a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f9f5e81-e290-48f4-9eff-9aa135887abd",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba66f5d4-01c7-4445-aa22-04db77e6cd7b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "023f8ac5-8cde-41e1-808b-87b88599ee8a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1418179-5768-4b8f-afa4-d9e3b51e93a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d4a7cf9-2871-409b-9711-4a778eed4ad8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b4ead53-98ae-4527-914f-99008b147b5f",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a912906-84a7-45ea-841d-82ac6ec1be04",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "616f4de2-bffa-4eec-8c29-1781b49a8304"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f3c81fe-5662-4baf-9d8d-b5aa41127adf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45c6d4dc-fc86-4ef0-89c3-95d1318c4e23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e51412d-9c99-46a2-be84-41be4d7f6184",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7aeb709a-593a-4b29-a4e4-1219bfb7d155",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c911257e-4d7a-4332-a887-e78486b49f08"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e26e0d1-0d7e-4b3d-b0b1-a822b74420d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "abbdeb4b-438b-4539-bb49-f4e30bd80aeb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cbd799d-7880-4676-bb01-646862bb9446",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bcd979a0-3e09-4f53-87ba-fd8233604820",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c164a29-8940-4ce6-9850-9666fe01e1ab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d7688b1-8b34-45fb-b120-cc808d6b69c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f918c42a-ddee-4a4b-b1e7-f32c1e586390"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50f23c7d-162e-46b7-a88c-7463c8aa1ee4",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13a504c7-7a1d-459c-9eba-f2226bda5808",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7eeaf17-1662-4012-906a-1ac72b435913"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "62009a30-1a20-4959-b039-bdd7bf0ea223",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4adb357b-4002-46f2-95a5-d04aee902c80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24d581a7-14bb-4c78-b895-b77c278a06f1",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a925f680-9219-4af8-9344-ec2de7b9a50d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "84003bc1-77ef-4c97-b874-a12343154024"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a67e9a33-85b7-40d4-9252-9e91d9e9bcc7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d47c7d00-ca28-4ad1-8ba1-a9acfabea438"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43035eb1-b539-41bc-aa52-1e3a9f08f9df",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9954fc92-38d2-4519-a69d-7f027fad3491",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "49c6cc72-8633-495f-853d-fbf2067ca153"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8877d96f-9195-4d70-8e34-0abc99ff0aff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24221f66-7160-453e-9862-27f0b983ba8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcdb0f89-a61f-4159-86fd-3fe7b83f4f5c",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df76d623-6aa4-4b86-88af-d2852e159fa6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "22e0f071-bad3-4068-a7c4-350fa4dcf5ba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "615d3f60-f2e5-4928-b663-60289ec5cbcb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47c1774e-dd5a-4887-a2dc-40b04e03b2fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "998d4d5e-fed4-433e-a5f7-d4bc86907774",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5f574ff-5834-45ce-9d98-1b64b85abdf1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ef28232c-8c65-4ecb-8886-86054a82e845"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "75a37ae5-3339-4422-b707-284e2761f089",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42bee979-bf03-44ca-9c1a-cdfa406db572"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05c3ecf3-8f5a-4803-afcc-a6f4c5955707",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9538cae4-752a-4b76-8fcf-7c515832363a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d72fce63-5baa-4e4f-a18b-1f1042605beb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c2db927-c3a9-409a-98bb-ccedc67d8ae5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2be6af4-ffc1-43ad-9fea-e33cde09155d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a73b11a8-81c0-43d3-b317-7aff3c0d53c3",
                    "name": "credentials_verify:vc:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ccd6a285-ed25-41c2-a585-6e83948cc730",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c629696a-8a1c-4cc5-9689-48d3ff365180"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f31ab5f-8f68-4416-91c7-1d18c15b17c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a1373bb-867e-42a0-ac59-53e28b2c7731"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef8ac6e9-3223-4d62-978f-08943024a88d",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4ef55eb-70df-49ee-b266-6aa6481eb70b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58108f0c-916b-48a7-aa34-6df9b7afe273"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a15f577-fb03-457d-92fc-0db4be50060c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b36ee5a2-f976-401d-9068-ae1b1b6f116a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0513440f-7b6c-4362-9c1c-005451a554b9",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83f43720-9eff-4605-af57-edf4bd449a09",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6feb2f6a-a3d4-4ee5-a044-c9ee36897776"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "11e8d824-fb58-47e9-a47b-cab8c0ff5943",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36061998-bcf9-4ec8-b539-1969f66399b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3118ecb-7178-4de9-b594-5cf9b971f14b",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fa25232-2b54-4299-9800-eb18ec03bbc6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8363f9d5-2d7f-40a4-8114-c83b661ef00a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "30047c63-0f9e-44d6-8dd1-2101deb5265a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae41abf4-0394-4a54-869d-60e830aff32f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec76abd4-8835-44d0-b21f-0bfb4cfdafe8",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d64788a7-b1b7-4d7a-a1f5-2319fbdc8cf8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf486096-e1b0-44f5-a06a-19bdc2b603f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f42956e-6c52-42a2-89cc-9c7da0f23e44",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4db1580-28b1-4e3a-92b6-8e2ffcd0a040"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd8db6ed-d086-4b3d-8691-7408d3532759",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06454577-4f69-4a63-8046-fa550785a3f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2dcedf83-a85a-4692-8b41-088bcddf1b6b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0399f550-0c4f-462b-9edc-21347eb88f68",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2507cbfd-2503-4293-b9f5-34dc78bb3ccf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96a79ab3-b5e7-4d2d-94bf-5d4b2bd4a516",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0451b593-4223-4701-b34e-73825cbc25f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb8ad953-e64a-4010-9fa5-fc01ca2a2bb5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4f21b7a-fce1-4364-b870-c20370d4bd51",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1b36994-d644-488d-bf17-b7b3eae64429"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b97e983-9807-446f-bd0d-8b1503131c11",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81005eb2-d33d-421f-8b30-0232d3015859",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f08af377-7690-436b-a5c9-aad5a6de0c72"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d7941f6-00c8-4fcd-babc-00d38ee68bd4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "973a8f59-80c3-4e2b-8aeb-089b938ed56c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5aa5024b-d7bc-4aa1-b1ae-b8dae430993b",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33700d70-cc1a-49bb-b228-a36712389170",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d15a8b34-3cf8-440e-b642-0c19113bfbcd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "27f4e6ed-a88e-4ba3-8e45-48639c1eb482",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a274d82e-3a48-4b88-89be-538981c6e162"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf18890a-007f-4d73-a14b-dc14479583dd",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a790d25b-f297-4a7b-a8e4-a02cf2518635",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d6adbe48-43b5-44c7-bfe7-7a061939f245"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0288511a-939d-45f9-a617-506fa7d68b99",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28afaea7-5f35-40b3-b8b8-cb204548eb41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39e69e0e-2671-414c-b0f3-86babf3b65db",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55b783b2-681e-4907-9e68-c1ebb1ac10c3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3a09d120-3334-4392-bb20-f62c5f05593d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "054e3e3e-28a6-41a1-9319-09cf45eeed51",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "441145db-d260-4da6-9233-e3909d24e16d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d808308d-2990-4c25-add3-3c3a2ed5b8db",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "782bd939-6032-47d3-a959-086caf6e5d24",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49c4f52e-0cf7-43eb-8da1-aaf42341b538"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d90d259-4b24-474f-bb99-b7989f45b468",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d7a1622-6c85-47b4-9973-71afdde60ffb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52aa25bf-d0b1-4888-b063-bb9752549051",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a730c9d0-3466-43c5-b20d-fcd99d0f660e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2864f719-279e-416b-8a6b-545c206c1cce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "24a95323-8b6b-41c8-9301-6b9d4aa41bf3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3efbc7a6-5279-4fd2-972b-63a85b62d795"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7061d72-83f4-46b9-835a-fffd432257eb",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "093eb527-f47c-4c4a-b155-8fa1d6de6a19",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7e157d6e-0b3e-4d93-81e4-ee5c2e5d6b9e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "86be05c0-9354-4d03-92b5-e037a0ba3165",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4ef7aa5-7d08-403e-97df-8c7655b4efb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ad12be6-68d3-4842-a7c2-2761cc305a11",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe10f500-65d5-4d44-853d-e39a84d55e71",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9a124c00-00aa-4474-9fbe-ec610f8f296c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af89be42-896a-480b-9d07-61aa59eff6f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7480dc66-2c18-46eb-9699-9ca0c2c78eaf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63667d6c-2d7b-4e8d-8fd0-78df00f1e001",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bebb7d4c-e454-4bd1-97d4-ad0fab2dd125",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fcfed5d1-228e-4ee7-a1ab-4f2493e10db6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e478a5ec-3cca-4935-9561-56c0b2444626",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0f1b1e7-0761-4ae7-9b34-99c49d1be006"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec2df9c8-52b5-438b-82f9-55ed260d0164",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df71da55-7d6a-463c-9705-f270b784b7e7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a0b52d95-4ba8-4b9b-956f-33a63a9c4e8d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6f45700-3da6-42aa-a25d-a4c7a7777a14",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d08e9e8a-04fc-4ae4-8169-e5e3a28f80ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6da2744-1733-4637-8d1f-e6e564065023",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3403837a-f778-4028-8849-58f580bfc5dc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "06ec60af-699c-4e3f-80be-07856bd289fa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d7d6fac-5276-4adf-8501-df354f2229a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6ce80b5-b86d-4e15-b908-544d8cf9fa66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa9e023a-f9f3-4170-b016-4afb414dee60",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "002105db-8c65-4502-97dc-14c1d7ec13ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9138be4a-d068-44cd-8282-cb9770c1ed83"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "32fbba9b-2111-49b7-88cf-02db6598d556",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "667415f7-1a9d-4842-a8eb-413888cc6b52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "279f8ddb-59c7-4136-b56c-e3d88ca4e39d",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a9777db-90b5-413f-98f7-a949f0e4c4e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "412fb833-8f74-4ca4-aca6-f1459c48431e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2635f57-1d63-4eaf-993b-e064cf7c244a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ff81bea-37ff-4412-a4c5-4219e4e21f73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "253ae772-ae64-4e39-bea1-3cfe05a35646",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6e19449-f78b-4011-b22e-638a615a4ef3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab89f4b5-dd2f-428a-ad50-ce13bac769f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7668c906-7030-4d0f-a1ed-785ec9f7e555",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c1d617b-08eb-4ade-8351-7d62291bcfd3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c15874b-374f-4e13-b15e-8ed1f1b24b2b",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c921e151-f513-4c9c-b8d1-c3045f3b184a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45edaa3a-f737-414c-86df-215856ba3487"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e62929b2-28c0-4f3e-9d25-cabc3a90eb72",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3dff9ead-c87f-4b3c-bc8d-f82754c1de4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e56a47d2-4448-4303-b306-545e7e89a3d5",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be311979-f985-437e-a006-65c7b4401cdc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28f30b41-468c-41bd-9ec1-1b60505658be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9d77e89-25ed-41ca-b541-e46a2e4e25f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "064a9cbf-679b-4c69-a6c9-f2a6f8eac6b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5e44757-82a1-41e4-82b9-a90559f443de",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92d3cccd-be36-4928-9c3c-44fce785b2a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82a8ac2b-e84e-4a5c-a852-8a106405d767"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "85184d4b-4826-4557-bc5a-3aca49c4a881",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "492ae6c5-2b6c-4e51-93f6-bce6cfe6ef68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d526cb4b-7621-470d-bf0c-3639bdcffb95",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d20b0e9-b2f1-4677-a893-aecf05245b2e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2500895-4748-4821-acf5-484cea44d074"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac81336c-dbcf-44da-b952-c3bfa62c2452",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68bd3d23-9bf5-406d-b570-384964770939"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94296d8a-ca50-49d7-983e-5428fd61fc59",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4415ab9e-58af-40d1-a954-25cb3b530d05",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c1c57c5-2198-42fa-9945-2bf34941256d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4241928-c280-45f3-a223-830542ef047d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4c19661-d776-4aea-b63a-a2727677fbf6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3d4a694-d823-4e9b-b622-5aa0ce10e521",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "383b939d-a65d-426e-b322-8f04207ad5ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03b11451-aac2-4cde-9b27-a200bab30c09"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "df174d4c-9e0e-4d2f-aa91-c7cd60481f2f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b5cfc89-272c-44e3-8928-f15b9d0fb043"
                        }
                      }
                    ]
                  },
                  {
                    "id": "000bfd53-9ffa-4d49-879c-aa1af3891bb6",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95429f68-57a6-4476-adf7-f6004daacbec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1dcd6d3c-6210-43c0-8a45-414dff892361"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "84c9f7e5-bf9b-4932-a049-df2689a55bbd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "808d4c86-32d9-4dfd-ab42-635b1da0070b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c79ef1a-78e3-48ed-9884-bf7cabd096c8",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c09d6c1b-497d-4325-8e13-1e309873d589",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8d2e464-af16-4b20-b5ee-0781823ec98e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a27fa9be-eda7-4fa5-9048-7027ab957018",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f9e53e8-6861-4b9e-84ec-e2c4bf7f289a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55f43316-96b2-452b-b8f2-38e2dae5679e",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84fc50c1-c335-46e6-b791-aceeda8fcda5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d7a6419-db7d-48e0-94a5-849d5613405f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6aff117-3871-4558-8c66-0cecb14eb1d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98f2f195-4482-4e6e-b440-fe6ff13bb93e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3981755a-7465-4a0c-9dc6-66c63fbfa4f5",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "feba8ee6-9035-4189-ac98-8e913a18bca6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f93f1d3-8af0-4a84-b8b6-d330f249b886"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7202b9d6-310f-4429-a904-551a3838c4a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71eb9ac2-3650-461f-a6f1-d1a2a8dd791b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69ff4fe1-99f5-4881-a667-85b5e3c6f3b3",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc24331d-441e-4cd0-aecd-2746c32ba03f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7968ce7-0f7a-4c43-a23e-dca25450e23d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca13e798-8803-4a22-b67d-1c9443841b12",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e19849b-d986-457f-9be2-0824dceedaea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "feb5d716-40c6-4683-8a31-76b515d4a322",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b514c2ad-ec50-49b8-bd5d-73f2d4f3e08a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "709ad8de-ea57-4c58-9c69-0dbf53aa2cfd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "29374429-2abb-43fe-b9d4-27c647743f4e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b54f5d4-19a3-4ccb-b2de-4ccae91fdf72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0644e13-4c71-49c8-a2c1-e957c8c05b87",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b9b2f2d-663c-443d-b1bd-458a73bd8979",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6caaf795-d68e-4563-8e14-cbbae86eb864"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aab368f3-2027-406a-94c0-c796509ad77a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eee79664-eeb0-4be4-888c-86e90aa6b483"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f575b90-b40e-4259-a2cc-3b8897cbf839",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "168b2a8d-28e7-4104-b9a7-ff8ab3fde7a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8b49fb3-e0d7-49ee-a63a-ea5f0a3676b9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "08c9cb7a-2b45-4f92-a887-44540cbe9083",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0a9cbe1-7f0c-4c8b-bbd8-1a5a5a990739"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0690d22-b1cb-495d-92a2-779f98ed86a8",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "772eb033-a90d-487c-8a9b-20b90c3dd7d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c4e66c8-b6b5-48d3-b1f6-0b2e426b79df"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a15b124-e6bd-4356-b00a-bcb07ccce3e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d973396b-b949-4770-a8e8-2c4ca65e1458"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae2b5449-ee34-4123-9056-f4f587128f4d",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b506abc-9748-40db-892f-c08c18258fa8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f1c741e-5369-4811-80e5-0b48eee99338"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee8e0094-e186-4434-9bed-99dd73d712ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7779319a-e54f-4000-950e-8ea287db4163"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a21de9c0-0e08-4369-808e-74fcb6e21cd8",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf556fc3-e29a-42e1-b238-59886da5173a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09fc6d01-084c-4164-acc0-a65a9501adff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d653dad-3948-4395-9583-9a0c99e9b41c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd734879-d29c-4deb-9d79-6f638530ebc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "607ba842-6e4d-4d80-9815-07a58d3221b9",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bd7ace3-3181-420c-84e0-3a409469a9cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec681f38-1969-42a5-8511-90d979919327"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "19a8cab3-bf5e-4df7-af30-97c4008f1c32",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cadf8331-0484-47b1-a208-7d9e75666868"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4087b346-374e-4d9a-995e-8fe8c8d484d9",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30735c44-bb62-4458-9411-f12610ba1833",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0d90c6f-5511-4699-921f-cad09e1f499a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbd61b4f-badd-4705-bba7-c289d1ba8e8f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79ff4083-3f80-4ce3-ad48-e05e67392cb0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35ffc343-ebce-4aa2-9ce7-2cece2247923",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b27a9f25-c284-4e2a-b73d-9f547357b4a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63aa6dbc-63bc-4ab3-85bb-ec7031c6a455"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e35dbc3-7ca6-4231-a66d-0e88eb9d74f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10570192-3106-4f3a-afa7-d67d3f714196"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c76e53e-8bd9-49bc-a547-c43ce9fa209b",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f73e29d-e6e4-4086-9612-19137c528c08",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7aef2c1e-7edc-475a-af39-e98a7a6a595a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "492edca7-4a73-481e-8200-1eff01fcf8a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93df7307-026a-4829-b559-499d92f81654"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1eb71662-6dea-4fc8-b730-b76a43fb05ed",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e0feb43-9788-461d-8f08-e5703492d3cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9358a677-96a6-401a-acf3-c27c55ced46a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb9efd38-3232-42eb-a6f3-4912d7b1e741",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b59df957-8d7e-4053-a340-f5d094f9212b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8397f950-f1be-4f66-b3d6-4a56b6434012",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d44d952e-b2ef-463f-b069-b9a612f261b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8c6123a-d7ad-47d6-8ddb-1fb47bfda1ca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0703ddf5-7e1e-4ce3-976b-0d97d145e89d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03c8ab56-6513-4f76-9b9a-cb4e1e4b2b49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea431153-5171-4afc-9744-4adaf234c525",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cf7d874-f0bb-481f-b608-9d4acacab6cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2af87760-36c8-49e9-b786-f7c4dc0a046b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "da5b6bba-3d8a-4360-8e0b-9f7e92a02a93",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ddcac36-b9d0-4445-b443-1e10ed0d8cbe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aec74e0f-d4a3-4bf0-954c-e293c74642ad",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39b6b6c0-266e-4f9f-99b0-bfa2fc2a9a0b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f80e786f-dd5b-476d-b401-2b086a41b2b0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6bcbe2c-9fe8-45cd-8476-104446b96580",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6221c00-5b13-4ff8-973e-bc095cb65475"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eddce3f3-f49d-494d-8f2e-3e578362481f",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d41068ac-130c-4425-b514-e726a0801326",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ef6ba86-f917-4773-82c5-af10d5e309c3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c13b3488-8f9e-49a8-87d5-9ceac8b83f98",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f9033af-879f-4524-a35e-ceb1c9661d95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7eeb36d0-4302-445d-97cb-d6cfa963b85f",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79256726-6992-4079-b6df-fd1e435cff19",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4d70b200-f855-44d6-998a-6312c3ea0047"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8865df5-b5ad-4887-956b-540328ceb75d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6ceca59-73cf-4b29-b674-bb89aa1a238e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98eaf722-6e5b-4983-92f1-25e8e0147aa1",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a44db9d3-dc20-4b8a-ab95-065bc061eefe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ca790e0a-68d7-4520-88fe-8e1efef593ea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "adb63ec4-23c5-48d4-946e-4f36b092ee92",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ea7aed3-84a1-49fd-856e-cc424e6d01ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d302f45-3381-4da5-9117-16760ed06648",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c93513df-6e52-40b7-ae39-c40ce20b7249",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e6048245-fc6f-4aa2-8331-ecc3767be5df"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "58d6f6f1-a659-42fc-8ec1-020277293c4d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c54651a5-2333-4fa6-af28-3262edf51e3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49049b82-ff45-419f-bb14-759ac9c88f76",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5367d755-670c-41c7-bbd0-2e72b37be84a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b504670f-f311-4ff1-8133-56b2a9445dd7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "336dbcf9-cf72-4c5e-a2e2-0b490dc90f8a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84822b4e-50dc-4f11-872c-612c3bbddd62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea855417-2dcf-48ba-b56a-5f71988a1fc8",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01503bd6-9f82-4dcb-8cad-40a061cdb5d6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4180b7cf-9452-4888-b801-f86402103be5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d952745-41e0-40a9-b571-deb69eeb88c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ddb6326-b6a7-4178-85db-330595ccc632"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39785f85-d351-43d9-9d13-0410597a322d",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5733c178-3e97-458b-b671-eda0ad4e7fd3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c0cadabc-dc85-4989-bbdc-95a65c823c27"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a653d4c-b84d-4bb0-b2cd-f55d8def2e18",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80131028-ba31-4924-973e-05621de14aee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4309c062-490f-46ae-a2d6-4c423c518d3a",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9b76224-3329-4dd7-b80a-aa731833eec2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5ce502fe-e79d-4a43-8865-656308daf4ee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "433777d6-80a1-4cf6-bd5c-b67275e8ba63",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8479141c-61f9-45cd-8dc3-266f4bb7bb72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d74ed78-5217-4fbf-b515-d6b3d8630abe",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bab33d25-ed3a-42f9-b6dd-4ea6aaf0a706",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "63e23293-75cd-4fe4-86db-122ea772e59d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fda71c1-5ebe-40d0-a705-ef841d2d8843",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "460c910d-4af0-4a01-8260-f40a472ca433"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96ed44a8-261e-44e7-99b9-423859cd0145",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "968ae8cb-1262-41b7-88ef-f549e0996c7b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4a2f61c6-7ae4-463c-ad2c-0f4f43b3bd25"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6548e1c5-b986-4ebf-8c00-f37c99677ded",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6af307f9-6fc7-4cd8-ba92-1ed6dd3fc082"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df0ebd4f-ffd1-4d40-b1b1-f6561092703b",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b27a94c-2dee-4d7c-8b64-137e97cf77e6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0e98cfc4-f2d1-48d0-b62a-80589971151f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "20f0c14d-bbfa-4294-bf97-f76067d37f64",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f0cb4fd-b05a-41db-b242-85f066d7f26c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9849abb-7fb1-4932-b371-a4f333a06e3a",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "693b13a0-4bac-40d2-a9f3-12a9cad83054",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7b7417ec-6f5b-4ae8-a3b9-23ce2de2c391"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1964fab3-fb2e-48d1-b585-770fadcda031",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0a49aec-7002-4034-967a-014aa5c0558b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76b67275-df88-4a91-9708-75362394f595",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c29b95a0-1bbc-4119-bfe8-c15a86d98980",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "96404ccb-44af-4fae-bdf7-eee8b6ae21a4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a7b04f7-747d-4d5e-995a-50c29239413d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d7a204d-6bc4-4c63-81ec-f1ed9dfa21b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63be69bc-d3ee-43e6-bd43-4252994f9bd3",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fac1a5cc-296a-4c9c-809b-a23f3bea20cd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0790efe5-73e1-48df-962b-860672b3de77"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfbd652e-1d6d-454d-8316-0965dc8d8356",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a033c75-6d47-4086-8534-67abfe6d7048"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c067caa-31ce-4cf5-927f-15f845d288ae",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cae33ee5-c2a4-4498-9b5f-b6c085604f2c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "61745212-5b54-441f-bd2d-e15ec50955be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "26745791-2c2e-4f74-a106-025d28179ca8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eeb38ff3-d934-4e06-ab4f-c34d4fecfa24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f32bad6-2cd4-4ab2-9f4f-14f65869ab45",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbdae385-cf14-45d5-8253-5ff30ded668a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7a419e7a-104d-4f35-944b-737a8c01d6dd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "da7492a1-66fe-4e1e-9661-0fb1955620b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a8fcaf5-1e4d-4165-b9fe-f1e55f896e1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "443788e7-a1f1-46e1-bdb9-5706912c5eab",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a3c365f-49a4-4246-b0a8-f6b68bddb8d4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7dcff15c-a1b5-44cf-a245-72df0e65974a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "56cf86cd-5cb4-476b-afed-c23735336bdb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "afe269f8-3511-49a2-b991-013e861b072a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60437b44-d625-4387-bf2b-311b2d5d3174",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68f95e6c-de4a-4908-a0f4-32f8017676fc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d35085d0-b81d-48ba-9871-b0c8d468853f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "42e4e991-2faf-4dde-8937-87dc08dd30f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "15e1827e-8581-4b19-8e6c-8cd7108a4d1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e151e278-1a52-42f1-b686-6da6b3bc28bf",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d8589ab-26c5-43c8-b532-348018ee136f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "75c3ccf1-fdf0-4dc9-aae7-86d4238d5e3a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6074e64a-d82a-44cf-8b81-06a1ad31ae27",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7c07a83-23ef-48db-984e-efd48cc96b6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8517dc3-e2d8-4cea-8c9e-bc87d0a81673",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5acb9dd0-f507-43ec-82f7-62000179633f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e3940561-41f5-4ca6-bf43-4463baa365d3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3bb15ce-88e4-4d03-8106-b3972b4a93e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6757b172-5137-4b88-9137-6626289d892a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "133345a3-5c95-4fb6-aeaf-be5d9467ba3d",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0959dbdb-76d8-4706-aa04-2f1d8202039d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c6924745-67de-468b-af42-0d15308d0a20"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bcce875f-65c6-456d-a870-8c707df2c7f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aada702e-5cf1-47f7-a008-06967f90e54d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c2309e3-76c1-4e24-bac7-935812709dcc",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0967b705-2b98-4842-ad42-a93f4042b540",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a53dec0d-8e0a-4d00-a709-0526b731f447"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb627933-4679-4144-a253-d52dc1ccb428",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1bede7f1-c302-4588-885b-28a4a6ef9612"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fbea813-25bf-4402-aca5-04ff4782e388",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "493d59f2-aa43-4f94-aa35-814d7ad63136",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d397e2e0-fb99-4663-a147-c5267914edd1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c6b62f9-0d64-4371-8591-cbd2768a3129",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c978e7d-550f-4601-855d-991889c5360e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64ee3262-3e9d-43e0-adba-b28b5f6b4f81",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "deced46e-b210-4871-9799-7e0aab354998",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3cf3681b-64f8-4181-9633-2b5e08c9ef2c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ca118e3-48fd-4620-9724-19bfb53df568",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d71e8ab-8c0f-4353-b0df-2fa68d9804c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ab5b139-4f04-4efa-9a4a-6d5798f9d6fe",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26c7ec3d-8934-44db-8a37-587d85799bec",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "52d96d68-f2db-4972-84a8-a1787fa7cbd0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c754819-8d10-41da-b9a5-f4cd1778c261",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03d91512-ec86-49ed-88fe-52316c482e2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ddd9c7fd-c346-49f0-80a2-2ad980d59e81",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb5f4f82-5c34-4d83-800d-f0c415ef3455",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "29a5a610-d21d-4b24-a97e-3db5e078ecf5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "16dec54f-45b8-4aab-bdc2-207efd9a5e69",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2825ecdc-9864-4857-b771-f923f7ff5562"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf57290b-900e-4f8e-8787-c895fff93e11",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80ca8969-b26b-497b-a153-642308944e9f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1b55a4f7-ab65-4806-ac52-05e10d78da2a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "24995a17-670c-4bff-a5d7-0a84d1329492",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8329881-7e7b-4d7b-a2e0-8f4c195cde9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5bf51ad4-c3a6-43b6-b121-4bb9282fb3f7",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9662c13d-804a-4874-bcd1-c103b480f492",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e7678406-fe7f-4fca-9d85-f598591265fd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ed312e2-2f54-441a-88b2-2d650c6053cb",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd0a1977-2337-474c-b5e9-6a949dcf7307"
                        }
                      }
                    ]
                  },
                  {
                    "id": "792f54ca-9810-45c8-9761-e2f504638db4",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bff17c7a-e069-49ff-8e73-a7e6c8046878",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "77097a78-29ba-4e0f-b684-68ea8c8dc38a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3436f155-6e2e-46fa-b061-74a9a54be9ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d9bd5c1-167b-458a-b369-5cec6f248011"
                        }
                      }
                    ]
                  },
                  {
                    "id": "093d9c46-ab62-4fff-bc10-89823474e187",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74df99d2-de56-4796-bb65-0458116994d7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "86a59c3d-898b-4ee6-9cff-92b213f80435"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "11b14242-2e7e-4e96-ba65-01162693172c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50e5ee65-8ea5-4fc1-a7a8-14491961e671"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eeee442b-2b25-4073-9d43-c154d478228e",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf8eaee6-e915-45b0-b212-4673d5803567",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cad3604b-41f8-495b-afc8-2650929ba392"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "670bc54f-047e-41dd-bc09-82a895801273",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1b2975c-c710-4237-9518-b5311d5f4417"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc15539b-3dd2-4ede-9725-5c8ee5702c94",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d94e2774-d195-42e0-a8e5-b5efa85b83a6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "741945a4-4e3a-4632-a3e7-b8bd2da6688d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2d1ce22-425c-4890-9557-a0356d681b74",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53520a11-4a92-4460-b2f2-8516f6e07a45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf132699-6024-46a5-a27a-8548ae6a1f3c",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5eebb0ab-d257-4c6d-83d4-28e684b9f1f0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a2c8977d-0db6-4093-90c8-11bfdfca982b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff52ad66-1a12-4786-8881-af395082b683",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1dfd048-39bd-49a9-815f-061941703c5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "824fdd99-a397-4fd8-a2d5-30c075d3fc88",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1270c2bc-5c6a-419a-95b4-2425f7994139",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9e7c0440-0b5c-4a98-8d54-35260081e2d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f391635-256a-451a-9c82-8411ce60f285",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "586381a2-7ff4-4d6e-b91f-4cee2f00cc0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a423aa9e-0e61-46d2-be32-aa3341d7c462",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "779bc90c-db64-4d4a-9932-3e1f92d1d741",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c5b46dec-31a7-42dc-b220-9a51b2a3b98e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "61a1fb77-e454-4b8d-8551-65e5ccd3d6a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5aa6f92b-92ca-4dd3-9959-46ebbd3bac73"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7aa8fa33-b065-422d-bc6b-f074ea40eea1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bf046b11-bc21-4ce9-995f-74dbe863ba25"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c4217809-4b0f-46c6-b69f-8419187800cf",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "30299162-10b1-4af5-9f2e-ac2c81d1c327"
                    }
                  }
                ]
              },
              {
                "id": "f4bf36a7-d2b9-4340-96ae-a586cd066c06",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d3d4af45-b096-445f-a13c-93cbab020f32",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07f8ee70-02ca-4b11-ab5b-85b766fb0b3f",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "6a98db3c-a259-485b-84e3-3cb285652458"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd2fda6d-951d-4a81-8952-c89700244efd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "11f61439-cd46-488e-a3f0-6e716945d248"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62586010-2382-46ba-8fb5-e93b439ada1f",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b2c8080-6f89-436a-963c-1a954f9da675",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "771b8c2b-3be4-48eb-881e-470039932d97"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1201239f-0a5e-450b-b2d6-43de1ca662cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b6b53c24-2a5e-426d-9984-1b3f9525df21"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4465830a-c306-4533-b5d1-31daee904dc0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c587c45c-b348-47b7-be60-eae28e4187ff"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "89f5f6c9-ce05-469f-84ee-4073d575e095",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "05ec32cb-705f-4398-b8b5-697b63a3d6bb"
                    }
                  }
                ]
              },
              {
                "id": "a24e2bf7-3dbc-407a-be7c-ad43d7777873",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "6539b526-706d-46be-802a-ff4212aa7c5f",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "355afba9-5f52-485b-a3d6-5280ad5b308d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "fd1d169a-bdbf-4a37-bb35-5bec39ac1d6d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f1b5084-d20c-4aeb-b0ea-0f74fa93e638",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50147d7c-a6ac-406b-b1fd-5dca6f72fb97"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "7c6fa0fe-42c6-41de-871b-6262f3d27fae",
            "name": "Positive Testing",
            "item": [
              {
                "id": "951cd0d0-333b-47cf-93e9-5c05120806e9",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0b098ed9-a048-4fc9-951e-433b99482c9a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "cfa92a92-499b-4caa-90fb-c9711518b9fe"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "efb5fe3d-df9a-4d9c-87d0-62529ee2bb70",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9d07b166-81c1-4a50-ab92-3e131edf3a24"
                    }
                  }
                ]
              },
              {
                "id": "347129f1-6e6d-4f2c-b460-b6461e280304",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "81f242a7-42bb-4613-ae48-6b241b23bd13",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "f91c9f96-696f-437f-a35d-c1a47f076ab9"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4c01526f-d7f5-4653-9da8-6880442bbbae",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7d3189cf-03a1-4b57-867b-46c793719018"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "51d5b21d-cf9b-4eb1-a7ee-0e4c59442cf3",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "8ded4071-5742-46bd-bd7d-c1881740e323"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "35167b3b-e2f4-4207-b816-d80fd632afe8",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "83521cd5-291a-4cf1-a23b-a0394a6fd62a"
            }
          }
        ]
      },
      {
        "id": "cfe3894e-446e-4e71-b926-384122a65104",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "60e5bbf8-3fe5-46d5-81de-535a17d8f7a8",
            "name": "Negative Testing",
            "item": [
              {
                "id": "0d8061bc-a89c-4b9c-9de4-97e4112cfeff",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c9798952-8f22-44bb-9813-dbd3430cae42",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cecc89f3-4224-41a0-a220-6401cc873c2f",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "d5d46613-36b7-48c4-b8f2-bcf0b2ed0f50"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e762958f-bf95-4dea-a1cb-4d00aaad435f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "00f84ced-a997-47ad-9424-f07408ef66a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9986fe86-7b79-4229-82b6-30cb34967435",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9a640d5-7aae-41fd-88f6-f1ca2786ccf8",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "db135857-5da5-4da5-876a-028d2d37b952"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8b8fee0-eed9-4cf8-bf3b-295b7141ce95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "03145726-4e20-44c9-aaaa-1779c5d4a410"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b594c113-de77-43ce-917b-24bdf7f1aa23",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "225122d7-38f3-473e-bd11-7b0263935a1a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5c04488c-d9c3-411a-bba9-2ec152ae1e68",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "79aa85c5-badd-4aa9-b1ba-f5ec72ce89f0"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "66383dd4-207f-4a6f-acf2-e89025c9bbbf",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "845bd081-322d-4117-b7b9-29209cca1998"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2ee95415-ed96-4bb4-b3de-8b50f73909a6",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8c4800a4-4e3b-45db-857a-b86396244d44"
            }
          }
        ]
      },
      {
        "id": "d9f86438-d7f7-477e-a610-e7c11f45ebb5",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "b86545a1-5710-487b-9e43-d8f3acdd0f87",
            "name": "Negative Testing",
            "item": [
              {
                "id": "69130f8d-f12a-44ed-a16c-9bbe4dfa78f3",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a6f33632-36b6-4824-bab6-dc0a1d42e532",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2080a743-c6c6-44b2-92fd-fd61db590115",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "fbba516c-1d0c-483e-877e-31b69871c0b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "628b59e0-9d53-420d-bafb-129618585e16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "cbd0044f-1cf5-4b7a-9383-3b6b9fb18ebe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7a6c732-d7f6-48e2-a68b-8c1278378c26",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "255816e0-5a87-4253-a0b6-8d55051ad003",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "3bac3a44-9b34-4702-a45a-af9dddf1c462"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "360c512c-9247-4a99-8fb6-fbbf1c19773d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e700a6f2-948a-4924-8058-bdcc2246b792"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0519b95f-90b7-4828-a92b-ee3cca872b87",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "80e88b8e-21fd-4e32-9107-ef18f7b8b715"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "72b95448-a397-4c3b-af48-d1743746d497",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bfa5fc89-6f11-4fba-a095-04cd771b204d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a84c45dd-5667-4f81-a622-ca10154c64b3",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "f0e406ea-a94a-4b17-b277-156ae0debc65"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "91a2b1b4-808b-4391-b4de-df890d7cfd05",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "949c99a0-e8ea-4a79-a3fb-7990a1f22dfd"
            }
          }
        ]
      },
      {
        "id": "89fce508-4026-4129-b87b-ea6bf56fb12f",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "e66094e1-6899-4fd0-8d80-ec15f9bd812b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "6d7ba2ff-5a54-4386-bfa3-75fae3fc4c28",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "aacad71a-ccfc-4a92-80a4-322934066283",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3be1a0d6-090a-4296-b2d3-6cafc35940bb",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "89064c0e-3e0e-4f44-b3ff-981f51714142"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "acf22c59-e969-4a73-9d8a-c8b11a84d586",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e1859037-e3d3-4d51-9739-9129ee3bfdb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f95bbb21-f0d1-4f54-a056-705f199d15b7",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bd2507f-47e4-4842-8c55-440383ed0fbb",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "535aac0f-aeae-4acb-82f2-00bc4828d977"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1701819-5033-463a-8b89-98acd2b9cfe4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "786111da-9754-4d72-9a91-390a5517ff63"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "55e269d4-5d68-46d0-b969-30cb8f97af31",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "72d61c49-bea5-40a4-a2c3-53ede8bb3c5a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "fde2f792-95b7-4029-bee2-304a79f1b60a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "679923b2-d964-4cc1-940e-a6183cb1f2d7"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d3a411db-d5b9-4ab2-ab24-169b1d9aa6bc",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "2c6950e5-40c9-4e25-8d54-ea1d91d4afba"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5dbad140-954f-41a6-b9f7-a08eb5f00f4b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d1ed92b6-b2de-450b-b17e-ea071fb995c5"
            }
          }
        ]
      },
      {
        "id": "79ce60d7-94db-4e58-b1cc-89e34ede2817",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "32eafa44-4705-408b-98e0-0d680cbb9d6c",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "12bb9c3a-ecd3-4bee-a59d-a3a4667a9fa9",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "a0abde10-68b0-4a5b-b519-d7aef07ad435",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a095b21c-ace2-42cc-9531-bda6378c6bb7",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b266a9b0-6a00-4e2a-8770-a4fde3c5cc91",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1925,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 262,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 517,
        "pending": 0,
        "failed": 101
      },
      "testScripts": {
        "total": 967,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 958,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 83.71374045801524,
      "responseMin": 5,
      "responseMax": 1051,
      "responseSd": 162.54692253297262,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1674434231723,
      "completed": 1674434264565
    },
    "executions": [
      {
        "id": "b8223b13-1998-4d6a-a442-6e95465e01ac",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 253,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "268ee748-0e8c-43a0-b49c-7b3327b0b69e",
          "httpRequestId": "b034cd5c-d939-4cd0-9877-a550e03d7fc6"
        },
        "item": {
          "id": "b8223b13-1998-4d6a-a442-6e95465e01ac",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "5101cc07-5012-419d-9827-e39e91a0a9a5",
          "status": "OK",
          "code": 200,
          "responseTime": 56,
          "responseSize": 0
        }
      },
      {
        "id": "7649be03-84ea-4b81-9cb4-0b95f5fbcae6",
        "cursor": {
          "ref": "70501d5f-ba09-41ef-97da-170694448c38",
          "length": 253,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "4b1369a2-61b3-4b9f-b4db-d5b461dd742e"
        },
        "item": {
          "id": "7649be03-84ea-4b81-9cb4-0b95f5fbcae6",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "8f136a2e-930d-482e-bf31-c3d4657162ae",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 0
        }
      },
      {
        "id": "df767c1c-5df2-4e22-a165-e5ec01699db6",
        "cursor": {
          "ref": "bee6c1c4-b6e7-4056-bfb6-43ab0ccefc07",
          "length": 253,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "b68dedd9-d045-492d-99a5-ec72480272a8"
        },
        "item": {
          "id": "df767c1c-5df2-4e22-a165-e5ec01699db6",
          "name": "did_json"
        },
        "response": {
          "id": "33432c5b-00b2-4e4e-ba10-f10997da815a",
          "status": "OK",
          "code": 200,
          "responseTime": 45,
          "responseSize": 1369
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95f5dfeb-8110-4356-86cf-9225611e5447",
        "cursor": {
          "ref": "bcd4fc75-5cfb-4b5c-8721-882e7ec26b6e",
          "length": 253,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "1ca12deb-3eb6-4579-9ba0-cea22781919a"
        },
        "item": {
          "id": "95f5dfeb-8110-4356-86cf-9225611e5447",
          "name": "did:invalid"
        },
        "response": {
          "id": "99e6cc0e-c212-4720-b98e-7bb3e4e7ade1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95f5dfeb-8110-4356-86cf-9225611e5447",
        "cursor": {
          "ref": "bcd4fc75-5cfb-4b5c-8721-882e7ec26b6e",
          "length": 253,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "1ca12deb-3eb6-4579-9ba0-cea22781919a"
        },
        "item": {
          "id": "95f5dfeb-8110-4356-86cf-9225611e5447",
          "name": "did:invalid"
        },
        "response": {
          "id": "99e6cc0e-c212-4720-b98e-7bb3e4e7ade1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6dcfa282-ab10-41e7-a384-6bed57d6f8e3",
        "cursor": {
          "ref": "f548e474-738e-435e-b7ef-070ca14f52fb",
          "length": 253,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "d62a9258-782e-4eca-bacd-93f6461a060a"
        },
        "item": {
          "id": "6dcfa282-ab10-41e7-a384-6bed57d6f8e3",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "81b3c5e3-8132-4703-808a-39f813064c3c",
          "status": "Not Found",
          "code": 404,
          "responseTime": 51,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa5eea72-44de-44a0-b585-5472539816e4",
        "cursor": {
          "ref": "d6596893-f8ac-4ded-9087-33422e0e5ed1",
          "length": 253,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "b849d0f4-b6f0-441a-a23b-9f5929bf6e2c"
        },
        "item": {
          "id": "fa5eea72-44de-44a0-b585-5472539816e4",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "9b7bf2dc-2650-49fb-9fd6-e78441449231",
          "status": "Not Found",
          "code": 404,
          "responseTime": 9,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9cf1095-344a-4196-94c5-574573ce36c9",
        "cursor": {
          "ref": "3cacc5e7-86d2-429f-a235-0c1a28dfd0fa",
          "length": 253,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "411c4236-8142-4130-b842-03c55a57639f"
        },
        "item": {
          "id": "a9cf1095-344a-4196-94c5-574573ce36c9",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "0e23880c-f331-4414-bed4-232fa38efa6e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 9,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7cb2aea1-fb31-4af1-8c00-1c9940d70a54",
        "cursor": {
          "ref": "5405f206-28ef-42df-987f-9f8f4cd71e2d",
          "length": 253,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "dfe7a349-34bf-4e8a-848e-f94a65c024da"
        },
        "item": {
          "id": "7cb2aea1-fb31-4af1-8c00-1c9940d70a54",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "7f4c1be9-7cbb-4bee-ac14-557d13b4bffc",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 10,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7cb2aea1-fb31-4af1-8c00-1c9940d70a54",
        "cursor": {
          "ref": "5405f206-28ef-42df-987f-9f8f4cd71e2d",
          "length": 253,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "dfe7a349-34bf-4e8a-848e-f94a65c024da"
        },
        "item": {
          "id": "7cb2aea1-fb31-4af1-8c00-1c9940d70a54",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "7f4c1be9-7cbb-4bee-ac14-557d13b4bffc",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 10,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b004b85-03d3-40ec-a09a-b1eedda6e4e6",
        "cursor": {
          "ref": "004894d9-33fd-4c89-a3d8-de3ff7fa2370",
          "length": 253,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "7e1a3cfd-059c-4026-a157-9a0a9cf0cae9"
        },
        "item": {
          "id": "8b004b85-03d3-40ec-a09a-b1eedda6e4e6",
          "name": "identifiers"
        },
        "response": {
          "id": "84a47fff-0bec-48de-933d-141b3222d3c1",
          "status": "OK",
          "code": 200,
          "responseTime": 48,
          "responseSize": 1385
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cef826ae-b5ae-402b-8e3a-19d4dc20e975",
        "cursor": {
          "ref": "a719c2d7-85d9-430e-8550-06f5b509fc7d",
          "length": 253,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "72bff7b5-5dde-45e3-b477-c582a363d501"
        },
        "item": {
          "id": "cef826ae-b5ae-402b-8e3a-19d4dc20e975",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "52240ec3-8edb-494e-a63a-420e6cbe736a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cef826ae-b5ae-402b-8e3a-19d4dc20e975",
        "cursor": {
          "ref": "a719c2d7-85d9-430e-8550-06f5b509fc7d",
          "length": 253,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "72bff7b5-5dde-45e3-b477-c582a363d501"
        },
        "item": {
          "id": "cef826ae-b5ae-402b-8e3a-19d4dc20e975",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "52240ec3-8edb-494e-a63a-420e6cbe736a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5797ccf4-d04e-49af-a4ce-471055c761fd",
        "cursor": {
          "ref": "c5da0fb0-c55f-4b6c-b95b-3e578d0d64dd",
          "length": 253,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "458f7bdc-e928-4ecc-9154-bc91e90bb765"
        },
        "item": {
          "id": "5797ccf4-d04e-49af-a4ce-471055c761fd",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "117c76ac-8410-4c5a-a513-8530c6b1ccb1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "679cac9b-b9ee-454c-b443-e224985f95eb",
        "cursor": {
          "ref": "cc1e55fd-f5a9-4bba-8a1a-8e9a4e849a3f",
          "length": 253,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "5f9cc3cb-7d2d-4ea7-9787-6d1584e43060"
        },
        "item": {
          "id": "679cac9b-b9ee-454c-b443-e224985f95eb",
          "name": "credentials_issue:credential.@context:invalid"
        },
        "response": {
          "id": "ed827795-c07f-4869-8b98-768a627e9ef7",
          "status": "Created",
          "code": 201,
          "responseTime": 619,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "1da5d0c6-dc8b-4b29-adfe-2f6facd6b40b",
        "cursor": {
          "ref": "9ef10442-cfc9-414c-b8b9-15d9a1548532",
          "length": 253,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "0364df7a-1fd5-4c30-8879-7dc84206a04c"
        },
        "item": {
          "id": "1da5d0c6-dc8b-4b29-adfe-2f6facd6b40b",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "5ebff5b5-2fb5-4a4f-b227-35756bcebf91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a59abecd-8aad-4efe-bcc8-263a113ad251",
        "cursor": {
          "ref": "5331b87e-6526-49a3-b724-64a7bd665159",
          "length": 253,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "b91375eb-1a93-4e09-8dc9-76d0f67ecc84"
        },
        "item": {
          "id": "a59abecd-8aad-4efe-bcc8-263a113ad251",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "3690713c-bdb3-4306-8f1c-3a10b58fc094",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e49de62-73b4-4f08-ab03-2245a95079c0",
        "cursor": {
          "ref": "49a922d4-e7c2-4c92-90db-95f7132c6315",
          "length": 253,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "dcbfc8c3-df68-44a8-89c8-aba121d3a1d5"
        },
        "item": {
          "id": "6e49de62-73b4-4f08-ab03-2245a95079c0",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "159e51f0-0e33-4b5e-9065-4664e43619bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a5dea67-13ec-40f8-bc70-694f6890429c",
        "cursor": {
          "ref": "c960e6eb-504a-4054-9d03-1d29ea4a7886",
          "length": 253,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "d6852c56-6922-469a-bc23-a5683a43428a"
        },
        "item": {
          "id": "0a5dea67-13ec-40f8-bc70-694f6890429c",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "a662bc82-1ad6-4d7a-8394-90fd8c39d613",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bca519ba-abdb-455a-8673-c83fd829b0bd",
        "cursor": {
          "ref": "4c093bb2-f51f-48e8-b92c-e89c5620667a",
          "length": 253,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "fa9bdfd8-35e9-4222-894a-309fb4eea73a"
        },
        "item": {
          "id": "bca519ba-abdb-455a-8673-c83fd829b0bd",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "3499b2d4-4520-4d70-85d4-df6510d7f83a",
          "status": "Created",
          "code": 201,
          "responseTime": 537,
          "responseSize": 690
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "540c2335-0682-41e1-9b4d-623ee2e077fa",
        "cursor": {
          "ref": "7351f0e2-0f8e-493c-96c3-87d93cd140c7",
          "length": 253,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "88c62107-7a3b-47b0-a2d7-8aef6aeda46f"
        },
        "item": {
          "id": "540c2335-0682-41e1-9b4d-623ee2e077fa",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "410d69d6-e19d-46f8-b25e-8a8e29107b65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d71f1f96-3b0e-4e36-9855-713230f54234",
        "cursor": {
          "ref": "2d647faf-13c1-4f6a-be7d-cc69c1ac1fd0",
          "length": 253,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "e79bbaef-9df4-4906-96e3-427e123400ce"
        },
        "item": {
          "id": "d71f1f96-3b0e-4e36-9855-713230f54234",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "42e8dc95-1e1f-41fc-9e66-47a7d93f3b19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2fb375d-e479-4a3e-9159-423c40007646",
        "cursor": {
          "ref": "672e38bd-8df8-4456-b117-692c0b791e53",
          "length": 253,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "ed5ce7a8-52a7-41cd-8f38-25d103fbf4fa"
        },
        "item": {
          "id": "d2fb375d-e479-4a3e-9159-423c40007646",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "19c5e626-7d06-4fd3-b507-0359deb19c80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "345bb6dc-2815-4142-a3e6-1812010548eb",
        "cursor": {
          "ref": "9c2dd84a-ed90-4542-8aac-3e6e4b85d7ec",
          "length": 253,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "db2475c5-1002-4d33-a2fa-4d94a00f3af6"
        },
        "item": {
          "id": "345bb6dc-2815-4142-a3e6-1812010548eb",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "5e58ff48-089d-42a5-a276-1035adb2cf4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc9e47b5-0e2a-44df-ab27-80b9c1a9bc11",
        "cursor": {
          "ref": "b30208d9-d847-4642-9b9f-892c3761a538",
          "length": 253,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "9600fc64-bbfa-4106-8cf6-eb92a550495c"
        },
        "item": {
          "id": "bc9e47b5-0e2a-44df-ab27-80b9c1a9bc11",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "f54a34e4-7e19-4fa6-9b1d-a922ca507d0e",
          "status": "Created",
          "code": 201,
          "responseTime": 523,
          "responseSize": 736
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "8cd4c9c0-5c90-46de-b7e2-09059256f198",
        "cursor": {
          "ref": "63a226c7-dbf7-4431-8dd4-13bdf0215f46",
          "length": 253,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "44b5b8d2-d0e0-43d8-aabb-ad371cad607c"
        },
        "item": {
          "id": "8cd4c9c0-5c90-46de-b7e2-09059256f198",
          "name": "credentials_issue:credential.id:missing"
        },
        "response": {
          "id": "13636345-bb40-4182-85c4-14312f41e6de",
          "status": "Created",
          "code": 201,
          "responseTime": 1051,
          "responseSize": 672
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "101dcfd1-9269-4453-9a13-ebc92ff77ee3",
        "cursor": {
          "ref": "c4b3570b-898d-4f72-975c-a6f3de14e4d2",
          "length": 253,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "26cd3708-30c8-4713-8d22-5bc461044356"
        },
        "item": {
          "id": "101dcfd1-9269-4453-9a13-ebc92ff77ee3",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "ab89acc7-1e78-4f73-befe-d969febf6619",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24a41b22-61e3-48a7-abcc-ecc3217635a4",
        "cursor": {
          "ref": "519a7b62-7748-4fb1-8a48-4bd3034dd6c4",
          "length": 253,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "0b05eab9-a64d-499b-acaa-a7fd0438185c"
        },
        "item": {
          "id": "24a41b22-61e3-48a7-abcc-ecc3217635a4",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "55494a69-0309-4c82-99e2-19d165a29d16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8afb359-a55f-4aa0-b00b-f440b26224c1",
        "cursor": {
          "ref": "c11785d6-7f44-44f0-b9e6-40a87ccd998d",
          "length": 253,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "51d58789-0d57-45cb-a324-b1e65a199021"
        },
        "item": {
          "id": "c8afb359-a55f-4aa0-b00b-f440b26224c1",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "c62e0fa1-6a70-44e5-a04e-1b42950c5e46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5bd597fc-b1b7-4819-9ad1-14d0d3f90368",
        "cursor": {
          "ref": "958e5031-cb57-4cb5-8ac8-1fc5c2aa29e8",
          "length": 253,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "414780f2-448b-489a-84b9-26c77476212d"
        },
        "item": {
          "id": "5bd597fc-b1b7-4819-9ad1-14d0d3f90368",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "e56df153-1fff-4784-8b4e-5b6edec1611a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5cf63bd-42ef-45f7-a421-5e2d7d67ddd3",
        "cursor": {
          "ref": "2b65ef8f-9d21-4891-9892-603beb1c33c0",
          "length": 253,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "e3d96cbf-3c33-4bb2-a369-39e00c920816"
        },
        "item": {
          "id": "c5cf63bd-42ef-45f7-a421-5e2d7d67ddd3",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "ca356cd9-3132-48bd-9983-9262e33d4f4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "006942e7-64a7-4d60-a601-e6e65bdc5afc",
        "cursor": {
          "ref": "989cd3dc-6e37-4e6c-91e7-65b007fffad9",
          "length": 253,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "2571b635-4f29-4c4b-b15f-5ba4ea6a33b7"
        },
        "item": {
          "id": "006942e7-64a7-4d60-a601-e6e65bdc5afc",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "b26d63e2-6656-417a-ace4-7239b6f941e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "132bad77-d6d1-4872-96ad-78b48f61b25b",
        "cursor": {
          "ref": "5eccaa41-1464-4408-a88d-72f7924c2047",
          "length": 253,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "bda39f7d-ec47-4103-97c2-0ff8a3248bae"
        },
        "item": {
          "id": "132bad77-d6d1-4872-96ad-78b48f61b25b",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "927fdca2-d729-47cd-86dd-a0c198399791",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f08a048c-7751-441b-aaf7-2a1884489905",
        "cursor": {
          "ref": "381f85b6-605b-4b36-a299-a574a31d79be",
          "length": 253,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "58bae124-c855-4fca-a84a-3f9250ed7939"
        },
        "item": {
          "id": "f08a048c-7751-441b-aaf7-2a1884489905",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "30ac40a5-7cda-47c9-8d81-1c87f0132501",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d0ca521-174b-41b4-ba07-9c996bde2e1a",
        "cursor": {
          "ref": "b0c43d98-c6a3-4686-8828-f11c7a3bd761",
          "length": 253,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "1ba45820-be2d-45c7-be90-c99aced1753b"
        },
        "item": {
          "id": "9d0ca521-174b-41b4-ba07-9c996bde2e1a",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "04249400-e1b9-470a-be8d-b20615ecc567",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f08f54cd-9875-4ecc-8b81-bcee7d211a8e",
        "cursor": {
          "ref": "93080300-5512-4138-93f0-b7d22dc3187a",
          "length": 253,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "75f0a70d-9048-458d-a4d1-fdcbad7e71c0"
        },
        "item": {
          "id": "f08f54cd-9875-4ecc-8b81-bcee7d211a8e",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "2235e308-e48d-4717-8ec2-b42a49a234d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d77ed5d8-dea8-43a7-8ed7-41a036e212e5",
        "cursor": {
          "ref": "eb176e50-798e-43e0-bcc8-208a83be4e5a",
          "length": 253,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "4515d2c2-15f9-4b5a-bb18-882612455b13"
        },
        "item": {
          "id": "d77ed5d8-dea8-43a7-8ed7-41a036e212e5",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "acd90901-7b6d-4e1b-b32a-2758a673e6c8",
          "status": "Created",
          "code": 201,
          "responseTime": 622,
          "responseSize": 724
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "6659cf65-374c-43ab-bf8d-ad4e8f1c33c2",
        "cursor": {
          "ref": "47b5e3cf-229e-4aec-975e-96ecec5715fa",
          "length": 253,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "c0c7badb-2515-4389-8130-8ccdcebdff26"
        },
        "item": {
          "id": "6659cf65-374c-43ab-bf8d-ad4e8f1c33c2",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "31336419-d663-4654-85e2-09accce0ec89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9144bc33-b57c-4ab0-91fd-af645007a0f2",
        "cursor": {
          "ref": "979ab2cb-974b-4202-b224-188721a0806b",
          "length": 253,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "49b3fe85-66e4-4433-95d8-304298c50ac9"
        },
        "item": {
          "id": "9144bc33-b57c-4ab0-91fd-af645007a0f2",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "c1681949-3231-4cfb-9c47-79c76fafee2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a713b20f-2ead-4d8d-af2b-95abf5577982",
        "cursor": {
          "ref": "ff0c410d-23c2-4884-a4c7-f0bead85d603",
          "length": 253,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "4b7b7ec9-6c14-434d-8374-98635168a04d"
        },
        "item": {
          "id": "a713b20f-2ead-4d8d-af2b-95abf5577982",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "69131bf0-4dad-44b9-9811-737db0afe46e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60ba72e4-b58a-4f2b-b7bf-571b652d45f4",
        "cursor": {
          "ref": "c71b64f7-6d17-47e0-a3b6-7116c74cd467",
          "length": 253,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "5ea42143-fa93-4115-b375-47542362ff66"
        },
        "item": {
          "id": "60ba72e4-b58a-4f2b-b7bf-571b652d45f4",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "30b09d25-b7d2-42fd-b12c-cd7404fc3dd5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e311730a-a8b1-4c9c-86e5-7258d524e061",
        "cursor": {
          "ref": "330fe2ff-e1ab-43b5-852b-c7a1f1d17097",
          "length": 253,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "6baba6b2-0ae9-430f-8781-8b74c2b3da9a"
        },
        "item": {
          "id": "e311730a-a8b1-4c9c-86e5-7258d524e061",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "1886d258-2a18-45bd-8eae-54d562b3f803",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c2070c2-d7a3-490b-9d3b-ef87cdb96346",
        "cursor": {
          "ref": "68e46aea-6ae3-4efb-82b3-c7aa8313d10b",
          "length": 253,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "207e8345-ebca-4ebd-a7d4-52e402ea89a6"
        },
        "item": {
          "id": "7c2070c2-d7a3-490b-9d3b-ef87cdb96346",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "b9ac9dde-3da5-4de4-b42d-ba6aaecdb161",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5c78997-d7d2-4597-84db-f1b6b9344d72",
        "cursor": {
          "ref": "c6bf15e1-1f9f-48e9-8c10-c83e7a4f97e7",
          "length": 253,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "efc22ced-9d7c-42e4-8f01-14c29e389cb2"
        },
        "item": {
          "id": "a5c78997-d7d2-4597-84db-f1b6b9344d72",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "611bd30a-65d2-4a44-b124-ed712928c9a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98ea0a69-9246-42c5-9c3b-c02936d86bd8",
        "cursor": {
          "ref": "f90e20dd-0cc5-4e25-a60c-02deb015164e",
          "length": 253,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "deb51138-675b-4c67-9efa-f513df643312"
        },
        "item": {
          "id": "98ea0a69-9246-42c5-9c3b-c02936d86bd8",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "f286be5a-2817-445b-81ad-76f6b73e5fee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f033a00-5e93-44a2-bc6a-5d0c6c96c2f3",
        "cursor": {
          "ref": "2e11d0fc-49af-4cbe-b120-46544c155b8b",
          "length": 253,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "0f30b8cc-2629-4a82-89f4-a5bfb477deb8"
        },
        "item": {
          "id": "8f033a00-5e93-44a2-bc6a-5d0c6c96c2f3",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "19b03ea4-8d9c-4326-a283-56d815d6233f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18d3bfb2-487b-4902-9596-09e8ca99e51d",
        "cursor": {
          "ref": "c5984f14-929b-4b82-9095-1ef130b1cff1",
          "length": 253,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "689300dd-5ff2-46d6-9a79-618bded019c8"
        },
        "item": {
          "id": "18d3bfb2-487b-4902-9596-09e8ca99e51d",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "a448f737-4013-4db6-b628-207d022fd69c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "020b0631-7478-4eea-be2d-6900da10dd8e",
        "cursor": {
          "ref": "ed062744-2cac-4ec8-a1e4-5ec1a3c5216e",
          "length": 253,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "c8ade7b1-9ca8-4609-9921-cfa60947f195"
        },
        "item": {
          "id": "020b0631-7478-4eea-be2d-6900da10dd8e",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "0d98c515-00d1-47f6-89a6-cc840810ede5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67c5f69c-c60a-464e-a6d5-62833d4324f7",
        "cursor": {
          "ref": "9a515aaa-9ef9-4d1f-a23f-8149b135682b",
          "length": 253,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "fafa3e0c-59b3-4d01-9a51-467decab2bee"
        },
        "item": {
          "id": "67c5f69c-c60a-464e-a6d5-62833d4324f7",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "bdfb9cc3-fbfc-472a-8494-b42db64c914e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "981a5850-9198-4938-8fef-c835eaa3b235",
        "cursor": {
          "ref": "f62c4072-b8aa-4647-bf11-f4fa00cbc9db",
          "length": 253,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "083e3815-2e47-40b1-a2a2-ea3e72d76b60"
        },
        "item": {
          "id": "981a5850-9198-4938-8fef-c835eaa3b235",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "3b011e46-be27-4cf6-b6a2-12d4ae8769c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 316,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "5e3a633b-08f5-4183-8a11-831e7571eba4",
        "cursor": {
          "ref": "2fb0cb93-a37a-4fc5-b921-c049ae8e0abb",
          "length": 253,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "2d4ea95a-ca64-4e41-b7f0-8018a8a49abf"
        },
        "item": {
          "id": "5e3a633b-08f5-4183-8a11-831e7571eba4",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "7681a42c-5c3f-42f6-a05a-7b0146900e98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d65df7e-22ee-46ab-9ed4-b895c592d6c2",
        "cursor": {
          "ref": "4623d4a3-138b-4c8f-91ec-075d3817f298",
          "length": 253,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "389462a6-190e-4b8b-9082-ac297fd6c56b"
        },
        "item": {
          "id": "0d65df7e-22ee-46ab-9ed4-b895c592d6c2",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "a1ac9c80-73a1-4b90-8251-fb2122dc79dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e5e0fa1-e2b9-4a91-a95e-91476c0aa55d",
        "cursor": {
          "ref": "4a92fb1a-e839-49d7-b83b-d9427d515932",
          "length": 253,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "0dd983f6-c49f-4c6e-9c35-92ecde638cd0"
        },
        "item": {
          "id": "7e5e0fa1-e2b9-4a91-a95e-91476c0aa55d",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "0909679d-1b4e-42cb-8d37-2b0ba1d397eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3bbbb84-6920-4111-ab1c-cbb42b2a83ce",
        "cursor": {
          "ref": "704a29a6-2db5-47af-b0f0-7df4dbb4f10f",
          "length": 253,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "1b3267fe-5b65-4c68-8e10-1e687f2998d5"
        },
        "item": {
          "id": "d3bbbb84-6920-4111-ab1c-cbb42b2a83ce",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "924cb8b1-8f49-438b-9ef1-c76172d3e058",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce95ec75-f8b5-480d-8af1-9242273c6a11",
        "cursor": {
          "ref": "a45cc85d-f205-4f02-a7c8-795b68ae8c6c",
          "length": 253,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "21195a7d-95cb-438c-b5a0-345cf7315457"
        },
        "item": {
          "id": "ce95ec75-f8b5-480d-8af1-9242273c6a11",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "bd5ac4b9-dc84-4fec-a517-8759dc9bff38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44ffeb45-508a-45e9-9325-562e61535912",
        "cursor": {
          "ref": "fd8174b8-f092-4e06-acb0-9779f301357f",
          "length": 253,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "249430fd-e4d9-4125-a6b2-3c01f8f4db2c"
        },
        "item": {
          "id": "44ffeb45-508a-45e9-9325-562e61535912",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "d9781766-2be8-48b6-8b1e-4d0fb193c9f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec118cbb-1667-4eb2-b967-652befd35717",
        "cursor": {
          "ref": "1fac0008-f7e3-4863-b9ec-38dc33cc181f",
          "length": 253,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "ffbba477-2e71-4b5b-a098-68e852a241c4"
        },
        "item": {
          "id": "ec118cbb-1667-4eb2-b967-652befd35717",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "6d263ab7-adfa-40ef-ae06-54ed662631bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 304,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "a886521b-cbed-48ee-8bf9-27a3f5b12f3a",
        "cursor": {
          "ref": "68fed826-f5b4-42f8-91ad-18bc68219edb",
          "length": 253,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "8939327f-39e7-4e4a-b492-b9b2b99a2738"
        },
        "item": {
          "id": "a886521b-cbed-48ee-8bf9-27a3f5b12f3a",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "575c1899-1b66-4248-a5a9-7c7dfe0c1ef4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35a05e31-8e5d-4a82-9df9-4c48ea9732f7",
        "cursor": {
          "ref": "49650acb-7746-4680-9c42-62719518c880",
          "length": 253,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "dcabb268-8ea0-4920-b2bf-c06a81c24272"
        },
        "item": {
          "id": "35a05e31-8e5d-4a82-9df9-4c48ea9732f7",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "ce05892d-6110-478a-80b0-8332f124d495",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7deaabc2-1a3b-47b1-bf90-679ab8c1d75c",
        "cursor": {
          "ref": "3d480472-8799-4bf8-8a96-31719ea4d010",
          "length": 253,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "66db3f0b-8f44-4f6e-a213-62ff4d8c8f7b"
        },
        "item": {
          "id": "7deaabc2-1a3b-47b1-bf90-679ab8c1d75c",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "85177404-38cc-424e-b4a8-2136449b5e9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b167d0d-975c-4f59-9c74-c14de4c6d1e3",
        "cursor": {
          "ref": "434048f8-bf5a-453e-b750-72a5d80cc872",
          "length": 253,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "aa027c3d-4212-4a10-a2d2-35be7bcf966b"
        },
        "item": {
          "id": "6b167d0d-975c-4f59-9c74-c14de4c6d1e3",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "4907cfda-96f2-490b-a247-170c553cebb3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "131c5491-d449-4190-9394-aa46aa92e7fd",
        "cursor": {
          "ref": "46560b39-d2cd-4610-9799-e33bdb577415",
          "length": 253,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "a85ce858-e3be-495a-91f4-cc5422f3a0c1"
        },
        "item": {
          "id": "131c5491-d449-4190-9394-aa46aa92e7fd",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "953533e8-89f1-44b9-a5ac-4b02a4f75f86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3cdd7290-b411-4008-8bd1-9bc1327ded04",
        "cursor": {
          "ref": "e96bd36f-f6ee-46ed-b24c-9748d9ff4af2",
          "length": 253,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "050c1e9f-a75d-4e68-af3b-6e2cce4087c3"
        },
        "item": {
          "id": "3cdd7290-b411-4008-8bd1-9bc1327ded04",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "ec107b4e-2429-448b-bc41-c35815443f60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8ccd148-dd4d-4605-8aae-f6e3254f643b",
        "cursor": {
          "ref": "626d12ab-790d-42dd-856f-95f548fa4de1",
          "length": 253,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "9b959519-f5ed-4c96-bfe0-aea89e20f0a8"
        },
        "item": {
          "id": "b8ccd148-dd4d-4605-8aae-f6e3254f643b",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "bc93c3c1-50ea-4692-90d3-a6848aea5e15",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 15,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45abdd05-f7f7-44e8-bf43-c6dfebd261e5",
        "cursor": {
          "ref": "88508d1e-330b-459b-bd9f-ad3a0da21cd9",
          "length": 253,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "574b2568-8ef1-4f2b-b29d-3752365aba3f"
        },
        "item": {
          "id": "45abdd05-f7f7-44e8-bf43-c6dfebd261e5",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "a8245dab-8125-44ea-9b6b-3494187d3589",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6177ca9-83d8-48b6-8c0e-8ac42afc0985",
        "cursor": {
          "ref": "b9635227-6053-4932-b22d-7c34491eb78f",
          "length": 253,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "55ad5d82-fd76-41c0-a811-57d2ce7606b3"
        },
        "item": {
          "id": "d6177ca9-83d8-48b6-8c0e-8ac42afc0985",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "de0d7454-a8e7-4afb-9d83-86e401f714d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b61eaae-7909-4966-9475-ee97e3e13c1d",
        "cursor": {
          "ref": "2f6be36d-c380-455e-b5fa-ad06cf31720e",
          "length": 253,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "2f48b921-7feb-4918-90eb-b9bacd916782"
        },
        "item": {
          "id": "3b61eaae-7909-4966-9475-ee97e3e13c1d",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "5cb9376a-9fb5-4d9d-a94d-9275cbf51a39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3dd56379-c217-4477-bd2d-212df2ccd723",
        "cursor": {
          "ref": "a5e8d92f-b519-47bb-9f2d-43871b95da8d",
          "length": 253,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "1645f329-e6df-4ca0-9bdb-1ee5fc17321a"
        },
        "item": {
          "id": "3dd56379-c217-4477-bd2d-212df2ccd723",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "a336135d-41c1-404f-8c34-65de5913ad81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3ea4aeb-5fc2-4ee3-8a36-5f6f8c024c4b",
        "cursor": {
          "ref": "77491306-2334-43c3-9f5a-98a947f3f685",
          "length": 253,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "8a99affc-5469-4e94-880b-ec787e8295e3"
        },
        "item": {
          "id": "b3ea4aeb-5fc2-4ee3-8a36-5f6f8c024c4b",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "62015128-0e31-4838-9b2d-39667cbd7323",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4536a01-ded0-48fc-8ae2-8cd527e16472",
        "cursor": {
          "ref": "4323faab-3c4c-4df2-9208-dfa7a4f7fe5c",
          "length": 253,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "ad8abf0c-b97d-42a7-9170-552daef69b40"
        },
        "item": {
          "id": "c4536a01-ded0-48fc-8ae2-8cd527e16472",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "6df8f6a3-1c4e-497e-bae5-87efbd1fc09e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "822fcc32-9a15-4c36-ae2a-9b0081a0d397",
        "cursor": {
          "ref": "24801139-2afb-42d9-975c-52616fadbcfd",
          "length": 253,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "49699b8b-53df-4027-ab3d-e903fe9f5980"
        },
        "item": {
          "id": "822fcc32-9a15-4c36-ae2a-9b0081a0d397",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "38a0585b-78a1-48af-83e8-e4deb7795b27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2352e16f-0aed-4a38-9e6a-1e016668c60a",
        "cursor": {
          "ref": "1bd56a4a-5b70-467f-be3a-660e6671d354",
          "length": 253,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "645bf900-ce0a-4e7d-9010-da90ae79eb62"
        },
        "item": {
          "id": "2352e16f-0aed-4a38-9e6a-1e016668c60a",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "6bd93fc0-8f07-4006-8b76-98a484db0875",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "069bf2a5-3a48-487e-a65b-087893c78bd9",
        "cursor": {
          "ref": "1e133a7d-9904-4746-a673-250469b54f82",
          "length": 253,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "6a6949af-1776-4095-81b5-fe2cc0f0bf0a"
        },
        "item": {
          "id": "069bf2a5-3a48-487e-a65b-087893c78bd9",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "9f9dc774-dc88-4d3c-9667-45262499676c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2a876f2-8e6e-4041-a0ac-11cc1d38159a",
        "cursor": {
          "ref": "13a0eb1d-f119-4df6-8b4a-cb0e21a3610e",
          "length": 253,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "d698d845-0099-48e1-98cd-63b55f921641"
        },
        "item": {
          "id": "f2a876f2-8e6e-4041-a0ac-11cc1d38159a",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "cd4157f0-f5c2-4bbe-9657-cf2d9ca4faac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 165,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fa47197-b976-435f-8504-b9f120060305",
        "cursor": {
          "ref": "90da438b-4cb4-4b47-a450-c4ed59f4da4b",
          "length": 253,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "c1f9ee10-1943-479a-98e2-59eaa48a74e5"
        },
        "item": {
          "id": "3fa47197-b976-435f-8504-b9f120060305",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "b6b6898c-3545-44f3-a633-fd6a6c651afe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21746092-9d1e-4c58-919d-781a468df0e0",
        "cursor": {
          "ref": "dd976c93-9513-4cc4-be83-6c15b8cf8269",
          "length": 253,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "3ad213f9-710e-4d97-ba68-827a5bcd9ab6"
        },
        "item": {
          "id": "21746092-9d1e-4c58-919d-781a468df0e0",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "46763e29-cf99-4a57-931c-83396d7acbec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90cb417c-eb5e-492d-b57f-8cd761f31583",
        "cursor": {
          "ref": "c8926b1c-6d78-4723-aa81-33d062661703",
          "length": 253,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "3f089d70-667d-4e92-aff9-842e187b5a2a"
        },
        "item": {
          "id": "90cb417c-eb5e-492d-b57f-8cd761f31583",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "afd651da-9a94-4808-8a5b-c5d064612951",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 558
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "973eb2f8-f19b-4b6e-b6a0-341e2ca184f9",
        "cursor": {
          "ref": "3e71c004-525b-4e81-8524-ea82b6f45721",
          "length": 253,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "67864a90-d54d-48c5-9d11-f3d8de81992f"
        },
        "item": {
          "id": "973eb2f8-f19b-4b6e-b6a0-341e2ca184f9",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "7ac7ea4f-81f6-40ca-823e-63250c24ca0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 557
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d9a09b4-14e7-43e0-9445-cf30f6592810",
        "cursor": {
          "ref": "675a33e6-71cf-4ccb-b7af-330572674893",
          "length": 253,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "e6b1fd4f-4c92-4875-a832-d5ad564c0660"
        },
        "item": {
          "id": "7d9a09b4-14e7-43e0-9445-cf30f6592810",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "fcf0f1eb-c927-4dcc-b8e5-b1315d283457",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "294fb4b0-d84f-408a-b844-fc3cf1aff930",
        "cursor": {
          "ref": "9dd042ea-d60d-44e1-b8a0-b3cdff4da246",
          "length": 253,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "ddf6b7a1-5f44-4d20-8f29-856645a72543"
        },
        "item": {
          "id": "294fb4b0-d84f-408a-b844-fc3cf1aff930",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "75a72aeb-d09c-4076-8f11-8a0662d5bef3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4411864d-6d0b-4038-aca3-b2d976739668",
        "cursor": {
          "ref": "86aac498-8199-4aea-a77f-8823373e889f",
          "length": 253,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "8790bb17-cfcc-4035-b1f1-b7dec631f0ee"
        },
        "item": {
          "id": "4411864d-6d0b-4038-aca3-b2d976739668",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "37dc837c-ab3b-4257-927d-e06c58cf1d82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 559
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3078d16a-434b-4c7e-bb30-aca081f3b470",
        "cursor": {
          "ref": "ab3757c5-430e-41f8-95a7-e5bdec4aa6f7",
          "length": 253,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "2ba9e503-e089-40c7-a568-aa26787011d5"
        },
        "item": {
          "id": "3078d16a-434b-4c7e-bb30-aca081f3b470",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "9bd8635a-b25e-42df-b065-66c7988781cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0ab04f0-7ad2-4e2c-88fa-2ab08821f29e",
        "cursor": {
          "ref": "695e3bf3-f611-41f1-b12a-df6893894db5",
          "length": 253,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "1e69f567-ac49-456b-ac10-0424d6275df6"
        },
        "item": {
          "id": "f0ab04f0-7ad2-4e2c-88fa-2ab08821f29e",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "610357d9-715d-4feb-a487-2616b7511f54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b84359d-9bf0-49fe-aa94-356b558f9c2e",
        "cursor": {
          "ref": "cbe70799-e732-458b-a5b6-d7a19601f79a",
          "length": 253,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "74c76e68-b92a-4a2c-8a80-7f921cc27ee3"
        },
        "item": {
          "id": "2b84359d-9bf0-49fe-aa94-356b558f9c2e",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "9d23f9d1-b72d-4b16-b676-5fca59870c32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bef4a2ca-ddc9-4ae8-8d01-38d2e6d615b9",
        "cursor": {
          "ref": "fdcabf2a-125a-42e8-86ea-c46674cc4a01",
          "length": 253,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "a01b57d9-6052-4d99-b868-890d236f2365"
        },
        "item": {
          "id": "bef4a2ca-ddc9-4ae8-8d01-38d2e6d615b9",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "cb3c479b-a9d6-483e-bc73-0e3a9b671cc7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d1b4cb7-a5b8-442d-bc2c-c4335bb1af7a",
        "cursor": {
          "ref": "9dd4b5a0-9955-4faa-85d9-d3b2ba24a6c1",
          "length": 253,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "2efe67f0-2e76-4391-a369-693de6b8e2e8"
        },
        "item": {
          "id": "0d1b4cb7-a5b8-442d-bc2c-c4335bb1af7a",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "ae41e799-6171-4e23-b404-fe3d15713e5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ae257a0-dad5-4bc9-8a20-44db391795fa",
        "cursor": {
          "ref": "bcd145a8-7904-49e2-a5ca-9d37e86af0fd",
          "length": 253,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "4bc32f53-0e98-408e-9631-55dc688b5062"
        },
        "item": {
          "id": "6ae257a0-dad5-4bc9-8a20-44db391795fa",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "601752bc-8fcb-4faa-a23b-b8b336d30e5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84022e33-df26-486f-93f6-fd1b3a3cf607",
        "cursor": {
          "ref": "64ffcab8-f904-40c5-8540-18600da25a2b",
          "length": 253,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "6818bd1c-06d0-4b69-a79e-d53edbcd1307"
        },
        "item": {
          "id": "84022e33-df26-486f-93f6-fd1b3a3cf607",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "3bb8536c-c910-4cb2-b394-f7ee6c0ca67e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 323,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7c85a71-1f0f-4f3e-9506-c599cc168d17",
        "cursor": {
          "ref": "dfdcbcf1-934a-4d96-83b6-819db2216c1d",
          "length": 253,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "10a4c86d-71b2-4b45-a7b3-c65ffa56ed68"
        },
        "item": {
          "id": "a7c85a71-1f0f-4f3e-9506-c599cc168d17",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "2b5ce920-ed9b-49fc-b990-908d92691465",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 355
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ebb82c0-28a6-4445-b8dc-1f4d3987dcd0",
        "cursor": {
          "ref": "f9b1d9e1-88b2-4f7b-bcd8-2beea32475dd",
          "length": 253,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "2b449dd9-f9ff-4e8d-b9f8-b1dc34e5db2e"
        },
        "item": {
          "id": "4ebb82c0-28a6-4445-b8dc-1f4d3987dcd0",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "b5744ce6-7b28-44d3-a60a-a35f9eea7c84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1408ba01-77dc-4c7f-96f9-5d26faeb9294",
        "cursor": {
          "ref": "ca52ebba-884b-409a-8e5e-bcb264dcf5f4",
          "length": 253,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "6b8aea7c-16ea-4591-b195-1c6c6dcdd1fa"
        },
        "item": {
          "id": "1408ba01-77dc-4c7f-96f9-5d26faeb9294",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "6e808b9c-0d63-4883-95c0-8d0ec2b1e741",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4d97550-22bc-49db-9b11-d34d580ea323",
        "cursor": {
          "ref": "f8aa8dea-42b1-4bf3-86ff-5125164717f4",
          "length": 253,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "bb5ef5d6-3150-4264-a1c2-12db805ffd6f"
        },
        "item": {
          "id": "f4d97550-22bc-49db-9b11-d34d580ea323",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "3746ba33-c18e-488a-b5e7-3392527ef688",
          "status": "Created",
          "code": 201,
          "responseTime": 632,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:89)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:89)"
            }
          }
        ]
      },
      {
        "id": "6f1f4725-6b74-4cd0-8794-8a57d112918c",
        "cursor": {
          "ref": "bd7a4dc7-e196-4502-9484-85e2620459bb",
          "length": 253,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "7e01b2e2-5c3d-4a41-ba17-f5397734355c"
        },
        "item": {
          "id": "6f1f4725-6b74-4cd0-8794-8a57d112918c",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "19cc61b5-d039-4c85-92e0-03b35bf0bd24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4be0e8db-3fcc-4e2c-b861-1bd37fff7bf2",
        "cursor": {
          "ref": "19fb2771-1021-47dc-b860-8daf469083dc",
          "length": 253,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "398685cb-2aba-4dbf-99de-44e3190b14d0"
        },
        "item": {
          "id": "4be0e8db-3fcc-4e2c-b861-1bd37fff7bf2",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "eb376ba9-240f-453e-be08-16177a7275d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 361
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a0ebc6c-5bf3-4a42-b8c2-09d888f8ff0a",
        "cursor": {
          "ref": "0e031965-eb93-42e4-b5e3-caeca22d6318",
          "length": 253,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "0edbea69-3ae3-4fe3-bbf0-1fdd96c7658c"
        },
        "item": {
          "id": "3a0ebc6c-5bf3-4a42-b8c2-09d888f8ff0a",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "daa11035-0e93-41ce-bf4f-cd9512da2716",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 389
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "166f40c9-b25e-45fa-b2c4-0ce53fb2767e",
        "cursor": {
          "ref": "a00853ff-46ea-4228-b4e9-b23564a91fb1",
          "length": 253,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "d4c81954-16af-43e2-9149-ecdb7e74713e"
        },
        "item": {
          "id": "166f40c9-b25e-45fa-b2c4-0ce53fb2767e",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "7fe585e8-53b5-4588-b620-bff348b0d119",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 388
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "559fdf88-4589-4f28-bf2f-8dff5b2ac755",
        "cursor": {
          "ref": "7c680335-3a79-4b83-88fd-5042e0d9b910",
          "length": 253,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "45de6b88-2fcd-44ca-9022-27c8b3b4284e"
        },
        "item": {
          "id": "559fdf88-4589-4f28-bf2f-8dff5b2ac755",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "8377025e-f78c-4e04-81b4-64d13309f395",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83ff48d2-94a2-4d08-b6ed-2b3ac52c1166",
        "cursor": {
          "ref": "fc08f14b-3488-40d6-bec6-6b8e34c8db64",
          "length": 253,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "f81dba59-9078-4ec2-9c4d-91ccb2ba8d96"
        },
        "item": {
          "id": "83ff48d2-94a2-4d08-b6ed-2b3ac52c1166",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "b0122b7b-6b39-4089-aece-733610b50785",
          "status": "Created",
          "code": 201,
          "responseTime": 616,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:95)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:95)"
            }
          }
        ]
      },
      {
        "id": "551675e7-6ad3-4426-bfbc-8fe0cf06e1a4",
        "cursor": {
          "ref": "fc23d9bf-1ccf-4f8a-9a43-6e087065a4cf",
          "length": 253,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "bf30116f-be2c-4efb-9418-99d79c2d77ba"
        },
        "item": {
          "id": "551675e7-6ad3-4426-bfbc-8fe0cf06e1a4",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "81e4f86d-85c8-49c0-b50c-f2ce2f3114c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 390
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d089be26-65bc-4c78-821b-324c0ebf5085",
        "cursor": {
          "ref": "c02d2178-ae5e-406a-8fa7-645f7d21f9e9",
          "length": 253,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "35393e87-ed21-4920-ba44-7a838ff07b50"
        },
        "item": {
          "id": "d089be26-65bc-4c78-821b-324c0ebf5085",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "c3a71108-71f8-4860-9fb7-e0beb7e00af7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d4f3fdb-c02f-4611-8175-b39c8c1f3644",
        "cursor": {
          "ref": "55312594-b126-4665-a4de-2ead60ef65ad",
          "length": 253,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "53b7ba8f-3191-4ab3-893a-5f38522af2eb"
        },
        "item": {
          "id": "9d4f3fdb-c02f-4611-8175-b39c8c1f3644",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "b240c6e4-2a4e-4247-9d5d-f176f7cd276f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 301
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71de9d4a-6ff8-41ea-9b28-000db83c3644",
        "cursor": {
          "ref": "b863228a-44b5-4262-b325-b8ff14670d6f",
          "length": 253,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "d5dac2c1-6fab-4dc1-b88c-944c79f5e91c"
        },
        "item": {
          "id": "71de9d4a-6ff8-41ea-9b28-000db83c3644",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "1a1cd50c-915e-48f6-b314-40e58afa4e03",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 300
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41125ec7-83ba-4473-8d77-00fae1fa7a1b",
        "cursor": {
          "ref": "c690e0f2-e0d2-40db-952a-84f244592eca",
          "length": 253,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "e1bc3624-cfb3-44bb-9451-ae2da3f374a2"
        },
        "item": {
          "id": "41125ec7-83ba-4473-8d77-00fae1fa7a1b",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "08258b70-31ce-43c2-88a5-ad2abe67fd17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0ebcc44-ce75-4992-9053-b0c18d41e640",
        "cursor": {
          "ref": "407b8d95-5672-4106-8e2a-feb5cfb9a704",
          "length": 253,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "1d54519e-63b6-42d9-855f-4e8b28b4f8c6"
        },
        "item": {
          "id": "c0ebcc44-ce75-4992-9053-b0c18d41e640",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "86fe6bd0-b231-4160-9a9e-897a96f7d567",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f5407ee-c5dd-4ce2-abf8-12239d7da81e",
        "cursor": {
          "ref": "11f1d35e-d447-4428-896f-f3b4d1a68b4f",
          "length": 253,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "07588a60-ee54-4785-9d2e-1fd21b2c62f1"
        },
        "item": {
          "id": "6f5407ee-c5dd-4ce2-abf8-12239d7da81e",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "fe6a585e-133e-4674-b538-3b07fc626413",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63492c85-57ad-4285-b409-6a1dc3cc0593",
        "cursor": {
          "ref": "117dedb6-daa7-4fc6-adf4-c3dc8bfe72e6",
          "length": 253,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "73dda9c6-f11c-488c-9e4e-8d154a36a37b"
        },
        "item": {
          "id": "63492c85-57ad-4285-b409-6a1dc3cc0593",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "c623fd95-fd09-4a9c-beeb-e6da3e71d790",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56a9e1fa-8031-46ee-9be2-6c8ed149345f",
        "cursor": {
          "ref": "0c9f8835-fbb9-4f97-bef8-51f0d091e661",
          "length": 253,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "27e9d28f-a535-4ca7-bc88-a13b15f054e4"
        },
        "item": {
          "id": "56a9e1fa-8031-46ee-9be2-6c8ed149345f",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "9ae5e74f-821f-47f5-acf0-75d40549f36a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:104)"
            }
          }
        ]
      },
      {
        "id": "b7a7f1ec-741c-4216-80b7-149533cf2e19",
        "cursor": {
          "ref": "4b09bf03-3228-4ba1-b643-6ce877a0bb34",
          "length": 253,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "f7ffe179-b853-4000-ae52-9aa63cebdd61"
        },
        "item": {
          "id": "b7a7f1ec-741c-4216-80b7-149533cf2e19",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "f8253bfd-f461-4416-ba0e-8a5753a72930",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:105)"
            }
          }
        ]
      },
      {
        "id": "1c488b51-d226-4f93-9a56-0d51bc7b1191",
        "cursor": {
          "ref": "f2ea1bf4-cf2f-4b6a-a5d9-4bd64a925cc7",
          "length": 253,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "2f92f6e3-0ce1-4e3c-9581-c04560105cb8"
        },
        "item": {
          "id": "1c488b51-d226-4f93-9a56-0d51bc7b1191",
          "name": "credentials_issue"
        },
        "response": {
          "id": "e9d346b6-b2e7-4be5-9132-fdf9d536d84b",
          "status": "Created",
          "code": 201,
          "responseTime": 615,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "45722b57-98d0-44c2-9ca6-fe186b25adde",
        "cursor": {
          "ref": "58ff1e30-a462-4b83-aa45-5c09b6f9a878",
          "length": 253,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "732e6338-2357-4838-8e77-7f2737c3088c"
        },
        "item": {
          "id": "45722b57-98d0-44c2-9ca6-fe186b25adde",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "cd744e35-5b24-4a4d-a494-7b3115297e27",
          "status": "Created",
          "code": 201,
          "responseTime": 647,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3534263-6727-40b6-a377-7c83f4fe070e",
        "cursor": {
          "ref": "20004702-8316-4fc3-94ee-9cdeeb453e63",
          "length": 253,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "06e6552b-6d4b-47d6-a5c8-3e0220b1f61a"
        },
        "item": {
          "id": "a3534263-6727-40b6-a377-7c83f4fe070e",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "851953e9-c5d3-4996-855d-c98bd372b59c",
          "status": "Created",
          "code": 201,
          "responseTime": 624,
          "responseSize": 747
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "207dac4f-3895-4571-9ce5-23d0c8a28e1e",
        "cursor": {
          "ref": "76772b18-9526-42db-8bea-b688ba95e974",
          "length": 253,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "e4b24626-d96c-45b0-9ead-f994bfd5d12c"
        },
        "item": {
          "id": "207dac4f-3895-4571-9ce5-23d0c8a28e1e",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "73b30543-d007-4edf-9cb4-b2f968bb12a4",
          "status": "Created",
          "code": 201,
          "responseTime": 663,
          "responseSize": 715
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1df89b8-5a80-46f5-934f-d606af25e3a1",
        "cursor": {
          "ref": "b5e73870-7524-45f5-bb1a-f6ee9fdcd750",
          "length": 253,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "cdbf287e-c8a0-4c39-9bdc-d7d6411372a6"
        },
        "item": {
          "id": "e1df89b8-5a80-46f5-934f-d606af25e3a1",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "024b93b6-7406-439b-b3b7-27e026d4e3c4",
          "status": "Created",
          "code": 201,
          "responseTime": 635,
          "responseSize": 725
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          }
        ]
      },
      {
        "id": "de7db197-74d2-41d7-b637-658e0e0458dd",
        "cursor": {
          "ref": "acf1ddd8-698d-449f-ad33-1d61fca91d8d",
          "length": 253,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "b6ec8a7d-10e8-448d-877a-6ab45b94647e"
        },
        "item": {
          "id": "de7db197-74d2-41d7-b637-658e0e0458dd",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "d76ceb84-e301-4649-80f7-a54f63af7064",
          "status": "OK",
          "code": 200,
          "responseTime": 9,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "de7db197-74d2-41d7-b637-658e0e0458dd",
        "cursor": {
          "ref": "acf1ddd8-698d-449f-ad33-1d61fca91d8d",
          "length": 253,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "b6ec8a7d-10e8-448d-877a-6ab45b94647e"
        },
        "item": {
          "id": "de7db197-74d2-41d7-b637-658e0e0458dd",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "d76ceb84-e301-4649-80f7-a54f63af7064",
          "status": "OK",
          "code": 200,
          "responseTime": 9,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "c57d9f73-525c-42c6-ada4-6853b8569066",
        "cursor": {
          "ref": "7651e62e-d38a-40fc-9927-c09a95bb4692",
          "length": 253,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "82257152-a3d8-4922-92e3-b22d01ea2ebb"
        },
        "item": {
          "id": "c57d9f73-525c-42c6-ada4-6853b8569066",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "17f7dce3-eda3-41e2-8967-8ed274ed9e4f",
          "status": "OK",
          "code": 200,
          "responseTime": 11,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "c5c35bbe-682b-44ae-929f-5795602d3020",
        "cursor": {
          "ref": "3ec4a712-6647-40b8-94b2-3dd797c2a8ff",
          "length": 253,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "424c0619-2c9b-4c51-878b-8b566953bf80"
        },
        "item": {
          "id": "c5c35bbe-682b-44ae-929f-5795602d3020",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "17a6b770-2bd8-4adf-9ed1-a44392f3ec6e",
          "status": "OK",
          "code": 200,
          "responseTime": 8,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "83d2cca3-437c-41e2-8f21-7f8305f4c8b8",
        "cursor": {
          "ref": "3d7f35dc-06e6-43e6-a11f-aaa06960f3e8",
          "length": 253,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "992260a6-c916-47e6-a535-11219806b4a1"
        },
        "item": {
          "id": "83d2cca3-437c-41e2-8f21-7f8305f4c8b8",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "1e3f456c-81b6-4cd2-8d25-866dcafb3c73",
          "status": "OK",
          "code": 200,
          "responseTime": 10,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "bfd492f9-c5f9-4c8c-9ab2-d0e1b72e510e",
        "cursor": {
          "ref": "9b320061-b282-423c-b99c-c777ea475b34",
          "length": 253,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "4a392645-5b0c-4105-a8ef-b62c632313fb"
        },
        "item": {
          "id": "bfd492f9-c5f9-4c8c-9ab2-d0e1b72e510e",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "a26990e6-3654-4c0b-819b-dc0da59c64ed",
          "status": "OK",
          "code": 200,
          "responseTime": 9,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "a649129b-3698-4007-8dcf-064f2f5ab974",
        "cursor": {
          "ref": "61597ff8-f666-4d73-aaca-e0a9115fc1ba",
          "length": 253,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "60a0e69c-e13e-48f5-bf7a-d42cdc965dbf"
        },
        "item": {
          "id": "a649129b-3698-4007-8dcf-064f2f5ab974",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "185c66b6-436b-4eed-8dbb-2911ca4a490d",
          "status": "OK",
          "code": 200,
          "responseTime": 9,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "f0c65010-6532-4c3b-b9e0-64ee72b92c08",
        "cursor": {
          "ref": "5e37f748-f332-412e-8911-e6f67132a5ee",
          "length": 253,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "1efad584-79bc-4001-a1ec-06f0c8f95338"
        },
        "item": {
          "id": "f0c65010-6532-4c3b-b9e0-64ee72b92c08",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "a874acff-60c1-40ba-be8d-d917353735d2",
          "status": "OK",
          "code": 200,
          "responseTime": 9,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "8dcb9d0c-b7a9-451e-bb8f-762f5ea07c89",
        "cursor": {
          "ref": "ce5374ef-d62c-4486-808f-67b0e33c0d56",
          "length": 253,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "fe891386-e07e-48e8-b01a-faea9b966fed"
        },
        "item": {
          "id": "8dcb9d0c-b7a9-451e-bb8f-762f5ea07c89",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "60fa69cf-c299-405b-ad89-7694090e7ed0",
          "status": "OK",
          "code": 200,
          "responseTime": 10,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "9e14220c-50f1-43c6-ab64-c404799afb88",
        "cursor": {
          "ref": "87f0da66-541e-4aaf-a7c4-4e72f3b0ab4a",
          "length": 253,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "ad230987-bdde-434e-94b1-22c9c40e763a"
        },
        "item": {
          "id": "9e14220c-50f1-43c6-ab64-c404799afb88",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "4b247c01-8499-4307-ba2d-8b8d45df742e",
          "status": "OK",
          "code": 200,
          "responseTime": 9,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "7c0cae29-8ebc-411e-a3a3-1c1592d52138",
        "cursor": {
          "ref": "e8e5fe3b-4b28-40f3-8681-c63588791112",
          "length": 253,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "ed6030fa-78b1-4eef-b9a0-307503c59913"
        },
        "item": {
          "id": "7c0cae29-8ebc-411e-a3a3-1c1592d52138",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "413c0595-30ce-4791-997d-4a43aef812e8",
          "status": "OK",
          "code": 200,
          "responseTime": 10,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "8b43e69e-3e44-4f51-80fa-7169ddfa034b",
        "cursor": {
          "ref": "b77a984c-9e8d-4908-bba7-92eabcaf190c",
          "length": 253,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "f1c55488-8daa-460e-b8fd-02c95a3fac21"
        },
        "item": {
          "id": "8b43e69e-3e44-4f51-80fa-7169ddfa034b",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "80f608d5-1c70-4046-8cb1-2d05bccdc919",
          "status": "OK",
          "code": 200,
          "responseTime": 9,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "e7aa5cb8-42ef-4620-90bf-0782fb91546b",
        "cursor": {
          "ref": "de720935-f5a3-4ee6-95c8-12f325e6ce07",
          "length": 253,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "885c5725-35ed-414c-b57a-8834638377a6"
        },
        "item": {
          "id": "e7aa5cb8-42ef-4620-90bf-0782fb91546b",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "eb3d492f-3b5c-4146-855d-d0c74596d953",
          "status": "OK",
          "code": 200,
          "responseTime": 10,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "b3b99e6c-12f3-4911-8986-16e113a6dcbb",
        "cursor": {
          "ref": "1a4a7ed7-20e3-47da-a937-c201f4035fde",
          "length": 253,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "61a21e26-1ab3-4ab3-a9b8-f0b5322e581f"
        },
        "item": {
          "id": "b3b99e6c-12f3-4911-8986-16e113a6dcbb",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "3a983b0b-778d-47f0-88f7-f64fc00390d1",
          "status": "OK",
          "code": 200,
          "responseTime": 9,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "1ad591f3-a8b2-4a29-8b72-4e2145897700",
        "cursor": {
          "ref": "ef98e5fd-d610-43c7-bb09-a97d91209fab",
          "length": 253,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "54a857ac-c06a-42a3-8d57-1b7eee8b8993"
        },
        "item": {
          "id": "1ad591f3-a8b2-4a29-8b72-4e2145897700",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "d6a3fa87-21ec-4847-ac5b-d36ed4d046fb",
          "status": "OK",
          "code": 200,
          "responseTime": 9,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "fffd43ca-32f3-4179-988d-895d7849c571",
        "cursor": {
          "ref": "d9007597-ebbd-44e9-a6c1-33f7544e4ef0",
          "length": 253,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "9a2b9c8a-6327-452a-8d8a-349b74257f1f"
        },
        "item": {
          "id": "fffd43ca-32f3-4179-988d-895d7849c571",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "aff1d75d-b454-4c3b-adb2-f56ad4cf888d",
          "status": "OK",
          "code": 200,
          "responseTime": 9,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "a5984f08-dfb9-4e6b-a0f2-de0d8f65ba01",
        "cursor": {
          "ref": "5dda515d-2906-499f-9f87-01e36d530209",
          "length": 253,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "2347ff2c-ec15-47b3-8dc8-bc99108c07dd"
        },
        "item": {
          "id": "a5984f08-dfb9-4e6b-a0f2-de0d8f65ba01",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "1ac699fc-6f2f-4b06-b8c7-4e73ca792935",
          "status": "OK",
          "code": 200,
          "responseTime": 9,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "2a5af5e9-2385-4465-a6cf-eb9952032fec",
        "cursor": {
          "ref": "033f778f-78b6-4f0f-a494-a03f05d33adc",
          "length": 253,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "329ea794-69bf-4fef-81b3-9950670b6462"
        },
        "item": {
          "id": "2a5af5e9-2385-4465-a6cf-eb9952032fec",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "ff712ae3-13a6-4ee3-af7e-59109d9c9720",
          "status": "OK",
          "code": 200,
          "responseTime": 9,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "442dea90-520e-4191-8a49-e95c9acaac75",
        "cursor": {
          "ref": "4617fa99-80c8-4b58-9fe8-ef71198a2662",
          "length": 253,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "0aaf5ae6-0603-427e-9121-452c5096699b"
        },
        "item": {
          "id": "442dea90-520e-4191-8a49-e95c9acaac75",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "32034f80-6cf3-4017-bb11-b92a03796ecb",
          "status": "OK",
          "code": 200,
          "responseTime": 9,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "cac0beff-c29d-4ddd-9e82-ab3bdf605e2a",
        "cursor": {
          "ref": "9a07b838-9cb7-41a8-9d9e-2ce6cd3a786f",
          "length": 253,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "3bdad570-cb5d-40cb-af3d-0f6c6dd2ba06"
        },
        "item": {
          "id": "cac0beff-c29d-4ddd-9e82-ab3bdf605e2a",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "087db0a9-1ccc-42c6-9ce9-1c60a21c0808",
          "status": "OK",
          "code": 200,
          "responseTime": 9,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "6fc12408-fe85-40d7-8b06-447d54627167",
        "cursor": {
          "ref": "57728893-b97b-417f-a2bd-7cdbb8172c84",
          "length": 253,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "5de6ce30-fee8-4f2a-aaef-8cbd179eb321"
        },
        "item": {
          "id": "6fc12408-fe85-40d7-8b06-447d54627167",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "54ef5c1e-9e7a-479a-9a31-afd1d0bfcdb6",
          "status": "OK",
          "code": 200,
          "responseTime": 13,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "aa28cfd4-3c8a-4ad1-b1b3-f9078368210f",
        "cursor": {
          "ref": "55af3a30-4d8a-47c0-9d0d-62e5498b4d7f",
          "length": 253,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "4195623a-9f2c-427f-9d27-4377935bcff8"
        },
        "item": {
          "id": "aa28cfd4-3c8a-4ad1-b1b3-f9078368210f",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "e566f124-deff-4270-a076-dcae55d66957",
          "status": "OK",
          "code": 200,
          "responseTime": 9,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "08dba280-3c55-4735-a29c-d11419e23aba",
        "cursor": {
          "ref": "e2415063-3612-464b-8b94-665cf7f294cf",
          "length": 253,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "2259cd1c-91cf-464e-8ef0-d85d0214fe58"
        },
        "item": {
          "id": "08dba280-3c55-4735-a29c-d11419e23aba",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "0e6e5d64-8f4b-419b-98fa-541018df06d5",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "67cf7c24-6986-4e14-a5eb-81c64aacfbfc",
        "cursor": {
          "ref": "591358be-66a7-478b-9716-cc268ab4951e",
          "length": 253,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "4b348f21-2f28-4a94-bc6e-44f95fdb32bf"
        },
        "item": {
          "id": "67cf7c24-6986-4e14-a5eb-81c64aacfbfc",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "007b9e44-c001-45bb-bb1a-30765fe8982d",
          "status": "OK",
          "code": 200,
          "responseTime": 11,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "b9bdb57d-a1d9-42f2-a2c9-fad408603e55",
        "cursor": {
          "ref": "16bc7a89-6d94-438f-897a-17e74eaf05d2",
          "length": 253,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "7dc3a899-f3d3-4d79-9a44-e7cbb4b6c8ac"
        },
        "item": {
          "id": "b9bdb57d-a1d9-42f2-a2c9-fad408603e55",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "6b20a6dd-ea9d-437b-8724-1222db08cb51",
          "status": "OK",
          "code": 200,
          "responseTime": 9,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "4f5fde4e-d213-4b5b-bfe2-2c05b308f5f4",
        "cursor": {
          "ref": "982d432e-e79c-4889-813b-7f56591d9614",
          "length": 253,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "f3ece454-14dd-486c-8dfa-914d3bad8d8d"
        },
        "item": {
          "id": "4f5fde4e-d213-4b5b-bfe2-2c05b308f5f4",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "bd246288-eb47-4226-b47f-b81f32d7bf7f",
          "status": "OK",
          "code": 200,
          "responseTime": 9,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "bcad077a-25b5-4a9b-809f-b3ac22b730ac",
        "cursor": {
          "ref": "e961cde1-902b-4a5f-844f-979b7adac02d",
          "length": 253,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "1784d041-b7de-4af8-b7a4-fb7bbc0855ce"
        },
        "item": {
          "id": "bcad077a-25b5-4a9b-809f-b3ac22b730ac",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "e1af22c7-36bf-4c2e-9308-a44aea2ec9c5",
          "status": "OK",
          "code": 200,
          "responseTime": 9,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "8198f283-82d4-4daa-8c69-00338ea130c9",
        "cursor": {
          "ref": "6e0ebe00-3583-4583-807e-23d2e7df9897",
          "length": 253,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "2d1a9d21-29cb-4dad-9325-bf360f5821f6"
        },
        "item": {
          "id": "8198f283-82d4-4daa-8c69-00338ea130c9",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "9b45721a-dbb8-4ab7-b6a4-42537db5cc12",
          "status": "OK",
          "code": 200,
          "responseTime": 9,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "c57a424f-3bf8-4bf8-b298-c935dada5429",
        "cursor": {
          "ref": "907a2e35-9061-4eb2-a3bb-2c26c079639b",
          "length": 253,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "984ffa8c-32c2-491a-87d0-ee502e4ab0aa"
        },
        "item": {
          "id": "c57a424f-3bf8-4bf8-b298-c935dada5429",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "01270620-32de-44da-a2aa-c7aff2a48604",
          "status": "OK",
          "code": 200,
          "responseTime": 9,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "bea94721-7c8e-4ff5-af0d-02c4b930260f",
        "cursor": {
          "ref": "ecb7d30a-a284-450b-bb55-2a19286671e5",
          "length": 253,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "6ab7b110-8dde-47dd-8a3e-7989adbdfc55"
        },
        "item": {
          "id": "bea94721-7c8e-4ff5-af0d-02c4b930260f",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "80aaff01-945b-41ac-a72e-27fe9b8b78f9",
          "status": "OK",
          "code": 200,
          "responseTime": 10,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "b9836d90-2e19-4d4e-84f9-539e2be70d27",
        "cursor": {
          "ref": "ad962044-b25b-4f25-99b1-40bb4bca6cc9",
          "length": 253,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "2516c1f0-e5a2-4459-8342-7b14d4f1e9ca"
        },
        "item": {
          "id": "b9836d90-2e19-4d4e-84f9-539e2be70d27",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "9942e50f-8cb5-4f36-b72c-90343298dee9",
          "status": "OK",
          "code": 200,
          "responseTime": 9,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "ff7c5466-1324-4a59-863d-19be05854f9a",
        "cursor": {
          "ref": "238e5e9f-2f7f-41ba-ba9d-c1f792bf860f",
          "length": 253,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "93059cb5-78bb-47bf-b24b-d8858a2ad597"
        },
        "item": {
          "id": "ff7c5466-1324-4a59-863d-19be05854f9a",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "2f7c8320-a4b5-490f-90c3-7608270471ce",
          "status": "OK",
          "code": 200,
          "responseTime": 9,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "fe248611-eb15-4aa6-945a-0ca6b1326975",
        "cursor": {
          "ref": "86948bbc-c145-4a75-8376-225243febe8f",
          "length": 253,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "e5cb5540-909b-4626-9c37-1adbadab0138"
        },
        "item": {
          "id": "fe248611-eb15-4aa6-945a-0ca6b1326975",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "a5457211-6175-407e-993e-b19506ea6413",
          "status": "OK",
          "code": 200,
          "responseTime": 9,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "4c3f78d8-6a70-4ea5-a810-ad6c6f9827fa",
        "cursor": {
          "ref": "84c8a3a5-da84-40f1-bb5d-c062104c389c",
          "length": 253,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "99615d86-1ac6-49cb-9823-3c2247bb2f0c"
        },
        "item": {
          "id": "4c3f78d8-6a70-4ea5-a810-ad6c6f9827fa",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "7841bff3-724c-4a4e-bedb-3250dd840709",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 9,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28c09a55-0207-4851-8e46-4031ac7ca6e9",
        "cursor": {
          "ref": "1d2ec2d0-56fd-45aa-b474-8b4b3757464f",
          "length": 253,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "4dd8d87a-f845-42a5-94f1-edb5bcb25f0a"
        },
        "item": {
          "id": "28c09a55-0207-4851-8e46-4031ac7ca6e9",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "185fad20-090c-4a8c-9214-6c40b0ee989d",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 9,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "caaa5600-956c-467a-bf54-3ed0d0263fe3",
        "cursor": {
          "ref": "c2355b1e-a47e-4f46-9130-25858b484ed1",
          "length": 253,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "c23811b7-81c9-4dad-a37a-d0243d681c54"
        },
        "item": {
          "id": "caaa5600-956c-467a-bf54-3ed0d0263fe3",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "73045cd6-bd2a-4ef2-901a-f6b9ee41b304",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "caaa5600-956c-467a-bf54-3ed0d0263fe3",
        "cursor": {
          "ref": "c2355b1e-a47e-4f46-9130-25858b484ed1",
          "length": 253,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "c23811b7-81c9-4dad-a37a-d0243d681c54"
        },
        "item": {
          "id": "caaa5600-956c-467a-bf54-3ed0d0263fe3",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "73045cd6-bd2a-4ef2-901a-f6b9ee41b304",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9beb5f19-5b90-4da1-8c84-c29439e72081",
        "cursor": {
          "ref": "f2356907-b449-44ed-8188-ea6d5f9818fb",
          "length": 253,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "f313d9c0-85d5-49b1-ba5e-c4df1780cdf1"
        },
        "item": {
          "id": "9beb5f19-5b90-4da1-8c84-c29439e72081",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "c8dd9060-bfb0-4383-b73e-7b960f001b7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd0a9f80-f488-4f99-91ed-e1aeb2f1b061",
        "cursor": {
          "ref": "cce16ec4-7566-4715-b3f1-210c8e8e46fe",
          "length": 253,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "5a505add-98e3-4e4f-8c27-3cdcd77298f5"
        },
        "item": {
          "id": "dd0a9f80-f488-4f99-91ed-e1aeb2f1b061",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "0c8e969c-2012-40ec-95a5-2bf6484e874e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bcedbffd-fd1f-47ec-8694-13ca78a829e3",
        "cursor": {
          "ref": "aa3fcbf4-c8a2-4f18-aeaa-785f11f4b373",
          "length": 253,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "38f53e0e-d53f-485a-95d9-5778376c51d6"
        },
        "item": {
          "id": "bcedbffd-fd1f-47ec-8694-13ca78a829e3",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "31f336bf-0bc6-4542-9373-08764b2a570e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47677bfd-c31c-42df-9e60-f191cd3cf84c",
        "cursor": {
          "ref": "8ac0d2a9-01c8-4538-8d28-0c14f1db769c",
          "length": 253,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "9f2301f1-d81e-41ea-a11f-c1e56272ab09"
        },
        "item": {
          "id": "47677bfd-c31c-42df-9e60-f191cd3cf84c",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "13afb840-17c5-4b58-8d63-860cc202fa62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba9cb1fb-8f51-4edd-b57d-b7f9188bba55",
        "cursor": {
          "ref": "e10bc510-1eed-4f60-b71d-368a4f9533ce",
          "length": 253,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "eb3f68b6-783f-4efa-b8f8-24b771c7dc85"
        },
        "item": {
          "id": "ba9cb1fb-8f51-4edd-b57d-b7f9188bba55",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "15b7f5fd-7f3f-4377-a8b1-12f6a9ad1cc7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48bf093f-a21b-424a-ad87-63292f6ed003",
        "cursor": {
          "ref": "1800f685-f38a-45a1-a4c9-3f68d099d6c9",
          "length": 253,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "dd8a4023-8402-4625-9ce6-4cdd8d213ea0"
        },
        "item": {
          "id": "48bf093f-a21b-424a-ad87-63292f6ed003",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "b0416d2b-add6-4eaa-a68b-659206b0acec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 115,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f9f5e81-e290-48f4-9eff-9aa135887abd",
        "cursor": {
          "ref": "46400fe5-08e9-45fc-9d65-35d5d98fc3e1",
          "length": 253,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "5260c8c9-45d3-4d27-8015-bb5a17e9f123"
        },
        "item": {
          "id": "1f9f5e81-e290-48f4-9eff-9aa135887abd",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "043291c9-0cf0-4802-a7cd-4007e5b3ab3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b4ead53-98ae-4527-914f-99008b147b5f",
        "cursor": {
          "ref": "5878b207-4ca7-4326-aa1d-14683065346f",
          "length": 253,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "02b01335-1f81-414c-b03d-f5f02ab04daa"
        },
        "item": {
          "id": "4b4ead53-98ae-4527-914f-99008b147b5f",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "10bde9ec-0d53-4cb4-8ce2-86845569407b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e51412d-9c99-46a2-be84-41be4d7f6184",
        "cursor": {
          "ref": "573522e7-e6f4-448f-a1ff-3326caacc374",
          "length": 253,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "ec164751-1b0d-4ae3-bae7-3f3656ea5461"
        },
        "item": {
          "id": "3e51412d-9c99-46a2-be84-41be4d7f6184",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "0bafdfa5-073b-4e9b-81fa-a1a51d8f47d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6cbd799d-7880-4676-bb01-646862bb9446",
        "cursor": {
          "ref": "476cc730-6360-42f2-8ec2-8379d02bfbf5",
          "length": 253,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "43b4bebd-37a8-440d-8257-8835a7359d23"
        },
        "item": {
          "id": "6cbd799d-7880-4676-bb01-646862bb9446",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "312c3f36-9aec-48ed-b3b0-a71eaf479411",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50f23c7d-162e-46b7-a88c-7463c8aa1ee4",
        "cursor": {
          "ref": "2135dd54-32c9-4a8e-872e-feddadcd7292",
          "length": 253,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "1ab1fcd6-4905-4711-8559-3dd26cf70fb7"
        },
        "item": {
          "id": "50f23c7d-162e-46b7-a88c-7463c8aa1ee4",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "72e9367a-bb86-4033-a717-e5a8e71fae10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24d581a7-14bb-4c78-b895-b77c278a06f1",
        "cursor": {
          "ref": "c3ad5f11-a6bd-4df5-a280-a46b8c28620b",
          "length": 253,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "0cb3f2c3-94bf-4cdb-b07b-6ead9e49df27"
        },
        "item": {
          "id": "24d581a7-14bb-4c78-b895-b77c278a06f1",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "580f9a79-2cb8-40c0-9fdf-8f7418c00e76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43035eb1-b539-41bc-aa52-1e3a9f08f9df",
        "cursor": {
          "ref": "b9fcfc4f-dc9d-4794-9178-09f72ef7f726",
          "length": 253,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "c003c670-fc08-4cae-85aa-2a307b515188"
        },
        "item": {
          "id": "43035eb1-b539-41bc-aa52-1e3a9f08f9df",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "c2c466b6-b1fe-44f6-b769-fc177bcfa58b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dcdb0f89-a61f-4159-86fd-3fe7b83f4f5c",
        "cursor": {
          "ref": "89b76978-23e8-41f3-9dda-cad0c3b4090c",
          "length": 253,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "36b83fdb-ef61-48bb-bf1c-9fff359559e1"
        },
        "item": {
          "id": "dcdb0f89-a61f-4159-86fd-3fe7b83f4f5c",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "3e96b39e-4b80-40b1-8027-aa9653d54f3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "998d4d5e-fed4-433e-a5f7-d4bc86907774",
        "cursor": {
          "ref": "26a4e013-f1f0-411a-9254-e503c725ef2b",
          "length": 253,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "0456d886-de08-4d44-b0cb-8a95e3c43bd9"
        },
        "item": {
          "id": "998d4d5e-fed4-433e-a5f7-d4bc86907774",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "a6b903f9-d18a-4e8e-856a-90eafa3b0335",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05c3ecf3-8f5a-4803-afcc-a6f4c5955707",
        "cursor": {
          "ref": "38d49c60-e87d-4483-a4fc-fc14622c77cf",
          "length": 253,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "9e5a7221-ff73-4f9e-99fc-d9901703804c"
        },
        "item": {
          "id": "05c3ecf3-8f5a-4803-afcc-a6f4c5955707",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "4168c82a-81fd-4607-b9e5-a0a151b0715b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a73b11a8-81c0-43d3-b317-7aff3c0d53c3",
        "cursor": {
          "ref": "c71faecd-e090-40d2-a948-1eeca7109938",
          "length": 253,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "f379e2ca-33df-4b93-8bf1-7a3d95b76491"
        },
        "item": {
          "id": "a73b11a8-81c0-43d3-b317-7aff3c0d53c3",
          "name": "credentials_verify:vc:id:missing"
        },
        "response": {
          "id": "15ea5aa2-298b-4330-9a84-fe446938d766",
          "status": "OK",
          "code": 200,
          "responseTime": 562,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:162)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:162)"
            }
          }
        ]
      },
      {
        "id": "ef8ac6e9-3223-4d62-978f-08943024a88d",
        "cursor": {
          "ref": "49b33f5b-6b6b-4dbc-9014-d15c7b018742",
          "length": 253,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "86d52a98-92a8-47c9-ab53-d1b262218e51"
        },
        "item": {
          "id": "ef8ac6e9-3223-4d62-978f-08943024a88d",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "593507b3-cbea-495d-adbc-8a347cf96a88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 247,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0513440f-7b6c-4362-9c1c-005451a554b9",
        "cursor": {
          "ref": "bcc7a843-5536-4374-bc06-0e600dc5f41c",
          "length": 253,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "a16ff5bf-c359-4755-bcb7-139aa1b4eba6"
        },
        "item": {
          "id": "0513440f-7b6c-4362-9c1c-005451a554b9",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "84829359-c1af-486f-a607-89f40a964ecb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 243,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3118ecb-7178-4de9-b594-5cf9b971f14b",
        "cursor": {
          "ref": "05d74f34-2eef-4105-a9b8-9de06c0928ed",
          "length": 253,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "3da4bc32-edb9-46d7-af2d-c1a205d468e0"
        },
        "item": {
          "id": "b3118ecb-7178-4de9-b594-5cf9b971f14b",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "61f0d2c6-04fc-4dc5-b95c-7a06052cae6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 267,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec76abd4-8835-44d0-b21f-0bfb4cfdafe8",
        "cursor": {
          "ref": "d3f18f04-ec22-48cb-86ec-abfd53ac5c88",
          "length": 253,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "afe65b3a-0180-4453-a150-6b953fffc767"
        },
        "item": {
          "id": "ec76abd4-8835-44d0-b21f-0bfb4cfdafe8",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "0d97ece2-de8f-42ea-ae58-05d93ee76610",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 244,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd8db6ed-d086-4b3d-8691-7408d3532759",
        "cursor": {
          "ref": "f82150cc-230d-45a0-959b-12bd745c3458",
          "length": 253,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "230cb4ca-40e0-4922-887e-2790abb9ded0"
        },
        "item": {
          "id": "fd8db6ed-d086-4b3d-8691-7408d3532759",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "a73a201c-576d-4ffc-b026-971888ea6118",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 245,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96a79ab3-b5e7-4d2d-94bf-5d4b2bd4a516",
        "cursor": {
          "ref": "f9c9df80-715b-4d87-92ba-917f04cd201d",
          "length": 253,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "1ce9410d-d27d-4ee7-bafe-60ff16213e00"
        },
        "item": {
          "id": "96a79ab3-b5e7-4d2d-94bf-5d4b2bd4a516",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "c9c08f9d-97d8-494a-a877-6aff49d2d5a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 254,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b97e983-9807-446f-bd0d-8b1503131c11",
        "cursor": {
          "ref": "34885372-a22d-408f-9fff-be6e67fec414",
          "length": 253,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "a33ae902-dcfd-42ce-9c38-91caf8ad4668"
        },
        "item": {
          "id": "2b97e983-9807-446f-bd0d-8b1503131c11",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "b7dc2f0a-93f9-469b-ad95-5788e05ba53d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5aa5024b-d7bc-4aa1-b1ae-b8dae430993b",
        "cursor": {
          "ref": "8f1a1cf4-1d1d-465b-ac0b-4fa34b18a317",
          "length": 253,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "a39a2a53-e1e1-4f2b-8ac6-5291409c3b07"
        },
        "item": {
          "id": "5aa5024b-d7bc-4aa1-b1ae-b8dae430993b",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "c583034c-2e63-48fa-8591-939750f1b62c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf18890a-007f-4d73-a14b-dc14479583dd",
        "cursor": {
          "ref": "d51075d8-c42d-4e01-af04-fc3125942800",
          "length": 253,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "7c38a579-5081-4554-9a7d-07753f49f2c3"
        },
        "item": {
          "id": "cf18890a-007f-4d73-a14b-dc14479583dd",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "f4f35661-13ed-4f56-8571-01565c433fa0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 207,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39e69e0e-2671-414c-b0f3-86babf3b65db",
        "cursor": {
          "ref": "a202f999-9246-4fca-887a-d4d39e870bbf",
          "length": 253,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "c7f5604f-faec-43d6-b78f-f9ed353c358a"
        },
        "item": {
          "id": "39e69e0e-2671-414c-b0f3-86babf3b65db",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "b17ea993-3ae6-4f3a-ab96-54e206289f0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d808308d-2990-4c25-add3-3c3a2ed5b8db",
        "cursor": {
          "ref": "8090cb05-0298-420f-9ca3-f81fad2eeeec",
          "length": 253,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "c8c8bf45-878c-4c76-b9df-4ef32b53ffe8"
        },
        "item": {
          "id": "d808308d-2990-4c25-add3-3c3a2ed5b8db",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "fc468e4f-0cdf-4303-80c6-a88bd37fdd26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52aa25bf-d0b1-4888-b063-bb9752549051",
        "cursor": {
          "ref": "549b775b-4697-4ef0-a507-53d7dd280b84",
          "length": 253,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "c5888cb3-4893-4af6-a3bb-5d6984e434e7"
        },
        "item": {
          "id": "52aa25bf-d0b1-4888-b063-bb9752549051",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "ae0b0775-42cf-4c0d-a7ae-12a3a2a01b95",
          "status": "OK",
          "code": 200,
          "responseTime": 210,
          "responseSize": 19
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:174)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:174)"
            }
          }
        ]
      },
      {
        "id": "f7061d72-83f4-46b9-835a-fffd432257eb",
        "cursor": {
          "ref": "a4f5def3-5097-4435-bdd5-b9d8e94f1419",
          "length": 253,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "91abe2be-6472-4456-94b3-d96917e290ba"
        },
        "item": {
          "id": "f7061d72-83f4-46b9-835a-fffd432257eb",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "431bcdaf-09f5-4d75-96d3-8ddcd7e638a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ad12be6-68d3-4842-a7c2-2761cc305a11",
        "cursor": {
          "ref": "8473eb24-df26-4a9b-87f6-f5849e835a85",
          "length": 253,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "5e36e671-d774-4882-93ed-25706797aa2f"
        },
        "item": {
          "id": "1ad12be6-68d3-4842-a7c2-2761cc305a11",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "66fb50fb-3e0d-47fb-af48-693883facbe6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63667d6c-2d7b-4e8d-8fd0-78df00f1e001",
        "cursor": {
          "ref": "031833a3-0079-4826-8b81-c06bbec51a5f",
          "length": 253,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "fffd0725-ed89-4f8a-8420-f072ea367346"
        },
        "item": {
          "id": "63667d6c-2d7b-4e8d-8fd0-78df00f1e001",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "a7d0d5ae-3d72-4744-85ef-24ff28938fff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec2df9c8-52b5-438b-82f9-55ed260d0164",
        "cursor": {
          "ref": "bfebd7ba-9c60-462c-8ee1-bd18ae6de4af",
          "length": 253,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "e0beca91-f6c8-46c3-a7ff-2fd1a2b05123"
        },
        "item": {
          "id": "ec2df9c8-52b5-438b-82f9-55ed260d0164",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "41c1a919-e6b0-4218-b36e-659030c61dea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 236,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6da2744-1733-4637-8d1f-e6e564065023",
        "cursor": {
          "ref": "2d00a17b-959a-487c-a274-df27a2ce6f17",
          "length": 253,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "2837e2c3-a9bd-45d0-9cf0-dc12bb6e5de6"
        },
        "item": {
          "id": "d6da2744-1733-4637-8d1f-e6e564065023",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "4b008c40-48b7-4bf1-bcdc-890a7083af21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa9e023a-f9f3-4170-b016-4afb414dee60",
        "cursor": {
          "ref": "c1d3942e-aa57-485d-bb90-b7aad60d3464",
          "length": 253,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "babc1bbc-b54f-43c1-b973-c3741a68cacd"
        },
        "item": {
          "id": "aa9e023a-f9f3-4170-b016-4afb414dee60",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "e6aeea98-0954-446d-b450-ea26f137b064",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 248,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "279f8ddb-59c7-4136-b56c-e3d88ca4e39d",
        "cursor": {
          "ref": "22ce34c1-e5c4-4b42-b0d9-46138b716636",
          "length": 253,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "e5c57af2-0108-4e04-b1aa-adf8f5820eeb"
        },
        "item": {
          "id": "279f8ddb-59c7-4136-b56c-e3d88ca4e39d",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "d795f690-9382-46a1-a572-2400abcf5a17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 273,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "253ae772-ae64-4e39-bea1-3cfe05a35646",
        "cursor": {
          "ref": "b21c932e-4184-476a-a901-0b6e4d875fe8",
          "length": 253,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "e63b9899-63c3-4a0c-ab1a-80ffd2960e91"
        },
        "item": {
          "id": "253ae772-ae64-4e39-bea1-3cfe05a35646",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "91bbd86c-4d00-460b-bd22-f9b3691c130c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 253,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c15874b-374f-4e13-b15e-8ed1f1b24b2b",
        "cursor": {
          "ref": "c08c352f-6b80-4f4a-aed6-fd09bef23661",
          "length": 253,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "7dabd5d4-4aa7-4228-92e8-40256ec1e141"
        },
        "item": {
          "id": "7c15874b-374f-4e13-b15e-8ed1f1b24b2b",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "f0a79d5e-5414-4263-9266-2964d62b10eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 245,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e56a47d2-4448-4303-b306-545e7e89a3d5",
        "cursor": {
          "ref": "71f3cc4c-2fdf-4945-ba3e-30c1d63f89f5",
          "length": 253,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "c3247992-2c2e-48b7-97ea-4be9f3857976"
        },
        "item": {
          "id": "e56a47d2-4448-4303-b306-545e7e89a3d5",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "7afed192-d2ab-4407-b887-6bdd673a1c48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 383,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5e44757-82a1-41e4-82b9-a90559f443de",
        "cursor": {
          "ref": "54e5e098-419b-473b-9d6b-21ae7c316e82",
          "length": 253,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "837984f6-85c3-45eb-82df-e6f9ee91073a"
        },
        "item": {
          "id": "c5e44757-82a1-41e4-82b9-a90559f443de",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "a578df9c-a9a5-4a9b-ac31-5227a8691a74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 274,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d526cb4b-7621-470d-bf0c-3639bdcffb95",
        "cursor": {
          "ref": "95754487-ba1b-414e-9b36-470feffc0324",
          "length": 253,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "806cdbd1-7d5d-47db-acef-6ad51df24dff"
        },
        "item": {
          "id": "d526cb4b-7621-470d-bf0c-3639bdcffb95",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "a6126c25-bdb2-4456-815b-e1958ec5c522",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 245,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94296d8a-ca50-49d7-983e-5428fd61fc59",
        "cursor": {
          "ref": "257cbd79-1aa0-4c9f-afa3-1c94e3569a86",
          "length": 253,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "9b4160d8-c14c-4576-a977-9f6eec2e05bd"
        },
        "item": {
          "id": "94296d8a-ca50-49d7-983e-5428fd61fc59",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "08eb60c7-15ee-4f74-ba09-db74a7cd1790",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 246,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3d4a694-d823-4e9b-b622-5aa0ce10e521",
        "cursor": {
          "ref": "cefe5494-9574-4893-8671-ffdc276b45d7",
          "length": 253,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "1d93454b-acbe-4b0e-9db4-d353f183e6fc"
        },
        "item": {
          "id": "f3d4a694-d823-4e9b-b622-5aa0ce10e521",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "2e9e9b55-df07-49ea-9c41-c98380ebd79b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 273,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "000bfd53-9ffa-4d49-879c-aa1af3891bb6",
        "cursor": {
          "ref": "5e447a90-c152-4d60-8920-29273ec59894",
          "length": 253,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "207e7d7a-f004-4c3f-ab64-9f2e3605f818"
        },
        "item": {
          "id": "000bfd53-9ffa-4d49-879c-aa1af3891bb6",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "2cd82a02-a3f6-444c-82a1-69dce4e28871",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 250,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c79ef1a-78e3-48ed-9884-bf7cabd096c8",
        "cursor": {
          "ref": "2054b463-bb50-419e-8ad9-f7c4171603f8",
          "length": 253,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "8c8e2b7a-1ffb-4bcb-bbe1-f1df19769f5c"
        },
        "item": {
          "id": "3c79ef1a-78e3-48ed-9884-bf7cabd096c8",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "0c320b76-7951-4589-9da3-7e9bdfcd49b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 264,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55f43316-96b2-452b-b8f2-38e2dae5679e",
        "cursor": {
          "ref": "968b33a3-ed9c-4b2d-8370-1de7484790da",
          "length": 253,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "03a40e41-5327-4a02-bf7c-f33bbba2a2df"
        },
        "item": {
          "id": "55f43316-96b2-452b-b8f2-38e2dae5679e",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "f58b73d2-cdd7-4961-a098-68ca83ec28ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 260,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3981755a-7465-4a0c-9dc6-66c63fbfa4f5",
        "cursor": {
          "ref": "dc6e217a-04f6-496f-bdc0-80da201c8ca8",
          "length": 253,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "bf7308be-8307-40c4-ae44-f6ebd5d1608d"
        },
        "item": {
          "id": "3981755a-7465-4a0c-9dc6-66c63fbfa4f5",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "fabd028a-cd12-476e-b066-2e0bb15f7051",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 256,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69ff4fe1-99f5-4881-a667-85b5e3c6f3b3",
        "cursor": {
          "ref": "52fa9196-c0dd-4c1c-956a-17e8532dcec7",
          "length": 253,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "d0c1d99a-9df2-47e6-bf22-b92097d101a3"
        },
        "item": {
          "id": "69ff4fe1-99f5-4881-a667-85b5e3c6f3b3",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "70aca737-f4b1-4b1a-a216-7547c83cad5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 246,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "feb5d716-40c6-4683-8a31-76b515d4a322",
        "cursor": {
          "ref": "ce2cbfb7-c09c-4736-b581-9695b9d36cf0",
          "length": 253,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "0d2075f2-45ff-43ca-8a7a-131641aa4d85"
        },
        "item": {
          "id": "feb5d716-40c6-4683-8a31-76b515d4a322",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "d13f191c-64e1-4c14-80c2-2555e8f4b53b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 251,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0644e13-4c71-49c8-a2c1-e957c8c05b87",
        "cursor": {
          "ref": "499f3f1b-abbf-47fb-8ed0-a58183cd127b",
          "length": 253,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "8f3b4811-2648-474a-b566-c06d561425a4"
        },
        "item": {
          "id": "c0644e13-4c71-49c8-a2c1-e957c8c05b87",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "db8aaf0b-d8dd-4fde-8c65-3f7cdcbc52ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 241,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f575b90-b40e-4259-a2cc-3b8897cbf839",
        "cursor": {
          "ref": "49d4b3ea-28c9-4463-9e50-a54855fd1446",
          "length": 253,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "ef8639c4-8dff-45cf-acf9-69df404c30a2"
        },
        "item": {
          "id": "5f575b90-b40e-4259-a2cc-3b8897cbf839",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "66cf3209-9337-4f02-a255-436fd8d558f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 242,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0690d22-b1cb-495d-92a2-779f98ed86a8",
        "cursor": {
          "ref": "8ac64690-8c2c-4ed2-87f8-7f33b35b15ce",
          "length": 253,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "6cf908eb-1773-4daa-bdff-b3b4dfa7748e"
        },
        "item": {
          "id": "d0690d22-b1cb-495d-92a2-779f98ed86a8",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "31db75c0-e7ef-444e-9d37-9a925c44aa34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 251,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae2b5449-ee34-4123-9056-f4f587128f4d",
        "cursor": {
          "ref": "3e812833-1f2b-4677-a2c7-f112ac5548e5",
          "length": 253,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "884ee647-e06d-4177-9fe5-a23eb4222d4e"
        },
        "item": {
          "id": "ae2b5449-ee34-4123-9056-f4f587128f4d",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "2d9aef26-31ba-4d32-b70b-2d4dbd4d07b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 236,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a21de9c0-0e08-4369-808e-74fcb6e21cd8",
        "cursor": {
          "ref": "e9b1e905-a99a-4c88-91c8-a69c95c61f5f",
          "length": 253,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "4f522b2c-7520-4914-b938-cbb074ba6db7"
        },
        "item": {
          "id": "a21de9c0-0e08-4369-808e-74fcb6e21cd8",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "91f47b7f-b3cf-4bc8-9e8a-85776f474f61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "607ba842-6e4d-4d80-9815-07a58d3221b9",
        "cursor": {
          "ref": "61495224-22ec-458e-9412-923f6b96d500",
          "length": 253,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "bc6eda6a-1e43-4bc8-8302-8d9aa4f6e183"
        },
        "item": {
          "id": "607ba842-6e4d-4d80-9815-07a58d3221b9",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "10e1c946-a6dc-4f3b-9cee-a836c4f43f72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4087b346-374e-4d9a-995e-8fe8c8d484d9",
        "cursor": {
          "ref": "9b202c05-6321-44b5-9c95-487f86a46e36",
          "length": 253,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "c43ef046-7457-4cdd-9fc1-745aa219e723"
        },
        "item": {
          "id": "4087b346-374e-4d9a-995e-8fe8c8d484d9",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "ac364e0c-2853-4b28-8f3f-da84a100dfda",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35ffc343-ebce-4aa2-9ce7-2cece2247923",
        "cursor": {
          "ref": "22c2f991-230a-4f0d-a174-a29d0ac9b551",
          "length": 253,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "65c45780-a74a-4081-a297-4f7ce111bd00"
        },
        "item": {
          "id": "35ffc343-ebce-4aa2-9ce7-2cece2247923",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "d250b6ec-c91e-43f6-ac5c-760fc5014c49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 261,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c76e53e-8bd9-49bc-a547-c43ce9fa209b",
        "cursor": {
          "ref": "6f0add13-d4b3-4f74-ab55-caa3e55611b2",
          "length": 253,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "b0647d6d-35e1-4c81-90b7-bd9ddd265e01"
        },
        "item": {
          "id": "3c76e53e-8bd9-49bc-a547-c43ce9fa209b",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "c5abb518-8403-44fe-99d8-e49fb18a08c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1eb71662-6dea-4fc8-b730-b76a43fb05ed",
        "cursor": {
          "ref": "4a49f0d0-4e51-4d00-8523-8be8124cf453",
          "length": 253,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "6c5525bc-78a1-4cc2-ae20-5006f60e2809"
        },
        "item": {
          "id": "1eb71662-6dea-4fc8-b730-b76a43fb05ed",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "d1656dea-7357-4e86-bc5c-54ad2a1df333",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8397f950-f1be-4f66-b3d6-4a56b6434012",
        "cursor": {
          "ref": "6db14917-bdb6-4831-9441-8d25334dd573",
          "length": 253,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "832e5292-e1f9-4703-92c5-2af9131c93d8"
        },
        "item": {
          "id": "8397f950-f1be-4f66-b3d6-4a56b6434012",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "b8720ba9-b039-46fb-9c16-d8816da29eed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea431153-5171-4afc-9744-4adaf234c525",
        "cursor": {
          "ref": "367368ba-dac6-49e0-8068-a9b4b620f526",
          "length": 253,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "44805180-5454-4804-a83c-a6b2e15bb6f3"
        },
        "item": {
          "id": "ea431153-5171-4afc-9744-4adaf234c525",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "4281f610-b857-4dad-9ed0-04093cab1f97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aec74e0f-d4a3-4bf0-954c-e293c74642ad",
        "cursor": {
          "ref": "8868a147-3c7c-47a4-b9ba-afec557fac50",
          "length": 253,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "dbe0db47-0649-4314-b6ec-a6bea24f798f"
        },
        "item": {
          "id": "aec74e0f-d4a3-4bf0-954c-e293c74642ad",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "28158163-10af-4c2e-9c6e-f88988ae52e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 240,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eddce3f3-f49d-494d-8f2e-3e578362481f",
        "cursor": {
          "ref": "a60d6b37-d241-4fac-b81d-e3d76a95db8a",
          "length": 253,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "3017b081-bfc2-4c5e-a230-c587b6ef6d00"
        },
        "item": {
          "id": "eddce3f3-f49d-494d-8f2e-3e578362481f",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "740bc2d7-25e4-438d-bef2-8ac5c37f4b53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7eeb36d0-4302-445d-97cb-d6cfa963b85f",
        "cursor": {
          "ref": "83e660e8-c392-4589-8ae9-f71d9aa7725f",
          "length": 253,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "4b879dc3-4e37-459a-80d8-a4627cfa3618"
        },
        "item": {
          "id": "7eeb36d0-4302-445d-97cb-d6cfa963b85f",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "4eb729f5-ba11-447d-a4db-7ee517899ccf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98eaf722-6e5b-4983-92f1-25e8e0147aa1",
        "cursor": {
          "ref": "b1236085-9e65-4ee2-b63b-95cf8af68adf",
          "length": 253,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "59317cde-0d3a-4fa5-aa06-6fc093a591f8"
        },
        "item": {
          "id": "98eaf722-6e5b-4983-92f1-25e8e0147aa1",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "13bb4046-acd3-4df5-ac52-cd43acd47f4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d302f45-3381-4da5-9117-16760ed06648",
        "cursor": {
          "ref": "7e7f4564-a6b7-4b93-8c1f-648437e84f46",
          "length": 253,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "fab6dbd2-2236-49ea-b4f5-1f1ae5e733ae"
        },
        "item": {
          "id": "9d302f45-3381-4da5-9117-16760ed06648",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "4ceedea8-8005-405b-8347-bac6ac257e8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49049b82-ff45-419f-bb14-759ac9c88f76",
        "cursor": {
          "ref": "124d9cde-f5be-4d92-a601-9055abc1a9a4",
          "length": 253,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "c6adf154-7331-42d8-b2fb-aabc8ddd3949"
        },
        "item": {
          "id": "49049b82-ff45-419f-bb14-759ac9c88f76",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "cd0ec41a-dab2-4ab4-b2ce-1fbdc1c4b5ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea855417-2dcf-48ba-b56a-5f71988a1fc8",
        "cursor": {
          "ref": "4304b7b4-d42e-473f-b447-71596fdb7cfb",
          "length": 253,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "7c160803-4859-41e1-b50b-95a7d733fc54"
        },
        "item": {
          "id": "ea855417-2dcf-48ba-b56a-5f71988a1fc8",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "7e76390d-5ea7-4743-8af6-bdc415a01c6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39785f85-d351-43d9-9d13-0410597a322d",
        "cursor": {
          "ref": "3aa301df-5f50-4c42-a6ca-097f9f8ce379",
          "length": 253,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "b1d2841a-f870-4124-8e1a-241e69e11ea2"
        },
        "item": {
          "id": "39785f85-d351-43d9-9d13-0410597a322d",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "aa84d38d-0ffd-4288-b2da-05787ba0b008",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4309c062-490f-46ae-a2d6-4c423c518d3a",
        "cursor": {
          "ref": "6815b80b-834a-48d8-b561-98cb9afd9218",
          "length": 253,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "6858b4ac-826f-461e-abe4-e772daa99b7e"
        },
        "item": {
          "id": "4309c062-490f-46ae-a2d6-4c423c518d3a",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "1be5dca5-f6b6-486f-b270-24d879f3f707",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d74ed78-5217-4fbf-b515-d6b3d8630abe",
        "cursor": {
          "ref": "8502f644-78cd-43c5-b0ee-9db4ad44b061",
          "length": 253,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "7b4b23a6-d876-4ce5-9b31-d7e7595a7706"
        },
        "item": {
          "id": "7d74ed78-5217-4fbf-b515-d6b3d8630abe",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "75181c7e-072e-4744-9827-c6294212934f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96ed44a8-261e-44e7-99b9-423859cd0145",
        "cursor": {
          "ref": "b33b33b0-be9f-4b31-bfcb-0e1ba3d5faad",
          "length": 253,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "588eb6ac-4f79-4055-baf8-158890650ed8"
        },
        "item": {
          "id": "96ed44a8-261e-44e7-99b9-423859cd0145",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "a622074a-3f1f-4697-8d56-151d9dab3166",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df0ebd4f-ffd1-4d40-b1b1-f6561092703b",
        "cursor": {
          "ref": "555801ea-083c-44d3-8b04-e6146632a8b1",
          "length": 253,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "5e329327-b4f8-44c2-ae43-3c536e8fb30a"
        },
        "item": {
          "id": "df0ebd4f-ffd1-4d40-b1b1-f6561092703b",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "9349131a-6c46-4025-9dc3-41ce08738566",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9849abb-7fb1-4932-b371-a4f333a06e3a",
        "cursor": {
          "ref": "d9df04df-16c6-4736-af45-680508fa6446",
          "length": 253,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "389eb59c-f16b-4bb4-8ed0-e1abe9ff9028"
        },
        "item": {
          "id": "c9849abb-7fb1-4932-b371-a4f333a06e3a",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "f7e70794-d4ee-4123-88f6-c00bff6a77a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76b67275-df88-4a91-9708-75362394f595",
        "cursor": {
          "ref": "93164ca8-9e48-454e-9a77-e7af39334ad0",
          "length": 253,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "e397ad18-163f-4e28-a042-708f8cbfe995"
        },
        "item": {
          "id": "76b67275-df88-4a91-9708-75362394f595",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "68eeb570-c0c3-4fd8-b2fa-084682dceb8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63be69bc-d3ee-43e6-bd43-4252994f9bd3",
        "cursor": {
          "ref": "52dccb01-3aed-4ced-a557-405fd00e971a",
          "length": 253,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "9fbe644b-9cd9-402c-bfa6-4c2e30c139a6"
        },
        "item": {
          "id": "63be69bc-d3ee-43e6-bd43-4252994f9bd3",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "780b7f63-80d2-4b16-ad5a-0740056adc85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c067caa-31ce-4cf5-927f-15f845d288ae",
        "cursor": {
          "ref": "5c07c929-64bf-4a6b-8343-3a92030e6611",
          "length": 253,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "d1a2de3a-e4df-48be-b19f-785161c9b09c"
        },
        "item": {
          "id": "6c067caa-31ce-4cf5-927f-15f845d288ae",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "65c77e80-c541-42bf-9303-8dd444c5b111",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f32bad6-2cd4-4ab2-9f4f-14f65869ab45",
        "cursor": {
          "ref": "97071fa6-5d99-4b1c-ab2c-743ee7cbb11e",
          "length": 253,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "e6717d4b-a30c-4296-aee9-da9355911274"
        },
        "item": {
          "id": "1f32bad6-2cd4-4ab2-9f4f-14f65869ab45",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "a25b97be-2fbd-4ead-9c20-d3e814d96663",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "443788e7-a1f1-46e1-bdb9-5706912c5eab",
        "cursor": {
          "ref": "c7ddb9fb-c84e-4c21-991e-2714e4cf0167",
          "length": 253,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "4d012af8-4f3e-4b2c-a96b-5e315d5bcb6e"
        },
        "item": {
          "id": "443788e7-a1f1-46e1-bdb9-5706912c5eab",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "f804a63f-a6c7-4082-a487-54d5e7ee1923",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60437b44-d625-4387-bf2b-311b2d5d3174",
        "cursor": {
          "ref": "4cfcb0d8-faac-4661-bd8a-bba414a34b19",
          "length": 253,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "f5a93ecd-d4a7-4730-8e64-a914d6cacde1"
        },
        "item": {
          "id": "60437b44-d625-4387-bf2b-311b2d5d3174",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "0d29f0c1-4378-45ba-bdfe-2afe70fb200d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e151e278-1a52-42f1-b686-6da6b3bc28bf",
        "cursor": {
          "ref": "ee8eb7a6-0b5c-4d4f-8301-7e560f850880",
          "length": 253,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "c8bba605-1bf3-403c-99da-02dccd3adc62"
        },
        "item": {
          "id": "e151e278-1a52-42f1-b686-6da6b3bc28bf",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "c8f820c0-1a2e-43fc-8946-5eeff90f1e59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8517dc3-e2d8-4cea-8c9e-bc87d0a81673",
        "cursor": {
          "ref": "a0cbb44d-e0b4-47e9-83df-9a17e47a5fd7",
          "length": 253,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "e6cf3593-6d27-4e8a-a2ec-3e14cb1a4d0c"
        },
        "item": {
          "id": "d8517dc3-e2d8-4cea-8c9e-bc87d0a81673",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "4381955c-e3cb-4990-b39e-b5f8123cf699",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "133345a3-5c95-4fb6-aeaf-be5d9467ba3d",
        "cursor": {
          "ref": "4cd438ef-5eb0-4fc6-b16b-bca259bbfb55",
          "length": 253,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "916cac49-c601-4572-9ce1-debfe9352b60"
        },
        "item": {
          "id": "133345a3-5c95-4fb6-aeaf-be5d9467ba3d",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "c2cc5b16-db4e-4d92-8774-18a011b0d162",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c2309e3-76c1-4e24-bac7-935812709dcc",
        "cursor": {
          "ref": "be64d35b-2ecd-4d37-8467-d7b9be7efe77",
          "length": 253,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "4580fa62-788b-40fe-9b92-5311595ff29d"
        },
        "item": {
          "id": "9c2309e3-76c1-4e24-bac7-935812709dcc",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "9a3d434e-400a-4fb2-a3f3-25037c53ad34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fbea813-25bf-4402-aca5-04ff4782e388",
        "cursor": {
          "ref": "17822883-55d3-4361-9b4b-0d6411fe44a5",
          "length": 253,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "57e71188-2221-48bd-995b-863e792bb5ed"
        },
        "item": {
          "id": "3fbea813-25bf-4402-aca5-04ff4782e388",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "d8e2ee4f-7055-4434-b629-af7e129d431a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64ee3262-3e9d-43e0-adba-b28b5f6b4f81",
        "cursor": {
          "ref": "3e88a273-2ef0-4161-ad3e-2c3df008a331",
          "length": 253,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "c44711e4-4eaf-4189-a135-447b19db5c01"
        },
        "item": {
          "id": "64ee3262-3e9d-43e0-adba-b28b5f6b4f81",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "df349f79-8aad-4709-88bc-25403cd9fdab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ab5b139-4f04-4efa-9a4a-6d5798f9d6fe",
        "cursor": {
          "ref": "5aa245db-43f2-48fc-99cb-26436eb2d084",
          "length": 253,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "9ccd5434-e7d4-4d6e-8c2e-19231210926d"
        },
        "item": {
          "id": "1ab5b139-4f04-4efa-9a4a-6d5798f9d6fe",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "55cd113e-46aa-45a4-ad48-83b5393ca496",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ddd9c7fd-c346-49f0-80a2-2ad980d59e81",
        "cursor": {
          "ref": "42157ee0-0abc-4fd1-b81a-e20d4accf634",
          "length": 253,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "9aa69872-a488-4c4a-9e9d-4985af1257b7"
        },
        "item": {
          "id": "ddd9c7fd-c346-49f0-80a2-2ad980d59e81",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "30869429-21c5-4f76-8a06-423078a71f4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf57290b-900e-4f8e-8787-c895fff93e11",
        "cursor": {
          "ref": "4e435b26-4464-47e4-af53-fcc5eb913e9f",
          "length": 253,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "02a5db62-3b4e-45c8-8a68-a86d2485903d"
        },
        "item": {
          "id": "bf57290b-900e-4f8e-8787-c895fff93e11",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "d9f06392-6977-4f98-8332-cbca7b975874",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5bf51ad4-c3a6-43b6-b121-4bb9282fb3f7",
        "cursor": {
          "ref": "5bce11e7-e769-43d4-b6b6-3ac8a6320ce5",
          "length": 253,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "5374964c-9b1e-4185-a787-a5bde5cb4327"
        },
        "item": {
          "id": "5bf51ad4-c3a6-43b6-b121-4bb9282fb3f7",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "748b5b4b-a16a-4122-b006-65e564bbfe6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "792f54ca-9810-45c8-9761-e2f504638db4",
        "cursor": {
          "ref": "26d18249-9648-41e1-a569-15330a686d37",
          "length": 253,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "dfdc73ec-3983-4b2c-8bb2-ae8ae6717a2d"
        },
        "item": {
          "id": "792f54ca-9810-45c8-9761-e2f504638db4",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "255c6267-5dc1-46f4-8131-d307dba25b2e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "093d9c46-ab62-4fff-bc10-89823474e187",
        "cursor": {
          "ref": "de8b64f3-4e20-4a31-bdf3-8ce85d317d58",
          "length": 253,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "b630edae-c7db-46a0-933e-4b278844674e"
        },
        "item": {
          "id": "093d9c46-ab62-4fff-bc10-89823474e187",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "02c2d7d2-6b81-4474-9e55-281fcb0fd612",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eeee442b-2b25-4073-9d43-c154d478228e",
        "cursor": {
          "ref": "6c0a1dd9-adf7-483a-b424-a48f4320d51f",
          "length": 253,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "9b53dc96-af57-4432-bb71-90f0a179f0e5"
        },
        "item": {
          "id": "eeee442b-2b25-4073-9d43-c154d478228e",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "89614080-d89e-4379-8538-23071c1a4bd0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc15539b-3dd2-4ede-9725-5c8ee5702c94",
        "cursor": {
          "ref": "4f988e4a-f34c-4b59-aac1-31e65b841657",
          "length": 253,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "eafc661b-2e16-4084-8f24-00713e4fbb74"
        },
        "item": {
          "id": "cc15539b-3dd2-4ede-9725-5c8ee5702c94",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "067d88da-5fad-4722-b2c7-e0ca1e1c09f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf132699-6024-46a5-a27a-8548ae6a1f3c",
        "cursor": {
          "ref": "aa640980-123e-45f0-8cfd-42e157fd0a32",
          "length": 253,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "93f19e95-fb05-4797-9f27-2c85418b8cb0"
        },
        "item": {
          "id": "bf132699-6024-46a5-a27a-8548ae6a1f3c",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "4658cd10-2046-47da-8045-eca8f1c917bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "824fdd99-a397-4fd8-a2d5-30c075d3fc88",
        "cursor": {
          "ref": "bc14dbd4-062e-445e-8b0c-f933d317ed03",
          "length": 253,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "ff1b3e5a-3f50-452f-95ba-461f30b3403f"
        },
        "item": {
          "id": "824fdd99-a397-4fd8-a2d5-30c075d3fc88",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "9a6ed55f-3419-409d-982c-ab71dcb3d4f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a423aa9e-0e61-46d2-be32-aa3341d7c462",
        "cursor": {
          "ref": "e52a5258-63eb-4420-82b1-036960c71c78",
          "length": 253,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "5efe0fbe-5cbf-45d0-9898-85736d2ef494"
        },
        "item": {
          "id": "a423aa9e-0e61-46d2-be32-aa3341d7c462",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "c622be32-a317-4723-805f-0a35f8d724cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3d4af45-b096-445f-a13c-93cbab020f32",
        "cursor": {
          "ref": "58393ef2-26ec-47ce-a4ee-ac22e462b6d2",
          "length": 253,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "3c0f06b6-ef40-4f67-93f7-c077be8d592c"
        },
        "item": {
          "id": "d3d4af45-b096-445f-a13c-93cbab020f32",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "748392ef-f7a0-4f0e-9b7c-8de7c3e9af83",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 11,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62586010-2382-46ba-8fb5-e93b439ada1f",
        "cursor": {
          "ref": "82fa3fce-3d88-4a69-a94f-060c1e2ae3c6",
          "length": 253,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "5142f550-01cd-4898-b3b2-784a96a55a67"
        },
        "item": {
          "id": "62586010-2382-46ba-8fb5-e93b439ada1f",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "cfd594a9-a6eb-4c2c-b161-87b25946bc99",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 9,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6539b526-706d-46be-802a-ff4212aa7c5f",
        "cursor": {
          "ref": "0b8b75f7-2e3f-433f-bedb-ca39082358a0",
          "length": 253,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "c408f05d-1c6d-48dd-9614-a97371ac1215"
        },
        "item": {
          "id": "6539b526-706d-46be-802a-ff4212aa7c5f",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "8ee34272-be9b-4fd8-a63e-77a4aa0ea85b",
          "status": "OK",
          "code": 200,
          "responseTime": 208,
          "responseSize": 19
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:245)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "951cd0d0-333b-47cf-93e9-5c05120806e9",
        "cursor": {
          "ref": "074efa28-4e86-408c-a0d8-203ca0ee1d74",
          "length": 253,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "acc8f43b-967e-406f-9347-af5a72009b25"
        },
        "item": {
          "id": "951cd0d0-333b-47cf-93e9-5c05120806e9",
          "name": "credentials_verify"
        },
        "response": {
          "id": "eaee9abc-3945-4606-9d29-d3c7c5078bd1",
          "status": "OK",
          "code": 200,
          "responseTime": 556,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:246)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "347129f1-6e6d-4f2c-b460-b6461e280304",
        "cursor": {
          "ref": "f97e6ee6-577d-47a4-aea7-56d473d908ca",
          "length": 253,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "422ed7ce-f979-4a62-9a4b-7394d90e5eee"
        },
        "item": {
          "id": "347129f1-6e6d-4f2c-b460-b6461e280304",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "233f1896-e9f9-40f8-927d-94c62badc513",
          "status": "OK",
          "code": 200,
          "responseTime": 565,
          "responseSize": 18
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:247)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9798952-8f22-44bb-9813-dbd3430cae42",
        "cursor": {
          "ref": "a1aaa65d-97c0-4963-8f4d-67142c6a0870",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "afcad249-de9a-4f9a-b184-a036ca948b4e"
        },
        "item": {
          "id": "c9798952-8f22-44bb-9813-dbd3430cae42",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "6330a9b1-a3de-43d2-895b-5e15e090ec3c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 9,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9798952-8f22-44bb-9813-dbd3430cae42",
        "cursor": {
          "ref": "a1aaa65d-97c0-4963-8f4d-67142c6a0870",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "afcad249-de9a-4f9a-b184-a036ca948b4e"
        },
        "item": {
          "id": "c9798952-8f22-44bb-9813-dbd3430cae42",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "6330a9b1-a3de-43d2-895b-5e15e090ec3c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 9,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9798952-8f22-44bb-9813-dbd3430cae42",
        "cursor": {
          "ref": "a1aaa65d-97c0-4963-8f4d-67142c6a0870",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "afcad249-de9a-4f9a-b184-a036ca948b4e"
        },
        "item": {
          "id": "c9798952-8f22-44bb-9813-dbd3430cae42",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "6330a9b1-a3de-43d2-895b-5e15e090ec3c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 9,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9986fe86-7b79-4229-82b6-30cb34967435",
        "cursor": {
          "ref": "f9befa00-42e2-40ca-b92c-657a425d2085",
          "length": 253,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "ccf1ad79-3449-44f0-bf78-d7cb2f5faad5"
        },
        "item": {
          "id": "9986fe86-7b79-4229-82b6-30cb34967435",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "858b1f29-d365-4925-b4e6-6869bac7aa56",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 9,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6f33632-36b6-4824-bab6-dc0a1d42e532",
        "cursor": {
          "ref": "d816037b-5ad9-45af-9a8f-5d338abb9fd0",
          "length": 253,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "144f7738-a26c-4cb3-a571-342ed9ae42d2"
        },
        "item": {
          "id": "a6f33632-36b6-4824-bab6-dc0a1d42e532",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "b3989f1b-49d6-4d89-91e6-be3a8c6da9db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "a6f33632-36b6-4824-bab6-dc0a1d42e532",
        "cursor": {
          "ref": "d816037b-5ad9-45af-9a8f-5d338abb9fd0",
          "length": 253,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "144f7738-a26c-4cb3-a571-342ed9ae42d2"
        },
        "item": {
          "id": "a6f33632-36b6-4824-bab6-dc0a1d42e532",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "b3989f1b-49d6-4d89-91e6-be3a8c6da9db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "e7a6c732-d7f6-48e2-a68b-8c1278378c26",
        "cursor": {
          "ref": "ce212c54-b623-4297-80ee-80f1e707e210",
          "length": 253,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "9e58a099-dfff-4a01-be99-0e5ed2174fba"
        },
        "item": {
          "id": "e7a6c732-d7f6-48e2-a68b-8c1278378c26",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "17a725c2-9d4c-47c8-8c2f-208ffe6cdf6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "aacad71a-ccfc-4a92-80a4-322934066283",
        "cursor": {
          "ref": "f162f0a1-6a9f-4ad1-b398-bc0c7ddee967",
          "length": 253,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "3222c743-2187-4184-b673-9568938c4383"
        },
        "item": {
          "id": "aacad71a-ccfc-4a92-80a4-322934066283",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "0daf92fd-a3db-43c7-90db-db501ea95e63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "aacad71a-ccfc-4a92-80a4-322934066283",
        "cursor": {
          "ref": "f162f0a1-6a9f-4ad1-b398-bc0c7ddee967",
          "length": 253,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "3222c743-2187-4184-b673-9568938c4383"
        },
        "item": {
          "id": "aacad71a-ccfc-4a92-80a4-322934066283",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "0daf92fd-a3db-43c7-90db-db501ea95e63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "f95bbb21-f0d1-4f54-a056-705f199d15b7",
        "cursor": {
          "ref": "351f70ba-0fae-4f7e-b751-26d77576a599",
          "length": 253,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "79e9a381-940c-487f-88bf-da375ec9628d"
        },
        "item": {
          "id": "f95bbb21-f0d1-4f54-a056-705f199d15b7",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "b6d7305d-ccb9-43aa-bb96-3d0184a413cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:253)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:253)"
            }
          }
        ]
      }
    ]
  }
}