{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "45445b79-b86f-480f-8e13-e5b7858dd245",
        "name": "Clear Cache",
        "item": [
          {
            "id": "4bbb157e-9f9d-46b0-9fbc-cf61f54a88e4",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "41511fa3-8954-48f7-90ec-b551ceede5a6",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "56dec518-b2fa-470a-9f27-e1b36d4dc57d"
                }
              }
            ]
          },
          {
            "id": "d1ed79ec-6a82-447e-8615-b6a65e788d45",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "e34db1e7-39b7-489f-8d52-1fd21faad1eb",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "0674c128-c18e-4b6d-9a5f-14e780561d71"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "7c77429d-6f7f-4cfa-8408-35e59a13c758",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "b3ede43f-a676-4639-9989-b3df4e7d9b45",
            "name": "Positive Testing",
            "item": [
              {
                "id": "173dbdb4-5dcd-4af4-976d-6593ccb60541",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d68f34cb-572f-448e-b659-42b54d2f508b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0b8d0638-fb07-4d0c-bbfb-d2510d1a7caf"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "604de146-6773-4a18-9c29-17117ec7c753",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "d8c0f7b3-19ef-4f30-b1c4-bd0eb642fa41"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "9e6db26f-eab7-44a9-9c0c-df199c1cc326",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "e4898df9-1105-4b32-89e2-587b2d3d7eef"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0f1abfb4-ee41-432b-9aae-64f6f0abe6ad",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "3aec9b17-6b2f-40b0-bf99-d92a438804f7"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c8105df7-b7c1-4881-bb8b-c8256bd3cb2c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a6656e1d-3ce9-462e-9085-27c9a6fb1404"
            }
          }
        ]
      },
      {
        "id": "51a2102e-1396-4b23-a801-6b0dd4402784",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "2c3a06fa-1e6d-4196-88aa-e110f1b5256a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a1872c43-e22c-47b5-a9f1-ed0c575d5dbc",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "6c912430-a9a2-4372-af8c-a56f721e4919",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d2685eb-812b-4023-a687-74ee9e0c2c08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "63cd957c-3c23-4d5f-ac03-c489681affc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "173ef147-2f98-45ec-86e3-6310ae703935",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d164fa0-b190-48a7-b992-eef8c02af97f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "11d6e48e-e234-42b9-9339-095b2e622ba8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c1cd826-2df5-4677-aed7-636600095e59",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75e7754e-a62c-42ba-a512-931383262fa4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f1d99cde-77a5-4dbf-bbb4-61883b73299d"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "b1ffeb70-705f-42cc-a1a0-cf9f1b7b23a0",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "65ffb70a-b767-4459-80c5-1b36d04cef23",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "faf8ccd5-64a2-4389-9ef7-8e2ed2a719c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8685426f-b2ca-4a95-931a-7412a9f82443"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "578d2726-10cf-4b46-abfd-b931f8af3b73",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7e141af-1711-48a3-88ef-95859fe7c637"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b94a9091-bb53-46b4-b914-914d4abaa9ae",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33fd112e-81c3-441f-b2b1-39955e6f2b7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "86c3a3d6-d66c-44a5-832a-e9db9ca4a37b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cde181e-9c2e-4ab3-933c-f0f9a030c3ac",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "72139470-457d-49ac-90c2-7e3bd9726372"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "fc079aac-c08d-4cac-96b6-fad3a39220e8",
            "name": "Positive Testing",
            "item": [
              {
                "id": "55e7bef5-2e0c-4969-ac9a-8a9a85678b1d",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7b7006b8-80c2-4713-a35d-da858dc12bc0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "f90deac9-20ec-4e75-8f95-7f9751ed8d2f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d1f5da1e-baa0-46d8-93af-2ba19455fc53",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "83913847-0bc5-459a-9682-5695d5ae4e01"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "734709f4-177b-451c-a48e-e60a4edfbf7b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1a9a9794-6fc4-4b71-a3e7-657d71b9d810"
            }
          }
        ]
      },
      {
        "id": "667609eb-6e9a-4ea3-a41c-7a3fdcca7754",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "2d3025b1-763c-44e2-b061-264d708599e4",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c3b94787-b0e8-4598-94f5-8c334f782fd2",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "134e4f4d-157f-43d7-9df5-19aa26dca960",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91defeac-d357-4d08-82d7-2b1312767664",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d322f22-ed33-4dfa-9475-1634719026fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "755d4dc7-2601-4e30-ac79-24ec51242a4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bf3de5f1-58d7-4ad1-956e-fa32bacfd693"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7bf9fce-01f6-415e-846b-a7ef181b13fc",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1f4536b-5d79-463c-bde9-b0dc7d00ef92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5afc58c3-59d7-4244-bfdf-22fc65d087dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12942bef-f071-4b7e-963a-47e1ceb9b94d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4664dafd-1c58-4fd7-8d9c-6481137a828d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a830963-2d92-4735-9e85-9a6be8b3a5f5",
                    "name": "credentials_issue:credential.@context:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27d3d76b-b425-482a-80dc-fc5a2e56313d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12d39c68-301b-4c3f-96d1-fe88254c32de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb2d2397-8c1b-4a23-aac3-b5659c0ac4d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must contain \"https://w3id.org/traceability/v1\"",
                            "    req.credential[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d2f2745a-a5bc-428b-b7d8-cc8507f7bf73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c83df32-1753-4c4d-bef3-143108efe297",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0d36ad6-a5a2-4492-8c97-2513cc250040",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea69ddbd-29f8-47b4-b965-d2e6d3752cfb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bddf4ad-8520-4d8a-9846-107c883df5ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a11d2aef-5d5b-48a1-b457-4834fb2fedd1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20c2adae-b573-4ba6-9ba0-f4702e22abb0",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "265ab364-ef40-4963-9260-ffac2583e4d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "058f4c8c-67b2-46ad-bf3d-48f375fc51ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb478673-e9a9-47fd-927c-384db15ad725",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ff43540b-ce61-46e5-940e-e369e6bcaa09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96629b5a-9885-4d4d-bd32-3f7241e78d5d",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99f96f96-ae03-4e82-9c5f-1ccd312abc9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "211776f4-a340-464b-9c77-b67d49d7c8ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1872947-7fac-4425-a6cb-2a4c1fb5c7cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "12914fd7-d3a7-41b7-9d43-668218eede75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80722de7-459e-4f8e-ba72-9756d003ae8b",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62f6243c-e156-45ca-b4e0-e5712c8e83e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f4012f1-c60b-4e63-b58e-32c2ce05873f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5384ba5-325f-4157-8229-7ab1106664f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "97b2b0c6-ddcc-431d-a5c0-170400046642"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20a43e3a-73df-4f39-80ad-8e1a9cf7c1db",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "513a1856-d329-49fc-b9ae-3cd317d30e35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce79192a-6974-4bc0-b409-4a0b8ce3ca25"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c22af19b-a98b-4abe-8764-147a9065af16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0af9961d-5850-4368-b9cb-f558169cca39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd51c62c-e3ef-4d80-b103-ef9c6bbd348a",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8668126-604c-4eda-8114-a55d94d141cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e13f9c3-88c0-4098-9448-1d5ad5d34551"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37bafcae-8167-4066-b922-ef791e9c725b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c1fc27d6-521c-4129-aaf1-a30f9cbddb8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc34ba2b-d50a-4cdd-adf4-d6912e6e7be2",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12af8b2b-618c-481b-b1bc-0ba598e12800",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dea26a87-af89-4ce1-8c06-1847e1b039af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d667d79-79e9-4a7a-9cdf-246e22481d62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e0954ffa-9049-4ab8-9f04-a1d03a58d31d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be546680-3831-489f-8ddb-5b9d49e02d42",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dad12c0a-2b32-4cb6-b9f5-de8e13c11b1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "516ec14a-9b90-4cc8-93ca-f5932459cf35"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f641db84-cc80-45eb-a97e-4bfdaa7df476",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5e77f350-cb3f-4cb6-889c-b0edd247eb0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43672bb0-a070-4f9e-a3a9-01c2a71ab9d2",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55a16158-d056-468e-a889-c456bc7d05ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af634c9b-8679-4eef-b6f7-dfa92a62bf47"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42aaf757-c0cf-4b87-80b3-f6965c04aa5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "60250f75-9e59-4f45-8007-2be09825d542"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06cefb75-44e1-4b70-a1cc-2fd227b28a12",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a916549a-a80c-4d19-8a76-46b7007abdbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b992465-84a8-4e11-8bba-bf12436363a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c8b7173-aa9f-4303-9e06-71b76b55732f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "faf03c09-dcd6-403a-bbb4-c1503e9cfad5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eaefff41-e354-4403-9d32-c4449e5b97d4",
                    "name": "credentials_issue:credential.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f94b1a92-4901-40e7-8782-b4edda84a497",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3b8f55a-7604-470d-9697-82e55c500d09"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d463590-3085-4965-b854-5f9685e29052",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.id is a required property",
                            "    delete req.credential.id;",
                            "}));"
                          ],
                          "_lastExecutionId": "57198860-53f6-4fc3-a24c-dba69d5c8870"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91497def-32e6-47ae-a9e0-92dd24ce978a",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1497eeec-5f11-4ec5-a873-06dbace3e068",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9bcd7c4a-3581-4a75-83f9-8ed689569e68"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d46e60ec-47a6-4478-9652-b9aaeb5a4777",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0d2e9538-7407-4b67-8a66-2d8cf88f281d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8431ffb3-6af1-40f4-a6bb-b9e643328269",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7bea352-5432-43f9-a0f4-11e1e89480f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "630d18c6-f947-4749-8a33-5665097d8911"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77aec76d-49d1-4aaf-bdcf-8012b89e3b5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2133775c-7da2-4970-833e-05ac82ae6467"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b542bd7b-3147-4954-a7bf-6cd4a01e210d",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c18a5dc-1e21-48a3-b58e-7c529aea4cd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "064187e5-fcff-42c0-ab46-25039f265fb1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4764b043-4f30-411b-8552-8e8207a415a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "02a640d1-9773-4fe1-8b8a-9b4f597bd0a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ea7f2ab-884b-4750-857a-e07f75f5572f",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42bc900b-ac6b-43b7-9e34-a46b8521d9fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ef6295c-9fbc-4f5b-a5bc-20c9caac760d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b986941c-b6a7-49fa-96d8-358a3265ea43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a7832191-c355-400b-9c34-d4f416fd4f09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07621f12-8d94-483c-82a9-1e82f71a5810",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0de7a54-ca3f-4502-a086-327a1b2b866f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16bf0204-f62d-497c-bbb4-2920e8eba506"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8324b240-1cad-4f58-adc5-e88dd52c58d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9f9f71b1-4024-4753-b2c5-59deaa6db9fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "204d60d6-679a-47fa-9998-ecfad9cc7e84",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19081c9f-dfff-4d15-ae49-9db4b3a658b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88f48eee-e6b0-48d9-9d19-e99685a3a0f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac650099-0a4d-48ba-a65f-f0b78cbd3643",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "4ceea2d7-86f7-4d12-a873-d52de973b918"
                        }
                      }
                    ]
                  },
                  {
                    "id": "453eb33e-d44f-48d6-9d6e-8f3f1b6147a9",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fdd59819-93a2-4b34-875b-e24adfa016e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a8a0a10-49f5-4139-99b0-30a129c6bd4c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ee48e18-ce8f-471d-8298-0e2a154f76e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0c1efa69-4fb7-4c24-8ad1-f40a485f96d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c17fe1e4-8c03-4bf2-a3a0-d1073bab2f7c",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c86c8fac-a32b-444a-9a47-07699025cf43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "181f446f-60e4-418e-9539-d44af0fc4282"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06179b09-0844-4d57-ae1c-37da614535c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "cc81c132-210a-4cf5-9437-519b9a50aa51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2726f069-6ddf-419c-840f-56a4a98f3692",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ce38ba9-7f61-4d40-b9d7-9386b1d11e91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b241f27-b27a-4c3d-a213-bf8c29a7ee26"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04a6378f-9d2a-478e-a486-eb6ca0915506",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a0ee2f82-a598-417b-8a28-f0fbd77d0b48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "badb236e-fd6a-435d-93d5-360420347589",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e28518e5-4d2d-4833-a94c-2657ca0ede27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90f72195-6312-4940-9f12-3b42a3129284"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43d5b1e9-556c-45f3-8a26-4411e4712945",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f683daf2-2a76-45e7-b401-61f9d3fa0be7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "816bd7a6-649d-4170-92f7-e4ffb809c0f1",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a753d1a-c7d9-4036-85c6-f95ce5f4f366",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "625e8d44-f0dd-480d-975c-365fc3d7c670"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e97906e7-a81a-48c7-a2fb-fbaaae7d9ef4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "442853fa-dad1-4aa8-b429-a496c8ae9546"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21685de3-43c5-4024-8d9c-a625fa249114",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8616caca-a200-47d3-b2b3-32d6c1234347",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a683980c-4dd1-436d-a883-40c092931e0b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab031f26-2a40-46d2-81b8-fb4e3a3cc7b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "0e20990e-f0d2-4a18-965a-f0e0dde7c9c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "845828a7-7c02-42da-ab49-2e7d8c33b70e",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3872e86e-4e1a-42d8-9bc5-49799e290370",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ed9be6e-ee13-495e-bddd-8472328e413d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "264cf1b6-eead-4486-960d-12a736c90c7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "ae73af80-a81c-44ba-9945-fa71d1591225"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20114dda-5dbe-4776-b68b-87f967d26dc2",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd7da98f-0b2e-4a41-96a5-57e75de2e102",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "571890a5-7ca6-49c7-864e-409f76605297"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6e5402b-7ce5-4975-af0c-a4c372ad063e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "04a7e602-6781-4ee8-9914-79c622d415f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc5bf67b-494f-4245-bd2e-eeee81fd923a",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0c9c5bf-375d-4f62-ab60-9d28440a60c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2446696e-9ca9-4d90-87af-60060d29fa26"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37570480-b6e5-4545-8e29-7b151663a1fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "736e5664-df9b-4984-9cef-90097aac2c49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9eae9ab4-fe5d-4d08-a9b6-765ec5250fe9",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c1dfb36-38cb-4b39-ac30-7b693d7b31aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65359c45-e436-4485-9319-3ca99b007cf7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9adfd50b-4b21-4c24-866b-93644d285971",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "8059f733-051c-4030-8924-9d42575ac1cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99017d2a-2167-472d-9787-2efaf7d60db9",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f0b571e-5ee8-44fd-bb6c-609f2ad4336b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84ee6d9b-a0f2-4f04-bc6f-818c7aedb6ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce4e9234-f93d-4694-a6b3-3ad5dcd09577",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "3d258484-bdc8-45bc-93b9-5e0aeb3ec72d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8e49506-1b52-4b62-ab31-1ae0efdaa85b",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38a35c34-2983-442b-91ef-09de150d1895",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1443899b-72cc-40f4-9fe5-361e20689da1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41db1d6d-4564-4936-9b02-fbccd4c7fa09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "3b99ddf6-6901-4dd7-a715-c2284bbc6bd6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a04d8553-b0d3-4b3f-9192-89d4a35cac03",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39c18c0c-44b0-4477-91c6-304b51355188",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c8e178d-b5c3-4065-95e8-878fbe138ac7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f9372a1-4397-4927-a2db-e7dd66df35a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "8b5f75f6-7782-4883-b3c9-40f3379d405e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3c362cf-3016-4947-9883-f954430412cb",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b831a35-4ca7-476a-9cde-aa0fcb7525dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f34469bb-824b-4a1e-a01c-c1630cf92e0b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc134d0e-c527-44ca-b583-a027439cbbe6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8fa81d1a-9cfa-4749-8e6d-3edcdb633346"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ff8024a-7683-40a5-b2de-052822ffe1e6",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea0e130a-23f6-44a8-ac64-5934efa4767f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "936b4414-44fa-48e7-a5dd-f7eae433acf6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04d241aa-6820-408e-a4de-4dfb704d885c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "eecf3225-cb53-4bd2-91b0-b9e1e34a4efa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11207c33-025f-4c40-b2e3-9fea11cda8e8",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ab49966-7dad-4a47-871a-be4542a50306",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7118d389-ac85-40c9-83fc-58f846880846"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c03b1f37-ef3e-4720-bdfd-e989a8fce556",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "16366777-01fe-4954-9de6-058543d693d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80e1fe42-e2b5-4f47-9ee6-e6e02bf17f84",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fef58d22-d9d1-4d1c-9d44-93fc4da3891c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d44fe61-f57f-4850-bbbf-57fb6c92b20f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98276030-af3b-48c4-9ac7-e93650d8f05e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "850fc41f-71c8-4fb6-a8c3-a9795c0b6ff7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9480692-076d-45e7-abc8-c5452c5e416c",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec980ef0-ee5b-44e4-907b-3c29796862f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "752dd6f5-f3c5-4022-bf34-9bbf621806a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9084e92e-0281-4626-b634-74da76b1f459",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ed2bf7b9-757a-416c-b536-590367f0c4fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a1c9700-b457-4283-94a4-7f38dd00cfe8",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7c5a9b8-5e4d-41a3-a0ee-cb36219aff50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8cf65879-f0ba-47fe-8bbb-f7f42c433e5c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f34b0265-783f-4a72-b4d7-2c409e5dd060",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "87fb6cf4-e5de-4edf-ba9a-cab34bc8faf2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26442992-544d-4ede-bb1e-5d498e5551db",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ff3fa25-8af9-4554-9c53-dbf4992e45c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58ef9b7b-6d5c-4492-a78d-42cccccf699f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77da24ae-b306-4ca5-a66c-1bc0e2cd2c65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "5083bb4c-b5c0-45a1-b3f7-eb180d1d9a70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "833a488e-5d9f-4505-bcf8-773042e98f8d",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0975666-b504-4406-afab-7cd94c2628ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13c34259-d567-46d5-b36e-b0adad850240"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7f91d65-0e8c-46f5-bc85-605db08d7a51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "e6a4c8bc-00ac-4d11-98dc-72ed2ee09077"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f63c3a1-f88e-4657-825e-841b00c4c8d6",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a95abd4c-9340-4b26-9a2c-920cb6c1def2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a86579f-3e98-4d43-ad0d-19a7078ff43b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab9368d5-814a-4972-87a2-c9bfa82d4dc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "95fb73df-fef9-42f1-b16d-5f019fac25d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da92d42c-038e-42fc-bbc8-1aafd0207fca",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12d84724-2554-4e1c-b87a-887d7c3ab1aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f8e4604-caa9-4963-9f60-5e8f2019cb35"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ef3bbc9-2a68-4f36-ae99-78dd2723da01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "d7c2fb66-3d7b-4c6d-9e26-0b09874c9cc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6e20bd3-37cd-4bda-8e8d-f2deb27975c7",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd6f9e68-d4f5-4364-bb96-00db401cc5e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac0a2eb5-abb1-40ee-a875-cc0bc1da03ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef487a4e-23f1-46a7-851b-1a74efc9c5ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "721e9293-8c51-4e87-a28c-02c83b39c859"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea5b78df-3806-46bf-a1cd-6786cb90f771",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3d93697-ec4e-4430-9847-59ca3d0c5389",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f98d677-2efe-4106-91da-a0fc606d1e63"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c241b08-9a29-4f76-bf57-9102e29221ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "298eba4c-8a90-4129-ba78-da3c9dc1da03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dabba494-2349-4088-8a44-2d4728eb1ced",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd4901d3-8166-4cd3-ae5c-404e54bbff9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f76a18b-a585-48da-b0ac-27e564c2d825"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9244e02e-5a9f-4c8b-85ef-cda9a0de42d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "51f940db-5e34-4d71-9d9a-f7d80f6d9f12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfca20fe-3dbe-446c-a121-f521b0d6ee22",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc952d59-7e89-464c-ae3c-77bb2ee17b11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f77ba9c-58b7-4305-a122-9b0eb370462d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9483cba-69df-450a-8b2d-a3e2a921406b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "349b0c94-3ea3-4ac6-b31c-7c00e2a6dfeb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b8f609d-b374-4bd0-92ff-6aec5b7846d2",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97206c36-cfa7-46d5-b69c-81f4c37b8135",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1a2a590-3136-4942-a697-946ce908d375"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c29827e-b7b5-4c49-9d9a-a7af60fd3acc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3f1d114e-f26f-463b-9122-9ea8653b1de3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b540224-9e01-4a37-9e5b-f4a0c1e625b2",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b06c38f9-dd38-4ddd-a0f4-faceb2415131",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d768a486-3ae5-4a1f-850d-e7f60755d19d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcf9627e-89a3-4974-94f6-8ac11d0db754",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "70a24dc1-7fae-40ea-97e8-3295de86f6e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d885acbe-bef5-4dbe-b751-07271a7ab245",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df327d5d-98f9-4d83-9aa2-328b913a2a76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b75a2f3-d654-40af-8f50-e1250d1fa6b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4838e188-3cc5-4566-a05d-ee4228f29034",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b2e489fd-1d59-4da0-8e0e-a8583aa35283"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4618cba-e555-474f-9d9e-3a656052ca0c",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b60ac93-098e-4605-bf71-e72b27d053c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8599c5f-13fa-4dd0-b339-04c8a69fc066"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9777059b-d32c-4f15-995c-22c5817476e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "645cd67f-78d2-413f-b08c-d2626b83c63f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "201e3e1c-decd-410b-928f-536c6650431c",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d4263e8-1e77-4f40-8f92-0741ace3231e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "56e90620-8f72-4cc5-9625-bc97f5585dae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c65430a-5752-42aa-9913-745b140fe771",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "55c04456-8ae2-49e5-9a67-1ecf812b2ffb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "637383a5-db44-492e-a1c1-16d0fc23d0a6",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c905ac9-e25e-4acd-9ca9-654e2d775535",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f750363-fefd-4db8-a591-36bbb5a1f910"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a2618eb-5713-48e2-accb-b3619ce0c34f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "e8719779-1b99-4bec-9383-740e1b5bfb8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "beeddb13-6a9d-4fd2-bd32-415838e7ab08",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12648a4b-2768-4665-bb7f-732307de28b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0b62996-8962-4f14-a9fc-a491952fb314"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09ef01fa-2419-4a00-94b0-4f970932d712",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "af958011-3002-479b-9c94-a1cb33025f57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3a2e510-2f5b-47b1-ba5f-23c7353473a2",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fcebd439-01f5-4625-8c22-bdfb19857902",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e9cd83f-3778-454f-8390-5877b97fc99b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbd50eca-e64b-444b-a245-55e8434a8373",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "54779c0a-1132-4854-9c98-c9f621d62e3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d00028c9-7664-4ffa-bf2b-dc234107cbe2",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a824f118-fa49-4d7b-9d8a-940044fe2d20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bfe76fc3-c920-4d11-9437-29f06021712b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf43dc96-2224-49a1-8431-dc0c3be6fd08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b9e1b867-1448-4267-8d23-c56f23a5b6b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae790a64-bff8-45df-841f-296fcaf9f7d5",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af860f82-63d0-475f-940d-6c5a0800e8e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39257f3c-acd4-4048-93c5-d2cc0d36c741"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47653446-8203-46a3-9ec0-25a6eda48f76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c24e62d7-f01a-46b6-a6d6-61fe31e8cf15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03eaad0f-f503-444b-9eab-46382bce2d23",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2853ea1-2ab3-431f-b58b-c1f30240b97e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4dbd2a9f-4b5b-406e-acb9-7500ac28f432"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "becd6928-bb98-44cd-8a5b-b3bc79431522",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "8863a25f-9aeb-4585-b6ed-2f755abc9ade"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3200cbc3-aabe-4ccb-8d0f-0128b702ae36",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10afd861-761e-4718-9653-ea2e528b212e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0c410fb-b2db-4219-a60d-e7bbb1ac639a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb881503-418a-40ff-9963-deffd81f7039",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "abbc6ed7-bd31-4423-8403-f349970349f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef543b6b-a935-4663-8d79-784c5303417d",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb69898d-2183-478c-b0cd-c6a6c8c578c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c11b2a69-fc3e-43cd-a035-02bb58a2a236"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72506731-5423-4d82-b78a-4c46b77f88b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "e4f04f88-17ec-495f-a1c3-fe572b624906"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21e886e1-87dc-466b-923d-f1759282f731",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3ec03f4-af02-4d56-ad7e-b466a492a122",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c70525be-cd12-4b29-82f0-67be5a7b9f14"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3c338b3-ebc4-4229-87ab-4bdbe60cc362",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "8abb7231-c874-460f-8950-30ea542025a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2dd2ac2d-6590-4ebb-aadb-f943005f7b7e",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ada605ad-4f9e-42e7-a081-dc841d6e088f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29a6b15c-2c31-40ec-8640-999347e27665"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78d8d463-d425-45e1-a9b3-b06cfcb1c3cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "e1589e11-e28c-455d-a491-2393628e9c30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8073f5d0-ea3e-47dd-b1f9-291d3238f246",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8ec97cd-938a-4103-a80c-9060e473b93e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50f44ae4-8ae0-4db8-a687-6f0ff0442ba4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fbfa3c9-e6ed-4d16-8bd3-7e1e489c98db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "af69df26-527f-4631-b44e-39d33bfa5f06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06a2033c-26fd-4909-81fe-c639c3969d66",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bde0761-bf53-4573-8635-4c80051a5d3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26984ecc-e3f6-4065-bbc5-e24c50f32c0a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8b11a09-5ee7-4adb-adcb-6a66c906fc63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "dd1aa42a-525b-45f9-93ed-aa7be78411c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7816e658-4fd7-4ddd-81c2-db50bf3f1df7",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc77dcb9-9cd3-4a2c-990f-d341bbf40492",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06e66c14-ffd7-4620-bd82-78a9005fe09f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a6ac9b6-a056-4384-8e33-4a722d82970a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "e0f5ee23-4251-4bd8-a6e6-d431bbb977a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bde80515-b71d-430f-b337-d00a619d152a",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1fcd7c5-87c5-4eba-acdf-6c46b40ab1e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7dbdc3c8-8051-464c-81a6-9c419ed80d07"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2bba9b8c-f22e-4617-a96e-89b1f6ed1666",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b0eaee9a-8958-43bd-b6c1-ef24a0b7983a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1d3e4ac-ee27-4479-8984-10fb1578b783",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d6ea595-519a-4025-9d8e-0a1dab2f3db0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0cbe3159-fba8-4621-91d0-60f27d216f81"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "395dc8a3-27f0-42cd-86d3-c4ea20c90926",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "956eb358-e0b9-4bb4-92c4-612d7b1525d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c852f56f-fe7a-447b-9784-f84dfcaa1815",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4747d76e-01be-49d5-b23c-bfb9c4d6e0e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ca8bcc8-a9a0-4128-9db4-378eab242e07"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb79d02c-f82b-4e53-84be-c902e2cbb20c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f6a27dea-9069-487b-abc3-867d5ddfda32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6c0b45e-a487-4c00-8688-1d81abbad152",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f9953df-5c7f-4d72-a957-071d657d2f12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6b97092-2eaf-4417-9d5d-7d5398653025"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67145850-def8-4d8c-ac3e-728975dc9eec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "941bc0e9-e6f9-4c08-b86f-e99b9fc2f21e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69ba2d8e-0024-42e6-8198-344a28eb7ddd",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b41baa0-35d3-415b-b02a-b63acd6a0b5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70d9ce0a-8387-4014-b66c-015c916e0730"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48705d28-e560-4d93-bc65-3d3d5d79e976",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "72a81d7d-17db-4285-ab4b-37461160eae6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3c7a1e8-6527-478a-b96a-81e6aa5ef0c5",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71556590-5ba6-47c2-be4e-c66e7c8a908d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9873a66-fb50-4b45-a9cc-5137feb22b5d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99ca856d-35ad-4568-a466-9a449d2e11db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "4d36bd5c-d177-4426-a125-b783f077ef66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a139623c-e1a3-4313-a2c8-8377f3147c7b",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e22eb3e4-788d-48e2-841f-3b939598b5a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f001f8f4-2e66-4723-9999-0e6c6cc6ddb1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "441419d3-59a8-4853-900a-7c62a8ddab39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "50bda1f6-c952-4bbf-a160-da951b8a0919"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad7d016a-6e28-40b8-a19d-69897a3a8903",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc4f7ba3-81d7-4f8a-b0b6-d9f5d4d80c21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47414e6c-b699-4548-9c54-5ed12d11e87f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76d1db49-0adc-4c40-b2a8-99b916b84ea8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a2712637-0c8c-4119-8369-b3b73e4f3093"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f08cd868-4ab3-43ce-92b1-10f70fde70fc",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60a41311-3e86-4b35-8829-34360c8bc677",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "709eb675-0fc6-4dc0-8edd-451e3a204da6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0dda696-af9b-4a8d-9aa6-2638be171b50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3ac0fc05-5b6b-41c2-8c3b-8c3ed8ab193e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16d7b0ef-122b-48d6-8181-daede9a74448",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f89faa0a-caf5-4033-b7ee-492ef4b8467d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "135fa0aa-a19c-44d1-965c-0d2fbe66dc88"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30bf7b29-f234-4a89-a765-d0f90fc771d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "faedd352-155e-4107-83da-bf7d1593063e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cfcba09-a1e0-46b1-9265-fbc6b2fbf8d5",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ed9a116-2a52-4c76-bda9-38118525b10a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "677732a4-3ad7-455a-bcf7-af1152bc5444"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74ee3456-a1e0-4ace-b2f1-a10a96e790ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b443cd35-0a07-4d1f-96af-0ecbc335ab79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19e64c4a-fdca-45d5-b754-82580abe267c",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1707060-143c-4379-b3e3-fe533d6d2f34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d69a765-5790-46a1-aa4f-04371b23f6fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d165c01-7b43-4c84-9444-73d973c181e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "21910771-a2c5-43c2-89c0-d10444920b59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a594d808-a1d4-4e48-b56e-fb441bbe7308",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86be8686-3b18-41aa-a208-c1d0169dde35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "983801b1-e828-4a51-b678-9d04f23bb43e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18629d52-8108-4b78-9fa3-6b82f4c3b0e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "68f37e7a-883b-4c46-9f21-6644a5b92e1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c3cfaa6-b80d-4c9a-b9d6-d91457138aae",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f8c2083-675c-43b3-ae43-43eaa6bf53d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5df7d44a-1228-448a-b623-ff2d056e0936"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc52e43f-9fb7-4a42-b86a-78527d7b9690",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ae544bf3-7d11-4b9f-8f23-db133bbca165"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e87c2031-ad8e-4a44-b47c-178d4a1cb5b0",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c62eb4c2-e228-49b2-a092-56f47bb65318",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1402580-5a6d-418a-8213-87d57b63a73a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f09eef8-6dc5-44a4-8681-0c743d4f3e67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c83aac98-dd06-4598-ab11-ea32b978adb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67cc3a94-47f9-48a0-bf0b-168e982a7628",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76b2adf1-669e-4dc0-b4a4-c6fc0ed89955",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f009b8c-a80e-47e8-aea2-b6c4b4d902b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96535396-0507-4a08-b228-9e9ed4d9daf6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "0dd50ef6-bc66-4a26-9636-5870ebd02a2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9090683a-2265-4994-9d36-b208bf78346f",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f744586d-01a8-43e5-b50a-778b33a7aa12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e8ed928-1de4-4f4c-aba0-dc91a8bb5882"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7994901f-cf0d-405b-86be-f45434633b54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "529fe011-17c4-4ff4-ba58-cc423c997f78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93be8a76-d013-4aa8-be47-7661a68684ba",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71965357-b2d5-4ae1-ad23-a5d80e19a65f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "255f9e3e-643a-49d6-9612-0b7614034fc2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70f06510-9816-4bbb-adf8-68f81b2c113f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "9635da4e-6395-4ee1-a09a-25c6936946ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b38fb27-40c4-4b72-b1f0-43007bf7eaf1",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d2023bb-a8af-403f-9dc3-f88fa8f084fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4fa8457c-6098-46ae-9c47-e088259a19f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d5c2903-9cf4-4472-85db-77c40d632906",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7ae91bc4-ed88-4466-b386-d9de3875fa0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9da2bc6-bece-4fa4-9d67-7181e39eabdd",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "918390e7-f67b-45b3-9bdd-32346dac1732",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c1819f0-1dcf-42dc-81ee-e5928938a7ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a9e4c29-9aa9-43ea-9127-a3f9b8822f26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4d08817f-1a4a-40ca-8189-8e7717f2ba1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e57b52a9-fa66-49c6-a31c-5af2062c9199",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f597d0f-cd2a-4e4b-b2f1-40ba1dac089f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f55069a1-a10f-4fbc-8a3e-3611a262c18a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a6e944c-2166-46a4-b190-efed5d666097",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7a920e81-ebdb-43aa-8b9e-d236df4fe157"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3b479b2-15e3-4264-870a-ce51fe37c03b",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffd692ee-2bb2-4904-8d04-7e95ba2a0978",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d8577fb-f811-490b-bbbf-d85f6dfc807a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e4ca96e-2709-4688-903d-28a5031b1e65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "6ee3b35e-0b27-4c1d-8b48-bfaee37ca463"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c175a3eb-03c0-49e2-9580-f78c95abf2ce",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6153dcd1-512c-4ad4-b0fb-85f03fbf41ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44372082-c8d9-4bd0-970d-8a1457d09351"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08883ea0-d829-42e5-a02f-a6a32ac28859",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "1a4e30d2-7ef1-4dd4-a016-9688469d57a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbe09e98-ad0a-454b-874b-f0c367734115",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b26ec25-bc31-4013-ad13-d42417c0390a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3304671-7648-4616-946a-c972f739d0af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65ef5478-9631-4228-bf44-1847de61e3c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "0ae06ffc-fbd9-4eb3-b838-9726f503254d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa1d8e95-7bbe-42b2-9dea-3ee7560f2c89",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0bbfc95-a6a1-4534-857d-63ef68e31d35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "516dc431-e690-4d87-9051-508b8784503e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bff586bd-e541-477f-a09f-9d3af8fb31dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "876b0d5b-1cec-45bd-bdad-ef0a0252647c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cb7c7c0-7652-4c44-b662-24a52448feb5",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8debff1-5c04-4d23-9582-428b406035ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "132e9b10-a614-4da8-ab39-04892d535214"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55d2bb07-6cfc-4aba-8f3b-8d432848be73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "abb8aac9-2ec3-4c26-b788-c1181f64f88b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb518785-b8fb-4c1a-8e3a-a76cceb433e9",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "878499f9-6029-4b2a-9ed6-55ccf590a1f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da5b888e-2f0a-4c7b-9816-6d1de4a8d35a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f67f7402-baac-4bb3-b044-a5c13bb33d2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "7465408c-7ef1-48b7-b0e3-c43eea123a06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "236125b8-3163-428c-8f75-1ba3feb253fe",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfcc200a-9458-4703-8d78-d30be5be7beb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bcae36e7-8e61-4dd9-9a11-0f461a65e5ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1406b60-57fe-4000-9e68-421f2c041515",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "b1138c67-09f7-4acb-987b-9e3aefe6d2a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fcb5e0e-aa54-4654-9e3a-093267da3e42",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51d9e880-9194-4e08-96b4-b8bbe58ba459",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "f8a2c2e8-ee95-4f6f-9c2f-b57066bbdf42"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c623b3a9-dc62-4f79-a0c1-fb77ee6b5a28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "ccc73919-2a6a-48b4-b463-1e79cdcee638"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "b658f019-3e5f-445e-aa2d-6488a43a6886",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f8e02a3a-b195-4c2d-89b5-6a9e01dfd6fa",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "070e790c-a2bd-4216-b871-2a0a5d0af9b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a3592866-507f-4ab4-99df-e9a6dd9e18bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fa1be9d-0544-43e2-bc59-0df7c8a7c263",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "1002a83e-0013-4201-86cc-fb0609f3a20d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6d30be6-9c8a-4c61-aaf6-86f8fbae6756",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7448d4ad-4716-4cfc-bbb9-568f65dcef08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fb561e7a-5882-4fbf-9c58-3a5e9d596606"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcab0079-e3fb-4854-8e70-c8f8601f198c",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "32f3d6f7-9968-40a1-ba16-81ec47c4bcc7"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "91a03130-b65b-4b76-9e66-58d78e9ca6e4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8a10501c-f619-462f-8577-7d43fa80159d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "eaae1990-4b2a-440c-aa37-0fb3dd9a0821",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b65765a8-c6a9-43bd-9fb7-eedb3e0c2a2d"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "25a35b3e-a003-49bf-8ab4-7d1d5a38b6ab",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "9c0d277d-0502-495f-8559-2d3f135ce093"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "1052d146-77f5-4a36-991a-2f8450ec7f6b",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "4e753249-e893-4f30-b69e-64f0972cb267"
                }
              }
            ]
          },
          {
            "id": "1c5997ac-5c67-4063-a5e3-fcc74107ef70",
            "name": "Positive Testing",
            "item": [
              {
                "id": "56c371ee-3a34-4dc4-a280-f2041a1a2326",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "aece10f9-66d9-4147-96f7-8e4055e44abe",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "827c02ea-2e0e-404a-b09f-2ace5d3be6b6"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "29da3796-d818-45b3-8260-5ce983c9990f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "b4a5f423-e2f8-406b-83c6-ac0be3af5ddb"
                    }
                  }
                ]
              },
              {
                "id": "3ddfd227-d8ca-469b-98fc-c7d55205becb",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "158a9ff6-8cfc-42ba-b53c-89b877295b00",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "422d9856-5cdd-4341-98d3-547d16b9f7c5"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7c276948-6aaf-4138-81e0-71defddf41a9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "bc889c19-9526-437c-ac3c-d614cabc2dd8"
                    }
                  }
                ]
              },
              {
                "id": "a2669dd6-2ce7-47fb-844c-7126e8c8635b",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "da825b8b-3f8c-4ad1-985e-e85cea279d1e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1fd27be6-e2a9-4182-ac17-3a66050b253b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e2a1827b-0c8f-4c9f-bc55-77b21964a1ca",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "88568d75-318f-48d1-bee6-e38aa6b8f80b"
                    }
                  }
                ]
              },
              {
                "id": "a1454b3e-73ec-494c-a988-1faf8aa84b99",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6c070032-4eab-4788-bce5-b85b1f29dfbf",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "09c6dc31-1dd7-44f5-90f4-2586d1c369b3"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3d8b0e4c-c11d-43a0-a606-951b1453cff3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "d67e5003-e8bd-44fb-834f-b1f47e080e67"
                    }
                  }
                ]
              },
              {
                "id": "4ab2325c-6874-4d15-a340-208e7be48d34",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c90bd75a-07f8-4fca-8ed4-3e49ec2ab212",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1ac3e9d9-ce55-4b43-ab13-9c2b3193f09b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "151351f4-a2d1-4ffc-98a7-7d8012d90cb5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "dbad8db5-0d01-4280-8388-42549f15765f"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "dce4184d-fa0f-4066-8bff-a1aa3a9d08e2",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "7ccba4ad-df1a-4880-b43a-5bf0782eec92"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "1a887d3e-8ef1-48c3-a06f-080e5b35204a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "697d07a2-a4d6-4c1e-99c2-613fd61fbfe0"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "cb925a1f-292d-42f6-998d-488e03947bad",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"id\": pm.variables.get(\"credentialId\"),",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "60e54bf1-6937-4bb4-af3c-d0418e6e6888"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1ea70c9d-23b8-4dbd-b9f8-a7f23ff1f981",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "314ceb8c-e44a-476c-8849-aaaaf4b05778"
            }
          }
        ]
      },
      {
        "id": "c02d8501-e26b-4239-bacd-a5b8767047fa",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "ff4fffe4-4095-4778-b390-f1d9f509c0bf",
            "name": "Negative Testing",
            "item": [
              {
                "id": "51813adf-75f5-4e51-9ea8-3c77393c8a3a",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "585e187b-2cee-4d4e-b262-9211f3eb5afe",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b36a4e07-19b2-4059-afd3-785fa64ae764",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2995221-efb5-4b80-967a-f9d4cf3fa108"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e162889-3eb1-4018-b7e5-e54c4283a804",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "23b695cb-3c8f-4989-ac0f-7dc706297ea3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d11a6ee-51f0-4b35-9914-419e77673866",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b103ed3f-b007-47e9-b80f-5de74879c020",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7678424-1ea4-4f60-b557-ef8baece3cdf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7a96ddf-00f5-4b6a-aa50-2a28f99c5d61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "0a3da016-cf81-4640-99e0-c58a824cca4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "583017fd-dc4a-4478-b3bb-f981140ad20d",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7db26d09-8013-4fa0-8a17-f4406fbba3a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50a56ea3-4cbe-4a7f-9834-4b64fdc4829a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8aa2fc96-6939-4029-8c44-393ab71d1823",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ca1b8e6f-9041-4ca8-ba84-e0498a451d3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71837716-7ced-442f-8687-1eaacc17b153",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e37a1db-93a1-4dc2-b855-0e9a47165c45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85c73a18-3175-4487-8d3c-f72ef95b36a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74419ddd-6ba8-42ce-af75-b6dac34655df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c917b3a4-7b2d-4143-b4ce-50d60b951ea4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ff931d2-4027-40a2-a099-886b2541d53e",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9869ed66-c27d-4e54-baca-b6552dd41f13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "637fc6b2-a442-4ff0-a7e2-504cac52e66b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19d4a43a-7039-4e3d-ae8b-fb69270547d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1a3ddb97-29d5-4932-addf-47fa78f240a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca7ae16e-1694-479d-9b87-458e5b27bfba",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "725f7f50-e5d0-4fd2-8a82-65670e36507f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b81e417-f0cb-468b-b1b1-db1951146dca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4bc77e0-ed8f-486a-ab84-7f656102b0f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "5913bb52-50f1-4c97-a6d5-25803758be27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7d49b74-e900-49b7-b482-3065a906e393",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70a3aad4-3de0-4ef3-9945-9e996482652c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c4b04c7-3ced-4532-99ac-8981fe2cf1e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eef3ad69-698a-44c2-8ff9-a0583c132440",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "5b522161-0bcf-4361-b9c3-1f0c409975cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f95c898d-9a01-4e81-a801-86dfd9bae88e",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "844ac477-b8f5-4344-9a02-f443f8fba633",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13e41aed-f2b4-47c3-9180-5036c0384f03"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "682da950-6c4f-4ee6-a62f-ba3adb3e4a54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "064afd4a-d22b-4173-b81e-d3d5a0e8c635"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9def2dd4-4608-4e7f-b3dd-315d2942e30e",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c73d1510-1979-4b96-b71a-ef3f99aa50fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8aa7c89d-4ae8-4f8e-8214-a38094064a15"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d419c838-b7b9-4e53-9582-0fbb51b0f5a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "108b79cd-16ab-4a1b-8243-e202244332a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4cf7613-b4f8-4a64-9e0f-0136093fe62d",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d40727d-f29f-4dbd-a0ae-e5d769997638",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "775718ac-f859-4b79-ad00-ef91142977d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2779e033-ffc3-4488-a9da-8eda5ce77059",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b44a063d-abcb-42af-b008-162316a23cb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b90128c5-c4ee-4353-889a-ad7d38e49615",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed802182-f038-4a57-8273-ac2cb07ca207",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92f5cd48-3b1f-468d-b23b-23822a9598d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "199b21de-0f59-4e63-a806-cc3867409b75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "3e4cef6b-bfc3-41c0-8458-df4f4608e8c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b1cdcd9-3a7f-4585-9ef8-e5981a6ff2b7",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1455701-6c51-4446-8830-a5b40804b9d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "948a71ad-4c4d-4573-8a20-fefc869cf28a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "febb176e-b0eb-429e-b109-1f825bc9905a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "df523fc5-1917-4953-b1f3-b7fc7a22d6a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47c93097-48d8-41b5-bb8a-9f91cff76178",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c293cad8-445d-47dc-b9cd-c0463f9e9ac2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f8ba5a2-5e56-4c46-9863-b8aa9b5d11dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a95836ad-102a-4ac6-b4c5-6c35e7f8c3ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "1b3f3d57-a73e-46d1-8140-92d4887a1898"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05b7e815-d87d-44e3-981c-24067084b2f9",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ed23bf6-68b8-42ae-9d44-4cbd4c919047",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c568253-1c27-4c75-880a-aa5f29e653b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d570d398-d13e-4f05-be60-8dd152b4094c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "f19131c3-8d11-46c4-8bd8-2a0d1321a385"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12c0f2a1-1de5-4319-8c44-c3b0a677dea0",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d47c0eae-4d3e-4ef6-ae80-ad9b0e4933eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "888084d0-a487-4c99-8b0a-54548b78f5ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbfc06cb-31e9-44f2-a7a8-a5ea016f0ed6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "2db74d19-9405-42c5-937f-17c0a689ecad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5cd01e79-5eee-45ef-8f4d-89cc837b7035",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13a4387f-3fbb-40e2-beab-e65815b742ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50eaceb5-a67d-4afe-a6fe-826788d7c5ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e41388b7-026b-4332-9f1a-1730427283d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "8fe5ef18-b790-4e62-a7ad-546ec36df210"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9c72b93-fa81-44a1-a709-ee954d33fb62",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "985bd898-7e23-4762-855f-295005dcab3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cbd1b1b8-089b-43b1-be97-54ba791895cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01e7407b-0c39-4fc7-bfd1-ad89cd290d4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "a16202d5-e71f-4642-9567-71240abfed64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44e132cc-39ac-4d3e-b2eb-0cfd112a608a",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13e01f5f-6e50-4f6e-bbc7-00fe1fb790cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd6a0f53-18e2-4ae8-b0ea-7a2e552fd281"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b07a7720-6efc-41f4-8183-fd8d36836740",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "e5ab9646-aa6a-4ecb-be5c-c732de78f8da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed76f175-b751-423a-b982-deff7bc52dec",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52166d4e-aefb-4103-a00b-4fd5ea72d3cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32a8c038-fada-4711-9ed4-3db5ab2a8be5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b3931b4-c2a1-44a9-af40-421a1c723b41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4a04ae01-99f9-41d5-8ec8-4829d80378fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27cf92f3-3c29-42b4-b74e-bcfeb9cd6128",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1d7796a-a8a1-4df0-a396-4962a189ec05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "505b909f-40e4-474d-99b1-252e7d48295c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce1c6cfd-4f8d-4391-8eca-7c6aa0f72045",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "aa577e6f-dd99-4ed5-8728-3cbaa99ef06f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d364e0c0-b951-4bfd-8e22-cfde53e2a03c",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5dc5594a-bd99-445c-a3f3-9bf72c1ec15b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6cf436c1-daf6-4c5c-b8fd-90fda9a2ba2e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a50aae37-7637-4cfe-9ab5-83c087c6b249",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "09379b7c-b0b9-4ec1-987e-3b570012be90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d859db61-0156-43c0-8314-69cef56fdbf4",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ee0c8d0-7602-4c87-845a-9c4b186790ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "659eee7a-98a3-43e9-8957-29651f004c3d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd437d8c-cc36-4f6c-80ce-d72cf91d8979",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "671c03de-b862-4ccc-a985-3c91868616c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9d693d7-c933-4f44-bc1d-8c8708be3b17",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1998882f-11ed-4df9-bf06-b6bdac4e9e17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "739af18e-2b49-49f2-bbe3-23f941647bcc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba748b24-549e-4e86-aec0-6221478801e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f69aebd8-7b25-4a05-b77a-1b560f7bd83c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "717726b7-dd45-47ee-9d2b-17c2117d6581",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ff99bb6-780c-4c05-8d2b-a6694280df08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d540f11-4693-4e07-9c6a-a0e1b7f0463e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98bac334-1d13-4e40-a810-63cbd045b424",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "43f7e79e-02a4-4dca-967a-d14470e6809c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e5d6936-facb-41a4-8f74-eaec69a0a730",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3cf4dfd-3fb6-45d1-83ee-a35e10fb9797",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b641166d-bd50-4614-8b30-a75a5239d3bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6cdefdf-9a10-401a-977a-bb016aa9fd87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d276404e-323c-4c2a-88ca-0f74c7fad436"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa57c43b-b52a-42dc-896c-4e54f09b1263",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0417e081-4a77-4226-a616-609ad540e318",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "236e3598-da98-4d94-a459-8a217d205c57"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06dad5ae-f922-43b6-be00-b7316fd5ef47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "269e7654-8248-4a50-a9c8-66e910240ba6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6be47b01-cbd5-4e1e-abcf-24e8f0d80a13",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91f6df59-acc3-47e1-bd71-fef338d395be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "faa178a5-5497-4db3-b13e-5187f2f3f259"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "692c141d-0fbb-46a7-9c59-6c9ac9a6ed0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e435b353-c49a-4c71-80f2-69c526baae30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6341d995-a188-418e-af85-c8068500577d",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ad4fc3d-e80f-415b-81e8-3f2f33dd1309",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f089e80a-5202-4ada-b41e-92889bd2c168"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d97af6b-5d54-4c86-be9d-53f0df31d69f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "eb8255db-91fc-4019-89f1-93f29af82cfe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d70dca1c-5c7e-4b6c-bbfa-02ac7b09272a",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ca552dc-7484-4cc5-8a02-0b6ff1875e6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71ce46aa-fb29-44ea-b519-ccf619d18cfc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e45044d7-51ea-475c-b540-a42821cad490",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8c93a6ec-e9d5-4634-9ab0-c74e3b91c8d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c75ccfa7-ca3c-423c-bfca-4a8ff24df4bc",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7dcefbf-0d3b-400f-b021-79108508e4bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1f5cbd3-e862-4178-be90-6fcc8f19dc9f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3f2a205-8416-4b82-8c2a-b8a815b45cc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ad4bc76f-918a-4ce0-a840-9d6a7f578545"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d8682cd-2926-4619-bd06-02153e825cda",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "397f1016-f587-4015-8e5f-edb38e1a8fa3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2fc2de7-857d-444b-9977-4d8a10d810f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e804d655-136d-49ad-b797-e4476eb0e985",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "21c12098-eb25-46e6-8bdf-82764686cc0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f3be546-a9e8-4732-a792-4579e17b61f6",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6cde6d83-c2a9-4384-8ede-f3eb408e66ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1dc5d1a7-f3ff-4d32-b333-05a839deb6a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83125c71-a4e7-4bb8-b58e-8af6c38d58d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "70a8a9ff-3aac-4d7d-8d40-283539870c12"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "cc0f3f4f-181c-465d-b3eb-a1ced55cfa5f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "76e05023-ed06-42f3-8fab-b8c8b1c57cfe",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de8eb072-6723-47c4-9431-356e18f8fb40",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d8f4687-2138-4012-970e-4efe16a0d77c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1ef6d17-55f5-4339-93f0-b4bf1ce75c27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "186ffa7d-01fc-41b4-853d-8d3675c9cd1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "833387eb-1163-4b14-a99b-c81fb3931735",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce76bda3-8460-4434-879e-41db5179388d",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "cbc5651b-81d7-46a2-b7f7-fdf797b3246e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "45633011-51a3-48f3-b4ae-536b93724712",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6007c124-488f-4a79-90f5-e6a7d6b382ab"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9b6ee477-7225-4f05-98dc-7fd79579f226",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3bf5de41-8cfb-472c-bc83-872a450de15b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d12ed1c6-0a1a-4376-ba94-e0f2c5d4bd0f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "99eaa4b8-8a79-4e84-a8aa-835160e82d23"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "14a5aa2e-5898-4009-abac-091bc8994b56",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "669b1875-7d46-4233-bcda-099c573e0ca8"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "68516017-64d8-4215-9610-930e169ae9f9",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a65db591-7804-4764-bcf8-81d9814a8b45"
            }
          }
        ]
      },
      {
        "id": "a782b8ba-ea63-4eb8-8be0-725e6740a65b",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "a434b1a9-7cc6-4891-b376-fe7fe13e80cc",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c1773f8b-b8d4-4781-8265-97b5ccf452ae",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "4f7c5d23-d7bb-4f96-83fe-3b98d0008ae3",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a187ae0-d362-419f-8128-ad53e75e85fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "abe30f13-8696-4c9d-ba89-5906f951c068"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31519b66-0196-4bbf-9e6d-46b74742d45f",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "380f5504-7083-4b78-97ad-ee43fa9f009b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a635778-d266-497c-b131-c55f931703cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fb4a014-77fa-4568-940b-b96001108a16",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b007058-0263-4cac-849d-dc60e19d08a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c585ef34-ac51-433f-b940-c357f0dda6c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa11a7d0-5963-4b7d-bf8e-6fac35ca275e",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddd1d227-02ad-44b1-8820-267a59739f79",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "12866be3-319d-46ce-ad54-b4c263d38cc0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "246adcde-87e7-4dd9-9972-b6b86891599c",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d68bfc35-ba72-43ce-8a17-65eee62cc4a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a114762-98ac-467f-bd08-5178bc8125b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e3acb8c-8498-4eb5-9d9c-768190b42fcd",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2c1e1c5-101e-4dea-8492-4f7c0b8ccce9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6aa32a64-25bf-45c3-b45f-a05818538538"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39ed0aa8-8759-4b64-95d6-3125f8401a7f",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d853a04-a9cf-4ebb-a361-cc6da12ef289",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f563ae19-fec7-4e73-8f6f-5ce2c02df86d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "86ef61cb-5562-4a7b-b1d9-4e9b6d7c5e0c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f69c0604-557c-4eab-8d66-3ccac02b3296"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96882aad-c9bf-4963-a2c4-aa69b35d17c8",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e2165ba-880c-4485-afed-5b2d3b887415",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c989d483-4e6f-4e68-98cc-49c706d19c26"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e3462de-0281-4ecd-b704-ad98c0821577",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53b89d95-6b68-4c0d-a223-ba4a01e55ac4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "648c8196-bd3b-4c8e-a1b9-b0ab61ad2c7d",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "512c5c38-9134-4192-a21e-de62c046ffd6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "389c644e-2797-4fcf-8d74-f802b7d8db35"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f35bc201-ae73-4e8a-b6e1-c8b28c263f90",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2d4e514-e4ea-4665-95b4-516a50ecc0ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a256e6e-d4a2-4696-9d88-2131fc80fedf",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3c81846-7036-4449-99a2-7a59a5da54da",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "790772c2-0b94-43e6-8d0b-bc451bdf9010"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "593b62e1-9f99-44c7-b24c-7e3125666af0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6b99804-2da4-4380-8411-a44b6a49d6c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a15aed7f-706c-4152-be23-d71ce9d32439",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49b166dd-1b9b-4c82-807f-3f638db5d68c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92e0194c-11b8-4dba-b42c-4542a9501cd8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b0ad969-4a3f-4251-b919-1b9a66d75a1e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94bdcdf1-9dd5-448d-8104-8252796871eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fb08e07-56dc-4523-b58d-54525ac53a00",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98eb46ef-99af-4c11-b5bb-70e97b3277e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c7dd86e-a9ea-4a6a-b5be-a1b66e7bbefb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e18ddea1-a4f1-42fa-b37e-8ebb204a84bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d7c6d52-7cec-4ab9-aa94-1e9951cf75ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e5eee2e-bfca-46c8-80e2-ddda8088ec9c",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4df62cfa-f5b9-470a-9e04-13390b3059ff",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9085db3e-26f9-45a4-ae53-ae5a9b2482b6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b54725a-4a4d-4436-8016-269c41179a2a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "851fa5aa-ace3-4179-9cce-121f24214ec1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24e4e745-b22e-4cfc-a594-2d90250784aa",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6e4593e-271d-4aa8-a333-6c72faff6715",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7499c8aa-bf10-47e4-878b-0874743bd9e2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7c038ec-0fb7-4d4f-8e14-71bb5d0b8fc5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d94f9d4-efb1-4a20-b45f-08834994b481"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fa52bcb-c8cd-4059-8159-03016a77ece6",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c50a2cc2-6dc4-4d3e-9fb2-e2c707def8ee",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e86dd181-03e7-4293-b860-fd0076bce552"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "40fb4059-147c-47d3-bb67-aadbe9d4af60",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e6fe548-25a5-4545-8a8c-76b4791437d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5edb3945-be28-44b3-9ced-fdadb76bb140",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87d1b3f3-7129-4580-a89e-d25e70338cc0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "679b4772-7c4c-4340-b1cf-d07f4d5c00c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3363c5bf-4999-4c67-8e61-748c9dc4ff5e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a357c5dc-6fe1-46b0-b4d7-4e59e04d5ecf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8d40ea1-bcd2-405e-8fbe-0542bebd3b25",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bbd554a-bcc7-4780-8e95-dca861cb30f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7fba9a6-77c5-4a93-a748-41771c284d53"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "30e96bcb-fd2b-4c75-92ac-8efff522772f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f2ff94c-b4c8-41fc-897f-f5e2d558b783"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f25b9df1-7dab-40fb-8388-6e328c8ff824",
                    "name": "credentials_verify:vc:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9986b22-6136-43e2-8561-4b510998b27c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a508e4e-8ca1-43a3-97c6-2ab0d221eca5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "da460b5c-427a-4bcd-8a61-4284a9fa625f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1254ac74-9ac4-480a-9082-1bc38decf124"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ee69bf9-1702-40f2-a52e-845415af5c07",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f233690-e809-4c04-855f-ff877b04d6d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c7f01ca-d1b3-4ce4-8343-ffc54ddf3159"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "96d315a0-c8d7-4d65-8dff-c44fcc18a276",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e50fffc3-f21b-499f-bb38-b2585d388334"
                        }
                      }
                    ]
                  },
                  {
                    "id": "797178e3-4a7e-4e30-88af-2d5650da2935",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d8c8d52-c9e1-48be-bde8-7dbe76297931",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27b9099f-9877-4c64-8930-a1782275bb1f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7bc1ada-15b3-4bb7-abb3-c0c42688322a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "903a20a8-17f7-43f4-b510-66d3aef4fb6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f805215-b8be-4ee7-ad19-bac2675db31e",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdebe64d-d629-4107-b829-454c1e0c95fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c08c55db-b792-471a-996c-1fbdea4cd5d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfd4ebbb-814c-4f99-879b-5be2e79c4996",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38234965-937a-4212-8547-b6fba114eb9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7bfb773-abb3-46b5-a558-3fc43d0cd400",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c359661-ece4-43b6-a118-8482c2cd804b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "78cf6c41-5380-449c-8f59-a16f7664e5f7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e255a00-0f35-4997-b342-005e986c6845",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3b0fb67-f150-44e4-a3de-e39534d78099"
                        }
                      }
                    ]
                  },
                  {
                    "id": "044ec4f0-3b85-417d-96e7-00213404767b",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fb23f47-3746-468e-b0e8-2c1ceb8a35a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0334f8c3-2c9f-4fc7-ba48-3194fb0cd824"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "24b1a159-52f3-4534-bfb8-31d15f3c506b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18c37492-b57e-4afa-8274-f0b5ad265a83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5af7909-fbb3-4d5a-857b-552c4cfb0bcd",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb06d20b-f730-4f76-b44e-a0f02d6b3b8c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c3d1949-3c25-4ada-88de-0950d657b640"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "16c8905a-3cf4-43b4-a847-942cf9455cf5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3a7538b-de8b-484c-8eba-9e68c4c74574"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83adb014-47e3-43bb-8be9-76fc083633fa",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "696ea74d-5a71-42b6-aa63-b3051d317952",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "66f2bd6d-39d7-4d83-ba03-0e0959be0f6c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5868bba5-fde0-4679-be02-4fb6de05c3a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bdb77d10-5471-4d77-b35b-16a08b2ad3eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "234aaf6f-6b26-456c-ae37-d62294f47df0",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a95b9cd3-d86d-4672-a7f7-aafad0cacb7f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4a5ef0b2-5f86-4929-9e80-a9138e78fbed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d82f7b07-8d71-4b67-aefb-a36e353af4ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f82e431c-7799-4604-a25f-206b1426d610"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f68727a9-393e-4ea6-83b9-5762fc5f94d9",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "559ef4ce-86ae-4615-b610-68504c1fd744",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "88c2f567-fbb4-413d-b0f4-9020b34d67ee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e69853ab-c19f-4bd3-90a5-522e2cda4fbb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27b16c2e-25f5-452c-be30-e339e3180ac6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a76a658b-c267-44b3-a31f-669bce2e9097",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e50d8d9-766e-4ab2-93c2-81627b169f86",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bc86c1aa-b3bf-4275-9b60-cb8346b98bf8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3f26ca8-ab51-49bd-a439-b0b034d85e13",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a27dfdd5-8cbf-4cb1-bb88-490c0b14372b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ac50164-7688-46fe-89a9-ea11c1d69337",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1cd22ab1-d3c8-4647-8784-a97bf6ab01c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b376f53-9251-41d3-8db5-89214a0da2e2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aeaa9bb2-2b2e-4994-8c57-c3e7693f8773",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6bd9f21e-9ad5-41eb-9f66-1df2e8d5cc39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd8977c1-328a-4acc-92ea-93b81c2fab82",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d03d1c95-bfe0-43e2-b494-be9f77782f7f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9296e2bd-d409-4725-b195-6d4a209faf58"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "acd7d32e-5d54-4812-88d4-910bd28d677c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df1d8fa0-9572-4fe8-b442-4f7d7a3700be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "161c71f5-6792-4c5e-bb08-53b012b6ed6e",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "980932e6-e0b7-4da5-ae08-14638c2943be",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e316b0c0-bfcf-4cd4-a1a2-c32e2d80386b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f51abdc3-1a9b-464a-9aa5-489ebf63ef3c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74ca7a1f-98e7-480b-bf83-53804442af79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6ecb6cb-203f-49dd-ac82-b27e1820f09e",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4151d19-b543-400e-aa6b-5d2062531e14",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e4e9373c-6b3b-48ec-852d-5cf1aaa7a2a9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2defdc1d-942f-4880-bf9d-9fdbf8f0391b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54fbcc02-d808-4aac-a5b1-9a19fa081b6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "143ab52b-224c-4cd1-a3b6-0453860e8ab7",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f67484d3-cbbc-4cf8-985b-d6c3ea16a653",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "03e984d3-4c07-46ad-bca6-d804d245885c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b63fd6e4-5372-4c71-8274-dbec9593e81a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71c4cf91-f856-4341-931c-1430f7967f3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bcbdef4b-1f19-4e09-bbfc-fa1cdcbf657f",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15888c8a-1a6f-4741-b654-fe6dde96f06f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5a8d788a-26b5-40aa-9a12-9b4bbe93777e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4568121e-0789-41fa-a92e-64261b6e6e14",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d437788-0885-49a4-9cf6-0f39cff095fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0827abb-de3b-4f0d-9070-427ebf1cb4ca",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b36ca9c4-70ef-4be3-b118-21889c6dc157",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f85f8fa1-e306-4aca-9253-0ef29bf6034d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "09e1f345-ac8c-4c42-8d25-209f159e1615",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50cd76ae-e1f2-473c-a72f-b781012bd531"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96b1e975-8b00-4ff1-b937-ef1356c2ac4a",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1bfa74ea-908d-42af-a9c0-1895dddd186a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85367355-e3be-4a81-8492-defc92ee944c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3913647f-ef88-4b99-8798-e4ad0aecf3de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7168b9b-09fa-417b-9d67-11f41da96152"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cf30c47-93ac-4105-bd32-dc09aa4fc781",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de823001-2e5f-46f5-bf0b-8571c827e5a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3d9818c-1133-477b-b4ae-54616f0fe379"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "10adf7e8-bbfc-4c1d-abcb-83ee9c0bb44c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f27f6c39-8e0a-4ccd-a670-785e268b4e1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dff0c028-fa5f-4ab4-86c0-da36870b4a62",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "140d8da3-1612-447f-8be4-4f3219bb9afd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c887dc2d-694f-454f-8b4d-b95fdfe22f0e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d14e783-1b0c-4955-8148-8f6c203dde8b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7b43bbc-dd4b-4514-83c2-e926bd11f381"
                        }
                      }
                    ]
                  },
                  {
                    "id": "890d6be5-3b93-42e0-b3b7-09c170aa4648",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bdcee6d-4f51-41bb-b3f4-e7a0289de433",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0b9121b-5c09-4080-b66d-369dcc9373f6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "60b511f3-f46e-4a0f-89d3-610906a197a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0f482ab-7b24-481e-9f40-8411bcaf9baa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffe5d53a-a212-4de4-8cca-537e50ca0a2f",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "844c2e2f-43a1-4098-870a-25cf9fb32075",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36f78c1d-a8c6-4721-ae39-02f47365a13b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf7eb994-08a5-4731-95ff-3b7f6bbf4546",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f260c53d-c09b-4585-ba05-183d58402e7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bca2933-8b39-4988-a364-9216c7906608",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d24d5b6f-4327-4800-b3fe-bfb4664e97a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36098d5a-9df5-4016-bf98-d359b35e0f86"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "75bee038-7cbb-46ce-870b-9a189b9e9987",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a9aba53-7423-4dac-ac64-d77698dfea09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "124a7bb2-f05e-4f53-8097-64c3d88fe580",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8998b4b9-b4fb-4d42-a01b-4688b9267839",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "beba29aa-5ba8-415a-a866-48a2dc31e6a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc412949-5ef9-4507-b4f6-284df6b2d159",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2350e2bd-d2b1-4db5-a081-04c03af6abba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f5bd61f-ad7f-46fb-a5a2-c00d63125114",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a9a6b2b-2fd3-442a-a7f4-8caa2cfb68fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "12bc217b-378a-4029-ad0c-1fc19b4f42af"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbc4fc2e-f948-4ab5-badf-2f38fd136661",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5803d337-ea5f-4ea5-956c-d904276588fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a24de47-cae7-4baa-9d0d-2298e1272533",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26ba83c3-d504-47b2-9856-535b2da1fcb0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ac6835e-835f-4a3a-ad5f-c983382f9ea7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "da5abc43-cb8b-4288-81a5-9c1f23c7459d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9f81a47-e644-481f-8352-30e85650dd86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c928b33e-bbc2-4e2a-88b8-01c1e33b6d99",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0c05a92-cb2c-41e3-ba57-5767a32b1a7e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5ece4d2-4d87-4651-8067-a190d722de22"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b42b34bc-b9dc-4fdd-93b0-0878b639f28f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5180eda3-ae66-4553-ad5b-ea4fd9e9f01e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "834983b9-6958-4586-bb6d-32b09ea56b64",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a4b8005-897c-4364-9560-559ee92a07bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3f11882-77b1-412a-a581-ce3ae4052a00"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c6f18f2-e53d-47fc-9d94-407a949afe94",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af54abba-7ae9-4c41-b4a9-0299967bda5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a217634-eb6d-4ba7-82cf-a16ffc9cc41b",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdc42dfa-f832-4983-97c8-3204270867de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "684729c0-5964-4a1c-9406-2a311300dc10"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "79f26ff9-7cc5-4bee-8354-f1ee42d1006b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44d95db5-80bf-42dc-b101-df314efa9460"
                        }
                      }
                    ]
                  },
                  {
                    "id": "694bcec2-37f4-44f8-868c-480fd9ad97d2",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fd7c01c-8cef-4735-b28b-5dff8f145493",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d13ede7-1350-4370-b5b5-4f768d7db846"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c012a86-056b-419a-9965-7fb4fb4d38b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2cef779-df7b-4cad-8858-7d9f713262d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "432d56c5-3514-4430-9b3a-a27e94b15076",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f7681fe-3cc3-4ef0-8ff1-e5a48046a5a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd1df19c-befc-454c-9206-9cf1607cd997"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1e1bbf9-ac9a-4b9a-901a-e861ccf1b6f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e06a6c8b-da15-42b2-b254-aa0d5d14e748"
                        }
                      }
                    ]
                  },
                  {
                    "id": "252899fa-f932-473a-8467-251d87853196",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef783b28-cb37-4611-9117-2033c7d2ed97",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b7bba38-9f00-4664-8aea-80125c1165b6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b52131c-a2ee-4508-b280-703f5e02da76",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed01f96f-f17b-4052-aa06-2b21e058d523"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2c6fb15-57e3-49c4-ad5b-895c854604fc",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d24e5b38-200a-4cf4-896f-c339dec8de48",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28596e30-5255-4318-8d6d-7d47ef1c25d6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "24f10250-88b2-4f9d-80a0-17b36d7204a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9796b0d1-fe5c-40ab-ac9e-e00a7363b24e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8c56244-acce-4e53-84b3-2a1eab27b267",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6df90afd-0e76-444d-b68d-bbcae7d53efa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4997be43-8f7d-4e6d-985e-b10bdfb49a7a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "31f7b9be-9ced-4bc9-9ce3-d4be07908462",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2948b1fb-e0fd-49f5-a580-1c9f8bad81d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47c64957-4efc-497b-ab2a-7f74a8bf805a",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1700fb2d-2868-4c3f-a74c-a8f747974e2b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "649b4f8b-fd7c-4ad1-9d54-fd650b29a5d1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9680b6d8-7b56-4d5e-9f87-035ebd4e53f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "202a1ee9-7625-4d1f-b817-90dd0f7f6225"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b780d88-6580-47df-af35-266c0c24719b",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18f07184-97d1-4fa1-90d0-16be91a3e6bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71662211-5348-49f2-84f7-e71651f912d6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1e4cbee-c702-4bf9-9979-b2f90bf52855",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65377136-3fac-4b5f-95b6-e8c134bc0c92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "deb6267b-5567-480a-a7dd-52e49f6870a4",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f220ef4b-5f0f-4cb4-b290-b650838ddc1c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87d9ed9e-72d2-462f-a771-c176524448ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "94a58503-b388-45d1-b4fb-6de53dac01b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3ced53a-3c09-424c-a6c1-129a38e8cce0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36eb5a7a-c0ba-43bc-8afd-3d1bbbf8b337",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6971b9e5-62a1-43b3-8f2d-e7a1fdb02500",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "037914f2-8cbb-4fac-8345-381ab4566f32"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f8c17ec-3f0c-4de2-a408-777d913b50a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b865311d-0663-48cb-922a-760b6c381fd0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e97dc504-ea36-46db-8dd3-f9b8add40bde",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52f5ac1d-8abd-43a4-81d4-7dd90b0663e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3870711b-669c-4889-b3e2-e8f0f159c3a4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "28acf4ad-6cf7-4db0-b543-cccf883e22b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90a76b65-3761-4e49-ab84-f01d76247531"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ca2cb06-0c57-4103-96c7-3ae2cd8398f8",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76d38e16-f9a8-488f-b1e5-079a11bbf725",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f903030-8ba3-4047-8aa1-34c06f6881b7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "757927f0-0a4b-4e8f-be36-9b62d43abf1d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d11e6a6a-74e1-49fd-b5eb-0547583d16ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92063fd4-24c1-4e9d-a80c-6e365a767d69",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eec10fdf-8d83-4284-bc4a-75e91d9f3685",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a3d8afd-a954-4ea0-8ec6-38d52110e5e4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "84246566-19ea-4a3b-bf1d-3c6f517b238b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8763226e-3276-4177-bb4b-210763f7d1af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f61aa815-b0fd-4018-a8c9-2e024ca8e16e",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "410e6711-af89-4047-bec7-fc4ccc0c5faa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "78fcfbcd-9c0f-4034-bbad-e0aaf04f59f5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "82b1247e-bd18-44d1-84f7-b970355be078",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a29afab8-a52e-4504-adf7-41836ed9789c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d018df59-af26-44d9-9868-75ea09af0738",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96884963-aa1d-42fc-9772-873708675f88",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d314de03-d7a2-4279-9236-5ec9c2d24bfc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "52993bae-50d5-4e68-bd82-7ab73cf86747",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b50d0cc-4a08-471e-b636-de7fc877b478"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e25f09b8-0149-4ef5-8755-4320ca817565",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f428780c-bab1-4d8d-9b12-0be82e34332d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8c6b125-9895-489f-a07c-83bd3e46547d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e184cf7-3992-4910-b561-ae3d64839379",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e14b658-a120-4641-9366-2725c232dd87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc0fae0a-9759-489f-9acf-e63e27f3d4ea",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "670ddaaf-f117-4cda-82a8-f82bee12231f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e2f0e9f-192f-4b79-9ed1-2fcc8990d817"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f01eac92-f072-4218-b0c3-085ec751e7d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc5b6941-4c81-4416-80ba-8ead87731e73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdf2c011-ccfa-4ca4-a206-1ca82bdc9be1",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51274fd6-0169-491a-896e-b3c72b60814f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0d440f6-d81c-4d44-b59b-a56399837cf0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f6c027b-7066-4ba0-87d6-7b51399b3d2b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6336450d-16db-4b30-aaf1-03df7080e70d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02373193-5d1e-4866-8248-e6374e750d65",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9dc7c6f4-f14e-4319-b500-929c21d72d4b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "968dab98-8405-4d71-b6be-82deb51df991"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c67bf386-0c6e-4b9d-8f1c-2e6029b2a268",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7baeb025-9e5e-42e4-ac30-bc8bba3c3351"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ac1e49c-eac3-44ee-830a-55e4f4763472",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26d64c5d-731a-4142-a928-048527f1ab9d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e79269d1-7f2d-4fa7-b0e6-d05fd950e0eb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "40120cbf-57df-4c24-863a-55aa1e304b9f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b123eeb6-c172-4f45-8ef0-d66486fa2c8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e232ed2e-ac9a-4a1a-8e61-7259049780b8",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f8e8a17-6fe8-4955-8664-af9ef768e343",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4f8f60b8-ad9e-4bb1-9bf4-d6ab198ca988"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d7c98a8-6b12-4c10-9158-9aaa01f5d3ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ab0e076-6a25-4c48-833a-6352f13f2e27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc4b1667-fd1e-432d-ae72-0d0a377007f8",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1465f8b-a3ba-4851-b46e-a644d25f8055",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "afdb003d-9002-4432-a7d5-10b24427ef36"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f318a196-9b26-4b03-b3ba-a51d0c71012c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a2cea43-6572-4bd0-8b42-19b69b434a62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7a78c04-31af-4a85-8d9c-348a67b9f609",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a4d7209-912d-4f19-84eb-fcc01f3ebbd1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "83d136da-81e7-41f6-a8ab-daf27794332e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "162841e9-4d3b-4b52-b8a1-a095cccf336e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5d523c8-2610-4bfb-9ec2-9842cb6c4ccb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8031b85-0602-4d3e-b09a-8469373fb7d2",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db8ddf0d-1e91-435c-b67b-cb4f8cbabe1b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8f042677-a113-432e-9428-40d0f6d05e7a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3c83393-7167-4c3a-aedc-d6b33a8520ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2a76f25-a782-4c57-8475-727f09a29471"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e0f6d5b-0123-4f37-8f92-2140c9e67474",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9b9755b-ef5f-4c4f-9e27-59594070a299",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e1e64fd0-250e-4e41-aafe-554877a5d54c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb21a95e-b1d3-4ebc-9e62-b11acbe8c372",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "370a0347-3d05-4a75-934a-2bc3a9d88198"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94311926-592d-4740-a13a-94d86561dfa5",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ecddb2f-6f19-4127-85e6-7be7c1454706",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ae636607-2737-4a2b-b613-a019d0aa5786"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fff6eafd-03ac-45b7-9346-5c20057bd42f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8747660-412a-4060-a4b2-0a8f4e899be4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77685fe0-d49b-480c-85df-10557fa20b95",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ded8539-4d4f-46bf-aeea-1c9ed186b90f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c02b8bcf-3b3f-4126-bb3c-b177194af81f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fdb489b-b358-4dd4-93f3-47b132291c51",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4ca3e46-a3d3-471e-9970-78cd098ae53e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6b5b582-6387-4e4e-9c95-1553f7eef340",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea611c02-61f5-4bdd-8d73-4dd9f7d26415",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4393bb61-77cf-4519-8766-980dcac5f350"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e5598ef-5480-404c-b0f0-7859b7f2c542",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c90cf97-23b6-4cdc-973c-ad96d7f6d8de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72bc3135-9cb2-4d97-8d04-737eacead3cb",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1fa9e80-502d-4cdc-9a6c-4a0160f3a1cd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "366da5d9-cd4e-46d3-9988-4b56d7ef3a1f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e04116f-c884-4039-bc13-33792bbeefb3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26d1ff17-4d24-4897-b48c-d17637f95e44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5ed6266-e482-4e2c-a492-4d86599f8b2a",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18dca52f-e74f-468f-bfac-cbefc615a86b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "53c2cb8f-4e18-47f5-807b-15020a009c10"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c81db384-17a1-4388-8f1e-1e15b1a393b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c168d848-fe8f-4bac-b0f8-74f6905b5b4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ec6603a-5457-4fbe-aabf-8ece5e62777f",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8ed2725-0708-49f1-8c35-04119dcba6ef",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d81300db-968f-4af7-84b8-8427b50a7520"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c3ca8a0-ca2a-4ca8-967d-199f63832928",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96b3ba35-6a61-4973-9cbc-80e4b00e074a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa838bd4-3665-4a0e-ab84-b533e207dd3c",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8db51dd2-c3fc-46ae-8bbf-46ad074b3bb9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e50a7519-1af7-4ffc-834a-ed9a62223770"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "007f38e3-343c-4cc7-a748-c0d6c316e637",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "024700fc-e015-44bb-9c70-a5b5cce7f149"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e720e847-2080-45f1-ae3f-77d782bf81a2",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db5b21c7-51df-4041-93f2-d2b9fc640c25",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c56320ea-6424-4d3d-937a-c95cf46f99ca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2534839e-80ce-4f88-b0d6-8230dd821819",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d6436f5-fd0f-4932-9498-3b4ae0a04f7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54d08b21-4574-4c22-b759-6516afc87f05",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2bf32ccd-6680-47da-95d8-0b187736c65f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1dd5a766-3074-4913-97ed-45ca20727a40"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "27addec2-ef94-45c8-b0d5-d65c3df22ab8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "efa429a5-9f30-4ccf-8354-4227971df507"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e4b9a3d-f9a7-4b3c-be86-52d02afb2479",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdd0f9b9-d4ef-4d88-934f-8632ade4f3e4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1dc8835d-ac55-4ec7-b02c-e69edf0c5ff8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "957812f0-077c-4e46-a84a-90d1c61baa5d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "763a128f-0cad-4b20-bd41-14870e36cb4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc60229c-6687-4b39-814b-60924c1c5348",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7a82a7c-3e65-432b-9c9f-9cfdcad53b97",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "994633d9-bff9-46dd-b40d-a18c8b5a4630"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6f13e80-1a27-49c0-97a3-c65a4fef9efc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eee0306d-1361-414f-ae0c-303bad3b9576"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0d713b6-0fae-4dde-9773-8d9562b6be69",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "564d784f-ed78-4cd3-918c-4b8ce3dd0853",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ddcdd67e-28aa-41df-9cf6-9fa1d13c09b9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e90538bc-fad4-4b7c-adec-cf96979a2aba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4dff47cc-d9f8-44b2-8994-b30808fc766f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "927f6bf4-1eb5-437b-9d54-b9b57f3a3c6a",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f74c57d-228f-447b-ac1c-c8f666063023",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bdbb0a95-5536-4ed1-aaa5-afaffcfc11bb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d82ad1d0-89df-44b5-b444-eaf49ee3aaf0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ece9ea8b-8c21-4b8c-9beb-060421bddd37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74a08c71-de66-4390-a8ba-14c4fddd79bb",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e936abe2-63d9-4080-b1de-44f122212810",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1837c3dd-f29c-4b14-a90a-d588aff761d3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ba57041-35b0-4418-9268-07f22201456d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1278d74b-74eb-463f-be14-fb877b6c50ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1d8212a-82c2-4728-9d65-7ad2e810b135",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ab4b6de-9705-4829-922d-0234ff09c14e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fab7c161-0a83-4d69-ac95-c08d4fdab134"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "328b3cf5-7c32-4c32-9193-b35cc305a404",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c71fba1-7eea-4733-8017-61ce0123ee54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "086d22cb-5cf0-428f-a4b1-f177c0848f31",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f12960e-91eb-43f0-9a34-58dbbfd5eba8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5ff5efa9-e8e4-44b5-995f-0cafcbf5b3b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ba9d7ed-8ccc-4236-81a7-ada208602534",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f75a4b12-b0e4-4510-b08f-3acf990d47a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "031aeffe-b10e-4d94-973c-3dcd5a2921c8",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e786e37-d942-4f52-bf51-4140887d2663",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "75630077-15fd-4b1c-bde9-5b809a599cdc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "47da6cd9-4f7a-40c5-a163-e951c0728e99",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4decd0e6-0cab-4808-913f-d952f5ed7e25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bd14e1a-2cbd-4c1a-8e74-100414d446e9",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebdaeb86-211a-4a6a-bc27-f3ddf49b61e9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "16411320-9f5a-4935-8aaf-6376b62fe3f6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e22725b-fcd5-41ed-81ca-8fe6151e3ba4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c975627-f17d-4299-8814-57fd663e96f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "132eb89d-2ebc-41b3-bbe2-3332c367102b",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41a5f205-6c49-45d0-b175-d112e0dbb6ff",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c74d4780-7677-40ee-ad1b-875ecbe26f3b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e33e3560-3cc1-4f57-9bfc-79f97f7829d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "537fc951-c13c-4e46-9c4f-05d499d37a69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be548819-aec2-44d3-a140-248742aead20",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fff8eeaa-2bb2-4c6b-a941-1549a9f14d5b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aa42894e-06ce-4573-b34a-03180394f31a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "015caaef-9053-4910-b1ec-54535a0207ed",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0b359e8-0ead-407f-b7bd-302864486c75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc7aed36-1439-40d7-9a91-7c951d0ae986",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a911e93b-9abf-4b1b-8639-a0b5ec19939c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "99e4cef0-d9f0-4823-abf5-c77329e8cc48"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "49d0458a-44f5-4608-8245-d7016cc917ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0dae84a-6ee6-4181-8ebb-68e0a27ba592"
                        }
                      }
                    ]
                  },
                  {
                    "id": "566426d4-be18-4fcf-b085-d983f9d9b7e3",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb65b0f0-df7f-4603-85d1-912415a86eb6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4aad8070-e5e7-476e-a99f-11d078cd317c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9803a849-2f3f-417e-8775-d53e463bb271",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fbef36cc-c3b8-41b4-a282-aef7dc5ee626"
                        }
                      }
                    ]
                  },
                  {
                    "id": "218a2628-d0e0-4514-b05e-2ade143d8fb6",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7af3ebe9-2768-460f-a2dd-bb82c0c72126",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b1e3663f-8a65-4796-ab99-048920a17450"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab6c27fb-1fce-4765-b8fd-ec549f60ee6a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b43af140-35ba-473f-9fb0-55bcebfa3470"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d351dbb-757a-4c38-99d0-e93a48bc653f",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5558e2b0-b1f1-4081-ac3c-2a41038d5b13",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8f0a89c6-1dc1-496a-bc32-12cf84d3bfab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f742dd8-4fb5-4ba7-bdc2-d18f7d2c7ddf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf265f43-49cc-47e1-94cd-e36b860bcef6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "412bb0e3-c5cd-4a2a-ab3c-0f3a58a5e34b",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd4e2ee7-3fd5-40b6-9823-c0936fe631e4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bccd9e6b-56e2-427f-a641-30a8ccf11c19"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8ddce9a-58e1-4bce-9b41-d16aa6403f3a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf738545-6f2a-4abe-bfc3-e6bdb7646187"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2db98b60-5dfd-4da2-8bac-c54df9d675e0",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ee1b645-9452-4f35-8985-06a2392274bf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a14a9516-56c7-4e71-a0be-1cb6defc6fbf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f90b192c-2795-43a3-87a5-356bbb5cb3eb",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d45946e-9415-41d2-b46b-a23b073f8794"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4dc04dfb-027b-4178-baf4-e5e506e0c746",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4844514f-c1f0-4b4c-8c38-e76d69fce1e2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "44553d38-8788-4c0d-8ffb-c502d0c966f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c95795a-485a-4872-8ca0-823e0898f98f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b23f3289-9226-48a1-9018-000524cc79f5"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "49248d71-4343-4936-8e14-d448ddd42896",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "21d9cfbb-687e-4f39-bb75-a61959e03c80"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "84fb32cd-4226-4ed4-91d9-3478ea340a72",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "06931528-8b1b-4b87-96bd-ed9c75ca1d71"
                    }
                  }
                ]
              },
              {
                "id": "204e917d-8f4d-4ffa-91af-ce84924adf96",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "21f05b4f-93e6-41c2-bddb-4320c6885cf9",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e55d34a2-252c-4524-9ad4-f72448c62b24",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "4067c25a-4478-474b-b96b-22cdb9c98fcb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d308b96-80b8-4613-957e-25bfecdba6b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "657d6351-2c26-4461-a669-0604227e5660"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7911b9e4-905b-465d-90a7-d2afb3aaaed3",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b9476e5-b8a0-45b7-a35f-07be44dc15fc",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "ab8e0d60-f0f5-42c1-8cd8-602730973c69"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "62060d68-d4ba-44fc-ae63-b7cf38e61dbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0a1832f5-52a0-4485-866f-af23e6a8d334"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9629f876-25c5-42bb-931c-1fa7209205a8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e4925c67-c127-40c9-bf56-f54ea118643e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d7fcfaf5-6234-4437-a922-5e49bbe9ecbb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b9b877f8-9878-454f-8c27-0b7312a405f5"
                    }
                  }
                ]
              },
              {
                "id": "a0f53a67-c641-4998-8ef4-c680897b6dde",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "b261192f-a358-40af-985b-83fa45780fe3",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f467a137-32a0-4690-942e-e58c6ffdcd56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "2c6fb392-7d1d-4202-ad62-62fb838f742e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a314a510-fa87-49cd-923a-652527262791",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7c4462f-765d-48ef-a47b-5c46b2444c26"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "9a6b7057-f698-4f68-b9d1-6eb928ef3501",
            "name": "Positive Testing",
            "item": [
              {
                "id": "c607ec45-017f-4bec-a63f-3399fd776fc4",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "da1b927f-1d91-4311-99c4-91c76ad530e6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "b988c63c-3e4b-41b9-9387-415c86e8a501"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "92a059c7-c690-4ccd-ae0a-8a4a17f01133",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "01e12065-9013-4cf3-968b-200b48846888"
                    }
                  }
                ]
              },
              {
                "id": "40888331-8a33-419f-b1d2-bae2d932538c",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "62564be0-4ed1-480f-a71d-b00ced497ed3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "8357040f-66c6-47c5-a877-64389058e92f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5ee353b5-3047-4961-a8cf-7af2f83de713",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f3b27bff-3b55-4851-ad19-475de8e5800a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2e57eee8-5498-44b5-a7ec-cde71d43f3d4",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "604171d8-90d0-47ae-a2ac-1e987af646fe"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ab8af89a-aeac-42a8-95d3-12aa540f7d61",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1c62dec8-5f57-4e20-8f4a-dabe90c52c0e"
            }
          }
        ]
      },
      {
        "id": "e71156c4-1a07-4165-9ec6-216170977971",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "901f29cf-0ccb-4040-ba54-2a3c94e89cf5",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ea5e3d42-ef18-4fbc-9abd-bf7a8999cc53",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "5f996f26-a14b-406c-9d2c-62bc4612b0f3",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "622d3b57-8bb6-4a97-87b4-4ad987f615e8",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "90c35a97-2f8c-4db5-b6e1-7ff9ecb64596"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a660481c-791e-4d85-999b-57d67e2cd022",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e0f9b7d1-f33b-4a8b-83f9-335bafe3e63e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4153bd67-3b30-4950-a327-1b3953bd5b95",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36e16ee1-15c8-45f9-b39d-04b43d89c3af",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "f9abd6cd-0498-4df5-99d5-78de94f52f69"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4a8cc62-5ea7-4c25-80b3-a966fa6050e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8a7e62cb-c2d3-41aa-addd-1f002f3eeb2f"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b3a29a4d-4d23-4caa-b1bb-67f231a54457",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "db6d1aa1-f372-4951-84fc-7db9feb11286"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8d3e599d-a2a2-4894-a40b-02c66ffbf419",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5d5b80b3-83dd-4744-a106-76c891ff258b"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "af057877-2dd1-4630-8d36-e8a3f978ea17",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "9fd65dab-3147-4f54-a166-7ecf8ca66cea"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a6d25358-6f10-45da-abf0-1a5ebca7417b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b1980623-b4d2-4793-9d8e-e63e45696c71"
            }
          }
        ]
      },
      {
        "id": "dd0620bf-0ba9-42ec-ae1e-30225e347bc5",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "ec86e05f-96a8-40a1-96f8-03120702ccd1",
            "name": "Negative Testing",
            "item": [
              {
                "id": "7a6b62d4-6255-4940-bee8-af773aa7ab75",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "5ced4405-4629-4b6b-9650-0b19b495f36e",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "363697e7-f60d-4fc3-a458-5abd329cf268",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "f7be3061-ce9e-4ed2-9c09-6563addc360e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b0013a2-1200-4d84-b10b-5ce761771740",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "191e53bc-0abe-459a-8e9a-11df47f7faed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3296d4f-326f-4cf7-a100-021d8198e446",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b3c67ce-1a7e-440c-b41f-1e759a398013",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "82387724-6cfc-4552-98ae-2ca669b97fb4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5ac6109-d1f4-46b4-82ea-6d739c954b2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "22483597-12ea-4e96-8fc9-2c405613f760"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "747fd329-1157-48f1-ab32-a0f9515c4bfc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "14eb88fa-ac41-4378-a733-bac8532c05c4"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "0fdb26f1-b895-4317-9c24-e3da476d5a1b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4f7eeb3f-7e99-4034-9599-3ca7cc38e1c8"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "dca2c945-b134-402f-87fd-c3e6f660d15c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "d9cdcee6-c474-4622-b0ec-728a3341f5e4"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "40acfa6d-8ee0-415a-b46f-ed34fdb79531",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0d425620-c783-44b4-8e2a-273a3631e8ae"
            }
          }
        ]
      },
      {
        "id": "893f48cb-9484-4a15-b00b-1d7e2df09587",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "c9768fa0-97e5-448d-a96f-ee918035bcd8",
            "name": "Negative Testing",
            "item": [
              {
                "id": "69df1342-15a8-4ba6-9207-731fd46911ef",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d2f6f1b6-cc49-42a9-85cb-51babbc2def5",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36305536-2bf0-4b01-a3fe-a74569502fe1",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "260fa143-55a3-4163-8fc4-0a7b57504b44"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4b33e95-0334-4bfd-9b5d-bfa8ce4199f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "be7a555c-6fcf-4b49-839c-aef9bdad9838"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3c1293d-7f4f-4378-88c4-a43e9d61205a",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b7f02ed-05fd-42ab-af7f-73c4dae73aac",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "eeb56981-108a-46f4-87bc-8b193b4bb6af"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4b7a42c-ba0a-4241-bece-c20366aae221",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c0c1b481-f9ed-464c-8d89-4203d4b13e0b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a5912292-6068-490a-aea7-893247273d0e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4dcd0bf8-bbcc-471e-8398-c49f6e0e86b1"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b004c25a-af55-4f59-a28b-2e09b6837f22",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f8a91e83-065a-4851-9dc6-401ffeaead74"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "388cd961-280f-49aa-a0eb-8753df0cded9",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "63177068-c126-4498-aef6-6a810e16b416"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a157035d-d6e9-4a50-a2d8-bfba0b992916",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "557d870f-e32d-48bb-a008-6a88196137b6"
            }
          }
        ]
      },
      {
        "id": "b1efc264-b3af-4c70-a00c-897b8a0a4b54",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ee841938-c9b7-42c8-a82a-a71ef9748163",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "bd31495b-efe6-4254-a3e3-8e09dad02e8a",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "431fd2ab-3e76-44b4-a783-cbbda380df35",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "29efc250-d4e2-4d3c-b04c-b4ce31003e27",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b9d394c2-6b1b-4eee-9443-f6e48e6b52f1",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1925,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 262,
        "pending": 0,
        "failed": 6
      },
      "tests": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 517,
        "pending": 0,
        "failed": 60
      },
      "testScripts": {
        "total": 967,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 958,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 11.044048177380999,
      "responseMin": 3,
      "responseMax": 240,
      "responseSd": 29.727225302672394,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1674780065872,
      "completed": 1674780079252
    },
    "executions": [
      {
        "id": "4bbb157e-9f9d-46b0-9fbc-cf61f54a88e4",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 253,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "38f4d468-90b6-4863-873e-56f20ba7ef58",
          "httpRequestId": "ab7a1c99-9460-4b85-be60-05247c1732b2"
        },
        "item": {
          "id": "4bbb157e-9f9d-46b0-9fbc-cf61f54a88e4",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "049124c4-855e-45fa-801f-fdd672cf7d8c",
          "status": "OK",
          "code": 200,
          "responseTime": 101,
          "responseSize": 0
        }
      },
      {
        "id": "d1ed79ec-6a82-447e-8615-b6a65e788d45",
        "cursor": {
          "ref": "4a3d76be-ffa6-4de3-b6f8-448ae1fd56a4",
          "length": 253,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "a74862f2-7738-46fb-80aa-c6b3d67d0ce1"
        },
        "item": {
          "id": "d1ed79ec-6a82-447e-8615-b6a65e788d45",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "6739a952-cfa2-4f23-92d5-e45ed5d4de01",
          "status": "OK",
          "code": 200,
          "responseTime": 10,
          "responseSize": 0
        }
      },
      {
        "id": "173dbdb4-5dcd-4af4-976d-6593ccb60541",
        "cursor": {
          "ref": "4ae4de40-2537-4a4a-a3b3-7c420768a65f",
          "length": 253,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "28db0c01-67fb-4eea-9e67-eec4b5694fda"
        },
        "item": {
          "id": "173dbdb4-5dcd-4af4-976d-6593ccb60541",
          "name": "did_json"
        },
        "response": {
          "id": "caf2852d-1552-4812-9b99-8ff63550614b",
          "status": "OK",
          "code": 200,
          "responseTime": 44,
          "responseSize": 1211
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c912430-a9a2-4372-af8c-a56f721e4919",
        "cursor": {
          "ref": "0b1b09cf-5c68-47b3-85f0-7e29d739a693",
          "length": 253,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "29a00c3a-2924-4747-b27a-09b99257decc"
        },
        "item": {
          "id": "6c912430-a9a2-4372-af8c-a56f721e4919",
          "name": "did:invalid"
        },
        "response": {
          "id": "1f76c85b-4adf-4a42-9c56-f527ae84faec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "6c912430-a9a2-4372-af8c-a56f721e4919",
        "cursor": {
          "ref": "0b1b09cf-5c68-47b3-85f0-7e29d739a693",
          "length": 253,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "29a00c3a-2924-4747-b27a-09b99257decc"
        },
        "item": {
          "id": "6c912430-a9a2-4372-af8c-a56f721e4919",
          "name": "did:invalid"
        },
        "response": {
          "id": "1f76c85b-4adf-4a42-9c56-f527ae84faec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "173ef147-2f98-45ec-86e3-6310ae703935",
        "cursor": {
          "ref": "01cc7345-2e6f-429b-abd0-81b2e3127af7",
          "length": 253,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "db703c08-b073-4584-b3e2-e1040719a13b"
        },
        "item": {
          "id": "173ef147-2f98-45ec-86e3-6310ae703935",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "0bebd74f-3e31-4633-a076-0f9afc9dc436",
          "status": "Not Found",
          "code": 404,
          "responseTime": 109,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c1cd826-2df5-4677-aed7-636600095e59",
        "cursor": {
          "ref": "f6d11de1-75ec-4ea0-bab7-56d7c3e5d558",
          "length": 253,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "2d1d7103-3cb0-4cb3-84d3-c2d7519eaa57"
        },
        "item": {
          "id": "6c1cd826-2df5-4677-aed7-636600095e59",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "e8a1cb0b-4271-4c4a-bf38-b7fca9f6613e",
          "status": "Not Found",
          "code": 404,
          "responseTime": 5,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65ffb70a-b767-4459-80c5-1b36d04cef23",
        "cursor": {
          "ref": "f20b07b3-86a0-4536-bac7-b30973c5936c",
          "length": 253,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "d2019ef0-134a-43e9-8600-6c58551525a6"
        },
        "item": {
          "id": "65ffb70a-b767-4459-80c5-1b36d04cef23",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "31dea710-cfad-4c41-9612-5cbbff6f3aaf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 5,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b94a9091-bb53-46b4-b914-914d4abaa9ae",
        "cursor": {
          "ref": "c7a5f914-3de3-4a50-9011-29e8223a0af1",
          "length": 253,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "bdf97d0f-2243-4a81-8379-17c7e1df771b"
        },
        "item": {
          "id": "b94a9091-bb53-46b4-b914-914d4abaa9ae",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "248d977b-8272-4f90-96a6-1700f6986e2f",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 5,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b94a9091-bb53-46b4-b914-914d4abaa9ae",
        "cursor": {
          "ref": "c7a5f914-3de3-4a50-9011-29e8223a0af1",
          "length": 253,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "bdf97d0f-2243-4a81-8379-17c7e1df771b"
        },
        "item": {
          "id": "b94a9091-bb53-46b4-b914-914d4abaa9ae",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "248d977b-8272-4f90-96a6-1700f6986e2f",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 5,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55e7bef5-2e0c-4969-ac9a-8a9a85678b1d",
        "cursor": {
          "ref": "69e827ed-3677-4568-955f-23267aede50e",
          "length": 253,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "2d8cb969-bc03-4b4c-a12d-cc79b41cfb9e"
        },
        "item": {
          "id": "55e7bef5-2e0c-4969-ac9a-8a9a85678b1d",
          "name": "identifiers"
        },
        "response": {
          "id": "054cc53a-5d23-4e15-aea6-d3676d9ffff8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 40,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 500",
              "stack": "AssertionError: expected response to have status code 200 but got 500\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'didDocument'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'didDocument'\n   at Object.eval sandbox-script.js:2:9)"
            }
          }
        ]
      },
      {
        "id": "134e4f4d-157f-43d7-9df5-19aa26dca960",
        "cursor": {
          "ref": "4d4e197d-f693-4499-a9fd-39b7fb03baaf",
          "length": 253,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "9701fa46-890b-42ba-804a-93d328e857a1"
        },
        "item": {
          "id": "134e4f4d-157f-43d7-9df5-19aa26dca960",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "62429e46-39e5-4ba9-a70f-c8d023c7d423",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "134e4f4d-157f-43d7-9df5-19aa26dca960",
        "cursor": {
          "ref": "4d4e197d-f693-4499-a9fd-39b7fb03baaf",
          "length": 253,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "9701fa46-890b-42ba-804a-93d328e857a1"
        },
        "item": {
          "id": "134e4f4d-157f-43d7-9df5-19aa26dca960",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "62429e46-39e5-4ba9-a70f-c8d023c7d423",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7bf9fce-01f6-415e-846b-a7ef181b13fc",
        "cursor": {
          "ref": "bf86844f-9b51-464b-ac1a-7ecd2248d640",
          "length": 253,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "15f2bc75-f193-40cc-b0e3-36c9527107cc"
        },
        "item": {
          "id": "d7bf9fce-01f6-415e-846b-a7ef181b13fc",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "d0979d2d-ee19-4b7a-89a8-2db2530c1385",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a830963-2d92-4735-9e85-9a6be8b3a5f5",
        "cursor": {
          "ref": "8b9f177b-fca8-410d-90bf-d06fc10df59c",
          "length": 253,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "a4cd5d23-4885-4bc3-b43e-58db5ef94f75"
        },
        "item": {
          "id": "7a830963-2d92-4735-9e85-9a6be8b3a5f5",
          "name": "credentials_issue:credential.@context:invalid"
        },
        "response": {
          "id": "04e2dd06-97b8-4b7f-a538-023a10648fc6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 176
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c83df32-1753-4c4d-bef3-143108efe297",
        "cursor": {
          "ref": "dfa725a2-bc00-4d8c-8d83-f5a632174b1e",
          "length": 253,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "6991f3f1-a3f3-4535-baf5-26085dfe57be"
        },
        "item": {
          "id": "3c83df32-1753-4c4d-bef3-143108efe297",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "d56c0d36-771e-4795-9468-26d77818e0f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20c2adae-b573-4ba6-9ba0-f4702e22abb0",
        "cursor": {
          "ref": "67a9ada5-4d08-4e20-a5a8-90beeb089e7e",
          "length": 253,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "f73c2cff-8201-4a98-9505-aff913e35c9f"
        },
        "item": {
          "id": "20c2adae-b573-4ba6-9ba0-f4702e22abb0",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "df936410-d785-4ed9-896e-3ad7feb130c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96629b5a-9885-4d4d-bd32-3f7241e78d5d",
        "cursor": {
          "ref": "ceb9f379-352f-4459-b8b0-7ed2a801b972",
          "length": 253,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "c8916f30-a480-4dbf-8c73-97b5836229aa"
        },
        "item": {
          "id": "96629b5a-9885-4d4d-bd32-3f7241e78d5d",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "adf9769a-9221-4321-bfea-fdc6a681f5c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80722de7-459e-4f8e-ba72-9756d003ae8b",
        "cursor": {
          "ref": "0e23056c-66c8-4607-a730-0fbec100c1f3",
          "length": 253,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "ee413b58-79d8-4155-81ce-9fd3808b9257"
        },
        "item": {
          "id": "80722de7-459e-4f8e-ba72-9756d003ae8b",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "9a66c81b-8c2b-4c66-b445-4b078ad5a269",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20a43e3a-73df-4f39-80ad-8e1a9cf7c1db",
        "cursor": {
          "ref": "bb1401c2-e2c3-487d-b153-5a2bac25c308",
          "length": 253,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "68d17406-7fd6-4411-9c82-7a381e492bb8"
        },
        "item": {
          "id": "20a43e3a-73df-4f39-80ad-8e1a9cf7c1db",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "f07644b7-b1b2-49b5-90d1-70466f562a18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd51c62c-e3ef-4d80-b103-ef9c6bbd348a",
        "cursor": {
          "ref": "7e70759d-e30d-49cb-b892-1629762fb112",
          "length": 253,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "df6137d5-3e32-4e5f-82b9-5ab51ed88aaa"
        },
        "item": {
          "id": "dd51c62c-e3ef-4d80-b103-ef9c6bbd348a",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "2e6644b2-9622-4b12-81e5-45699ee11f87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc34ba2b-d50a-4cdd-adf4-d6912e6e7be2",
        "cursor": {
          "ref": "7e730cba-50ec-4f02-b405-3162c34aa9ce",
          "length": 253,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "50bc548c-41a1-4580-8b72-41a0bfe72e1f"
        },
        "item": {
          "id": "fc34ba2b-d50a-4cdd-adf4-d6912e6e7be2",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "06e1430b-1778-4a2f-b0ac-9f4819d5159c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be546680-3831-489f-8ddb-5b9d49e02d42",
        "cursor": {
          "ref": "2195992f-2b20-4399-a5ce-a680e802b3a1",
          "length": 253,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "44cb4280-2652-4f51-a5e0-c4a76b788466"
        },
        "item": {
          "id": "be546680-3831-489f-8ddb-5b9d49e02d42",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "12b8ffbf-c3bf-47bc-9e28-cf3079a46dc8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43672bb0-a070-4f9e-a3a9-01c2a71ab9d2",
        "cursor": {
          "ref": "396c943b-02f0-4dc4-b5c1-b6210ae13f18",
          "length": 253,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "9629d559-3da8-42c1-b213-7a575444f078"
        },
        "item": {
          "id": "43672bb0-a070-4f9e-a3a9-01c2a71ab9d2",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "058b9e97-727d-42ff-b172-f3cce2db10a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06cefb75-44e1-4b70-a1cc-2fd227b28a12",
        "cursor": {
          "ref": "b96be2e8-a553-434f-ad4c-c95491839d8d",
          "length": 253,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "f0880673-394a-479a-b9fe-20a6c707df96"
        },
        "item": {
          "id": "06cefb75-44e1-4b70-a1cc-2fd227b28a12",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "8b111d7c-6cf2-43f5-a6c5-944cbacc228a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eaefff41-e354-4403-9d32-c4449e5b97d4",
        "cursor": {
          "ref": "ab2f3ecd-4041-4c8b-ac93-cdcb00d236a7",
          "length": 253,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "531cca03-4241-41f3-8923-452f45cef0cb"
        },
        "item": {
          "id": "eaefff41-e354-4403-9d32-c4449e5b97d4",
          "name": "credentials_issue:credential.id:missing"
        },
        "response": {
          "id": "d9850f9f-1f29-46c9-a32c-d8df25b8e74f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91497def-32e6-47ae-a9e0-92dd24ce978a",
        "cursor": {
          "ref": "1d489824-140d-4548-b9ee-b763543573d0",
          "length": 253,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "d4f198a5-3678-4c0f-bdab-b3c89e3bb5f5"
        },
        "item": {
          "id": "91497def-32e6-47ae-a9e0-92dd24ce978a",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "6c59a37c-5d5b-40bc-86ae-5c2bd3da9208",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8431ffb3-6af1-40f4-a6bb-b9e643328269",
        "cursor": {
          "ref": "cbd57542-5d23-44e9-9fe0-da1f6d08ab19",
          "length": 253,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "1e515c18-2e5a-42e1-a1fe-a882bb469be9"
        },
        "item": {
          "id": "8431ffb3-6af1-40f4-a6bb-b9e643328269",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "d1919f26-46bb-41c7-86c7-087c02d4d92e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b542bd7b-3147-4954-a7bf-6cd4a01e210d",
        "cursor": {
          "ref": "09f643df-0108-44c9-a87b-4baa180c424e",
          "length": 253,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "f839fe02-0ee3-4d28-95f0-019c8db78efc"
        },
        "item": {
          "id": "b542bd7b-3147-4954-a7bf-6cd4a01e210d",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "7ffdc23e-ca22-4a9d-91a9-7949144c39de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ea7f2ab-884b-4750-857a-e07f75f5572f",
        "cursor": {
          "ref": "f42447e6-0e05-4c4c-b671-2d2677510ed3",
          "length": 253,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "6b0a2ab5-7016-4655-a234-db82fcf5b739"
        },
        "item": {
          "id": "0ea7f2ab-884b-4750-857a-e07f75f5572f",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "e89ced9a-cbbc-49c0-aba6-5ce9e763ee45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07621f12-8d94-483c-82a9-1e82f71a5810",
        "cursor": {
          "ref": "986afb8c-8dc9-4b28-bdc3-ad7b46d45010",
          "length": 253,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "47d20036-cf1a-4d6b-ab93-08cb350fc538"
        },
        "item": {
          "id": "07621f12-8d94-483c-82a9-1e82f71a5810",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "870786e0-0fed-47ea-afcb-fbcc2859ea08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "204d60d6-679a-47fa-9998-ecfad9cc7e84",
        "cursor": {
          "ref": "a842d4de-8c41-4932-898e-f481c35680ef",
          "length": 253,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "13e7424f-11fc-4a07-a3c8-8f8ccd87419e"
        },
        "item": {
          "id": "204d60d6-679a-47fa-9998-ecfad9cc7e84",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "7aac447a-20c3-413d-b311-64d000b26973",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "453eb33e-d44f-48d6-9d6e-8f3f1b6147a9",
        "cursor": {
          "ref": "a83d32d8-c08e-4fe3-bad3-3b053d7853bb",
          "length": 253,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "b7803daf-083f-4989-8b2b-51a29c818a60"
        },
        "item": {
          "id": "453eb33e-d44f-48d6-9d6e-8f3f1b6147a9",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "6d029a86-8d2a-4d3d-9139-9ec0859935e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c17fe1e4-8c03-4bf2-a3a0-d1073bab2f7c",
        "cursor": {
          "ref": "631f1be4-41e0-4821-b39e-17d0f539d07d",
          "length": 253,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "16d1aba2-7d0a-412f-a10a-a3ebd893afb8"
        },
        "item": {
          "id": "c17fe1e4-8c03-4bf2-a3a0-d1073bab2f7c",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "3543f3c6-1866-4151-a065-435c01255c80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2726f069-6ddf-419c-840f-56a4a98f3692",
        "cursor": {
          "ref": "5d679815-6346-4ba0-bc9a-b5548e52f86f",
          "length": 253,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "bd90e8e3-7521-4640-b477-29d54a0fb308"
        },
        "item": {
          "id": "2726f069-6ddf-419c-840f-56a4a98f3692",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "de0e8522-6827-47a9-824b-313448dbdf11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "badb236e-fd6a-435d-93d5-360420347589",
        "cursor": {
          "ref": "982ecd57-4f37-4541-b4dd-61cbeb4b84e9",
          "length": 253,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "6483400f-4288-4867-a87d-346c3630d4c3"
        },
        "item": {
          "id": "badb236e-fd6a-435d-93d5-360420347589",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "cf041416-c01d-4e4e-9396-d837eaa7acb1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "816bd7a6-649d-4170-92f7-e4ffb809c0f1",
        "cursor": {
          "ref": "b90bf689-e892-44fe-9d8a-51f7e9ed79fc",
          "length": 253,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "a7bbdea6-adcb-4b54-b0cb-9b9e38a9c3bd"
        },
        "item": {
          "id": "816bd7a6-649d-4170-92f7-e4ffb809c0f1",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "3df42591-51a6-467e-bcc9-4e591af94ccf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21685de3-43c5-4024-8d9c-a625fa249114",
        "cursor": {
          "ref": "dc2463de-9117-4404-a363-3a1416dfb84b",
          "length": 253,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "de55c3bf-d381-4361-86f1-4b9d619c3e15"
        },
        "item": {
          "id": "21685de3-43c5-4024-8d9c-a625fa249114",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "3196645e-6939-47f2-8399-b84dba855244",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "845828a7-7c02-42da-ab49-2e7d8c33b70e",
        "cursor": {
          "ref": "32a74c7f-53a7-41aa-8a8a-f3e40e550167",
          "length": 253,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "03ae3ece-cce2-43fd-9f33-6768f1cd53e1"
        },
        "item": {
          "id": "845828a7-7c02-42da-ab49-2e7d8c33b70e",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "fc2b5e93-2a65-408e-8b77-db57b05c5a46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20114dda-5dbe-4776-b68b-87f967d26dc2",
        "cursor": {
          "ref": "eb05c851-6b41-4e3f-a43d-47cd302ebd00",
          "length": 253,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "c6793084-8380-4bd7-99da-6e7a0d3622d4"
        },
        "item": {
          "id": "20114dda-5dbe-4776-b68b-87f967d26dc2",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "cd015080-06a4-4aae-a94a-6074f7ecdec2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc5bf67b-494f-4245-bd2e-eeee81fd923a",
        "cursor": {
          "ref": "7bfd8370-8433-4863-9392-c71e4114b330",
          "length": 253,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "11f99cf2-1737-4f02-92be-bb1022a1d8a8"
        },
        "item": {
          "id": "bc5bf67b-494f-4245-bd2e-eeee81fd923a",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "44425400-c25b-4678-85e8-94ad75e43626",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9eae9ab4-fe5d-4d08-a9b6-765ec5250fe9",
        "cursor": {
          "ref": "8dda8591-bfbb-452b-acaa-b3c7daf596da",
          "length": 253,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "f53dc7ae-1e0d-4926-a95e-2044dee0bc16"
        },
        "item": {
          "id": "9eae9ab4-fe5d-4d08-a9b6-765ec5250fe9",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "79932447-7e11-481d-81bd-5934eb6948ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99017d2a-2167-472d-9787-2efaf7d60db9",
        "cursor": {
          "ref": "daf1a5d2-8fe6-4d1e-b47a-ce9f7fb97ae7",
          "length": 253,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "858d755d-6876-43b4-9915-d6799a90dafe"
        },
        "item": {
          "id": "99017d2a-2167-472d-9787-2efaf7d60db9",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "37ebd13a-36c9-4bbc-8949-3b9665354901",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8e49506-1b52-4b62-ab31-1ae0efdaa85b",
        "cursor": {
          "ref": "d42fcfe1-3939-45fc-af2a-f3e84eff3875",
          "length": 253,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "b6c32245-a384-4fd2-acc3-d5dba42aad31"
        },
        "item": {
          "id": "b8e49506-1b52-4b62-ab31-1ae0efdaa85b",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "a4c7424d-24e7-4e48-ad62-651a9865d447",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a04d8553-b0d3-4b3f-9192-89d4a35cac03",
        "cursor": {
          "ref": "b1ac1957-ddc2-482b-ac2e-02dbf15cd84f",
          "length": 253,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "743a9238-8d03-47b4-b5c9-fa29fa6aa6c0"
        },
        "item": {
          "id": "a04d8553-b0d3-4b3f-9192-89d4a35cac03",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "5ea8e67a-ad02-4175-a625-cec80a627223",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3c362cf-3016-4947-9883-f954430412cb",
        "cursor": {
          "ref": "7540b93c-694e-4b8e-8d67-bacfdbcedae1",
          "length": 253,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "97f70ec4-2d63-4ff0-b5df-3a4b6e0eb1f1"
        },
        "item": {
          "id": "b3c362cf-3016-4947-9883-f954430412cb",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "e898d43b-5a6b-4cd9-96b9-82bfc1c71ef0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ff8024a-7683-40a5-b2de-052822ffe1e6",
        "cursor": {
          "ref": "26fded95-ebb1-4554-a7c0-037456cae2a6",
          "length": 253,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "f1296593-8ede-4993-aa15-2ee61ca9a9ec"
        },
        "item": {
          "id": "9ff8024a-7683-40a5-b2de-052822ffe1e6",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "a7e98fb6-e7ae-46a7-878c-10839cd8b736",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11207c33-025f-4c40-b2e3-9fea11cda8e8",
        "cursor": {
          "ref": "9077dd90-de1f-493e-8011-4a482cb01708",
          "length": 253,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "3666fa9f-ef0e-4b84-b5e9-d52e6f240fd2"
        },
        "item": {
          "id": "11207c33-025f-4c40-b2e3-9fea11cda8e8",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "6a0e1dd6-cac5-44d9-9b73-60bad79a1aa3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80e1fe42-e2b5-4f47-9ee6-e6e02bf17f84",
        "cursor": {
          "ref": "a393e1ca-eb83-431f-abb6-0a3927561c8e",
          "length": 253,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "ef266717-fa3e-421d-ab5e-c5dc928e56b8"
        },
        "item": {
          "id": "80e1fe42-e2b5-4f47-9ee6-e6e02bf17f84",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "0c18c956-6532-4e87-9e40-9820ce552acb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9480692-076d-45e7-abc8-c5452c5e416c",
        "cursor": {
          "ref": "f05e64a7-3273-4e2f-bcfd-b8b3052658ec",
          "length": 253,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "45305032-6d2f-4cd1-9c3a-9fc1a4507693"
        },
        "item": {
          "id": "e9480692-076d-45e7-abc8-c5452c5e416c",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "eef89361-49f4-48b1-96ba-6b8cc4162b99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "3a1c9700-b457-4283-94a4-7f38dd00cfe8",
        "cursor": {
          "ref": "505df49c-f8d9-4ccf-941c-74c9a0c75b45",
          "length": 253,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "a1338745-ee34-4598-b557-f8dc17a10487"
        },
        "item": {
          "id": "3a1c9700-b457-4283-94a4-7f38dd00cfe8",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "840a6f7c-426e-451b-a9dd-42794cf4afa0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26442992-544d-4ede-bb1e-5d498e5551db",
        "cursor": {
          "ref": "169fba16-c2b2-4e9e-a048-53e824b9a8ba",
          "length": 253,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "d686fbf4-887a-4965-b535-208694bafa4b"
        },
        "item": {
          "id": "26442992-544d-4ede-bb1e-5d498e5551db",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "370c9e05-7635-42a7-81f0-b4a0e052a000",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "833a488e-5d9f-4505-bcf8-773042e98f8d",
        "cursor": {
          "ref": "ede1297f-8b7d-4348-8815-7f61c1054c65",
          "length": 253,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "2a27bd27-f2eb-4e76-8fb1-22b7fedec225"
        },
        "item": {
          "id": "833a488e-5d9f-4505-bcf8-773042e98f8d",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "b02ed8b6-e7ff-468f-a3ff-106d0c25e620",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f63c3a1-f88e-4657-825e-841b00c4c8d6",
        "cursor": {
          "ref": "d085de16-27f7-42f2-ad78-478c52c92606",
          "length": 253,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "698ccc51-cbdc-4701-b7c1-0b94545d1d95"
        },
        "item": {
          "id": "1f63c3a1-f88e-4657-825e-841b00c4c8d6",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "d613177e-8653-4986-aa49-cad47a7ecb03",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da92d42c-038e-42fc-bbc8-1aafd0207fca",
        "cursor": {
          "ref": "3a835a33-5bda-4a1f-91d8-7462e7b03175",
          "length": 253,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "bfdf98ae-730a-4132-b364-6b230a3d4bba"
        },
        "item": {
          "id": "da92d42c-038e-42fc-bbc8-1aafd0207fca",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "d541dc88-3392-4e9b-9485-bd5d2e09d36a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6e20bd3-37cd-4bda-8e8d-f2deb27975c7",
        "cursor": {
          "ref": "919068f4-ca42-4732-9f14-31186f8fb8c1",
          "length": 253,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "22b5f7cb-d30b-48b3-b585-4acec9b6203f"
        },
        "item": {
          "id": "d6e20bd3-37cd-4bda-8e8d-f2deb27975c7",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "2d8599c0-9ba2-40f1-aa62-e76e5d6672db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea5b78df-3806-46bf-a1cd-6786cb90f771",
        "cursor": {
          "ref": "9e3a5266-0258-4034-87d7-b8b21d561389",
          "length": 253,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "12bd1358-4c9d-4379-aee3-9255ccf56078"
        },
        "item": {
          "id": "ea5b78df-3806-46bf-a1cd-6786cb90f771",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "1b5636f7-d34c-4286-8249-8178e522a1b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "dabba494-2349-4088-8a44-2d4728eb1ced",
        "cursor": {
          "ref": "7558e2ca-04af-43a0-9fe8-aab8b5886e53",
          "length": 253,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "6c30576f-57ef-445e-915a-b1305312f348"
        },
        "item": {
          "id": "dabba494-2349-4088-8a44-2d4728eb1ced",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "0bf0fad6-7aaf-4576-9600-71d61adb0759",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfca20fe-3dbe-446c-a121-f521b0d6ee22",
        "cursor": {
          "ref": "d90dcb30-ba72-4096-b9f3-8cb9bacd118b",
          "length": 253,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "723e5b4e-cf09-4830-8c2d-5bbc60ae7f46"
        },
        "item": {
          "id": "cfca20fe-3dbe-446c-a121-f521b0d6ee22",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "e4e47cca-813e-400f-8647-e594e958792f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b8f609d-b374-4bd0-92ff-6aec5b7846d2",
        "cursor": {
          "ref": "136bbce1-c08e-4a8d-9943-6322341d5038",
          "length": 253,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "6e9c9aef-145f-4624-b852-ac11458b1367"
        },
        "item": {
          "id": "4b8f609d-b374-4bd0-92ff-6aec5b7846d2",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "e1f8482f-1673-475c-a0d9-e9d74293c739",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b540224-9e01-4a37-9e5b-f4a0c1e625b2",
        "cursor": {
          "ref": "457b4fb6-3ef9-4016-83a7-bbcf33ae7110",
          "length": 253,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "9afe86b9-ca55-43e3-be6e-a03ded7975d6"
        },
        "item": {
          "id": "2b540224-9e01-4a37-9e5b-f4a0c1e625b2",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "7c7cdf5e-e049-4f6d-ac72-852c639a9e30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d885acbe-bef5-4dbe-b751-07271a7ab245",
        "cursor": {
          "ref": "a0599014-f152-4cd9-9c28-1efd50f923bb",
          "length": 253,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "02233de6-0de1-47e3-9aa7-583643c4a781"
        },
        "item": {
          "id": "d885acbe-bef5-4dbe-b751-07271a7ab245",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "1782456d-dcf0-41d9-85e3-54251f1d6957",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4618cba-e555-474f-9d9e-3a656052ca0c",
        "cursor": {
          "ref": "dd791ee0-06fb-48b8-9f60-5cb64f65dcba",
          "length": 253,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "fe09ae8b-ece5-4b7e-a28c-6afd2db2a94b"
        },
        "item": {
          "id": "e4618cba-e555-474f-9d9e-3a656052ca0c",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "e814d25f-87b7-4527-a427-f6fd13bfaba6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 14,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "201e3e1c-decd-410b-928f-536c6650431c",
        "cursor": {
          "ref": "1c1d282b-8782-400d-b177-f6b529afeb82",
          "length": 253,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "47eb9805-8449-4d7b-bf30-3e778e093685"
        },
        "item": {
          "id": "201e3e1c-decd-410b-928f-536c6650431c",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "bfd82585-cb18-4ae6-9f5a-a0aafce899cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "637383a5-db44-492e-a1c1-16d0fc23d0a6",
        "cursor": {
          "ref": "4269986c-e50b-41d7-bbc6-50797bc96344",
          "length": 253,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "1787b495-15bf-4b3d-9818-b32aee558ab7"
        },
        "item": {
          "id": "637383a5-db44-492e-a1c1-16d0fc23d0a6",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "ea4d80d6-a759-41cb-a3e1-3ba5678c70d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "beeddb13-6a9d-4fd2-bd32-415838e7ab08",
        "cursor": {
          "ref": "5ec036c4-ba84-49df-bdd6-401c1d8bed6e",
          "length": 253,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "b1e46089-0b45-4e06-a777-14aa1ae0b702"
        },
        "item": {
          "id": "beeddb13-6a9d-4fd2-bd32-415838e7ab08",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "693827f3-eccc-4906-8375-2e2a306a4c76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3a2e510-2f5b-47b1-ba5f-23c7353473a2",
        "cursor": {
          "ref": "154f8dc4-bf08-43cb-8fd5-3fac07514639",
          "length": 253,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "18d62f99-5504-4272-9aae-d569cdbaabd9"
        },
        "item": {
          "id": "b3a2e510-2f5b-47b1-ba5f-23c7353473a2",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "a2712583-2e71-4d2e-9331-fc5a6c7a3c1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d00028c9-7664-4ffa-bf2b-dc234107cbe2",
        "cursor": {
          "ref": "521abe78-fa15-4853-837c-da5ef7811baf",
          "length": 253,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "7d7c919e-64b1-4410-bdce-c304b5d3d67a"
        },
        "item": {
          "id": "d00028c9-7664-4ffa-bf2b-dc234107cbe2",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "f3ffad91-d67d-4436-9c17-d982a7504aab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae790a64-bff8-45df-841f-296fcaf9f7d5",
        "cursor": {
          "ref": "0a105267-e613-4bef-abc7-2a6717ad51b3",
          "length": 253,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "b3bac5a2-cd55-4c65-8642-b53063ce9a08"
        },
        "item": {
          "id": "ae790a64-bff8-45df-841f-296fcaf9f7d5",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "07e47302-a767-416f-9a2d-1aad5cbbea16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03eaad0f-f503-444b-9eab-46382bce2d23",
        "cursor": {
          "ref": "e06277cb-5e9d-4b87-b241-97b5e284c4c2",
          "length": 253,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "aca6e05c-6385-4416-b4e1-86ea59017cfa"
        },
        "item": {
          "id": "03eaad0f-f503-444b-9eab-46382bce2d23",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "cbc601fd-34ac-42f4-a250-d7475f0dfb78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3200cbc3-aabe-4ccb-8d0f-0128b702ae36",
        "cursor": {
          "ref": "0c0af85e-8fab-4a4c-8d2c-15bf9a940d31",
          "length": 253,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "73e51c1d-a963-42c6-93e1-f057c9b15914"
        },
        "item": {
          "id": "3200cbc3-aabe-4ccb-8d0f-0128b702ae36",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "f49b5179-3c97-47b8-956a-4e3e93304e92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef543b6b-a935-4663-8d79-784c5303417d",
        "cursor": {
          "ref": "cf2bcbab-822a-42da-8f30-fd9a33dbf27e",
          "length": 253,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "6a86ff69-9ffb-4334-b25d-06db02b2a38f"
        },
        "item": {
          "id": "ef543b6b-a935-4663-8d79-784c5303417d",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "4be11067-55be-4e58-a5b0-9fec5ef0ade3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21e886e1-87dc-466b-923d-f1759282f731",
        "cursor": {
          "ref": "de60500b-f03b-4341-be52-a7dc6b0488cb",
          "length": 253,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "8a36bbaa-0221-4a1b-935c-2ab5d23baac3"
        },
        "item": {
          "id": "21e886e1-87dc-466b-923d-f1759282f731",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "f434c751-3aaa-4fce-bfde-f93ed105fedf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2dd2ac2d-6590-4ebb-aadb-f943005f7b7e",
        "cursor": {
          "ref": "4c8cfc7a-4663-4c0c-898d-b28e244efe5b",
          "length": 253,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "d29b1b03-0369-4f06-96a2-bb7e5556dd41"
        },
        "item": {
          "id": "2dd2ac2d-6590-4ebb-aadb-f943005f7b7e",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "70cf6bbd-4121-4608-8cf4-fe0c969c481d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8073f5d0-ea3e-47dd-b1f9-291d3238f246",
        "cursor": {
          "ref": "4be6d456-014a-4975-b3c0-ea9da3e3e7da",
          "length": 253,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "b2a63592-d90a-46e9-a92f-1646faf63aa0"
        },
        "item": {
          "id": "8073f5d0-ea3e-47dd-b1f9-291d3238f246",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "a1abd1dc-3de0-4b70-b2d7-2015b76b72de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06a2033c-26fd-4909-81fe-c639c3969d66",
        "cursor": {
          "ref": "fbb87687-601a-412e-84e9-0d9f7066f526",
          "length": 253,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "c2148101-0bec-4ced-a0f5-a0c4b3f7a573"
        },
        "item": {
          "id": "06a2033c-26fd-4909-81fe-c639c3969d66",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "c5f00ea0-9905-4be6-8bd1-5d7e8f3a689f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7816e658-4fd7-4ddd-81c2-db50bf3f1df7",
        "cursor": {
          "ref": "bc579aa1-c254-4a33-bb55-5b28b524497e",
          "length": 253,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "8d0d2b56-105c-49a3-8366-857d98a2014c"
        },
        "item": {
          "id": "7816e658-4fd7-4ddd-81c2-db50bf3f1df7",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "98d11024-38af-4208-b927-c5f4761b7520",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 684
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bde80515-b71d-430f-b337-d00a619d152a",
        "cursor": {
          "ref": "cbb7ccb0-0d70-4707-a0dc-70a2011dd75c",
          "length": 253,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "afa9b4cb-be67-4364-a8ed-7b0518545db3"
        },
        "item": {
          "id": "bde80515-b71d-430f-b337-d00a619d152a",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "d0247a82-e969-43b8-a451-196698f1ad04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 683
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1d3e4ac-ee27-4479-8984-10fb1578b783",
        "cursor": {
          "ref": "142a2b30-9bf7-4a5e-a8fc-2b91553871df",
          "length": 253,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "7d2ac430-3e23-46b3-a6f3-d36a024980da"
        },
        "item": {
          "id": "b1d3e4ac-ee27-4479-8984-10fb1578b783",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "2a165d2c-62ae-4311-9c2c-e88a7359cd5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c852f56f-fe7a-447b-9784-f84dfcaa1815",
        "cursor": {
          "ref": "58dd544b-1e31-45a7-924a-5f9156b19956",
          "length": 253,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "da308d42-182e-41c0-9b70-c58a9f2f424b"
        },
        "item": {
          "id": "c852f56f-fe7a-447b-9784-f84dfcaa1815",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "eef84c51-89f5-4d88-aa28-eb19eca93940",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6c0b45e-a487-4c00-8688-1d81abbad152",
        "cursor": {
          "ref": "07a7d813-81cf-4c27-b822-e9d6ec8ec139",
          "length": 253,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "7ee8d999-d8bc-4391-ab47-e4ec2f8e4847"
        },
        "item": {
          "id": "f6c0b45e-a487-4c00-8688-1d81abbad152",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "13dad5e2-e88f-4c9c-b3f0-d6877bb7637e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69ba2d8e-0024-42e6-8198-344a28eb7ddd",
        "cursor": {
          "ref": "41c0cc64-f5ec-4968-b94c-60edacf1770c",
          "length": 253,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "eab91271-fa28-42b2-affb-2826e8e4e426"
        },
        "item": {
          "id": "69ba2d8e-0024-42e6-8198-344a28eb7ddd",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "128537a6-608e-4b7f-97cf-56288c6783d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3c7a1e8-6527-478a-b96a-81e6aa5ef0c5",
        "cursor": {
          "ref": "553f962d-d15c-4e6a-ae7f-95174789197b",
          "length": 253,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "720019c6-f617-4f0f-8400-3c19ebccf475"
        },
        "item": {
          "id": "e3c7a1e8-6527-478a-b96a-81e6aa5ef0c5",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "3c25b824-8188-4cbd-8093-bbd684a33a25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a139623c-e1a3-4313-a2c8-8377f3147c7b",
        "cursor": {
          "ref": "1e78e6e6-3c6d-4057-b9a1-618b766e0db2",
          "length": 253,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "55df41d6-f20f-4ae0-8866-3fdf756bab14"
        },
        "item": {
          "id": "a139623c-e1a3-4313-a2c8-8377f3147c7b",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "9830f8d5-1cb8-4137-b6e0-5cb3c0626f12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad7d016a-6e28-40b8-a19d-69897a3a8903",
        "cursor": {
          "ref": "296fc1b7-80c4-48ca-8d0b-a108cf809f3f",
          "length": 253,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "73038958-807c-4d15-95ba-c868a076c871"
        },
        "item": {
          "id": "ad7d016a-6e28-40b8-a19d-69897a3a8903",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "6432f6ed-a4d9-43e7-87eb-56cdcf97715a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f08cd868-4ab3-43ce-92b1-10f70fde70fc",
        "cursor": {
          "ref": "1da9c9af-669b-4b0d-9a5b-09db9e0ba7be",
          "length": 253,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "824cf6f0-39b1-4b75-8a25-b452f402bbd9"
        },
        "item": {
          "id": "f08cd868-4ab3-43ce-92b1-10f70fde70fc",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "c8a98497-e7eb-421e-8428-b2bf8ad6897f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16d7b0ef-122b-48d6-8181-daede9a74448",
        "cursor": {
          "ref": "04987b78-3c72-4f96-a41e-c7e0f219a68b",
          "length": 253,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "d4cbe08d-9ec9-4574-b719-84ed68360232"
        },
        "item": {
          "id": "16d7b0ef-122b-48d6-8181-daede9a74448",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "aaeaf1aa-0a90-4526-9a02-261f81a922bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cfcba09-a1e0-46b1-9265-fbc6b2fbf8d5",
        "cursor": {
          "ref": "a7b87e2e-46d4-4eb7-9025-426dbe18ae3f",
          "length": 253,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "9613972a-705c-4932-85f6-c5cb5b75b6d7"
        },
        "item": {
          "id": "9cfcba09-a1e0-46b1-9265-fbc6b2fbf8d5",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "671dd81e-a0ce-4f17-b8e0-7b4b130e1166",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19e64c4a-fdca-45d5-b754-82580abe267c",
        "cursor": {
          "ref": "8d5f6cc2-05e7-455f-813a-4e15b5143ed6",
          "length": 253,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "b0468009-4390-45c2-a510-e2383e48c67a"
        },
        "item": {
          "id": "19e64c4a-fdca-45d5-b754-82580abe267c",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "cb208d1d-2da7-4a78-b9a2-90c11e7f32e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 355
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a594d808-a1d4-4e48-b56e-fb441bbe7308",
        "cursor": {
          "ref": "cdcffcb8-6a20-48dd-8b66-e038cd8f4f7c",
          "length": 253,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "54bf64b8-6a31-4914-8fe6-cd6876b6680f"
        },
        "item": {
          "id": "a594d808-a1d4-4e48-b56e-fb441bbe7308",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "8c9f5536-a25d-4bc7-ad81-205550c8979a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c3cfaa6-b80d-4c9a-b9d6-d91457138aae",
        "cursor": {
          "ref": "dd0bb2ba-5e62-4255-aa88-07801dbca4c4",
          "length": 253,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "703ed724-4892-48a8-bacf-bc48e8190775"
        },
        "item": {
          "id": "8c3cfaa6-b80d-4c9a-b9d6-d91457138aae",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "470a570f-fe7f-47ee-8937-91d4f1bdcbb4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e87c2031-ad8e-4a44-b47c-178d4a1cb5b0",
        "cursor": {
          "ref": "bde716f3-8f94-4cc0-b23a-227b51ab7bec",
          "length": 253,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "fb7e2742-aa21-41ec-9273-9dd7effd4c48"
        },
        "item": {
          "id": "e87c2031-ad8e-4a44-b47c-178d4a1cb5b0",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "0f57eb6e-3162-441b-b8ae-03462c02a2d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 14,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67cc3a94-47f9-48a0-bf0b-168e982a7628",
        "cursor": {
          "ref": "7c78b8fe-1591-4362-8c46-619a0e6f0567",
          "length": 253,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "52dc614c-5d2c-416b-875f-8370bd23d6c9"
        },
        "item": {
          "id": "67cc3a94-47f9-48a0-bf0b-168e982a7628",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "0c82c319-4cde-46a0-ac50-012e68b1220c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9090683a-2265-4994-9d36-b208bf78346f",
        "cursor": {
          "ref": "a4a9ddc6-a64a-40d3-95e9-06cb0a8c05e9",
          "length": 253,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "9eb71d3a-5b5f-4f4b-aae4-dbabcbfc5dbf"
        },
        "item": {
          "id": "9090683a-2265-4994-9d36-b208bf78346f",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "b6669487-dd62-4da0-a294-4a316074d1ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 361
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93be8a76-d013-4aa8-be47-7661a68684ba",
        "cursor": {
          "ref": "5701288b-128f-4b8c-a7d0-71a3d49f213a",
          "length": 253,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "9b030934-cc14-4cd5-ae7a-6375c7c2d45e"
        },
        "item": {
          "id": "93be8a76-d013-4aa8-be47-7661a68684ba",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "00cc1c1a-a03b-4e6e-b2a0-2d819c63fc3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 515
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b38fb27-40c4-4b72-b1f0-43007bf7eaf1",
        "cursor": {
          "ref": "11736696-edf4-4d37-95c9-da6b161eb187",
          "length": 253,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "da2c4072-ad99-4138-905c-a0d07aac3c67"
        },
        "item": {
          "id": "4b38fb27-40c4-4b72-b1f0-43007bf7eaf1",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "90245894-9067-4129-a9de-d4818ca20389",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 514
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9da2bc6-bece-4fa4-9d67-7181e39eabdd",
        "cursor": {
          "ref": "a11daad0-01fc-4dfe-a8eb-3b047753b97f",
          "length": 253,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "ef6dbc5b-e104-4024-9a31-34f5cff499a0"
        },
        "item": {
          "id": "f9da2bc6-bece-4fa4-9d67-7181e39eabdd",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "c64bdd98-47bb-4c0c-b46d-7869cdf84508",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 516
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e57b52a9-fa66-49c6-a31c-5af2062c9199",
        "cursor": {
          "ref": "ac74cb56-8820-4a23-9047-4416c688c422",
          "length": 253,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "d33cfe15-2498-4ae2-90f2-b043315f9954"
        },
        "item": {
          "id": "e57b52a9-fa66-49c6-a31c-5af2062c9199",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "7257b426-6060-4ddc-bb91-cd9c9284a400",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3b479b2-15e3-4264-870a-ce51fe37c03b",
        "cursor": {
          "ref": "3d255252-6ba0-417f-b33e-4c4a6d41dbc0",
          "length": 253,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "32ba512d-a91d-4ae2-9aaf-e62e170637ff"
        },
        "item": {
          "id": "d3b479b2-15e3-4264-870a-ce51fe37c03b",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "2fb7f3c0-1517-46eb-aa34-1c7bb32308a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 516
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c175a3eb-03c0-49e2-9580-f78c95abf2ce",
        "cursor": {
          "ref": "800f6feb-e8ef-4d4a-978d-6febddae08df",
          "length": 253,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "3f06c746-e17f-4756-b467-786490e6cf43"
        },
        "item": {
          "id": "c175a3eb-03c0-49e2-9580-f78c95abf2ce",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "6392bce2-c83a-45d4-96c1-57078201928d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 480
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbe09e98-ad0a-454b-874b-f0c367734115",
        "cursor": {
          "ref": "8182a85b-b8c5-4922-9d9d-3a8a4af3b7ce",
          "length": 253,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "99af2c80-ac71-44b2-b3dc-da9a536698e6"
        },
        "item": {
          "id": "bbe09e98-ad0a-454b-874b-f0c367734115",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "955d6e63-5d0b-4383-afe2-7acf6fc54da6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 301
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa1d8e95-7bbe-42b2-9dea-3ee7560f2c89",
        "cursor": {
          "ref": "633dfb69-8d7d-4305-9dfc-a656f79c8deb",
          "length": 253,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "16715441-24cf-4fd5-b799-13746e592604"
        },
        "item": {
          "id": "fa1d8e95-7bbe-42b2-9dea-3ee7560f2c89",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "63c1b960-3c86-4b07-8b4e-943d7c5ce382",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 300
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3cb7c7c0-7652-4c44-b662-24a52448feb5",
        "cursor": {
          "ref": "387157c1-2c11-481d-95c1-a866d1455569",
          "length": 253,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "066c4c6b-b0bc-4483-b1e1-be52fff1c381"
        },
        "item": {
          "id": "3cb7c7c0-7652-4c44-b662-24a52448feb5",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "02a6ccbd-a2f5-4846-93be-e34e28c1a043",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb518785-b8fb-4c1a-8e3a-a76cceb433e9",
        "cursor": {
          "ref": "2de0f766-f98d-409f-8e52-22f9c8c5ab1a",
          "length": 253,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "b700f77c-b356-4d60-a01a-da56dfbf110e"
        },
        "item": {
          "id": "eb518785-b8fb-4c1a-8e3a-a76cceb433e9",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "30d05aa1-451b-411b-ba21-05510622a06c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 480
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "236125b8-3163-428c-8f75-1ba3feb253fe",
        "cursor": {
          "ref": "933419ab-9ad8-4ac8-9bb5-67789fa2954a",
          "length": 253,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "aa7ea918-bd92-451b-a700-94d53c9506f9"
        },
        "item": {
          "id": "236125b8-3163-428c-8f75-1ba3feb253fe",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "5f7bc5fd-e682-4463-b83b-2f2a573b29d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fcb5e0e-aa54-4654-9e3a-093267da3e42",
        "cursor": {
          "ref": "af87d93c-4eeb-465e-af04-eb87e2bef1cf",
          "length": 253,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "da9d0d73-a28a-41a0-83ef-80084fa2c64c"
        },
        "item": {
          "id": "2fcb5e0e-aa54-4654-9e3a-093267da3e42",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "1e82a3f1-d57e-4d42-addf-99965369d6db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 162,
          "responseSize": 480
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8e02a3a-b195-4c2d-89b5-6a9e01dfd6fa",
        "cursor": {
          "ref": "c6f88445-6fda-4992-9885-c989630f3c33",
          "length": 253,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "194772d5-1b58-4557-8e96-1e1f93132986"
        },
        "item": {
          "id": "f8e02a3a-b195-4c2d-89b5-6a9e01dfd6fa",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "987b2bc0-a9cc-42e6-b79a-d55a8c976721",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:104)"
            }
          }
        ]
      },
      {
        "id": "d6d30be6-9c8a-4c61-aaf6-86f8fbae6756",
        "cursor": {
          "ref": "054ca2aa-6b95-4f41-8361-04b9337be719",
          "length": 253,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "60aba502-9cc1-4374-8911-897f7a49aa63"
        },
        "item": {
          "id": "d6d30be6-9c8a-4c61-aaf6-86f8fbae6756",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "56a9c030-55d6-4208-9b44-df86d2c44e6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:105)"
            }
          }
        ]
      },
      {
        "id": "56c371ee-3a34-4dc4-a280-f2041a1a2326",
        "cursor": {
          "ref": "6654e04c-86b3-4f23-8563-eeeb4c77e722",
          "length": 253,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "ffb8fcaa-e15a-4a3c-842c-6833a7c53345"
        },
        "item": {
          "id": "56c371ee-3a34-4dc4-a280-f2041a1a2326",
          "name": "credentials_issue"
        },
        "response": {
          "id": "eee1b315-4aa3-49fc-bdbb-012929745f23",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 14,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:106)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:106)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Cannot read properties of undefined (reading '@context')",
              "stack": "TypeError: Cannot read properties of undefined (reading '@context')\n   at Object.eval sandbox-script.js:3:106)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 3,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:4:106)"
            }
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 4,
              "test": "response credentialSubject matches request credential.credentialSubject",
              "message": "Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:5:106)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 5,
              "test": "response issuanceDate matches request credential.issuanceDate",
              "message": "Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:6:106)"
            }
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 6,
              "test": "response proof.created is close to 'now'",
              "message": "Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:7:106)"
            }
          }
        ]
      },
      {
        "id": "3ddfd227-d8ca-469b-98fc-c7d55205becb",
        "cursor": {
          "ref": "149c0e1b-2708-4e9d-a983-b602d1af6f74",
          "length": 253,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "39303a4a-8e50-4af6-9c71-7651975eb6b9"
        },
        "item": {
          "id": "3ddfd227-d8ca-469b-98fc-c7d55205becb",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "64b6f5c5-5da1-4280-802c-c82df019e2e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 14,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:107)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:107)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Cannot read properties of undefined (reading '@context')",
              "stack": "TypeError: Cannot read properties of undefined (reading '@context')\n   at Object.eval sandbox-script.js:3:107)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 3,
              "test": "response issuer matches request credential.issuer.id",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:4:107)"
            }
          }
        ]
      },
      {
        "id": "a2669dd6-2ce7-47fb-844c-7126e8c8635b",
        "cursor": {
          "ref": "95928dec-88ef-4b62-84e8-c721b7850799",
          "length": 253,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "c5bd527c-a34c-49eb-9e77-da900c5ac914"
        },
        "item": {
          "id": "a2669dd6-2ce7-47fb-844c-7126e8c8635b",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "cfb2b337-61c8-4ad7-aac8-b84680bb8641",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:108)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:108)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Cannot read properties of undefined (reading '@context')",
              "stack": "TypeError: Cannot read properties of undefined (reading '@context')\n   at Object.eval sandbox-script.js:3:108)"
            }
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 3,
              "test": "response credentialSubject.id matches request credential.credentialSubject.id",
              "message": "Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:4:108)"
            }
          }
        ]
      },
      {
        "id": "a1454b3e-73ec-494c-a988-1faf8aa84b99",
        "cursor": {
          "ref": "5b625cb3-cc22-4102-97ad-9dc13a178a72",
          "length": 253,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "925c884a-0eda-4c49-9cae-a46abafb705c"
        },
        "item": {
          "id": "a1454b3e-73ec-494c-a988-1faf8aa84b99",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "d8dc807a-6439-4a6f-ba8b-fb71cf78ccf8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:109)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:109)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Cannot read properties of undefined (reading '@context')",
              "stack": "TypeError: Cannot read properties of undefined (reading '@context')\n   at Object.eval sandbox-script.js:3:109)"
            }
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 3,
              "test": "response proof.created matches request options.created",
              "message": "Cannot read properties of undefined (reading 'proof')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'proof')\n   at Object.eval sandbox-script.js:4:109)"
            }
          }
        ]
      },
      {
        "id": "4ab2325c-6874-4d15-a340-208e7be48d34",
        "cursor": {
          "ref": "5324ca56-53b5-4eb0-9314-f574b39c089f",
          "length": 253,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "bb065588-6db3-4101-a1a1-47ecd7ed97c4"
        },
        "item": {
          "id": "4ab2325c-6874-4d15-a340-208e7be48d34",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "20cb5d3b-7861-492d-bc48-c4d18744e840",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 480
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:110)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Cannot read properties of undefined (reading '@context')",
              "stack": "TypeError: Cannot read properties of undefined (reading '@context')\n   at Object.eval sandbox-script.js:3:110)"
            }
          }
        ]
      },
      {
        "id": "585e187b-2cee-4d4e-b262-9211f3eb5afe",
        "cursor": {
          "ref": "282d6d6c-9268-41b0-a215-f95e0e364260",
          "length": 253,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "4cafb1d0-4703-479d-b50b-7b04b9fa1fbe"
        },
        "item": {
          "id": "585e187b-2cee-4d4e-b262-9211f3eb5afe",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "21ab45af-67b8-41f3-9b35-f2f66b36398a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "585e187b-2cee-4d4e-b262-9211f3eb5afe",
        "cursor": {
          "ref": "282d6d6c-9268-41b0-a215-f95e0e364260",
          "length": 253,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "4cafb1d0-4703-479d-b50b-7b04b9fa1fbe"
        },
        "item": {
          "id": "585e187b-2cee-4d4e-b262-9211f3eb5afe",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "21ab45af-67b8-41f3-9b35-f2f66b36398a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d11a6ee-51f0-4b35-9914-419e77673866",
        "cursor": {
          "ref": "11249fa4-0099-4534-9482-8c759430a43d",
          "length": 253,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "069761ca-e2c7-490d-bb1f-1a02b4b580b8"
        },
        "item": {
          "id": "9d11a6ee-51f0-4b35-9914-419e77673866",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "b7f2075b-a85c-4c77-80b4-9558796bbbaf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 307
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "583017fd-dc4a-4478-b3bb-f981140ad20d",
        "cursor": {
          "ref": "bb545333-d81d-4045-9a1d-ba4d79e86768",
          "length": 253,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "68febeb9-3abe-4428-bf36-19483cf35b5f"
        },
        "item": {
          "id": "583017fd-dc4a-4478-b3bb-f981140ad20d",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "3e7261fe-3523-46df-970f-61eb376ced3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 306
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71837716-7ced-442f-8687-1eaacc17b153",
        "cursor": {
          "ref": "09418ee0-1699-4a68-a3bc-176910c08b91",
          "length": 253,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "57aedd9c-8df7-4cb1-91ac-5917ca9da33e"
        },
        "item": {
          "id": "71837716-7ced-442f-8687-1eaacc17b153",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "cc4a8b15-5956-4b29-9880-1b6bf92c8010",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 308
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ff931d2-4027-40a2-a099-886b2541d53e",
        "cursor": {
          "ref": "6bdb6359-c647-4a53-abf5-0185387f4ec8",
          "length": 253,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "1512187d-bce2-4bd6-b0eb-9db162796bb2"
        },
        "item": {
          "id": "3ff931d2-4027-40a2-a099-886b2541d53e",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "2481af80-94a5-4ae8-b296-5096a26d5f0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca7ae16e-1694-479d-9b87-458e5b27bfba",
        "cursor": {
          "ref": "a654ad0f-e05c-4cc1-8e01-ade0253cc958",
          "length": 253,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "5eb9724e-5b4c-4000-aba3-21abbd960da7"
        },
        "item": {
          "id": "ca7ae16e-1694-479d-9b87-458e5b27bfba",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "da5b3682-e16e-4956-abb6-8e50f0d928b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 308
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7d49b74-e900-49b7-b482-3065a906e393",
        "cursor": {
          "ref": "6eeeeec9-aef3-4070-9616-d44eede010e9",
          "length": 253,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "bcaa602f-e64f-43b0-a2b0-e6467953b7d2"
        },
        "item": {
          "id": "d7d49b74-e900-49b7-b482-3065a906e393",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "7164d6f2-9289-4f24-b9d8-607dfed28b4f",
          "status": "OK",
          "code": 200,
          "responseTime": 4,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "f95c898d-9a01-4e81-a801-86dfd9bae88e",
        "cursor": {
          "ref": "15de4613-7349-4556-8cc3-447550367bc2",
          "length": 253,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "de6b67d8-065d-4aba-b0f9-00b5c7e4bdeb"
        },
        "item": {
          "id": "f95c898d-9a01-4e81-a801-86dfd9bae88e",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "52a9df86-2c9e-4006-8237-f0206891ea48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9def2dd4-4608-4e7f-b3dd-315d2942e30e",
        "cursor": {
          "ref": "48e23775-3f39-4a83-8a3a-fa8a3904a47e",
          "length": 253,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "4ea94246-6656-4f58-babf-9b0f3fbc8fc5"
        },
        "item": {
          "id": "9def2dd4-4608-4e7f-b3dd-315d2942e30e",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "d365dc7c-7640-4b4c-9af3-9beb698933f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4cf7613-b4f8-4a64-9e0f-0136093fe62d",
        "cursor": {
          "ref": "953ad015-4e73-4e06-816c-88993c158805",
          "length": 253,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "ce881825-8d10-479f-b89f-4bb418b6d197"
        },
        "item": {
          "id": "a4cf7613-b4f8-4a64-9e0f-0136093fe62d",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "05573518-84c0-4576-8c7a-6b4828ed22e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b90128c5-c4ee-4353-889a-ad7d38e49615",
        "cursor": {
          "ref": "0c01ac5a-2dfd-4993-bd3b-55a9a3bcd064",
          "length": 253,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "b8dee97b-d85c-407f-8138-8268b6183804"
        },
        "item": {
          "id": "b90128c5-c4ee-4353-889a-ad7d38e49615",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "cc3529c3-5dc6-49a1-a948-be11deb90df9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b1cdcd9-3a7f-4585-9ef8-e5981a6ff2b7",
        "cursor": {
          "ref": "7f3e3369-ba43-44b9-bed4-dd455bf8f2d6",
          "length": 253,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "c33e218f-7c32-46da-b002-59aa1f0d002f"
        },
        "item": {
          "id": "7b1cdcd9-3a7f-4585-9ef8-e5981a6ff2b7",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "758f4bae-6e38-4464-a733-1f4f753057ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47c93097-48d8-41b5-bb8a-9f91cff76178",
        "cursor": {
          "ref": "051b17fe-44c4-4a7d-8585-44ca50860eb4",
          "length": 253,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "e4d0a7b0-2a82-4b44-9985-e54c311ff53b"
        },
        "item": {
          "id": "47c93097-48d8-41b5-bb8a-9f91cff76178",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "d855d9bf-debb-41ba-8cb7-3e62331511d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05b7e815-d87d-44e3-981c-24067084b2f9",
        "cursor": {
          "ref": "f11fb8c7-6d40-4c59-a6a4-aa9c89b6fcc8",
          "length": 253,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "569fd0c1-15a5-49ef-bde1-b982e7403265"
        },
        "item": {
          "id": "05b7e815-d87d-44e3-981c-24067084b2f9",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "3d6e97d2-66e7-4d8f-be68-d346d4d8a594",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12c0f2a1-1de5-4319-8c44-c3b0a677dea0",
        "cursor": {
          "ref": "17f63e8c-214e-441d-b71b-5eec8880d694",
          "length": 253,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "88383460-794b-4eff-ac7f-8ec3c56ab3e2"
        },
        "item": {
          "id": "12c0f2a1-1de5-4319-8c44-c3b0a677dea0",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "fd9765eb-0960-4c4f-a7f2-d270a7d12180",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5cd01e79-5eee-45ef-8f4d-89cc837b7035",
        "cursor": {
          "ref": "36fedf0a-fc38-45af-8a2f-afef9e40acea",
          "length": 253,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "c778d58a-3dde-410a-94d9-bef63d601dbf"
        },
        "item": {
          "id": "5cd01e79-5eee-45ef-8f4d-89cc837b7035",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "666165c7-b87a-4873-8c83-1e2cb28ae039",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9c72b93-fa81-44a1-a709-ee954d33fb62",
        "cursor": {
          "ref": "ff4c3e4f-a6c7-48c1-9279-cd67d0571bd1",
          "length": 253,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "cfac804b-60ae-48ed-a29f-51321f200e31"
        },
        "item": {
          "id": "d9c72b93-fa81-44a1-a709-ee954d33fb62",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "11d17b5f-a1e0-4f4b-9437-14ab6ae6d39d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44e132cc-39ac-4d3e-b2eb-0cfd112a608a",
        "cursor": {
          "ref": "be832641-ec8b-4125-95bd-c4e05dff1de9",
          "length": 253,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "4f147532-5cf8-4036-8e38-bc1512f79fcd"
        },
        "item": {
          "id": "44e132cc-39ac-4d3e-b2eb-0cfd112a608a",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "4892cccb-4934-4c53-9739-8850f28b9ded",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed76f175-b751-423a-b982-deff7bc52dec",
        "cursor": {
          "ref": "ffdcc331-0a17-4c6d-9996-dcb3b6f92839",
          "length": 253,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "1f2914cd-1d71-46da-8ca1-242f0202aad2"
        },
        "item": {
          "id": "ed76f175-b751-423a-b982-deff7bc52dec",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "3b1c77ab-54a9-422b-a4da-be0db3dd66a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27cf92f3-3c29-42b4-b74e-bcfeb9cd6128",
        "cursor": {
          "ref": "8be852f4-bdb9-4680-8fed-c8910d007550",
          "length": 253,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "fd33d452-a01e-4479-8086-1259a155ae88"
        },
        "item": {
          "id": "27cf92f3-3c29-42b4-b74e-bcfeb9cd6128",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "5079479d-e52f-4b38-86d8-e7e3f09e7c97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d364e0c0-b951-4bfd-8e22-cfde53e2a03c",
        "cursor": {
          "ref": "6c8ef0ac-09b0-411e-957e-01a73a0b4a0d",
          "length": 253,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "fdbd2504-cf18-4f4c-9d0b-9ca632ec8e0a"
        },
        "item": {
          "id": "d364e0c0-b951-4bfd-8e22-cfde53e2a03c",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "ab9cb484-0328-42f5-94ee-2af372360b6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d859db61-0156-43c0-8314-69cef56fdbf4",
        "cursor": {
          "ref": "6ab107a0-fac5-4d7a-8966-200ffbe16fd1",
          "length": 253,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "f42d4ff2-6a74-4da2-8cf0-e2b8c0009742"
        },
        "item": {
          "id": "d859db61-0156-43c0-8314-69cef56fdbf4",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "3a12a19f-1b0e-4e09-adeb-bf59b46447b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9d693d7-c933-4f44-bc1d-8c8708be3b17",
        "cursor": {
          "ref": "46ba08bd-f5f6-432e-a46f-c870ba29386c",
          "length": 253,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "28f88e47-3f61-4297-8bdf-6d0f68da6dfd"
        },
        "item": {
          "id": "e9d693d7-c933-4f44-bc1d-8c8708be3b17",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "1b3b5fe9-bcaa-4db4-a62b-91993fdb7d10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "717726b7-dd45-47ee-9d2b-17c2117d6581",
        "cursor": {
          "ref": "9f3956a0-72c7-46d9-acc4-e416d5e17273",
          "length": 253,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "5000d0e9-4424-4b07-8073-f40356254763"
        },
        "item": {
          "id": "717726b7-dd45-47ee-9d2b-17c2117d6581",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "cb937bc9-229e-4aee-9eb3-10b6dcc5fdab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e5d6936-facb-41a4-8f74-eaec69a0a730",
        "cursor": {
          "ref": "b09832e0-f06e-4fec-95f4-4e32c15e384c",
          "length": 253,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "d484129f-dff6-4fa9-9ff1-6afbbe469935"
        },
        "item": {
          "id": "8e5d6936-facb-41a4-8f74-eaec69a0a730",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "d4c89818-ae5e-4a3c-ad49-53194c8fd734",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa57c43b-b52a-42dc-896c-4e54f09b1263",
        "cursor": {
          "ref": "aeb39ad2-ab64-4923-8551-9f0019c371d8",
          "length": 253,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "ad31ca37-0240-4bb9-8803-dea0a0523d1e"
        },
        "item": {
          "id": "aa57c43b-b52a-42dc-896c-4e54f09b1263",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "d0dceb47-0b04-46c4-8e92-9a809e4bee48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6be47b01-cbd5-4e1e-abcf-24e8f0d80a13",
        "cursor": {
          "ref": "42cb13ae-ab98-4f10-9ad4-3674db7b9beb",
          "length": 253,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "5e955b8e-d190-48f6-a4a2-1b2dbfa96f75"
        },
        "item": {
          "id": "6be47b01-cbd5-4e1e-abcf-24e8f0d80a13",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "b64393ba-ee56-4dea-a828-8db3dc63386c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6341d995-a188-418e-af85-c8068500577d",
        "cursor": {
          "ref": "9ac8b5c4-0058-4547-ae1f-256e4f738ad7",
          "length": 253,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "eb872a7d-aa65-4c19-814b-4046b6bd2b21"
        },
        "item": {
          "id": "6341d995-a188-418e-af85-c8068500577d",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "a67554fc-443b-4841-b499-a516829c4f1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d70dca1c-5c7e-4b6c-bbfa-02ac7b09272a",
        "cursor": {
          "ref": "d94280d0-8496-43fb-b68f-09e6fa812920",
          "length": 253,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "e36597bd-ab26-4746-b005-c160f7560622"
        },
        "item": {
          "id": "d70dca1c-5c7e-4b6c-bbfa-02ac7b09272a",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "c71e3397-1ff5-43f1-b5b6-2e5d0b41f0ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c75ccfa7-ca3c-423c-bfca-4a8ff24df4bc",
        "cursor": {
          "ref": "78df301c-1d5a-4ee8-ab1f-f1ce561c3d89",
          "length": 253,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "09132330-d3c2-407a-beaa-e60f98e0502c"
        },
        "item": {
          "id": "c75ccfa7-ca3c-423c-bfca-4a8ff24df4bc",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "9a37ae9e-71d4-430d-8c70-9e7206f86eef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d8682cd-2926-4619-bd06-02153e825cda",
        "cursor": {
          "ref": "0d77f33c-d7c3-48cf-b287-0eb4c560c171",
          "length": 253,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "7bad1afe-ce51-4876-9b31-70f94660a83f"
        },
        "item": {
          "id": "2d8682cd-2926-4619-bd06-02153e825cda",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "8bb79fc1-f5b1-4f29-8bfd-2ed530976095",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f3be546-a9e8-4732-a792-4579e17b61f6",
        "cursor": {
          "ref": "2fb0bad4-3f9e-4f03-ad0e-c568dd1c2391",
          "length": 253,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "cd525442-28ae-4b37-9f99-a0a02e07406a"
        },
        "item": {
          "id": "3f3be546-a9e8-4732-a792-4579e17b61f6",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "b51179a4-3294-45cb-bba5-62dda0aa1e7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76e05023-ed06-42f3-8fab-b8c8b1c57cfe",
        "cursor": {
          "ref": "fa85041b-b41e-4b1f-a472-4e7f458387df",
          "length": 253,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "0c364528-073f-4b01-a22a-32710ec8f0a2"
        },
        "item": {
          "id": "76e05023-ed06-42f3-8fab-b8c8b1c57cfe",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "1da4536b-4462-4e44-ac44-4e30d14e2d59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "833387eb-1163-4b14-a99b-c81fb3931735",
        "cursor": {
          "ref": "a6e59d44-1f3c-4527-b0b9-15184ae5f6e1",
          "length": 253,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "8a0f5c48-c5e8-4dae-80d2-174980077b80"
        },
        "item": {
          "id": "833387eb-1163-4b14-a99b-c81fb3931735",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "34665696-8189-4d09-9fe0-d94303f05554",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:144)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:144)"
            }
          }
        ]
      },
      {
        "id": "4f7c5d23-d7bb-4f96-83fe-3b98d0008ae3",
        "cursor": {
          "ref": "c6536d17-d88f-4d2c-807f-adae4dc9e471",
          "length": 253,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "ed452ce3-915b-42fa-b6d7-4063779dbfa8"
        },
        "item": {
          "id": "4f7c5d23-d7bb-4f96-83fe-3b98d0008ae3",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "cba499e8-5498-4b29-b355-bc359bbf910b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f7c5d23-d7bb-4f96-83fe-3b98d0008ae3",
        "cursor": {
          "ref": "c6536d17-d88f-4d2c-807f-adae4dc9e471",
          "length": 253,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "ed452ce3-915b-42fa-b6d7-4063779dbfa8"
        },
        "item": {
          "id": "4f7c5d23-d7bb-4f96-83fe-3b98d0008ae3",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "cba499e8-5498-4b29-b355-bc359bbf910b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31519b66-0196-4bbf-9e6d-46b74742d45f",
        "cursor": {
          "ref": "51102f42-e873-4d8f-a2fc-d07c8ac49469",
          "length": 253,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "4dcee395-021b-4a30-a51e-f8910230ebea"
        },
        "item": {
          "id": "31519b66-0196-4bbf-9e6d-46b74742d45f",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "c08bc37a-45a3-431c-8e9b-a9b45e5eaf2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fb4a014-77fa-4568-940b-b96001108a16",
        "cursor": {
          "ref": "a67cfd75-4ef4-4ce3-a3cf-bb8eb6595e84",
          "length": 253,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "9248bf83-d374-498d-a8c0-8b987b77729a"
        },
        "item": {
          "id": "2fb4a014-77fa-4568-940b-b96001108a16",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "859d6b4f-c86a-4c31-8355-1f66a4f5ef2e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa11a7d0-5963-4b7d-bf8e-6fac35ca275e",
        "cursor": {
          "ref": "17ae6892-08c9-40ee-8434-9d4d57ef0943",
          "length": 253,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "ea5a8392-7357-49f6-9d94-1804d9b30ac4"
        },
        "item": {
          "id": "aa11a7d0-5963-4b7d-bf8e-6fac35ca275e",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "bfa3a2df-4930-415c-b763-8e868b64d3d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "246adcde-87e7-4dd9-9972-b6b86891599c",
        "cursor": {
          "ref": "978986b2-44a8-4814-b157-ae85f00d5cef",
          "length": 253,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "06d2bae6-defd-466b-ab5f-3897e915fcf0"
        },
        "item": {
          "id": "246adcde-87e7-4dd9-9972-b6b86891599c",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "e28599c0-5513-4507-b840-e47ec0bf7011",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e3acb8c-8498-4eb5-9d9c-768190b42fcd",
        "cursor": {
          "ref": "00f4cb5f-3ecc-49bf-b4fc-6f9815069ffe",
          "length": 253,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "7d994ac3-9797-4b06-9f2c-e489527cf733"
        },
        "item": {
          "id": "6e3acb8c-8498-4eb5-9d9c-768190b42fcd",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "de231fe2-ea4c-44ee-aea4-9c2169b6d2ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39ed0aa8-8759-4b64-95d6-3125f8401a7f",
        "cursor": {
          "ref": "018edd57-f726-4db9-9a6f-4854a92db4a3",
          "length": 253,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "3a3a2f0b-0eff-4a2b-bf05-47c67eb539cf"
        },
        "item": {
          "id": "39ed0aa8-8759-4b64-95d6-3125f8401a7f",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "76186365-388a-470f-abbd-bfdea8819bce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96882aad-c9bf-4963-a2c4-aa69b35d17c8",
        "cursor": {
          "ref": "ab3df971-583c-4ba2-bf89-ed3583662c2a",
          "length": 253,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "8759e8cd-e5ac-4f52-991f-9996440eff07"
        },
        "item": {
          "id": "96882aad-c9bf-4963-a2c4-aa69b35d17c8",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "1b7e5fb7-2c36-4082-9c38-277b96fe2ece",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "648c8196-bd3b-4c8e-a1b9-b0ab61ad2c7d",
        "cursor": {
          "ref": "123a1169-1870-439c-8cb6-ab29645080f6",
          "length": 253,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "7244752a-eaa7-4457-ac6e-40995dab4f0d"
        },
        "item": {
          "id": "648c8196-bd3b-4c8e-a1b9-b0ab61ad2c7d",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "e28f2253-c029-4913-9c97-8374cb7c8439",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a256e6e-d4a2-4696-9d88-2131fc80fedf",
        "cursor": {
          "ref": "7155c656-55a8-4c93-82cd-545b51c21f3e",
          "length": 253,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "36ac77f7-79a7-4f80-a7ca-306cd7f36b3d"
        },
        "item": {
          "id": "9a256e6e-d4a2-4696-9d88-2131fc80fedf",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "ac7937ed-9b01-45d3-b406-616e9ae2e6da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a15aed7f-706c-4152-be23-d71ce9d32439",
        "cursor": {
          "ref": "4623796a-1f75-400a-963f-f8683ed042e9",
          "length": 253,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "e6bfa6ba-8b60-4b4c-856f-742832221e04"
        },
        "item": {
          "id": "a15aed7f-706c-4152-be23-d71ce9d32439",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "03043dc1-ea24-4d19-a466-a9007a5c8889",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4fb08e07-56dc-4523-b58d-54525ac53a00",
        "cursor": {
          "ref": "1b788d06-37cb-41ef-bae2-b7d114c729ff",
          "length": 253,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "c15f76e2-afd8-4aa9-b2dc-d866083973bc"
        },
        "item": {
          "id": "4fb08e07-56dc-4523-b58d-54525ac53a00",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "5b6fe2e7-9df1-4c58-b644-7c6c5ff9167a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e5eee2e-bfca-46c8-80e2-ddda8088ec9c",
        "cursor": {
          "ref": "852ac391-2e00-4341-bc47-ebb98e8f2cde",
          "length": 253,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "8fc3bd72-b478-47ba-abff-0c74f40d1a35"
        },
        "item": {
          "id": "7e5eee2e-bfca-46c8-80e2-ddda8088ec9c",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "1480573a-035c-4da8-88e6-b5e69a2fe1dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24e4e745-b22e-4cfc-a594-2d90250784aa",
        "cursor": {
          "ref": "74c59cf1-5a28-47b5-a350-bc0fd44f083b",
          "length": 253,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "dd5f4f92-a0ac-46a3-a79c-badc7b8f8735"
        },
        "item": {
          "id": "24e4e745-b22e-4cfc-a594-2d90250784aa",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "9b273d90-6d7e-435b-9539-02b6492d47fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7fa52bcb-c8cd-4059-8159-03016a77ece6",
        "cursor": {
          "ref": "f96fdade-8cd1-4b71-b038-91d50dd4243a",
          "length": 253,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "9ea24371-f1e5-4f86-8797-9e18f61692cf"
        },
        "item": {
          "id": "7fa52bcb-c8cd-4059-8159-03016a77ece6",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "b92a44b7-31a1-4818-a257-7fba7b421aba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5edb3945-be28-44b3-9ced-fdadb76bb140",
        "cursor": {
          "ref": "9f994430-a0a3-4189-beb8-8e500b22574b",
          "length": 253,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "f2b0365a-c137-45f5-8344-020572e16da8"
        },
        "item": {
          "id": "5edb3945-be28-44b3-9ced-fdadb76bb140",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "92298243-bc82-41c0-851d-8bdecb02fda5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8d40ea1-bcd2-405e-8fbe-0542bebd3b25",
        "cursor": {
          "ref": "1e177260-8bae-4afb-b749-b943219366ae",
          "length": 253,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "c4f2a2eb-cc7f-481d-9eea-09933036cc9a"
        },
        "item": {
          "id": "a8d40ea1-bcd2-405e-8fbe-0542bebd3b25",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "38de655d-4eca-415f-af76-66754b618cb5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f25b9df1-7dab-40fb-8388-6e328c8ff824",
        "cursor": {
          "ref": "e69d780c-d7e6-4e42-8090-c6f559417202",
          "length": 253,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "9b71487c-558f-4077-8597-a83a9aa029df"
        },
        "item": {
          "id": "f25b9df1-7dab-40fb-8388-6e328c8ff824",
          "name": "credentials_verify:vc:id:missing"
        },
        "response": {
          "id": "10a566a5-fb6f-44a6-8c1c-70dc209e8bd1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ee69bf9-1702-40f2-a52e-845415af5c07",
        "cursor": {
          "ref": "3f914f9d-103b-4784-b531-8dfc4549f645",
          "length": 253,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "0082e4e3-9e40-483a-9a9c-7c1d6c94f79f"
        },
        "item": {
          "id": "9ee69bf9-1702-40f2-a52e-845415af5c07",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "22873bdd-bb3b-41cf-b856-c175646657bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "797178e3-4a7e-4e30-88af-2d5650da2935",
        "cursor": {
          "ref": "010f749d-cf57-444f-b014-25ea5644cca0",
          "length": 253,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "21383f33-a626-4565-a755-079c2408d6f6"
        },
        "item": {
          "id": "797178e3-4a7e-4e30-88af-2d5650da2935",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "3031df0f-d74d-4b58-a9d8-3680633d3b5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f805215-b8be-4ee7-ad19-bac2675db31e",
        "cursor": {
          "ref": "642b0553-6610-458f-81e2-d748d9102347",
          "length": 253,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "454b314b-b900-48be-9dff-4ce036b55749"
        },
        "item": {
          "id": "4f805215-b8be-4ee7-ad19-bac2675db31e",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "a43b4f79-5545-45e6-8873-927f6a74dfa9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7bfb773-abb3-46b5-a558-3fc43d0cd400",
        "cursor": {
          "ref": "b9f820ea-241c-451b-9a93-386ab7858c15",
          "length": 253,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "a60e0f78-8e0c-4b5a-b9a1-2c420d755df4"
        },
        "item": {
          "id": "f7bfb773-abb3-46b5-a558-3fc43d0cd400",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "f6e85b19-7efe-4ca9-be97-64bb1b1d4ddf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "044ec4f0-3b85-417d-96e7-00213404767b",
        "cursor": {
          "ref": "17b27a52-4883-4094-9be4-2f6d71d94040",
          "length": 253,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "36e82798-d625-43f2-b65b-3f4906225575"
        },
        "item": {
          "id": "044ec4f0-3b85-417d-96e7-00213404767b",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "f5989f3d-4a3d-498a-b807-69d40476fa5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5af7909-fbb3-4d5a-857b-552c4cfb0bcd",
        "cursor": {
          "ref": "f47b07e9-1b5b-494f-aa4f-a3378e714d69",
          "length": 253,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "9d7b06f0-9fc5-49b4-9215-b31c0eee3008"
        },
        "item": {
          "id": "a5af7909-fbb3-4d5a-857b-552c4cfb0bcd",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "6c0c8cba-4d0a-470d-875b-5f9a0c81db3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83adb014-47e3-43bb-8be9-76fc083633fa",
        "cursor": {
          "ref": "cb663035-87f7-4732-ab11-afc630ec510e",
          "length": 253,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "0bb00438-f89f-46ab-99f6-406f849fa9a6"
        },
        "item": {
          "id": "83adb014-47e3-43bb-8be9-76fc083633fa",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "4a333003-caf9-474d-83c2-c4c57658c46c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "234aaf6f-6b26-456c-ae37-d62294f47df0",
        "cursor": {
          "ref": "b2d96fa6-cd1f-4d90-bdd9-d99f9f894bbb",
          "length": 253,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "faa0093f-203a-4447-8863-e3c131a492d9"
        },
        "item": {
          "id": "234aaf6f-6b26-456c-ae37-d62294f47df0",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "354a2101-1b5c-4546-b80f-7833393d43cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f68727a9-393e-4ea6-83b9-5762fc5f94d9",
        "cursor": {
          "ref": "126dd979-ed0d-4276-aa32-3032c4c9e27b",
          "length": 253,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "2ef40b07-ca2f-4bd1-a0ac-75cc82e1b458"
        },
        "item": {
          "id": "f68727a9-393e-4ea6-83b9-5762fc5f94d9",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "80471a23-02fb-4c5f-be41-2838cbe72c18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a76a658b-c267-44b3-a31f-669bce2e9097",
        "cursor": {
          "ref": "c1deede0-4b3e-4e9c-9777-edc895fd9b37",
          "length": 253,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "1281bf85-a78c-4c38-8501-604033d8cc71"
        },
        "item": {
          "id": "a76a658b-c267-44b3-a31f-669bce2e9097",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "f535276f-adfd-4a7e-9b7e-b66003d43a82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ac50164-7688-46fe-89a9-ea11c1d69337",
        "cursor": {
          "ref": "693b1d80-64c5-4d70-8784-9e410f564f69",
          "length": 253,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "d86b04b6-fe38-44f1-a579-1906b6c21e26"
        },
        "item": {
          "id": "9ac50164-7688-46fe-89a9-ea11c1d69337",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "3f37007e-4efa-4a9e-8f42-42906342fbc5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd8977c1-328a-4acc-92ea-93b81c2fab82",
        "cursor": {
          "ref": "48d71c34-1b35-4f4c-9da9-1c0759f1cbf5",
          "length": 253,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "a4e2d309-f5d6-4633-9e39-050068beb294"
        },
        "item": {
          "id": "cd8977c1-328a-4acc-92ea-93b81c2fab82",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "cd348f64-c9c7-4633-bf5e-e1caf077370e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "161c71f5-6792-4c5e-bb08-53b012b6ed6e",
        "cursor": {
          "ref": "5deceb62-42f5-40af-a724-dc9ce160583b",
          "length": 253,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "dffce7fc-8239-490e-9b52-7589889a738d"
        },
        "item": {
          "id": "161c71f5-6792-4c5e-bb08-53b012b6ed6e",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "e9a2411e-a5ac-48c7-89e6-51ed5d0b4047",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6ecb6cb-203f-49dd-ac82-b27e1820f09e",
        "cursor": {
          "ref": "647c398f-057d-451b-8f80-53b0a738db9d",
          "length": 253,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "18b0c36f-a66c-4d02-aac3-d5c5151586f6"
        },
        "item": {
          "id": "c6ecb6cb-203f-49dd-ac82-b27e1820f09e",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "2b73158e-66e9-48d3-a756-eaabc079b2f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "143ab52b-224c-4cd1-a3b6-0453860e8ab7",
        "cursor": {
          "ref": "b1fc409a-3868-4123-8744-fb164fd2e34d",
          "length": 253,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "4e413447-3a1d-4c32-bcc9-94d9c05a169f"
        },
        "item": {
          "id": "143ab52b-224c-4cd1-a3b6-0453860e8ab7",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "f221478c-fd8c-42b5-99d6-2e5745061602",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bcbdef4b-1f19-4e09-bbfc-fa1cdcbf657f",
        "cursor": {
          "ref": "3235e4df-5834-4322-aba0-c538dd1ef3b4",
          "length": 253,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "227d9a2e-ffd3-4285-957c-88f980c53edd"
        },
        "item": {
          "id": "bcbdef4b-1f19-4e09-bbfc-fa1cdcbf657f",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "e0b29af4-2049-44bb-894d-2af127a61903",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0827abb-de3b-4f0d-9070-427ebf1cb4ca",
        "cursor": {
          "ref": "0fdd6074-0258-4200-9af1-35bbcf5820a8",
          "length": 253,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "ea40a9cf-c634-4bf1-8b82-e8e33b2bc396"
        },
        "item": {
          "id": "f0827abb-de3b-4f0d-9070-427ebf1cb4ca",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "df41f2e2-f860-4e78-8588-0143fed46f1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96b1e975-8b00-4ff1-b937-ef1356c2ac4a",
        "cursor": {
          "ref": "372e3863-bd3d-4ea4-8f54-a643e31c45fd",
          "length": 253,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "a00eab2d-0bed-4ea5-b19a-6c6eff11f022"
        },
        "item": {
          "id": "96b1e975-8b00-4ff1-b937-ef1356c2ac4a",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "a6172115-5bd1-4f4a-9cea-0d743b95717f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6cf30c47-93ac-4105-bd32-dc09aa4fc781",
        "cursor": {
          "ref": "0e98eedd-78d8-493d-9d7d-81ed150f69dc",
          "length": 253,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "e5a18c2c-f0f6-4c33-8c75-b41054cad5e9"
        },
        "item": {
          "id": "6cf30c47-93ac-4105-bd32-dc09aa4fc781",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "57f6acc0-0d08-4648-ad37-e4bc8dccb259",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dff0c028-fa5f-4ab4-86c0-da36870b4a62",
        "cursor": {
          "ref": "36977072-5828-4dd1-a165-5997e25c1d24",
          "length": 253,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "3b9e3fce-1fdc-494e-8773-6b5acb3639e7"
        },
        "item": {
          "id": "dff0c028-fa5f-4ab4-86c0-da36870b4a62",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "875da1d5-663c-421e-b01c-c36ebdf21242",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "890d6be5-3b93-42e0-b3b7-09c170aa4648",
        "cursor": {
          "ref": "2b53bd47-450f-4028-b39c-8fb84d00cd13",
          "length": 253,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "7d98ab17-0f42-4c0e-9bde-bc9001c591ed"
        },
        "item": {
          "id": "890d6be5-3b93-42e0-b3b7-09c170aa4648",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "385e9bfa-2076-44a3-8d1b-dd8d51baef8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ffe5d53a-a212-4de4-8cca-537e50ca0a2f",
        "cursor": {
          "ref": "7ab25ffe-2de5-47d2-9c70-24a028b8ae98",
          "length": 253,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "afcb50fe-2ca4-4036-93c7-3a27af1daca4"
        },
        "item": {
          "id": "ffe5d53a-a212-4de4-8cca-537e50ca0a2f",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "3ffeec7f-8694-43be-b9c8-a0218bd14732",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6bca2933-8b39-4988-a364-9216c7906608",
        "cursor": {
          "ref": "d3e955fa-f38c-442f-919f-cbe092d4cd98",
          "length": 253,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "16e8e7cb-cb56-4561-9347-d17bef62cfce"
        },
        "item": {
          "id": "6bca2933-8b39-4988-a364-9216c7906608",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "43f91a61-1c3d-4bda-bbd0-aed58e2541d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "124a7bb2-f05e-4f53-8097-64c3d88fe580",
        "cursor": {
          "ref": "000d87fd-0030-439b-afd0-6a650c0d2bd3",
          "length": 253,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "c22ef38a-b2bc-4148-bee2-e030b93b2f58"
        },
        "item": {
          "id": "124a7bb2-f05e-4f53-8097-64c3d88fe580",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "0eda87ef-20cf-4f19-92f2-ed1c7b06b5da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f5bd61f-ad7f-46fb-a5a2-c00d63125114",
        "cursor": {
          "ref": "45c6e13f-f98a-4344-9b61-2a470fabdc30",
          "length": 253,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "27ddea0b-df3f-4d02-9e77-586cc035c51a"
        },
        "item": {
          "id": "3f5bd61f-ad7f-46fb-a5a2-c00d63125114",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "e580cb5c-29c0-48a2-a592-d5e8392e47cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a24de47-cae7-4baa-9d0d-2298e1272533",
        "cursor": {
          "ref": "8c31e171-f99f-495a-852c-6021518258c6",
          "length": 253,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "f56dd5f4-eac4-4dc0-bd88-4c51ff712512"
        },
        "item": {
          "id": "5a24de47-cae7-4baa-9d0d-2298e1272533",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "29a0fb76-cdf0-496e-a4ad-c445a93c8e98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c928b33e-bbc2-4e2a-88b8-01c1e33b6d99",
        "cursor": {
          "ref": "95d81d6c-5d4c-4a5c-84f4-33e8a96dac8e",
          "length": 253,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "4d7b9db8-d38b-4527-a27a-9e4492d28a28"
        },
        "item": {
          "id": "c928b33e-bbc2-4e2a-88b8-01c1e33b6d99",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "e9cab6f5-8d68-47be-a52d-733e2b26ae3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "834983b9-6958-4586-bb6d-32b09ea56b64",
        "cursor": {
          "ref": "c013e8ce-ea3f-4fe6-9226-81c99115b114",
          "length": 253,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "87eeeb63-1bb9-41e8-810e-2e087d1c0f83"
        },
        "item": {
          "id": "834983b9-6958-4586-bb6d-32b09ea56b64",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "0ac7433d-02c3-46e1-a9f6-68a751e31119",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a217634-eb6d-4ba7-82cf-a16ffc9cc41b",
        "cursor": {
          "ref": "acc50dc8-b24e-4946-93a8-6e8150982983",
          "length": 253,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "4e162cf4-a953-49ab-a542-e786f8c12324"
        },
        "item": {
          "id": "1a217634-eb6d-4ba7-82cf-a16ffc9cc41b",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "94f7119a-bdca-41af-b6b9-06084a3f0d06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "694bcec2-37f4-44f8-868c-480fd9ad97d2",
        "cursor": {
          "ref": "b8099bd1-c6bb-4b1a-97d0-120b075a9218",
          "length": 253,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "8427af94-91e2-49f5-b9e3-d5c301edc027"
        },
        "item": {
          "id": "694bcec2-37f4-44f8-868c-480fd9ad97d2",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "b0bdeb47-658d-4de2-93ba-0946d8bcc162",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "432d56c5-3514-4430-9b3a-a27e94b15076",
        "cursor": {
          "ref": "f461c68b-fc7a-484a-81f0-2c2c00fa53ae",
          "length": 253,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "27b0931b-6132-4c7d-84a7-68aee460c802"
        },
        "item": {
          "id": "432d56c5-3514-4430-9b3a-a27e94b15076",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "0a7d1c67-9f1d-4e11-94ed-b8b7e4220bc8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "252899fa-f932-473a-8467-251d87853196",
        "cursor": {
          "ref": "13cadf01-130a-4527-bb6a-a6c627ffce0a",
          "length": 253,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "c14f7e8f-9ada-469c-97dd-0352b8c8c9e3"
        },
        "item": {
          "id": "252899fa-f932-473a-8467-251d87853196",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "ff88e867-6438-4b4c-9afd-22f3f40d8e8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2c6fb15-57e3-49c4-ad5b-895c854604fc",
        "cursor": {
          "ref": "e58042fb-72a2-43ff-a04d-ba10ed132f73",
          "length": 253,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "1321fc0b-14f0-4eb3-af78-1874fb58c78b"
        },
        "item": {
          "id": "f2c6fb15-57e3-49c4-ad5b-895c854604fc",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "3876e022-38c4-4de4-8261-9d6e3fe56aee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8c56244-acce-4e53-84b3-2a1eab27b267",
        "cursor": {
          "ref": "8033c108-277d-459d-bfc4-4016c2edf68f",
          "length": 253,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "a5b23413-fb0d-4ef6-86a6-49fb73f863af"
        },
        "item": {
          "id": "a8c56244-acce-4e53-84b3-2a1eab27b267",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "c1b2cd93-a005-4a64-948b-8653e6ded41d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47c64957-4efc-497b-ab2a-7f74a8bf805a",
        "cursor": {
          "ref": "c1199d65-8602-4074-9dd8-8c07ff08673c",
          "length": 253,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "a63640c6-11b0-43c3-bfb4-5d7f962e1e1a"
        },
        "item": {
          "id": "47c64957-4efc-497b-ab2a-7f74a8bf805a",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "4c4d135b-311e-41b1-8e98-2f53daac102a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b780d88-6580-47df-af35-266c0c24719b",
        "cursor": {
          "ref": "5d0e22a9-f1c1-410d-a87b-1a6ff6e923a8",
          "length": 253,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "9c70a161-cbb1-457b-b27d-45b9b0c5cba8"
        },
        "item": {
          "id": "2b780d88-6580-47df-af35-266c0c24719b",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "4d4fa2f6-b884-4262-9b01-0a41a50fa48b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "deb6267b-5567-480a-a7dd-52e49f6870a4",
        "cursor": {
          "ref": "ad8bd4ba-3034-4c3c-9142-e319f44a17b8",
          "length": 253,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "8f0826d6-4185-44d0-a11e-e9f17457368e"
        },
        "item": {
          "id": "deb6267b-5567-480a-a7dd-52e49f6870a4",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "eb8e383e-d05e-45d5-a0b3-7629b571349a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36eb5a7a-c0ba-43bc-8afd-3d1bbbf8b337",
        "cursor": {
          "ref": "dd8b1344-2ae7-4396-94d6-dc1dce57649e",
          "length": 253,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "274a5b5b-8d3a-4ada-ac94-6e705ae0990e"
        },
        "item": {
          "id": "36eb5a7a-c0ba-43bc-8afd-3d1bbbf8b337",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "8b9fc0b7-d283-4d79-894d-d94b71ddfd93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e97dc504-ea36-46db-8dd3-f9b8add40bde",
        "cursor": {
          "ref": "b0991f90-0e5e-4f25-b71a-f1a883d7524d",
          "length": 253,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "13616dc9-f656-4c2b-a81d-36fac09d89de"
        },
        "item": {
          "id": "e97dc504-ea36-46db-8dd3-f9b8add40bde",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "dfa34f54-b8bd-4755-a075-af395d8a5699",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ca2cb06-0c57-4103-96c7-3ae2cd8398f8",
        "cursor": {
          "ref": "aade381a-f566-4c69-b4fe-5df9085713d1",
          "length": 253,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "fc1708e6-f257-4534-b47e-cfd013748a47"
        },
        "item": {
          "id": "8ca2cb06-0c57-4103-96c7-3ae2cd8398f8",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "1f0046a3-8096-40fa-b7d1-32be6b2d57fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92063fd4-24c1-4e9d-a80c-6e365a767d69",
        "cursor": {
          "ref": "bd7ba093-e6d9-41d3-b125-d1a469c836b6",
          "length": 253,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "61090c2d-ab00-4307-a9e3-ed981fbedb44"
        },
        "item": {
          "id": "92063fd4-24c1-4e9d-a80c-6e365a767d69",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "95ce1bf3-c54e-46c8-86d6-884f896e96ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f61aa815-b0fd-4018-a8c9-2e024ca8e16e",
        "cursor": {
          "ref": "35fa3d76-0793-4c18-b14e-3531954708c0",
          "length": 253,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "a3c8591b-b49c-40b8-b545-26b2ed6ea19d"
        },
        "item": {
          "id": "f61aa815-b0fd-4018-a8c9-2e024ca8e16e",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "420d842b-10db-4310-b7a3-340838208d86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d018df59-af26-44d9-9868-75ea09af0738",
        "cursor": {
          "ref": "673340bf-b03b-47b4-87df-3b1ab6917f7a",
          "length": 253,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "39d84ba8-165c-42f5-9440-d382587e1d8d"
        },
        "item": {
          "id": "d018df59-af26-44d9-9868-75ea09af0738",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "9d8e0c9a-5066-4ec5-b4f9-0b674e297e69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e25f09b8-0149-4ef5-8755-4320ca817565",
        "cursor": {
          "ref": "7655b82c-e0f8-4a56-9f1d-aabaed694e56",
          "length": 253,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "319b43db-4af9-4ad3-964f-c62f0b5a1638"
        },
        "item": {
          "id": "e25f09b8-0149-4ef5-8755-4320ca817565",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "24e3d590-54bd-4f3f-a01b-fc61ca901a38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc0fae0a-9759-489f-9acf-e63e27f3d4ea",
        "cursor": {
          "ref": "f938a40a-2beb-4aa7-a2b0-8c4221e62241",
          "length": 253,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "bbddfb02-6526-443a-8e40-45135c57c407"
        },
        "item": {
          "id": "dc0fae0a-9759-489f-9acf-e63e27f3d4ea",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "cc64ee6e-d40f-4f9e-bc98-c4194714fdf7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cdf2c011-ccfa-4ca4-a206-1ca82bdc9be1",
        "cursor": {
          "ref": "3a94f527-18e0-44d6-a150-940baab7d93e",
          "length": 253,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "e4533d5a-3865-4aeb-ad03-e34b8f128b06"
        },
        "item": {
          "id": "cdf2c011-ccfa-4ca4-a206-1ca82bdc9be1",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "664762fc-4899-40b4-89c9-0e14475e127e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02373193-5d1e-4866-8248-e6374e750d65",
        "cursor": {
          "ref": "a200c47d-7c5d-4e0a-a182-5eee2c8a009c",
          "length": 253,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "222c44b2-bf5e-42ec-8ca0-8fb809d5a39e"
        },
        "item": {
          "id": "02373193-5d1e-4866-8248-e6374e750d65",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "e0641d25-3b04-4e1d-8326-d4a8dc5abfe2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ac1e49c-eac3-44ee-830a-55e4f4763472",
        "cursor": {
          "ref": "0c15d509-de00-4c30-9130-87ee70b33c4b",
          "length": 253,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "ab34bde4-3b33-4c2a-9030-e83076f70add"
        },
        "item": {
          "id": "5ac1e49c-eac3-44ee-830a-55e4f4763472",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "7500a805-aacd-4dd4-b8e4-fd98d133a7d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e232ed2e-ac9a-4a1a-8e61-7259049780b8",
        "cursor": {
          "ref": "45ac34ff-b013-4a83-9fdb-d7a3e1b317bd",
          "length": 253,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "7c3dbfe9-b519-4086-ba0a-3965854ceaf8"
        },
        "item": {
          "id": "e232ed2e-ac9a-4a1a-8e61-7259049780b8",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "1eec1f32-ed94-49fd-b756-392302134e07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc4b1667-fd1e-432d-ae72-0d0a377007f8",
        "cursor": {
          "ref": "da5f8e71-a95c-4543-9f36-ecba5d4b6561",
          "length": 253,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "662f5208-c3c0-4805-b75b-3cf5fc55880d"
        },
        "item": {
          "id": "dc4b1667-fd1e-432d-ae72-0d0a377007f8",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "499235ba-9ca6-4df2-a40b-d70880da27da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7a78c04-31af-4a85-8d9c-348a67b9f609",
        "cursor": {
          "ref": "4504eb60-7987-4342-862a-52a235c630bd",
          "length": 253,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "455e8c4a-cfe9-49a2-a19e-343e0bdb04e1"
        },
        "item": {
          "id": "d7a78c04-31af-4a85-8d9c-348a67b9f609",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "4655b2c5-9630-405c-b705-36b6dc026196",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8031b85-0602-4d3e-b09a-8469373fb7d2",
        "cursor": {
          "ref": "660fa907-dba7-41d4-9c8b-8867bd1ae4f5",
          "length": 253,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "1d569dcc-62db-4cb3-8c24-54c01a6d063c"
        },
        "item": {
          "id": "c8031b85-0602-4d3e-b09a-8469373fb7d2",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "e193f060-f1ce-450e-a954-91b54962d9b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e0f6d5b-0123-4f37-8f92-2140c9e67474",
        "cursor": {
          "ref": "bc7f8b69-0055-47f2-930d-77ed428ee468",
          "length": 253,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "8044dcae-25d5-45e2-ba40-b13ae8bcfa44"
        },
        "item": {
          "id": "2e0f6d5b-0123-4f37-8f92-2140c9e67474",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "de29af77-47a2-445e-972e-2a59c66882cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94311926-592d-4740-a13a-94d86561dfa5",
        "cursor": {
          "ref": "be77835e-73fc-4372-8609-add313c7eaf3",
          "length": 253,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "bec94203-a549-48a8-b9f5-ffa9d35775f2"
        },
        "item": {
          "id": "94311926-592d-4740-a13a-94d86561dfa5",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "4839c2e8-55b6-49e1-bbca-83d701a597a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77685fe0-d49b-480c-85df-10557fa20b95",
        "cursor": {
          "ref": "aa3b295a-9a6d-41e3-98d2-ab80e79e6d3f",
          "length": 253,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "46e648ca-3c7f-4f22-95c3-1011dcc36177"
        },
        "item": {
          "id": "77685fe0-d49b-480c-85df-10557fa20b95",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "e2856f8a-044d-4202-b660-489c70fa3c08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6b5b582-6387-4e4e-9c95-1553f7eef340",
        "cursor": {
          "ref": "d0717ebb-db39-4ad8-89a4-49868661f886",
          "length": 253,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "cbeb28f7-00f8-46b3-81b7-f1a56fdbb6c2"
        },
        "item": {
          "id": "a6b5b582-6387-4e4e-9c95-1553f7eef340",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "dfb5f981-acde-4f1f-8a43-c249d56282e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72bc3135-9cb2-4d97-8d04-737eacead3cb",
        "cursor": {
          "ref": "d4f783cc-515c-4741-8706-031a2a414f5c",
          "length": 253,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "1fd08117-c2a5-48dc-90ef-bfec28070d33"
        },
        "item": {
          "id": "72bc3135-9cb2-4d97-8d04-737eacead3cb",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "97468849-16c2-4f24-8ad2-7e40e1f27cb8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5ed6266-e482-4e2c-a492-4d86599f8b2a",
        "cursor": {
          "ref": "0d0f52fd-cffd-48e7-ab92-ff2d04bb701b",
          "length": 253,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "0802f359-4618-4007-9a73-976326ec0441"
        },
        "item": {
          "id": "f5ed6266-e482-4e2c-a492-4d86599f8b2a",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "de1074e0-21fe-4ba1-98d5-a909a3841234",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ec6603a-5457-4fbe-aabf-8ece5e62777f",
        "cursor": {
          "ref": "5ad5c5d6-05ef-47fc-85d5-c06a13881487",
          "length": 253,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "41a00da3-be43-449d-976f-7488632dbbc1"
        },
        "item": {
          "id": "5ec6603a-5457-4fbe-aabf-8ece5e62777f",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "88ca8154-96df-4024-bb21-9f51d363a806",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa838bd4-3665-4a0e-ab84-b533e207dd3c",
        "cursor": {
          "ref": "d92343b2-0e55-43e9-aeb1-3354ba814152",
          "length": 253,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "dc441a5b-1c99-4d2c-8dd6-5a2d96b8c6cb"
        },
        "item": {
          "id": "aa838bd4-3665-4a0e-ab84-b533e207dd3c",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "e237b492-3719-47cc-b333-6f759957dcc1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e720e847-2080-45f1-ae3f-77d782bf81a2",
        "cursor": {
          "ref": "a80430cc-605b-4a17-a557-2160b804e498",
          "length": 253,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "1f8e4aec-9610-4fb4-ba05-094031008815"
        },
        "item": {
          "id": "e720e847-2080-45f1-ae3f-77d782bf81a2",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "221d4a9d-c743-46ed-b656-662ea3a98a58",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54d08b21-4574-4c22-b759-6516afc87f05",
        "cursor": {
          "ref": "8b348a02-92bf-437a-8c8d-9c7a67486fbf",
          "length": 253,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "54603b81-ceda-4091-a0aa-c4e2f93ca1ce"
        },
        "item": {
          "id": "54d08b21-4574-4c22-b759-6516afc87f05",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "5d56a186-297a-4658-8206-9b528543662a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e4b9a3d-f9a7-4b3c-be86-52d02afb2479",
        "cursor": {
          "ref": "94165207-2b0e-44b4-9c37-31f66b1f5e2e",
          "length": 253,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "9c1d9e1e-5b0b-4442-b92e-d2f3ad4ffbad"
        },
        "item": {
          "id": "8e4b9a3d-f9a7-4b3c-be86-52d02afb2479",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "d441ec12-c80c-4a75-8f09-9cfe15d313ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc60229c-6687-4b39-814b-60924c1c5348",
        "cursor": {
          "ref": "91c574d4-2c89-4a47-b988-8d15e12ce1da",
          "length": 253,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "a2aacdb7-b992-49f3-b249-4b460d7547cc"
        },
        "item": {
          "id": "fc60229c-6687-4b39-814b-60924c1c5348",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "97e69fc6-9596-41b0-ad46-4a7177ed1016",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0d713b6-0fae-4dde-9773-8d9562b6be69",
        "cursor": {
          "ref": "7fe5fe0a-a6d9-412c-ae9e-53ce53d09bcf",
          "length": 253,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "fcc75cce-5498-49b6-9aba-6388ba75dd97"
        },
        "item": {
          "id": "e0d713b6-0fae-4dde-9773-8d9562b6be69",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "b6e14af5-bb9e-42c0-819e-b4f6e364ea04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "927f6bf4-1eb5-437b-9d54-b9b57f3a3c6a",
        "cursor": {
          "ref": "c4a6c4b3-df63-4ec6-acfd-affe73025219",
          "length": 253,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "e5f2c0ed-70c9-4591-a6db-45341995f34e"
        },
        "item": {
          "id": "927f6bf4-1eb5-437b-9d54-b9b57f3a3c6a",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "779dab6d-5de3-4a2a-ace4-db4cf19ce49e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74a08c71-de66-4390-a8ba-14c4fddd79bb",
        "cursor": {
          "ref": "d5959759-aa98-49a6-9c96-d97a0b5c1f13",
          "length": 253,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "5e8cc5ac-1aeb-44c3-b9eb-5bfe4176b33e"
        },
        "item": {
          "id": "74a08c71-de66-4390-a8ba-14c4fddd79bb",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "b8790d40-5f43-4cc1-b0d2-368c22830321",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1d8212a-82c2-4728-9d65-7ad2e810b135",
        "cursor": {
          "ref": "2bcb7e53-e1d5-4845-b737-8f89a5928b4d",
          "length": 253,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "dff96334-bb8e-4652-81b9-7f8ebb920527"
        },
        "item": {
          "id": "a1d8212a-82c2-4728-9d65-7ad2e810b135",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "76ce154e-a3e5-4cb9-a9cf-a8d9a6ee3856",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "086d22cb-5cf0-428f-a4b1-f177c0848f31",
        "cursor": {
          "ref": "6fb02027-bfcb-490f-bd0e-7ef894c8259a",
          "length": 253,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "b0eaf98e-07e8-416e-a411-f0f7f60cb4a8"
        },
        "item": {
          "id": "086d22cb-5cf0-428f-a4b1-f177c0848f31",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "9bfd7d70-4220-4451-a2e0-083ec28707a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "031aeffe-b10e-4d94-973c-3dcd5a2921c8",
        "cursor": {
          "ref": "35f5bad9-f95b-4ff4-9dbf-744870095be3",
          "length": 253,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "b68c5f68-cf11-4d75-a03e-5f650a3f5233"
        },
        "item": {
          "id": "031aeffe-b10e-4d94-973c-3dcd5a2921c8",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "b74932c4-b71e-4e02-9db9-689f258a7821",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0bd14e1a-2cbd-4c1a-8e74-100414d446e9",
        "cursor": {
          "ref": "9f65c6f9-c2ce-4a8b-b1f8-fe7f99da9763",
          "length": 253,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "53559d61-f319-4b58-829b-abe616ab8b2c"
        },
        "item": {
          "id": "0bd14e1a-2cbd-4c1a-8e74-100414d446e9",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "306aa9d4-4ee0-4675-92c4-4448f03c98ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "132eb89d-2ebc-41b3-bbe2-3332c367102b",
        "cursor": {
          "ref": "332e4c27-0bcd-4777-90c1-14d3131e6110",
          "length": 253,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "521d36f8-ef4d-4597-b918-a5774327578b"
        },
        "item": {
          "id": "132eb89d-2ebc-41b3-bbe2-3332c367102b",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "1769d826-093e-42dd-b778-64bd4e87e7bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be548819-aec2-44d3-a140-248742aead20",
        "cursor": {
          "ref": "f369cc6e-be09-4f0d-ad7a-22150ea9bd1d",
          "length": 253,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "08849fc6-c066-4534-b5ce-6a24fef19ccc"
        },
        "item": {
          "id": "be548819-aec2-44d3-a140-248742aead20",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "82e32bdb-16a2-40a3-bfc8-9e21c1b9f461",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc7aed36-1439-40d7-9a91-7c951d0ae986",
        "cursor": {
          "ref": "19878e87-0ea8-4ca5-acb3-77a929752df9",
          "length": 253,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "0b84c1d8-077a-47d2-857a-d87f8090f6c7"
        },
        "item": {
          "id": "fc7aed36-1439-40d7-9a91-7c951d0ae986",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "d3cd67a6-c874-4237-9788-68e2398aba33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "566426d4-be18-4fcf-b085-d983f9d9b7e3",
        "cursor": {
          "ref": "c8a83c8b-738a-4355-9cb1-474edd1799bf",
          "length": 253,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "6ad5ca0c-9d09-42dc-8b3b-dacdac688ce6"
        },
        "item": {
          "id": "566426d4-be18-4fcf-b085-d983f9d9b7e3",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "f32a5fd8-5fe0-4e51-921e-d799802c05fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "218a2628-d0e0-4514-b05e-2ade143d8fb6",
        "cursor": {
          "ref": "7ccf06d7-7704-4be9-ac99-68cac5818435",
          "length": 253,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "76e9b4a5-254f-42bb-a89f-f1c9bd89b527"
        },
        "item": {
          "id": "218a2628-d0e0-4514-b05e-2ade143d8fb6",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "5e7b8c44-fd33-465f-aa35-ed66711b765b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d351dbb-757a-4c38-99d0-e93a48bc653f",
        "cursor": {
          "ref": "ce4546e2-f139-45bb-81c2-72e0e86bf2ee",
          "length": 253,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "32e0f674-3dc8-42b7-a8a5-2cbd8b1b06ac"
        },
        "item": {
          "id": "3d351dbb-757a-4c38-99d0-e93a48bc653f",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "fea2e88d-a4ea-4e57-a0ba-cf48beb4c3ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "412bb0e3-c5cd-4a2a-ab3c-0f3a58a5e34b",
        "cursor": {
          "ref": "a4be0472-2ce8-4f33-8582-34216514ef09",
          "length": 253,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "118b438a-3698-42c1-aa2b-550a006f9aa4"
        },
        "item": {
          "id": "412bb0e3-c5cd-4a2a-ab3c-0f3a58a5e34b",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "07bea8ba-d23e-4a23-b8a2-1944f9d26022",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2db98b60-5dfd-4da2-8bac-c54df9d675e0",
        "cursor": {
          "ref": "19f9ff4e-d179-49f5-a144-134998cd99bf",
          "length": 253,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "c1299001-43aa-4664-91dc-08d751d461ec"
        },
        "item": {
          "id": "2db98b60-5dfd-4da2-8bac-c54df9d675e0",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "e2052192-e6c3-41b2-9b33-2a835fbd3ecb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4dc04dfb-027b-4178-baf4-e5e506e0c746",
        "cursor": {
          "ref": "af597db1-c84b-4014-bd09-a82d15e4503e",
          "length": 253,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "6d3a58b5-d325-4eb1-b99b-5a2625132fa0"
        },
        "item": {
          "id": "4dc04dfb-027b-4178-baf4-e5e506e0c746",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "acf77e7b-e6c7-4d0c-840e-f66b52c1fbaa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21f05b4f-93e6-41c2-bddb-4320c6885cf9",
        "cursor": {
          "ref": "7b921872-7bcb-46e5-a965-50a1e166f128",
          "length": 253,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "9d7f4e35-8b92-4d54-804a-95a06279c5ec"
        },
        "item": {
          "id": "21f05b4f-93e6-41c2-bddb-4320c6885cf9",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "46d94ba1-f216-4622-a1eb-82c6acd7bb93",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 4,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7911b9e4-905b-465d-90a7-d2afb3aaaed3",
        "cursor": {
          "ref": "30949adf-7580-4793-a712-15871b12721b",
          "length": 253,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "b9600507-5522-4e1c-b13f-3fc665139a99"
        },
        "item": {
          "id": "7911b9e4-905b-465d-90a7-d2afb3aaaed3",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "c32c372c-47f3-4ec6-87b7-1a514019f525",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 4,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b261192f-a358-40af-985b-83fa45780fe3",
        "cursor": {
          "ref": "42dc2827-5708-4374-877f-99005e0e5c93",
          "length": 253,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "db3736f1-a86d-410f-9343-eee83ced3403"
        },
        "item": {
          "id": "b261192f-a358-40af-985b-83fa45780fe3",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "21b3d063-e651-4115-8541-f8f7cf940c42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:245)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:245)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected undefined to be false",
              "stack": "AssertionError: expected undefined to be false\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "c607ec45-017f-4bec-a63f-3399fd776fc4",
        "cursor": {
          "ref": "f604c59c-eae4-4960-ada3-6dd567252758",
          "length": 253,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "acb95a4f-f9fc-4325-8b30-d635daa83104"
        },
        "item": {
          "id": "c607ec45-017f-4bec-a63f-3399fd776fc4",
          "name": "credentials_verify"
        },
        "response": {
          "id": "7b268f66-95f4-48dc-b5c6-2ff7148fd175",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:246)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:246)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:246)"
            }
          }
        ]
      },
      {
        "id": "40888331-8a33-419f-b1d2-bae2d932538c",
        "cursor": {
          "ref": "1977de0f-6f1d-4d45-aed3-cf3505ed66e0",
          "length": 253,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "fa61060c-8105-4c22-93fa-836f3375157d"
        },
        "item": {
          "id": "40888331-8a33-419f-b1d2-bae2d932538c",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "3cb81861-f89d-4466-9162-bcfe6c079ed1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:247)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:247)"
            }
          }
        ]
      },
      {
        "id": "5f996f26-a14b-406c-9d2c-62bc4612b0f3",
        "cursor": {
          "ref": "71b49cd3-62dc-4377-aea0-f1602486da80",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "62d95a12-0181-472f-a74d-146c6c67f29f"
        },
        "item": {
          "id": "5f996f26-a14b-406c-9d2c-62bc4612b0f3",
          "name": "presentations:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "5f996f26-a14b-406c-9d2c-62bc4612b0f3",
        "cursor": {
          "ref": "71b49cd3-62dc-4377-aea0-f1602486da80",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "62d95a12-0181-472f-a74d-146c6c67f29f"
        },
        "item": {
          "id": "5f996f26-a14b-406c-9d2c-62bc4612b0f3",
          "name": "presentations:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "5f996f26-a14b-406c-9d2c-62bc4612b0f3",
        "cursor": {
          "ref": "71b49cd3-62dc-4377-aea0-f1602486da80",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "62d95a12-0181-472f-a74d-146c6c67f29f"
        },
        "item": {
          "id": "5f996f26-a14b-406c-9d2c-62bc4612b0f3",
          "name": "presentations:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "4153bd67-3b30-4950-a327-1b3953bd5b95",
        "cursor": {
          "ref": "ae3338ec-e15a-4e47-9c5a-5f18ad36bac3",
          "length": 253,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "ac89f7ef-b8d7-4313-b129-825aff3d1d49"
        },
        "item": {
          "id": "4153bd67-3b30-4950-a327-1b3953bd5b95",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "5ced4405-4629-4b6b-9650-0b19b495f36e",
        "cursor": {
          "ref": "cda94d95-25cf-4973-ae73-cdfc3b264506",
          "length": 253,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "e6d13c35-34f7-4135-a59a-e3c86151d462"
        },
        "item": {
          "id": "5ced4405-4629-4b6b-9650-0b19b495f36e",
          "name": "presentations_prove:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "5ced4405-4629-4b6b-9650-0b19b495f36e",
        "cursor": {
          "ref": "cda94d95-25cf-4973-ae73-cdfc3b264506",
          "length": 253,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "e6d13c35-34f7-4135-a59a-e3c86151d462"
        },
        "item": {
          "id": "5ced4405-4629-4b6b-9650-0b19b495f36e",
          "name": "presentations_prove:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "f3296d4f-326f-4cf7-a100-021d8198e446",
        "cursor": {
          "ref": "d486a257-bcea-4f94-b800-296a55142d6f",
          "length": 253,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "4ee83417-1432-4b4b-a768-62783e8843c3"
        },
        "item": {
          "id": "f3296d4f-326f-4cf7-a100-021d8198e446",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "d2f6f1b6-cc49-42a9-85cb-51babbc2def5",
        "cursor": {
          "ref": "4646ec46-ff4e-4cac-b79c-7ec833d76e16",
          "length": 253,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "5f6c57b5-cce6-4025-97f0-01bed4637f35"
        },
        "item": {
          "id": "d2f6f1b6-cc49-42a9-85cb-51babbc2def5",
          "name": "presentations_verify:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "d2f6f1b6-cc49-42a9-85cb-51babbc2def5",
        "cursor": {
          "ref": "4646ec46-ff4e-4cac-b79c-7ec833d76e16",
          "length": 253,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "5f6c57b5-cce6-4025-97f0-01bed4637f35"
        },
        "item": {
          "id": "d2f6f1b6-cc49-42a9-85cb-51babbc2def5",
          "name": "presentations_verify:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "d3c1293d-7f4f-4378-88c4-a43e9d61205a",
        "cursor": {
          "ref": "1f357d8a-a919-43bd-9870-f4a85990a563",
          "length": 253,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "2c32b445-167e-4c68-9744-25bd38bb97c0"
        },
        "item": {
          "id": "d3c1293d-7f4f-4378-88c4-a43e9d61205a",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:253)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:253)"
            }
          }
        ]
      }
    ]
  }
}