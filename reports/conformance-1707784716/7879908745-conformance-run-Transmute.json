{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "f1077d84-c59a-4b44-a2fe-e50cbddc8775",
        "name": "Clear Cache",
        "item": [
          {
            "id": "afe5e84f-d82f-4ff6-874d-624dd5d28945",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "65c7b795-affc-481d-9077-03ddf9e0e671",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "562bb56b-7ea9-4a60-a56d-ac97502ed96b"
                }
              }
            ]
          },
          {
            "id": "0eb98979-3fa5-4a68-b5d6-9c0b2b6905a1",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "8fe43d07-3739-406f-8107-cc8acc5d15de",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "b7c8545f-33da-4e61-b220-2432b83cc6c5"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "2546e5e8-4eb9-4d96-96b8-5b7b726faa02",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "14028d98-62ca-4da0-816a-d4e9f413ae6d",
            "name": "Positive Testing",
            "item": [
              {
                "id": "5653790a-883b-4548-ba7a-b579cb941016",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f409c457-3be0-4c62-9347-ace04b8cedc0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "42ee2e90-ce24-4275-9e0f-eee95969af39"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "f4e46ee0-c468-4d69-b6db-d9097319e59b",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "4eecd5be-226f-4177-997c-33fd38f222f2"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "a4a6af5f-ae31-47a8-99fa-b2ef1d72666f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "b6ad234a-ae76-4014-b4a1-0120c8b2dd36"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0d51376f-3398-45ae-bd7a-d2d5d3e027c3",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "d87aa46d-0e4e-4fbc-90b2-a35f2ee498cc"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4ff68612-59d3-4942-9454-8cc52192414e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "da304f24-5ee1-421c-83d6-16ece07e99e8"
            }
          }
        ]
      },
      {
        "id": "5aa967a0-f578-4726-b10f-0b3b18ccdc1c",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "6c6dd718-0fa1-4ebe-9124-1b31d2e292a2",
            "name": "Negative Testing",
            "item": [
              {
                "id": "6e9938aa-d5af-4cbf-a7b3-870ccefa4d38",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "8330239d-6b96-42b0-a1af-d409d2dc7929",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07df2893-5afa-4305-b6b1-6d63cd583433",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f4e98aea-dc6c-491b-b818-9f773f3e4b47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26c034ed-f236-43df-bb6a-1364f1d410f4",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c096a14-0545-42d4-a56d-89d237ef30f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bbead955-3d2f-481f-9ab4-f578133e9e00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d61709a9-a45e-4a96-a990-33aa408a284d",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ea16532-87b2-4f54-a26b-160a0c8c2e5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "41a87fce-aa8d-4be8-82e1-946bf0ad87f8"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "056c077d-44e3-4c5b-a7a4-d4ed8c109476",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "45cf3a98-a15e-4b5b-b2e6-00e55db8daf8",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "068b37f9-e972-45e9-9dea-0e7e13ceaa20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6ce4d5b1-6af4-43de-bd80-befbeb31fe13"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27cd95be-beb6-4173-a588-990962cf2bdd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a8d1045-4351-4cbe-a65a-89670753d831"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "a5bccf0a-7a02-4393-96aa-8cc8d06143c1",
            "name": "Positive Testing",
            "item": [
              {
                "id": "dc58e77a-c1d3-4b96-99b8-481f9bc3a06f",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1813f495-5b36-4267-a777-42bf860fb3e2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "a2df18f2-3ca8-4844-b2c4-dea02f1e42b7"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4a25d94f-db14-48e7-b070-0a726c6342cf",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "931d4b53-e7cc-456e-b444-baba32143f8b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b01d5a29-7ed4-41ec-b95b-b477ed79fcc4",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1a456733-b064-4a2b-8e7b-22bb6d4dd81e"
            }
          }
        ]
      },
      {
        "id": "e4276cdb-fba8-4d50-9fc0-319d2342465d",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "c0f7583d-2ee0-469c-80ec-a9bb088e845e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "cdcdeade-6ea4-409e-878c-ff7016176a44",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "2424debe-1a63-49c9-94ea-3cc8436bc7b7",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e415461a-7dec-4720-86e9-7da022488ae6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a35a036-5ba1-4ea2-95c7-af2ff904decf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a994190-7931-49bb-91cd-b5bfc135fa6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "db3e4548-8951-46ad-b7b0-f7b1cc9f49cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43d287cd-c2d4-4c0d-8cf6-6add1aee1de2",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ad26d3e-05f2-489b-825a-c13f2a8e7484",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0da53da4-4acd-4d93-97c6-88635112e5b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21677a38-c6b0-4adb-bb71-09213d2345a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "25a2b2de-a678-4f0b-ae12-31246f0f8b98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b2f69e1-279e-472c-9632-1840bb1c99df",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "932460ec-5a28-4f17-9161-16c229df06dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70d8c2ce-6a94-45a5-9c12-4aaeb9dfe7b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ea3048e-72cf-42af-bf72-8546170b4ced",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c4a25e5a-5666-4d4a-9026-2f6b3ea5954f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c811b4e6-5221-419a-ae35-d528c5178eb4",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44a022cd-9dc2-4935-93c4-e73162cc4689",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac2dde1c-0b99-4729-a8a8-062a966104d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "201e7c15-5a25-400d-8f11-30cede22afd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "94cbc1ea-0a2d-4782-8586-464ee8b3a045"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22ee707f-4805-4d6b-94d0-63878b5cba70",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0edd3b08-469a-4688-9206-03655f42279f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3792ee0-37e4-42f9-82dd-245f2805ce7d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "075d7a8f-3258-4f17-acea-f7a1ae4286fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d13b4ec2-ccce-427b-b297-5f7f1e68911f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "198e3935-2347-44aa-a992-d758f84f4f9c",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d3b6f13-7bf1-4412-9d80-63bead026f3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4dc955d4-1a67-4de8-b8e6-9f312a9a8a9d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "810beede-b9a6-4d9b-a38b-9b6caf2936a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8aa28564-74ef-4424-98a2-ba3d7933af78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0f55e0a-bad6-40c6-ad19-fa849ef1fe3e",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f26d2179-e1d7-4efc-8b70-0385bf67c696",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2dd71170-897b-4889-8d56-b8cceddf06d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "852c892d-c35e-4ca8-8d8f-388ded5997e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c47a917e-cae2-4ec4-b40b-a555fdb38529"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91872aa8-6a53-41f9-a68e-54abdbade390",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bb85805-f2c5-4bde-9b85-8eda252b788f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ff6d62c-9764-4a5e-9213-08d1b4ecfe60"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2d0f5da-234a-46e4-b990-8e90b4925472",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a7894e81-d68a-4a67-95b7-50fa87409f8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ffa657a-75f6-4386-a3f0-65a0937b82ed",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94c10882-5b15-4428-bbd1-9983da005c0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8774944e-1a2a-4929-a012-1c097189ca94"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac1228f7-a3bf-474f-bb3e-a7c30b35a3f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3701a8c2-1e62-45c1-a649-e92caa763f18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b955f80d-b3e0-4e8c-a11d-ac87dd37ba64",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f68fe12b-d3d3-45ff-8466-2d7bd9bcbf21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3330db99-e7e6-4fbb-93fc-4012d461673d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97ef80fe-61a6-4609-b58a-3b4e1b86ca31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e1ba2ebe-a857-42d0-8b53-39c931bd28e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ede5d228-1aad-4ed7-9a19-30a87f138339",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24d3f2cc-ee33-4d2a-9f58-b858856c4bec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1928cd1-5951-48db-9784-c80b75fe12e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79f55a11-54f6-4fb0-b36c-085b3f989cd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1a6b7886-78d8-40b2-be80-06ee6d51f640"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23b554bf-9e24-4818-a215-3b5606bd2a21",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4dd08c41-3fb4-4ba8-a229-97a7664f3895",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac141426-3e90-4c07-922c-96a84f1b6226"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08f96900-3916-4199-89f1-9460c1c401ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e5a1e391-7de6-43dd-af44-d578ef428438"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d91386df-84fa-43c0-ad87-3e6a1a66ec8f",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd53d940-f9a8-477a-b7a6-d6c7d0ae3e25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ea327e2-2a53-47e3-89f4-394d5cc929e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4be2cd0-663c-4e7e-b142-1a3a4242a102",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "57dbafeb-563d-4cd4-b2a6-82068431fe8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c260821e-148f-4e50-83cb-d541cf00f48d",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2da5ba6a-cb9f-4862-a20f-cdba1243023a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11ee39fc-11f4-410f-a121-b992c08b6b8d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73fd64c3-fa1c-4933-8d2b-f0c6e86703df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "31654323-9ebc-466e-b7c6-0fab0c756f20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e4f7978-02c8-4148-b91e-7f38160c0a2a",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c754923d-5d38-4312-9849-d8362a462da5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a5abe51-02f9-4095-b998-cb938cf558e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d5b616c-1c72-4c2d-90be-a8a64f5cc837",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d9b7cef9-ba37-4d51-8ad4-02523b7df7e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4804dc3-6442-41f8-b67a-c39208a45f15",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da90c708-d856-4f63-b45d-d7fc930fb823",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11dc0a2e-2576-4fee-8af4-5d68e67fa932"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9977de6c-b956-4bc4-8309-660efefa7d7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "94665bf9-f368-44ab-b08d-8c387b2d99e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16b4d496-0dc9-47d4-989b-a8eadc9cae10",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "451b0285-b5b2-4826-80ae-5448561dae43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1779221f-5926-450a-98c0-72b9591a11ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfd3857c-310b-4ffe-be48-ba2781bf823e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ecff085c-00e1-4c2f-aabe-d043a8985aaa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cbed46d-0d0c-450c-a36d-7b064462816d",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "106007d9-747f-4cd9-80a6-80d518b46526",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d857fec7-3131-4c3e-afae-6825edb0c3cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee1d7f0b-9ce3-4db9-ad98-5263a7c694a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "74e617c7-ef52-49b9-a9a8-8a3ca186af65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab9826f9-2106-45f6-90fc-a85bd3d328de",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14d2422d-b23e-4635-90a6-06ae81312dbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "796059ba-e5a8-4401-8f96-f40d09a20853"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "423d9a61-b3b9-47a5-93b5-c49e1290c566",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ce266e1c-2ce1-4a7c-8191-622250bf5e64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "535203f5-e003-4bbd-8724-f69a79c9988e",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d97f94ff-f588-4f87-b0aa-794f92a2e131",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9d513bf-f021-48e5-bb8d-f94918080c15"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0a709b8-3e73-42d4-ba89-9c37c3f45940",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f48bb21b-21ac-4368-9eb5-8e220e8012c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3aa92225-762c-4251-be6b-a9b62c5f2410",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21eecf5e-e4ad-436e-8920-4d1f86274785",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fbf8db5e-baa3-43a7-8aa3-ee93d74e1c2e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "340f052f-8c24-4955-a858-9ce788044d42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "662a6465-7fd4-4c46-bafd-4e3544737c93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4dfc98b6-5ffa-464c-9d0c-bc025d482956",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95d1e8f6-2464-4dd8-ab7b-e0cbd9f96251",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48df5a10-1c8a-40fb-b635-aec827c9654f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec50dd28-974b-4091-b7ed-061ef71be624",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "36c0c33f-f195-4c34-bbd7-055a23f6b5a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9d72bf8-c248-4b10-a344-a32d8516bf97",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fc0b4de-e32a-4411-9557-34059f04c131",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8adf644d-ef64-419b-b75e-2a4fe2dac61b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2dbed0b5-839f-4fa3-ab0d-c23ca7ad4079",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a0f35999-fc9b-4568-96d8-42c57e0ca52d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2b8d5d3-64d3-4d1d-be34-506c54b2156b",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "deb94d41-9fc4-4e7e-94eb-3491c27ae07f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a7e4631-f956-43f2-a910-e5bdca287533"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89b22dcb-8e90-4512-ae26-e39bb1b8b126",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "b2207775-e209-4722-8183-f48ed90fa204"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0d61379-84ef-439a-a0fc-89c351d87062",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84c9bcce-cd12-49df-bd0d-6bbb85acbe76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f8f08df-a93e-457c-89ff-60014822305d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e519dbed-3983-4f53-b59f-69fbe35fe129",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "5d19d5d4-7f67-4334-b7dd-dad07f2a98f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e57172ee-1d2f-4c51-92b8-270044192d43",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a16ea58-3346-4c05-add8-8ef9ed6e8fb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4097209-c9aa-43bd-a6d1-81f68b1bb575"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f996f92c-fc16-40e7-9c08-0b1279cefab0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "cef4c2ba-7067-4d30-8d5f-11697a0d5cc8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11acea5b-316a-4803-bb8a-41c242ad2193",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b854f76c-132a-4a42-a638-df44b8d36220",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5780bf4b-84b8-46cd-b82c-a9ae337f646f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32570471-27f5-4145-b56d-9b38e11ca3a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "73e7e7d2-d9d5-4ffa-9ab7-468a267e4319"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b1b5a0c-e6d3-42ce-a0cc-a6a1af5c7214",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0392294-912b-4b6a-b2ae-86bc8233504e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7788ce7-809d-4e22-84b9-17bb9af8c0c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a5e0fad-9abb-4616-b809-1d7e34227360",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "0d5a22c2-77ce-4e65-93ce-cf081821eca6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5663958-0c79-48d6-8369-d58e032a770d",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e5f41aa-32f2-474f-9ee6-7af6eb59af2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20a7f864-84e9-426f-8697-2465901ec511"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e172b97f-7912-46a0-9467-0ebb2c14a29b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "25f39bb9-027a-44bb-bf40-de4f03afb5cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c695dccf-803c-49bb-a3cb-7db5be757697",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4e99e7c-70bd-4a69-adf7-55ded3b27a73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee99b3de-f56a-4913-9121-e7bd309a3539"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab22f177-4e32-4bf4-9376-63ce95a3af6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "8cb0e060-1b24-4170-8b65-3833bd33e65c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd556e24-5ad3-4cea-9c08-79e7d5587142",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af611fa1-25ea-41a6-9ab2-fcd965b10704",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4839154-7ce9-4b8e-b421-010fd5c700bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c7054ea-90c5-4112-b0d0-2d06c482f903",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "367174fc-77b0-49f7-9774-74204a9b6089"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80e9883d-75b2-4bb5-bf07-df0664f63f41",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ebbf35b-6dbd-4066-ad47-c8f273c1d8fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87461358-d253-4d8c-a26c-70d45723b6ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "903a2e7f-8945-4f44-a48f-bebccf7875ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9abe6753-3bf3-489c-abf1-1f4001d7b9b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a06c496-0fd6-4b9b-bf9f-dc6a65dc8b1f",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0f4ce56-da73-4a51-8345-1a353e08a6c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3bf4e85-c60c-4a4e-9558-be3232522670"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6532993c-1b45-47df-9ca3-ae504dc0c767",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4cb86594-aa59-4faa-b815-5d75c3679a54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2ce8133-aadb-476e-9ba1-e8b94c5bd276",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a439d8e-089f-4b76-b20b-50f69923f795",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78e83e14-91d4-4961-8214-eea773da1ab6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03486b1c-0686-4dbe-95a2-14b889848da2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "592f0d87-4ae6-4941-aac7-3498f8631d8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efc3f3af-d488-44eb-9d52-d1c7f35b8d01",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43238055-8c8f-41ef-8787-1fd3c8a9e57a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91ae524a-4522-487d-a893-f644f89f4b1d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1f2145f-eba7-4cbf-9999-80dcd505ab03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "8844ca92-d0b6-48ed-b24c-8ef612befc40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f2ed701-e195-4dfe-b64c-65b0bb2da62a",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22206b1f-7082-4e37-b8c2-e17198c0ba79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "81e4b124-f7b8-4be1-835b-0f084152491a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e733c4f-a4fe-41ab-af45-385666b2eee0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "24169fce-ad3d-494e-a282-b03093f9a90f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d458486d-70c3-4347-a5a1-c36e701cbb1c",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "479063be-c839-4a3c-82a6-b6167294f3c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43d2cdfd-e20d-4e13-a36e-2a22b42503af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0dfe8d4c-617e-4b77-a66a-b7f37263d4d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "3acf663c-b0dc-4d14-bb22-426f029226bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a230cd6e-5501-4699-b0db-ad7f37599cae",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0d5c515-87c3-4d49-9e0d-e458689047b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc65b0df-2a86-41fe-ae41-5ae335f94c7d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b6f4816-40f5-499f-839c-bb95d23754b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "617c4758-db46-4136-92f6-e33567649070"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0491c46-7a3e-4249-9b57-3672f128deb0",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "adc19e54-22c7-4c9f-904c-89e6a999d444",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0095be9d-eb51-49af-9115-ce07eb74d0c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b01080bd-1b2f-4153-ae5a-e4a86fad1bab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "173fdb05-b0f2-4168-bf11-faea3b0a02ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e639d4a-c56b-4cee-858d-d114a36a2692",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b6391ab-9f4f-43f5-b6d9-1364c6ff23cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e52e244e-fcfc-4169-889a-83ae54b97195"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "032f5e58-6b34-400e-830c-925cca95d698",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "b4595046-42ff-40db-8293-ce5779d72128"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6740b986-09cf-47c9-a969-a83bd706ea9c",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5df37e05-419b-4a88-af3d-082a9b56c449",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "056673d1-c26b-460c-9f51-d012ca2adb64"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "994f4431-a45f-4402-b4e8-8d564020a989",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "1270a3e3-4cff-4fef-9c35-f00918ee2948"
                        }
                      }
                    ]
                  },
                  {
                    "id": "354b1905-f3d5-4299-a3b3-72eb2e7780cb",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8bfd60e-6814-45b1-9b16-7ea5b49a22d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44c75404-af01-4508-96fd-0104aa93e188"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4658ab5f-edc3-4a37-9f00-2a198a4db552",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "5c7e79ab-8948-4a90-89eb-2d9d255e1e6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbbf480d-05a4-4c03-85bc-7d544ef7fc78",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "858239a3-c5f1-4027-b525-c82eb1ab5d5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27d2232e-35ce-4fc4-9626-0b7830db3d3d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cabeee22-455c-4f81-8113-57ea6fc998a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "bb043c9f-b1e4-4e4d-895d-e8921d099ee7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04239e07-01fb-476c-ab24-0ce8f2e09e8f",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98591fbf-6321-4afe-b8de-d9e7c64e0a95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7746e0c0-9e1e-4ed8-992a-2b05b05501ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2b07bed-1cb9-4363-b9d4-02cc56e633ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "21579da4-2e31-4edf-aa62-e31fc8c21611"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2282eaf4-acd0-4d16-95a4-dbe912873716",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3072cce8-5093-47ed-8b0b-6f17b502baf5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3dafb572-45ca-48e4-bacf-8817b82b1f99"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16d4cdef-ce85-45ad-b041-c916e97a286f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "026292ea-0e75-4ddf-b6d3-fd3e1ae19e0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f7f32f2-eb93-491d-94da-d20848257363",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8ea7667-6938-4367-981c-3f318afd5733",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52b90595-1a5d-443c-8f91-cfa07c79a402"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5383dcf1-a386-494a-96a3-d2a5d263e925",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "27332cc5-2178-4cb0-967a-75676fc77cfa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cac9a0ac-7c0d-45b3-9cd6-0e635fa7dbb9",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41f6284c-7c65-486e-8fc3-25209e26ddea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "631864d2-0306-4e1e-9022-63baa523fa6c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "937bbb3c-94d1-4ccf-9715-a8e32144d518",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "83f31adc-8f7d-4da6-8a0b-c5b5636744ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0cb44756-3599-44a1-9f20-8bcb1c03e34a",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d9a2130-b7f9-4753-b99e-c81e60840bb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "629313ac-2391-4411-83f8-7fe1c3d8bc34"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f21fb76-e07d-4d8c-8523-18b6eacffae5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4596c5a9-ec6c-44da-a9fe-0d612ceab708"
                        }
                      }
                    ]
                  },
                  {
                    "id": "138467fa-7cae-4191-85af-a370a89396c3",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe180b4d-aad9-4b86-8ffe-6dbb8a1053e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ffc1e694-57b5-4f47-b5bf-fad6381b404f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d27524ee-791b-4eb2-b0c7-e144567e09a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "6cecc2dd-170f-4903-a543-c72287e25a2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90dfcc5c-58b8-4409-b334-bd447d8040ba",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36212f94-9017-4fae-bb70-743b3f63b43b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f0307f2-8a35-48be-9943-b8c82164c329"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3b54bc9-c6cc-46ab-9d08-a5207cc5b17c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "655b4569-0736-4b21-af28-eaf29b143153"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3b3073a-122b-4b0c-97e0-faca4c478d54",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b661ad00-6e4a-423a-acce-d97d63c212cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "690a1d15-29dc-4ef8-b45d-ca3864e3879d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07c00c92-3f58-40f2-9868-865ad52de210",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "348e3466-72f9-4749-acfd-05c7e87696c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1a093ce-1582-4e13-9eff-1b8281c5e1e7",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60066209-9fa1-4dff-ab41-59cb5ead45d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "debd47ac-d47e-45f5-b2b8-369110fc44f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b560e9d5-5837-48fb-aab4-642eca82f4d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "de69765b-bf27-49c1-bf54-8496a4994b04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5919fb8-0f0d-4df3-9a45-7f92646f0657",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a80bd10-aa95-4534-af33-ff67d395007e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a05d573a-b220-4a41-86f4-26b977b60875"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "950fe643-ce93-40fb-b8f6-d774509b6e7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5ed606b3-0acc-472b-851a-6d4315523f9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28e85dbc-5b8b-4960-84c9-c4d6726456e3",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0ac7081-bb7e-4e42-94b0-93b1a3b1b091",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "415cf952-7370-4875-a38c-a6e9e6fd7b74"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ec176ce-d4b3-4a6f-ba07-e432ea84b17c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "80af7d93-c4ea-49de-b716-8834dba1fcd7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abcb8624-8ec2-4d26-b6a5-989de97ff515",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82c3eff3-6c7a-4ccb-aace-6a2f26026cab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39747657-a05f-430f-ad95-625bbb9fdf2a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f72a3bc-12c6-4d00-bdeb-3b0e675f7a87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c9cd349d-db92-4ffd-8dbe-b53808ad17a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea3dc135-473b-4591-89e4-4bbcbfd9cafa",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83d3d89d-ac2e-42d9-a081-3fb8320bab8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5bbf4e3c-14e4-4434-9b62-2d32b8a1ade1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7600dbf-8643-452b-82b7-7338fc430928",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "ae5e3b81-7464-4c43-a49f-914521efb659"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68b2d554-341f-4de7-8151-ef7a3e017cef",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8aa7fff-3452-4926-9eb2-5a7d85e230f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c2e5b7e-2074-4393-a825-18da9303dab3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40beb09e-6930-4605-bdf5-55e19eb141b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "eccf6701-28aa-4e84-9da4-1ee6aeae4e3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8493717d-2d01-421f-9ba3-33e4944136a5",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e68b2b5a-f040-488c-8008-3ed7e5245698",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0805b74-2e79-4250-bfde-3ace9b0376f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fe32a90-00bb-4c89-bb70-a8e84c131469",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "bab4a99d-816c-48e9-b981-fde677e0c85a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e591d3db-0ac0-4505-a287-1633f252060f",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1003e805-5b4c-4126-a8d1-9fe72f21f527",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bbaa6357-c3fc-49da-abb1-cf43f4f32bc4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c32ee41-69ad-4ef5-8f80-87bdb8f20e4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "4f5c5882-d624-448d-af1a-e10607b1cda6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce134829-6801-484d-8594-1b6e7892a399",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce0b6f1d-d0c7-4501-b429-18fd523c0ef1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27d9a418-35e3-4ae5-be67-c01173b1e906"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44ea13c9-6dca-4f55-ab29-4bb69d2beeb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "eedf7d19-836b-49ec-8d8d-6681bdc5f048"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbe00779-23e4-4c09-8886-ec67614130a2",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e32cfab-a52a-47f0-b51a-3eaef079c782",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "100d9ff1-7d38-44ee-b2ce-978b3929bb87"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28c23382-33e4-4e52-94db-efae276978de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "8139a930-7d82-4e54-bded-2e090992831f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6db923c2-a381-42be-a8bf-43f34c86b8cc",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73307794-622b-4382-983f-e0a95b82f7df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5786d199-9c34-4aec-80e1-a187182a37f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1922d684-d26b-4e61-983b-41ca8b3e5da8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "55bcc081-21b2-426b-a5f0-dd62114666bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "441298f9-e92e-4439-9786-2b6a66535658",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e01c0518-74f8-48d1-b212-26d2f4786f88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85494f64-5c01-40c2-b742-cd53a465c1b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5dd32d1-32d2-4e2d-be3a-a73c69b095d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "74fc06dd-c73a-412e-a8bb-9ef30392dd7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cac6533b-cb5e-4d65-8117-23f4ee5e746f",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0898693a-9748-453f-8fd3-41d7334f7c25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea82572e-e728-4068-af3e-85bb2080e149"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cc3c0cf-9779-4ece-ad5b-064306ffa642",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "bd8e65ab-2735-4d8f-bc05-d6268afa9b8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "751c8062-36de-4dde-a452-e3cbc467b514",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5994eb09-a555-468e-9c30-531b5f1f9bde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16668c49-dddb-4d6d-afba-eb0a44463692"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3abd8781-93df-4e19-965c-23f5af3338c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "bb0e8079-ccb1-4d72-b8c3-94d8b3480bb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8ec6468-3f90-41b9-9afe-f4b099803bd3",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "abfaaeb8-6e8a-4277-a79f-4efc447abfde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27a6b803-5747-4da5-bdb5-399a11bf5fd7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81cea6cf-fdce-4470-9fe0-b96b3d297f62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2fe70538-ec78-41ea-8dbf-33019cfcf453"
                        }
                      }
                    ]
                  },
                  {
                    "id": "821eff5d-dd7f-4f99-973c-1a617b761762",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "126c3f3d-cdf2-468c-baac-ce7d09cab834",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2912ea34-63ba-453f-ae16-6bf6c7d75849"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eff10d0d-6bf9-4c39-b1a7-5989e24bd6f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e2ef4bb6-41db-4f83-9763-3307b0fdef47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4108b226-d048-4b2c-ba41-202b4a73b32f",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "caa39648-e5a2-4f4c-922f-58a504b07164",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37e899f1-689e-4d9f-b840-549ad3d8f334"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a5f6afc-ddad-4499-92b8-7dcbbfdc480d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "b86fa563-c7e0-452a-8d0d-aedc0ea790c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b2be271-74d0-40b6-a709-d163de12015a",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "107efad4-37a6-45ac-975f-1afcd92d14e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d75ccf68-9e26-44e3-9657-b4fa5c0b004c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "255bc57d-d191-4cd1-9625-f78f01d164ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "0bba1f94-7f46-4095-b7bc-d5f883fcdda3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6297685b-6e94-497c-95d5-d6b387a69f2b",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7ea7292-398e-4096-b0d0-4e7950b34d27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "716cc341-6314-4b8f-b1c3-c5daa8924bcf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b7d3c4d-6423-4b6f-a1f5-1169c481d0fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2c71dd11-7a4f-4885-982a-113ac4f82a0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55bec6e6-d6bc-4d9b-86a3-9c509a696be5",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0aa363f-e053-4406-b8f5-708342f48fd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a4e11c6-94e6-43d7-8f48-39938fea61a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3aa5f95-0643-4f8d-9e6c-5e7e60b9a037",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "08f60a73-86e9-4a7e-aa77-04c22e1d6b83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f0da1d2-4042-4c07-b436-67f631917a10",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf7f1e46-ace6-4c45-845d-72f0a75c253d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca4cab6b-4344-4bec-af79-5abc8c1cab3d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5632a412-11ba-4104-af6b-2ae8798eb495",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7d2a3088-7eb5-46a0-9729-f0a22e51c833"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a23edec1-3014-4fce-8752-51beab51f42d",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c78df73-83aa-4253-8c0b-1bdcca9678b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60264571-81ee-460d-a834-0415d5fcfc44"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e9e3f93-202e-44b4-8b59-e857f574153a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "55d6362e-4422-4911-9277-412b8fe74931"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2806d643-ebde-445b-8191-ebd7e4c024af",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f77ffa8f-9b6e-4270-b161-37f31f6640ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "491d3041-32f7-442f-a16a-cc3d4e8b34de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16f6f875-de63-4784-802b-a83d296d55a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d5caa524-fd23-4498-9384-37bf1e1e9956"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dac45b49-5cf0-459b-9b22-8ef1abc75b22",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48190cb6-a2e9-4318-bab4-aaca42fc13f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "151bbe59-0660-4935-920f-011852c5c8fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45f46977-1e4a-4bdd-befe-21a8d5746c48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "c6d394f6-e865-4970-806e-17075a7fda50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d64e6490-0127-4357-8fc1-eb2033c0bd75",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c41e7c3-7fcd-48ee-8c8a-531a9053eab7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cfbe5888-4a19-4f02-867e-eb14c533eafb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7017f203-aec9-4735-96f8-111fe74c277d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "71b7588c-6b50-4fe9-9921-7417b7e3b495"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e117fa7-dd03-47b4-98b6-2bd080571798",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6eeeefde-a63c-4ffb-9630-a7716bc8e8c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e883a244-db11-4a22-b0f9-7a49361e9b57"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6914cdab-1fc6-434e-9804-5ff8e0c9f9a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "580c73d9-d5ec-46ee-b959-0d6c8b4048b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f61259fa-8577-48b9-93b9-15b0c5975af5",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92dd2bc9-cd61-45b8-a9e3-62b52c92781d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aade298b-25fb-4ebc-900e-702a5df62c7c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bba567f3-c37a-4de0-92f1-2a7e2cea7301",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "263ad4df-b205-47ca-ba4c-6df9bd021e7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1d9747c-6316-417d-9269-4f2464f43d74",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1898749-3b51-4062-ad1a-c67e05c02019",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2302ecd5-27dd-4382-ba32-7699e7f7178f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8273cdf-34e3-4f92-ab23-fb8894a55595",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "21f2826a-31aa-4826-8600-8e4403b26710"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6163877-bf28-40c6-80eb-aa413753d259",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cbec112-9f25-4dac-be55-ad9feb735fdf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a94de6e5-d9fc-4697-8c26-bb29f7617951"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c91dcd5f-f8ed-4249-aab3-90b81c753adf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "92897b18-997c-4062-b189-0960188916a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4d1c5e9-9d5e-4959-8ca0-8ed363f56d94",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5881d8e2-a5bd-4834-ae11-57a48720ed79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44927bc9-d780-40ba-a957-75d7535185f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce98b723-f7c0-4013-a988-d2afcac11d31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "626a4f0b-7844-41ce-9a50-b7fc6c6d532d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f52514c-9146-4bf2-bdf3-77cb85757e57",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c85f7e8b-73ee-4866-9f0d-78ea7070e42b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b8e77b5-f511-4916-b03a-3261663475a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b631d3a5-9cbd-42a6-a5d6-178af7f0d052",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "038917d2-cdbe-4559-8e98-a094a72b840b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "539d5de4-b59c-471c-8af4-79ccfa91fa4e",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "599f82de-998d-43c7-b64d-c8fb559871ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34f6b794-f7a9-4c15-ab2f-6552b3ec8f46"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e7134e9-a00e-4f55-85fb-3b86c4c5189c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "31d2f89c-7ab1-461b-b762-b362a6444e5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4da65587-b3b2-4eae-8d8a-893a3e692396",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "184f3a45-eac4-4044-b09d-540d4a44cabc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ff2e941-7161-4153-bbef-c004201c7fbf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ac60389-1529-49b0-ac8a-e45d7064a0a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1e46683d-61e0-40b9-aad0-eb30373d98fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44a1dfdd-01df-462f-9f99-b42b0cd17e16",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e3a957d-f0bf-4920-901c-002dc4b3a9a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "afa5644a-1837-4d26-a494-2a22b00dc569"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c11a4076-a460-46ea-8baf-3d53a2f746b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "bae03048-6cf3-409f-b571-4d28c59639be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5b4702e-fbc0-4496-bc3e-a8ced38c01de",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "abb770f6-74d1-4611-a4aa-f96c2cdb9b95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0cec114-953b-4bf1-aefa-1123c820ec1f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb56af6f-3614-42ff-8864-52977f38719f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f5811e76-de3a-4b14-b804-0c49edd28704"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2eecce16-39dc-4d11-b378-c743c5552e64",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b3d11c3-0262-434d-ad20-f29388718dfd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "796e8804-8e28-4148-8010-7682a8c4ea20"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "303ddacb-6d22-46d3-b59b-2835937dd0c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "77d35fba-d885-4223-a53b-5e862df338a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcce6e8e-5eae-4cf0-811e-d0ecdc147ecb",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d147e426-7f8a-4b5f-a92f-c77a53c34700",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5a56d55-3fec-4ec2-b83e-e02f838ea5fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc081fae-de40-4856-bc1a-bc0d88751dbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "fb4e156a-b014-4d4b-b4ba-8e36177585b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f313578-4b7f-461f-a140-8f92114d2c9f",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "714751b5-b47c-4430-8d25-c4a4e0730404",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be19403a-f5f7-4273-a0db-6d17bf05b5f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9feb3b72-b1f3-4586-8d79-926e05bb1c8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "aceeb5ed-d097-416e-a8f2-b58d3660c321"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3551bb8-59e4-4d0c-a08f-5b64c2750f40",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1ff7d84-2131-4b94-9c74-635d11286751",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f28524d-c938-46a8-a1cd-8141f8e1bbf2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75deb9fb-5eb6-4d52-9879-27d9ce8d0f54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "68b39202-6316-4612-bfc5-3334abcdbe6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b460b77-194e-488e-bc33-572b7b567d74",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9476e8b7-711a-4e64-b287-7143797a87d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "343ffea1-6c7b-4f7e-92ee-1fcd48a0eb37"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "120e9500-e470-4627-b4f2-8d74e56f2844",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "b43c3f74-6d6f-4719-8c0b-051f06a7fcf4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b061078e-8a0e-43d9-8302-e234ba3d530a",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "513aa2ca-7bfb-48e6-b20c-b0b09d67e3dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "abd63b0e-ca22-40f4-9ac0-5cbd76328b69"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4d1d031-7904-42c7-9cbd-1f7da9bc5558",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "ce7b0682-0f8f-4181-a845-7106da5ecfc5"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "ba85e8d5-870d-4f56-9509-cd82ddad22bb",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "9dd41830-c49b-4d0b-988b-c27e04a2cf7f",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e064b617-a735-458d-8364-d0ae0fbf7475",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d9d7a9a8-9181-4345-a863-961853cb6fbd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6624d874-a5fc-49f4-a1ff-938d2fa792c7",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "920fc718-43bd-43a2-98e9-522f875b94fc"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fd86f423-0ea3-48ae-888e-f748e8128bce",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3442e01b-af08-4ecb-8174-5362b550bcf2"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e7c1efa2-8ca8-4b02-85d5-97e9e61e1619",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a412162c-fa42-4df7-b26c-5f7c92043b81"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "660446c4-0c8a-47b4-84df-d3e2cfa12d32",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "2221eb72-8f39-4ec1-80b9-b4846f9a6c96"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "95f78086-bcb3-4569-b6cd-c4213d446edc",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "9d0b9ab2-4624-46c0-8dab-26c473e24b7b"
                }
              }
            ]
          },
          {
            "id": "c94cee3c-6316-40a5-b961-c3fd6ee6e66d",
            "name": "Positive Testing",
            "item": [
              {
                "id": "7791d710-8431-47ed-a8b0-10157f2aaab6",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "1247cb74-11ed-447b-8419-03b1db881fab",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae527174-ab25-4dfb-ad9d-2ded10e6f5c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "b2c8c498-d309-46e6-b80f-ad8db5722a7e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "504aff9b-d109-42de-9144-6632a7274a97",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ae6cdeb-9dd6-42ea-88c3-aa137fcf5c53"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "7fd90862-c1a1-44b6-bfd6-4028345c3c19",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "bdbeba28-0ed7-4f96-9a78-0c625ee2bbae",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c410efef-eeae-41d9-a418-9d926904d824"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "138ce65b-8d33-418d-a37c-d9f04a54a021",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "c23a0298-f46b-46d7-8bc2-56c6829cd5dd"
                    }
                  }
                ]
              },
              {
                "id": "5c84263f-b382-4f0d-b3a8-ba8ad6702ca1",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8d8a1c0e-7b82-4249-8fc8-1cc2a626e176",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "11d195bf-c7b1-428d-8ec4-0d1ae9cce487"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "879dae37-36e8-4833-b4d3-a6163c60c103",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "34d23089-3479-4449-ba29-21cf93845c2c"
                    }
                  }
                ]
              },
              {
                "id": "db08fff6-00b6-48df-9c0d-45b5a07888ce",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "538d820c-f98a-4ff6-8ff4-54bc109dfdfc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "712df857-8311-4b36-a932-3839d7c5a4aa"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3ad4698f-75ba-4bc6-bd36-9d38fff4a459",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "488bb5e9-a23f-4022-b070-3a8cbcca477a"
                    }
                  }
                ]
              },
              {
                "id": "bb1ea000-99e5-40ff-ac3c-0262f834d8a5",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "fdd9a754-b6a2-406f-bc8d-317dd003dd54",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a196545a-d941-42ab-886a-2f78dfdf499f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "76aec654-85fa-48d9-adb1-bc7b41e0e3a6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "d90813a7-1ed9-4d1e-a083-fc5c6096dd68"
                    }
                  }
                ]
              },
              {
                "id": "d3ba2601-b031-4382-96cb-57f7e4c9e07c",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9c64d2a1-1f6f-4a3b-8290-baba77f66ee8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e75605a2-02e9-43a5-b730-9e49eb17db90"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2a75937e-88e3-407e-a2ba-9cb76358474e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "21b4aab4-1252-4c47-af57-92e931b203c3"
                    }
                  }
                ]
              },
              {
                "id": "b9eedb77-e330-486c-a63e-9d3f5566cbe6",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "08e66455-7f28-4120-bd9d-31f251483a14",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2386c436-7273-4bb1-9013-63d621f917b2"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "305e0dff-57aa-4cff-9e2a-8f97bc4b5201",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "65f5ddcc-f6da-4d18-8f40-588aed71244f"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "9ce3a13e-eae2-470c-9256-cc8ed31b36e3",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "4126906e-c553-4902-a828-b85d8154e53c"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "36c7d34e-1c46-47f6-9e2c-4c6b82c2db00",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "dd25171a-37dd-4087-a418-b6dfd1ab617f"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "153d5fa2-31fd-407a-ad20-04ca67fca8eb",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "5f4920b5-f7ab-4409-8a12-0344909a11c2"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8cba71f2-da14-4da6-ac5d-170ad985d726",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "bcfd2d96-9fb7-4a04-8bb1-4bb02ad01aad"
            }
          }
        ]
      },
      {
        "id": "833ee4b6-b185-4fd7-8cdd-5e4e8f33dbc4",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "6e012397-6960-4b31-b697-e8bc16051969",
            "name": "Negative Testing",
            "item": [
              {
                "id": "2e62b76b-ea1a-40d5-86eb-3f2deea9ea9f",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "5dc0c0d4-929d-488a-a89b-02b401460b2d",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c796293-0caa-4386-ab0f-92b99b113a03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b57a8cd-fb5c-4833-82c0-672d2b2c83ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5be4b0ac-52cc-41d1-9722-2f32904e7356",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "c8ca07b7-f51a-4681-a6af-e20c8ce35fc7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f490bb40-84a6-42f6-b601-3a42a0a35a6d",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27cd6ba3-fd78-4f09-a39a-9b21734fb4fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22000a48-dfd8-44db-a65a-6bfe3e15d9e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e44dc03-729c-453d-a4ba-3d136995a153",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "138889be-a381-4a90-84eb-d9175dd7b2ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c84317a-a288-4d4f-865a-d18b078f5dcb",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd8a7b69-cea8-4e48-bca6-8afea132054d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22204956-9a3b-4796-a7a6-3a24f6cb5437"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d05b26ec-51b3-4d23-918e-416d60b8c9c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6c5eb4a4-616f-4c93-a173-6b370b9967d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73bd2300-448c-4cec-bb8c-8531ef83728a",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6bb2fd36-4bb1-48ef-990c-9748ae140e60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11e0588b-7d58-4919-bd7b-f3c84b2dfdd0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6015f363-1d4f-47f0-b45d-f9f1820376a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7b2531db-172b-4a7f-84fb-287c00d29575"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8638e8b4-e721-466d-89a0-89546a5e5113",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3318b15-9745-49aa-8930-ab6582b7e69d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e8a06a3-81ae-42ff-a458-f1b055dd1299"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cff581ec-dcc7-40f4-ab9f-3c396e1d04e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "12f0911c-d923-4caa-8d36-61fa87ead0c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba26636f-6b0e-4e16-b4b7-0e60b3ee8f0e",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c027c094-0bf9-4c3e-8e47-652bb8ea368b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "094f3706-96bb-4679-9aee-1c0036a2b213"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7453cd3b-67f4-4890-8067-67119257adb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "e4858a29-407c-4394-9a13-4093e024a7e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70004dae-01e7-47aa-a1de-73acf32e6612",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc4fe188-8736-4b6e-b1c4-089293bc65f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "865794a0-5808-4b23-82ad-3b2129ae61bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2f493da-18b4-4348-b4a7-05bc9a8df27a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "e52caa48-dc88-4317-a964-4db834ac74f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dda9d996-df6b-441a-b88e-d4426a886e5d",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a122fef6-aa38-4ba7-a5ac-aba2184d8252",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52f69eae-d9e7-410d-8004-d843d9aa1f28"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1c2cb3b-d8f8-424a-b8d2-1f80fc1e0ced",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "bd984644-2c9f-454e-82a8-b3627fcf6315"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fffdbde-7468-410b-8fba-0bc50f1113db",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54fdb134-af6e-421b-8f28-dea4d9f52595",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d733d1dd-4014-4ece-a275-6a824c790dad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17ce78af-095a-47f4-8262-42ac8d1db805",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8ed959d4-c716-4a9b-bbfd-32479b3575bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ea77865-2305-429b-9fab-70d9d8ce977b",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e91d1e5e-cf04-4d61-b3a6-bd4d7fa8dc61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64e62f44-b104-4df1-9f4f-315edf5cec5d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d8a88ff-3ed1-4270-82f5-d2af571343ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0ca3554f-2681-471c-81f6-58f187dea6b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c128d1b-7068-438b-acd8-6ef1e1f838d0",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4dd8ad42-08a6-484f-b0f4-2adf6624cfbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7fa0e46-d0fc-446f-8f13-fe425e638795"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "298258c6-4562-4482-9b2a-1f56c85b0339",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "288000e9-1c71-41a0-af65-5d307dc5519f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32c1c95f-0025-43f1-8551-3e29dd77cab8",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d93b394b-ee42-48ab-b544-aeba9b03e025",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54a06b8f-8f0c-47dd-bbbb-8707d87a6a0e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79546e8b-84c5-4b94-8e69-06e59fcd19e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "648ba3b7-b27a-44d6-8304-08bd8b008825"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7b795e8-1d95-4d3e-91af-5486247332ec",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3876102-2530-40e5-a9fc-404013a13fee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aca042e7-7c18-4edd-93f3-d9360951dcad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2cf09f5-b120-4876-9bd3-263f8e3b9ea5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "3164cbe6-05fe-40eb-aa0e-2df1bc6e0d7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48482760-0170-4547-a391-98f5611fe69a",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "783af9be-7b6e-489e-bacb-51e0a884b3a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7123d747-d6f9-4ff4-b0ac-70b4e2baeeb9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f30a819f-0989-4220-9262-7aebed921c81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "f5f200f1-622e-49fc-9612-e47fd359d505"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bd60adb-165e-4204-a694-68c171339512",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73a78747-d0b8-4a13-9d85-b34306a39f64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3717790a-066e-4827-8c82-92623d1a5339"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b4486aa-af52-4bdf-9327-86e644d37503",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "505629c4-83b8-47ae-a396-e47094aee4d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89cf4718-5c30-4645-a91f-b688008ab5e2",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92ff4628-a5bb-4feb-b7ab-4b2df0f67693",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d329e28f-b516-487c-b837-a75168786acd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4476d5a-f47f-4a86-8a90-6bcdb1ac856e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "3cc340b8-9f8f-4202-972c-eb4908a163c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9f1ed4c-6fba-4bfe-8c49-75a11474d1f0",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "660260a3-f68a-48b8-a449-c0b106bed13c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cab92a60-bec1-4d61-9904-e5737ae6bf37"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a921becb-bfa6-4aa4-9f67-fc964d2ae2eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "915d8c78-11dd-44bc-b4e5-0ac30896e9eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe45dcf0-3d59-4c01-8922-6139b59b2e52",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3be17fc9-32ef-4c36-b132-26997250be2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36ff6c57-5191-4d7c-a205-b4cf823d8fb0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c45e76e1-cdbe-42a5-b446-637270f3247f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "3d6c6676-83ec-4bc1-aa35-78541f07fd09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad985cf0-eb14-43e3-9b24-618084a0da3f",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "468570f5-3c70-4309-aca8-03caf4fc75be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4fe5e55-0883-4a03-bba9-3fe988a1dabd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90ce8521-20ef-4238-83cb-2965422bffe8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4469cefb-295a-4386-a94d-5067949ca7c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6a80878-74f4-46bb-a8a4-cedbb3de24ef",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4e6a004-3d19-4610-adb4-2db9efe3f7cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "224b2967-ac7d-4d05-bceb-9379b310f373"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a9d135c-6492-4b1e-8960-39b1b8b2090c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8320da73-d9c4-4d53-9c91-cf0fdfa40133"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a297a7a5-d5ce-4924-9e22-663a0432e760",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbafcb3d-54c5-4cfd-9fd0-76f025b9b2e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1b58d22-f80f-4d90-bf6d-407fcc62d6ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abdeda3e-88c2-4871-af20-a4b99f9fcce2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "70e2eaf2-4281-4c3d-b1c7-9d0d883065e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef5263db-6ff2-4a97-a9fa-f6e603bdbb5f",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3702bfb4-19c4-449a-b88c-f7cab495d16e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df20cf98-2212-43e0-b5fc-2cca400fd46f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7e81dda-7d01-49b4-9576-c0b278f25b57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1b8f182a-c871-48cc-abd9-34f23a675a5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03a47aa2-0165-4c56-b012-7b4f6561b75d",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc891108-909c-4f76-a222-16fe8d77d511",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18546cd2-08cd-4b1b-9789-91015523de05"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c738c64e-48a0-4da6-85e8-11b2322de97f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4c33a614-2b87-4000-a4b0-5a1c615f3e13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64272d62-ef41-4250-9824-73bf8257c465",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a32daf1-6fff-4806-a5dc-3883f19ea768",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3a6c897-2266-4135-aebc-2970d9e5cc64"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1cfb15c9-f8cf-4cb8-bc47-b2417f7b0577",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bfd986c7-1d6e-4d81-94c2-ce324398cb7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cec8753-b3f2-414d-9bb1-e114b7c4e261",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e42237a-f54b-479c-8980-332da9fba764",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc6ed3dd-3c79-4772-82c4-c36ca9f1bc87"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a098ff6e-08de-4624-a1ee-c34e5f8c982b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7ade13b7-06c0-46ba-b152-3914bbfa3382"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70f611b5-79e8-4b7f-be8b-0253d328a6e9",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f03f1529-931e-4cb6-9094-c6e04ec162d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8ff8a80-cace-44c7-a090-f4576799e831"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48c5748d-cefa-4876-a3d0-b059e1cbdb04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "43564142-4049-4cb5-971f-101db2e5d9ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48abcec8-2cdd-4492-a404-59ecc3a7aaf8",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c90908b5-afb3-4a45-9274-7091b151d4e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eeaf1c28-b6d1-4d10-83a5-91012d330add"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "640fab01-f92d-45d2-a91e-58cdc2d06793",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8a7da7bd-23f3-4652-95c5-119bb2b72434"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acb4b309-8304-4759-a2b4-300fb8a1d0ca",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3da7a8e-d6da-485d-a228-a74bb0f88309",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "913c3d86-2e1b-4982-9484-9fd69d531f8f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df4d1d34-031b-46cb-8f75-33ac151b53f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cfeeb20f-2dde-4ac7-b670-c9f2b3ebe9aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "849427a1-a8d1-49d9-a381-2a8513173cbc",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b65f9b7-11b7-47d1-b848-913ee844a15d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e8215a7-6666-41d4-8293-6fa2f8c14b8f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8660d8cc-8e2a-4a86-80cc-a65430699349",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e553ef09-5488-41b2-a819-8fe06668833e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b337d3a-1f43-47cb-82eb-98e461157cb4",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51df3042-9fe9-437d-a5d3-ff56863aa6a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83dc5bb0-32f6-4cf4-a574-16786d4260c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fb7d8ac-f26e-47c1-843e-1ebaabc1932c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "dc3d92a4-3759-4981-af95-521672bbb6b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b559c49-70cc-4bf8-bcba-c9e92b882227",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "669f9d1d-63f8-4a9f-acc5-2bde0e1b1da9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44eaf19b-ae29-4d06-9797-65f85d7fecd5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37f4af4f-b66a-40e9-9a6f-27126b96ef54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "04f43094-302b-4e01-93bb-67825f072c8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afe4410d-b3dc-49ba-a60d-ac06989da685",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0bd7b13-c2f4-4522-8131-387eeefbdf08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d14faf23-3e8a-4e46-960a-880864e32aff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0c6eed5-3a95-4f4e-a994-1f12d6499578",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "836560a4-fdd0-44a3-aea2-4125e29eb7bb"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "8f667794-a942-444f-9bf7-63c59cd6d70a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "737f0c1b-e9c0-4c80-ba49-06faf77db8c9",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f456f04-9889-4eda-bc06-322db8e54ffd",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "4a847dae-d99d-4dae-991b-1c00b6eac2ac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8239619a-9055-4b22-bbe2-5917479719b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bbfd0971-b51c-47c5-81cd-27da08572efc"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "430351d9-871f-428b-9ad4-5c7ac6c83fcb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "89d8dd5d-7002-46dd-9b43-c8f2a8f98c6f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e645813e-9aed-4da6-a8a2-1e465155c00f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e69e8ec6-9d2c-47cc-b204-783c80773a1d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b4bf621c-40b2-49b5-8603-ecd1937720ea",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "078ee72c-950f-433d-bb8b-e7a3e0734255"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1574883a-0c2c-4433-bbe4-933d6d65cbfe",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "430a1730-ddf3-4269-9009-78aad524a5ec"
            }
          }
        ]
      },
      {
        "id": "556d8e9b-51df-43ce-85ff-0c17ad6d8135",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "c2e9297d-1db5-4173-ae2e-9301c5e27077",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1d3f84d1-c871-4120-87ac-4a875bb23139",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "1160b25c-6963-4387-a1eb-5b5480aa472a",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7544b10-caea-407c-befd-81fc1a194a00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "764eac31-0654-42dc-ad21-f227c2c35603"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c75ebb98-6b42-4c44-aa5e-9e5d88cbf078",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "f489c4e3-eb74-4140-9b3d-8e76ba14977e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acb43258-41d2-4264-95f8-7245cd67a24b",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d59ff196-50e5-47f2-a96c-233836c47eb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fbaeccb2-5e60-4a1c-b5c8-c7bfb98f920f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7dd5689-be10-4bf6-be76-7721dcf9d9c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "813f6cf3-523c-476b-ad97-e3b625b66f22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52793cab-8cac-407b-b434-4029d49fb760",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e70a484f-4bb5-4535-93e8-45df2fff047a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5fe60f0c-4193-4953-b1f5-ad0e0d0015ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7784758-ce2a-421e-8a4b-dfb48f1e487c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "465e4283-e499-4442-962c-40d760f61ddd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5758ed9e-e48d-40b7-86ef-c357d7be3f71",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd905e34-d964-467f-8e6f-fa4fde552d6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2cc50627-5cf5-476d-8bc2-92b99b6e26e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b00b51ea-c974-4db5-a80d-67523694b118",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "eec5dda3-3f13-4dd9-bb07-c71e6f7cc347"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b73f8a2-1b51-46cf-b463-9563f6b34124",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b12ba0f9-8729-4c81-b65e-ba76234df417",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06f26ca7-940c-4a1c-bfa8-adea6162ca50"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c48fe77b-29a4-485d-ab6c-731c65fbd43b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2e866f10-a239-4f86-b040-b606fee8ad74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17915879-504e-4d93-b965-ec403f6f9658",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f098bde3-b091-4727-bcf1-b64b235ca96b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa8935b5-b5b6-4b08-9737-5019361eeb93"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fa9d3c1-83bf-4762-8a63-3ebea5d6bbbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "4700a853-3304-405e-b82a-481d9ee9754a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae4f0b24-12d0-4814-b10d-c0ebb3b9fa28",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb6a05f8-eeca-4e83-9f3b-710ca6c3225a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3517744d-decf-4cac-b9f7-0169889b6a7f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ccbf58fa-1b71-4e39-8e62-57c91fd4e8a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "c78d6041-7129-4ca8-b961-2d05771588f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f79ee340-89fc-41e6-9c3e-b5ab0d7e0f98",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05e12755-62eb-4187-983f-c83431bc8a9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ece1ef25-6124-4508-b298-92f80f341631"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1db97530-1a2b-4c09-b7c6-4854527fb156",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "12a98432-fbbe-414a-b1d9-5b0a93a0eeef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ed6804e-06a6-4904-80ba-8b1daf2d5883",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44cd0c21-222b-427e-97cd-789505ffdc76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5d3118d-12ca-4aea-81dc-5b8c85981099"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d06fc28-d2ad-4517-92ab-6050567fa816",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7dda01e3-0fe9-435d-8133-e8e08e8dbdf3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a73ec28d-af53-4d40-bdeb-f73ce3ce47e6",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3beea5b8-f6a1-4b21-82a3-84d4461a6fa5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cfac24be-4ea8-4872-af74-f20dbff44f30"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0277515-db06-4ebd-9701-02e2d6e1c13e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "12d03617-4268-46c1-84bb-4da7e7cec058"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e8859fc-7070-4b11-a0c0-e15558f53a88",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6e95d54-cf60-4f17-9f8f-169ee0862d7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a17afba6-5022-41aa-b317-21fa03f2e80e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bc67b93-0783-4f77-9480-57db1e1e5865",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "f8c0d1b6-6aa0-43f6-840d-c9357785b6dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26c0b122-e419-4940-9021-24ed69a32236",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b639be0f-7064-4067-a91e-e77a751ce197",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a888c18e-36ff-4852-88cc-855f1a6bfa27"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88a08efc-665d-4b69-b334-4172a85a3dd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "dc52e0a0-ce37-4fba-b69a-e0761e2e94af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "534d4c2d-0436-485c-ae96-76676b0cbf98",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad04d367-6840-41d2-9c67-2aa511a90616",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33b3a8da-39b4-43d5-b16f-b5a026b70f2f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0799fe8c-5832-4d5a-b258-84c4944577d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "2d42e859-ad6d-4f0f-bd48-3aee2fb394c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8770e4bf-2d49-4c53-99f8-db34af2d0398",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "724e304d-5ea9-4b63-b87e-3eb2ed6f6226",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe83d7f0-24f1-469a-b672-6cf041ed2c15"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa17dc12-e22f-4eee-8f9f-ebd56536a64c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "f67ee351-7a92-465b-a8ce-f5979aba2048"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4ff8610-3187-436d-a04d-61ad19c80664",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d19b668-2dd8-4d63-adf4-1bf352eebc96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2ce1957-2ae8-476a-9524-b426c2bb5aa0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "595b7006-5cab-4b72-9410-7326774fcade",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "84992096-88a3-4887-bc08-435abb6c21bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fca5ee77-bd86-47d5-93f5-08cee93c0ea5",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26dd9222-7b44-4764-94af-34f5149b0ae6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7aace5f7-d93f-4bca-8f42-e82d8c7e5eb8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75168210-c889-4c83-877a-5e9158f879a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "5e148b54-ace7-4f05-a978-16ab5f4589e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "377cd4ad-1d1f-422e-af86-4011143485f7",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7bab777-161e-439a-8952-30d5a062545f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "522e055c-9017-4d02-8889-210074656998"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c02d853c-616a-494a-a698-a05c5ca6914e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "85755fd7-154c-489f-8784-ec2650505972"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9b2c0f9-32a3-4471-8f93-c32cc6ace877",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cfc5026-a7bf-4117-84e8-a85cc35ae1e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27620680-f4b5-47ff-aa9b-60c506cd1a56"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "851b451e-9921-42a8-bc27-88d43a1ab6d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "e67563fa-bfda-4da3-97e2-cd2526e3f221"
                        }
                      }
                    ]
                  },
                  {
                    "id": "016fb0ba-3d17-49f5-b605-4b30971700cf",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7260eff-e26f-451f-943a-a337861bbd6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6499c4cc-de10-42c5-9982-061e843757b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a95e2ec-fcbd-454f-989d-08e49f9346db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e7e59701-e958-49d0-94f6-363e73d7c3ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8bb714cd-d53c-4630-973d-8a1ceec2cf42",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67c829a9-e63a-4d6d-a3ab-fc7685112acf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1992249d-822b-4219-adac-c34561b4bddb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "959e5228-1390-4eec-964a-7a6b0779d5cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a30ee8c0-b214-4d39-920b-029e593d8fd6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f234823-6307-49b9-bf97-1bf2c1c73695",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5082f1b-592f-4459-8c8d-dd832cc29f91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fad75507-b860-4b88-8f01-b5c50776fbec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8508b53f-1cab-4a0c-b664-bd91a2f6c61c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "59cce4e4-7006-4648-8815-2bc938bc993b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6038525b-52c1-4e2d-b8e0-7629e67edb44",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa72fbc1-4521-49dc-b78c-842a1d5e3adc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "673eaeb9-8500-45f7-b325-a477863bfdca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "676fd134-ef50-49eb-ac54-be03d40895ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1514ffcf-7014-424a-b806-882ea44e796a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e58f048-d51d-437d-b86d-549b6be61207",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b92d6c0-5ce9-446d-a7ae-711b3f1fbd28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "393fcd4f-d73a-4788-9eac-eec48ffdd760"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82867eab-2c6f-4946-98da-4d44a418e94b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "64f6360a-b042-4e2d-86bf-e7ebce76fe4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ff1fbf7-f7fc-4109-9fae-64e869d13d6e",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3cf0456e-5083-497b-8d1c-e6545fcff08b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad400603-bada-4f77-9536-40c5285877ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d35b1c28-740a-419f-b15a-4218f97ea293",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "71bb66bb-2b67-4119-8ead-a7eab57722a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42524493-86f9-41b5-aa0e-3a2179a0adf2",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "004288a0-0653-4af0-a7a7-bdacf1e4cd9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aeca4329-c811-4762-bfbe-90f13d99d063"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e3c3c63-da50-4763-98b1-665d94b104c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cf6826cd-159d-4116-aefb-c496dfc3454f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb4fe0f3-a804-44c5-8721-9e52383a1698",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e393b81-7060-4335-9179-400dd8ff0021",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d8129a3-b9f3-4601-aed2-c19d3428ff52"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92519ae2-ab58-4ad8-b314-1070a3295e5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a6af27f9-c0e9-4f33-b560-519afe4bc5d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8e17103-73ca-4d00-8e42-8a30cd8a14e4",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ac3daae-e2c6-4488-b1a1-da61cdddb561",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36e3edf6-6ef4-4105-a3bf-eda1e598c027"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4db86bbc-de07-42b7-84f1-9c8f131f3805",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "91a051d4-af3c-45ce-b5b0-ad2e0db61cc4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dca48aa0-6366-4c26-a907-4f37514a4ddd",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d2941af-9fed-45b8-ba38-93fc6a381266",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d1ddfcc-b584-4481-a05f-d8de5c17c9e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7fea092-e7c9-4d48-b64f-f0300e562b80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7dc7f6bf-b835-41b8-8581-b220413e56a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96eba7d1-bd70-4233-b2c9-ead5d9132ab2",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd557798-b54d-4704-81f7-3e064051c608",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dcb2f89d-fd62-4ecd-84ad-41df2a141111"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4be1e25d-fbac-4ddb-8486-05419bc91ec3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e3ba0baa-a050-4d01-b699-5c04114cb5d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1f5bff6-4e45-402e-8dbf-98c2a1ebeb24",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10374094-b9bd-4482-9cc3-8fd8d34aa7ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f766be6-b4de-47cf-ac29-27ca13471107"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "154d2958-b161-4c89-874a-4e5e917015c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "324e4c2c-bb61-4fd2-9f6f-14860c8904f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "755f3d7d-a171-4ac4-b50b-c3e93729f7f5",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f2cb48d-08c7-4f70-a69a-648335c87560",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d30ff3cd-ba9b-448d-9f82-9f1c0e1f73cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3279ac27-9e2b-420b-a801-c0db0b82f5fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "32d5af8b-f467-4dca-83ff-59322f8dad25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f62198a-4471-4b50-9a3a-22bb6d059eb0",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c465bb9-2388-4df2-816f-2dd1fad02a3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d859fb1-89da-4d5e-96e2-6288337ad8f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19371ed1-0acd-492b-9857-f4bfc2ec149c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7553dcbc-f612-4ad0-b228-9f9886df07e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42e13de3-e002-4788-9a67-c25af7995d18",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e87cc08c-b779-4408-8a88-1953b860f63c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a30cfb92-3d1d-456f-b958-c84661c3bb73"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68ae67e7-4638-41e3-a798-f8b76a52b217",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "73336573-9a81-4b6b-9525-4d28fb12d38b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "416a4d92-d8a7-4552-961a-46ad54c74685",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7032df6e-953d-4d9b-b829-9cd10fefbdcc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f53a2529-6b43-4576-b2ff-8b86cacd6c9f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4823417-e947-4898-8836-0cf50d0d8fc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0111c691-6eff-44f5-bb16-88c2e31a1875"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f23e20c-a825-4156-9953-9dcdbd28c410",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b88e2d50-01a7-4c1c-9715-eddeecf89857",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00db1387-094a-465d-a22d-89a30f1ad5f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95c6a147-b340-4859-8838-633364ea2a68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "96d478cb-8b67-4792-8095-eec7748ba0f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54b1054f-2510-42ac-a56c-d3cea8edfaf8",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "073b98a1-d414-4d53-9b30-a63bcabcce5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93ded63b-30b1-4e69-8bf0-ddd675327292"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f768d1b4-4cf1-4738-8afd-10056af62448",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2e815e70-c336-47b7-81a7-811195442b7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e432229a-f01e-42bb-a1d3-4230322a7743",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "126aa7c4-6638-4dfd-9854-42a9cf12d0c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3a3c9da-e66c-4f3e-93d6-63793f66b72a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69aa3b27-4997-4417-87f5-787a219e3a11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "754ceaa0-195c-4581-a6b0-4b4e3762e1a5"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "f8305637-a011-4107-8c34-7e5d62aa38c7",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1663acd8-f3dc-4e55-8764-715bb270c87e",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ee3ec72-fe73-4907-9b06-8e2116fd478f",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "4bf8ae6d-0566-45a6-926c-7d25630628f4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd2edca1-1208-4e76-b61a-f597f5e6570a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "012cca7f-3f2d-48f8-ba1a-f999ad74c1ab"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "790d3934-4e84-41cd-a1bb-40cfc8a188f4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "717794e0-6f7d-491c-aac4-e573102512fa"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "65e5e61d-6c88-401e-9d98-d2f9fc36fa4c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "862f0481-ba55-4371-803b-3f3ac6dd21e9"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "802a7975-feae-4352-9de5-0137e9488047",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "d3ac55d9-914a-4cb3-beb3-9b0556f2f87f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b7c65591-6085-4904-8bd4-54e677eb1a53",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "91e4013b-9682-4bd7-bf34-fc31181fbb3b"
            }
          }
        ]
      },
      {
        "id": "d7645591-70cc-410b-8ee7-e3f067444ec4",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "fe8a84d3-12ec-4268-a229-60e4f4463905",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ed241345-efde-432d-b6e8-df39751a75f2",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "754a73c4-9c61-4735-ab34-cfa0975bced4",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b91c833-c50b-4630-a8ae-b3a9157028bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00e588ff-494b-4e27-90d5-b3ca759f40fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afb4cde9-9915-41f0-9c98-d6740b6ca506",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c37a0b2-8b95-4a43-b3ea-be29fee36a5b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9544caad-e385-4f6a-b42b-75b8605f887e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fa0d87a-2883-4984-a4d4-a7f1310ca184",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6735a3ce-7e04-45f9-aa92-fa5b85eec439",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5debfc0d-90a6-45cc-9937-126d32d6d73e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4e4c52b-e0ca-4071-a631-fe55bd681b4c",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "535621c1-86e6-441c-b4aa-d96fc2c1ac55",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a487a14c-3d01-44cb-868f-3b9da6288542"
                        }
                      }
                    ]
                  },
                  {
                    "id": "963eeb9e-43e9-45c9-b923-fdac12bb7a41",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af87c26f-4af2-40fa-b72e-4f95ea8d0328",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70fb5745-0054-41a3-8060-fb1b1639722c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "217f67c6-83d9-4be9-acad-88715da23ba1",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6503d5f4-772a-4152-9763-3cd3ab9bd6d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5c81457-ab0e-4a6b-b00f-5a6fc15034c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "270adcdc-cc63-47ad-9f65-09c3d49aab04",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5096e9d-fc69-4d80-9d3e-d06f7d280d48",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "347cb71b-0a0a-4537-83a7-d9d32203b920"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d70957d-caaf-4d6f-86a0-050ab362b41c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa7406f6-526c-4987-9789-b8a1b485b31f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae6329ea-3420-4aef-9749-695eae2a93af",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "762dde0c-f162-4613-ad75-a5e08599f2bd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2f1a2c06-23e1-4980-bf78-d2a2a9dac6d2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a44dc6e-25ab-475d-abaf-a9baa0ba066b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2fcfb449-71f3-45f2-a137-b9bf505b9d3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "352cdb8f-97bc-4150-8f6c-8ca2f91c9d20",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38451ea1-e8df-479f-8c76-cf3de77ba380",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a8080a94-0b8e-4121-b33a-8c717def1234"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee16b3fa-b49a-401a-881f-cccccd7a618c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2dbb02d-0eed-4312-bdeb-895480c1b727"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac045ae9-5a33-4118-88f8-60ef4c1cb006",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36f097cc-23ff-4e8f-bc22-48fde20eddc5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f0d7f60b-8a6e-4d9a-b951-7541745a7b6e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f81d0a71-1e3c-4ea6-8e53-6e67e508f740",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94e82315-45a8-4c45-b9c0-bd76316ff72a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01633703-b612-4406-9f81-9be30cc3ebba",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ff333aa-a2d7-4c7b-8874-b5f6298f279d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49eff91c-fcac-4380-91e1-61e01c74e856"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e58b63b2-22fd-43a8-aa57-5450109c8725",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d220e516-d447-43bb-b778-2a40d0d6713c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7104c0b7-48f8-401d-b6e8-c41201941a1f",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecfd1b95-addc-4ee1-a16d-11dcb8524d15",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "afc95735-1d2a-4328-a7d4-d77e9363bf7f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "48ded775-e48e-4b15-8164-ab21d995068b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6ba9b80-fd81-48f2-bbd4-a745d306eeec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "116df2f0-0692-437f-9f28-6487e3e85047",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7bd8f96-0453-4c1a-acc1-618f74d95416",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "324be666-94f6-4fdc-adb0-b6133345df7d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "431bc0b7-bd47-41f5-abc2-0c0315de7d86",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f9f40a8-9537-497c-8dde-966ef94266c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58fe8849-7525-41b1-80f4-525dd6b27c7d",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8321e787-6df6-4df8-a5a4-c7bd2605ac1c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5b3783c6-0150-4588-a1d4-d3e5c0cc259f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "11863c53-3fee-4455-8d46-57e2f120be2a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8d4f6f9-fb6a-4c26-b452-c09e1272182b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f16df188-3b86-463a-a6f4-f13aac05c900",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25bda7b4-2d2d-4981-ae39-401fb8ed2da2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1f700873-72d3-4fa2-94bc-e2f8ea49b60b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0d90479-6300-4746-bc4e-69f9f15cd1c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca139a76-429c-46cc-acde-ac7586c920c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "437969ef-dc73-4739-99f1-903eaf0551dd",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b671d0d3-8b9d-4350-b8a3-64a01b8fee6e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "10cc2d81-b838-49ee-acf5-5cc2c6d127de"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2ab64b4-906f-4750-a96a-d198294ec8a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b88de660-4b8b-4664-a12e-25ee5d7d9780"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e80e5f9-ce80-4910-80dd-62836ae68f6a",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97596f8e-b1cb-451f-abc4-153285f32811",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cad16395-e69a-43d9-b7fc-f2d240d37951"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3c04f41-1d33-4c5f-b872-99b499d7d48d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "803dc434-60ab-45b6-9761-8263578950d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0788d34-ad03-4dab-b25d-ed66b41355a6",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6f7d76c-7503-420e-811d-84fc85d85577",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "517030f0-2e3b-4409-81ba-efc9eeff874a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e713607-6e6b-477c-829b-f25ac28f75ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35b1fd6c-d60c-4887-8ea4-aed0ebdd1f43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78c97f6e-4193-473c-9a1a-1c6ac6b96eea",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a04a8f2d-4da1-48f3-9725-1f96522457b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7391e5f6-f3c2-4024-9bba-57abebd9ac1a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ceb300ea-3820-4530-ba48-2cd7a8206e51",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9548985-ab5c-4749-9c29-61641482c3dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "752e5f70-695e-4abb-a8ff-0c39b4ce4241",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66776846-710e-4b45-8ebd-5f4d48bf8706",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b9e3115-ecba-40d0-a30d-a97345cfe8d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d884447-bc04-4650-b3a3-944c1a54a081",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "016aa884-c7dd-4961-a67e-58602437e024"
                        }
                      }
                    ]
                  },
                  {
                    "id": "daca4155-2e55-401e-8474-616c4be5d1b4",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d25e408b-775c-4835-a410-ce2baec91d0a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed2811c6-f1e0-4354-990b-21c5ab507170"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0f2d86f-12fd-4e70-bf83-6503f02bf0bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad4dd842-dedd-4721-86fb-0384f294c87b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5b242fe-b35a-49db-bf8f-2ec6be0f50b2",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a9bb8cf-277a-4569-aa96-bc17ec34be37",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79e49ae0-689d-407a-8ead-a8bd45af3edd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a58b2229-d0f3-4884-a088-ea818ad91704",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28059003-a9ec-4f34-b679-851f7e56130f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd685b88-7d2b-4a15-ad43-c2bcd096a706",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14a64a66-5bc3-4a4e-9dc0-0072ccd000e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1cea77e1-a8cf-4574-a233-c0542af691e1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "93d726c7-96b5-4843-9898-2813963b42c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ef1bb9e-be09-4e2f-be72-6e5a2c9b9efc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88d0ef2c-823d-4df6-986e-4e7423410bf0",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "677a1e98-ca28-45c9-9b19-6345e4cf42a7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ffbd8729-11a5-485e-8656-123982c09a73"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbbcc73d-f9ec-4fe8-ba59-6c1533a5f574",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c279d307-3872-430a-8ff9-b04d0f56047e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "730f031d-b1de-4be3-9425-9d960c5f59fe",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c7ddd20-ff85-43f7-8121-0acd105e54f8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5e39d8df-9460-4cbd-8b40-eb1519b81175"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3dcff843-00a1-4559-8b56-ad52140bf667",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83737830-9c30-4040-b33b-b268813a18ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3aca655-c4c6-4886-b8f9-71ee5dd32674",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50ac7179-ebc5-4b4d-a01b-87280751887b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "62e84a12-573f-404f-ac3c-9f74ac4a2785"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0dfe2686-f7e0-44a7-9254-e01a8d87b7a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e90cb919-fad7-4fc7-a469-e87f439da0b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8d68eb9-5747-4c4e-a536-ab397df68885",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "899271ca-942c-49a7-b875-ed66233c8197",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "427c8dc7-dd60-4071-8de2-ad03da3714cf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "446c8158-aa10-4e6f-9b51-51644b18840f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8c6c161-561e-40a7-a832-45aa262fc598"
                        }
                      }
                    ]
                  },
                  {
                    "id": "256ed8b2-3d16-405e-9738-82e51c3f2566",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21c98878-1f82-4156-936e-f59ff453339c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e891bb8-3fa4-44a0-a24a-18429b4ff3b6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f2328b0-9806-4666-b923-9d211a05b37d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13f8abb4-ec36-4122-8d4b-3d25889dfb4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2982a579-ae7f-4ed8-80c5-2c664db55d55",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f53893c-3d0b-4157-b20c-6cddfda8664c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a07f0041-f07f-4678-865a-f357e69cb307"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e89e100-e445-44ee-b4f6-076674935e7d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e513c1c6-df6b-4b46-9bf1-742104a1c7bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "235f7372-4252-465a-8608-03614602d485",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2e2ed7c-09a3-4a2c-bf7e-f4f252f2de6a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e067e05a-383e-4157-b8bf-babd8feacede"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6dec645-6a67-4e08-ad6f-6f41cfd75c93",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "349febfc-26bd-4039-9766-ae6d714790f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf272d6a-8670-41f6-8ec4-31e73ed06f54",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47a9948c-1bd4-41fa-953c-cb1d15bb25de",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5ab69bf6-2f65-460d-9ce1-98cff48c2dbe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9552d22b-72a0-4e6d-906b-6cb810e19e1f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e4ffc12-62e2-40be-b64d-859b82773f99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2bf87726-4c78-4710-bbad-a96e3efc7399",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a52f61a-a7f4-4f53-8e47-8e54802bc9a8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "de9ded28-3da6-485b-987d-a3b4cb9dc948"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a802616-5307-49f5-bb69-8d9a84f4a1e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dbc2afa4-1e2a-4f39-83c8-a1b92b96bf89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9df02dfd-c926-44f3-b646-397e0c6f001f",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7018ff3b-7e0f-40c8-827a-eb43e61dde6c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a5735569-b043-421f-bc60-676ff3073c11"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e924ed3b-4c7c-4fb2-8a24-df63cfea9038",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bcbfec8d-e1e0-4d30-acb3-fe111b79afdc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5db3037c-5f76-431a-ad56-bf68860f4c29",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1456b228-4f00-4fa6-9671-d5328ca45833",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "45388019-d5e6-45ed-907d-f89de1560f34"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad8c2ac1-7e2b-40ca-9c8c-aaa33169251b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03dad16b-b059-43c2-a839-ca562b7483cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1600d63b-9c75-4f92-9067-6c404aa86fe0",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c20de942-9c41-4d0a-9c88-378c9c37b50c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b564e877-7645-4f7d-bcf6-dac36db4735a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1a7ce2e-dccf-4049-8453-726458c6bcec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4e84dd1-50d6-42c3-a9ca-26640f010447"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a93f9e73-0b8f-4284-80eb-67cb67b54a0e",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cf7ef8c-752b-4593-98bd-42d626ef85d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41138dc3-39f8-4193-8af6-297be146307d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "36259c69-7f31-4ca9-be5d-a412e0afef09",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0bb1b58-537e-40f5-a947-322e66490d7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a96237e-e364-4ec3-8f58-da281b412884",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6c6840a-d444-4ccb-8108-4d7a352635cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "61eeb461-7c58-4f45-b296-c41eccd3943f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "26f3f13f-8945-4e43-a378-8c2c5b50dcee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88fe07e5-c955-442e-b08a-882e1f7764b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6264c2f-4a9d-4f08-bcd9-75ff912300a2",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51d5f58c-19e9-4f91-8031-6b42a38b83b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f9385db-e48f-40e3-8bd3-a41593525728"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e948bc67-45c8-43e9-b5d4-2736ec62bb12",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74340369-e4d5-43f8-aab8-2c8afa8ac81c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54a718e3-3e01-4daf-862a-a24092179a26",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94639889-e0f2-4c37-998c-95e573d45fdd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4617898f-4225-4db0-ac32-7798d5bd0bb6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "59be37fc-ee9c-451c-8471-cc535e7648f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76ffa63e-1b00-4028-aa7b-06bf8f44d13b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9282a3c7-1c8a-44ca-95df-64157334391b",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44b20f32-49c8-43ed-9b85-46b11f24e6fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a474830-7d67-474d-8b7e-da33a95626cb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "92ca7bc2-4e18-4e84-815c-351c477b7964",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2122cc7-dbf1-4be7-afab-1fb2e2dbde9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81d7b86b-ada5-4098-bb7c-d321c3653d99",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26cc4ab4-a6b8-4590-b009-547f0a0e3c3f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c2649d6-6733-4032-9f8f-9065c31e8d82"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f8514ec-9c18-40b5-9d26-431716816649",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7774c99e-3535-417f-a9e7-c5e629a71cf0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f695e4b-2a0e-453b-9fce-4584800b3959",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55afdad3-52de-4fa8-964d-29f5584f1b0a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e60249cd-417e-4463-9a47-dbdd98e7c92c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4005cab5-bd9b-4147-9ba9-ac36e1758be3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "192b6c4b-1ad7-4e38-bacf-8642b942c741"
                        }
                      }
                    ]
                  },
                  {
                    "id": "599b7048-4ab9-410e-a60b-1a6e84856f9c",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce7da754-9ae0-4589-9161-3faccf48e927",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1bf4767-9886-4843-a51a-48e7f4cb4a3a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1eaccaa-992a-4fc6-9173-248ba75e3713",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3e1e6e2-9712-4c62-958b-c95962ab217f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aebee4c0-763e-49e6-805e-380e1789a460",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bce7c3df-cb40-40c4-9ec9-cb4c7b83ad14",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44b41bbc-5f9a-4080-b9cf-ddc44913c445"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "122e754c-984f-4f75-8c96-65f0942cd11d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84017b13-f15a-41f5-a904-3d38d6c7a801"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c654692-3314-42f2-84e4-e3deda498f02",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37466b4f-573c-496f-8ba4-36d4d7b44ed5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16431495-1de9-4d72-a31d-2890f42537b7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bf7844e-d321-4f95-8716-22169120e4db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8e909a1-de94-4ef7-ba14-6e45646c5ee1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1848e5f8-4450-4a09-860f-4066c2a38483",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00cbdd2e-5ec7-4552-8b42-54373399631e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3139acda-e79f-477c-980f-6cd32377ab50"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "15a39aff-96cb-4c71-94ca-51001a5bb3fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad4249e5-c295-4d24-b701-2d2bb8128180"
                        }
                      }
                    ]
                  },
                  {
                    "id": "373639de-649b-4363-9796-9e741163f4fa",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f1617e2-e8b1-44fe-ba8f-47634fbfde5d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ae3bfef-51d0-4ef6-8ac8-56a451f16a96"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "542b6c1e-687e-4859-8186-d2de5bb6d4dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f79cacfe-80b4-45fb-ae65-cee33f468146"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db720a1a-d1d2-4c55-ba55-a1f35377952a",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e2a26c4-c460-4056-9e00-618a8485b4c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "015b0e01-605d-49c9-ae45-c37c2a39c236"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2773b425-f71d-4222-a09a-44eedcc502c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4b01eb2-0822-4f5f-a3e2-d17c8355a687"
                        }
                      }
                    ]
                  },
                  {
                    "id": "589d2a86-7e51-47d4-9c35-13de3c9b2c9c",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c0e23ab-0ef3-4d9c-a7ac-143808ccd92c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9fbd6379-deec-4c98-b5f5-7b434a8e8a41"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "90465510-fae3-441a-8af6-1fd8952c22dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a00fad6-f64f-4155-841f-babc95d4318f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93fc81eb-6658-4591-b9b0-6fad9d104a48",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f59e381c-6033-4ddc-aab0-e4733aad39d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b3a97ee-8083-493b-83af-d7517e09ed3d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffb79ba7-6823-44c5-ba81-85890c625eec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ceafe38c-3e7e-4e2b-a1ed-f82e038a280f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f28e43f9-7995-467c-8b5f-f8dc45439306",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0441487c-fa58-4277-aa0d-68da69ef345f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2abdaef-7b63-435d-adb9-f7f38568b986"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "280a5fa1-ccb9-4f23-addc-0a83732b6154",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93fd1e75-f92a-4104-a00b-e2800008fb4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1c632eb-3d52-4c76-96fc-b0798cde38e8",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57be9875-41b6-45c6-8619-ccf3af04a556",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce773796-28ab-4fc6-9c23-f288aadb2092"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e2a7e66-5d07-4e29-9589-988a3fbf6bfc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6a443ce-7fbc-4077-a6dd-594119c630e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e7bb475-0117-4a7e-9453-48807ab818f9",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ec31bc7-2187-4469-abda-15eed4abc98f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d3375b8-7af8-4704-8dfa-02c66d697f4b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "91b9d13d-e1ce-4fb7-8fce-b966f284250c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44b23bdc-cf33-4633-b2d5-f3a55c44bc22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c33e8747-6cd6-40f5-a6d1-1af837d2fa63",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a576ec8-740e-4b06-86b3-1a8af4b74b53",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf32ec3f-8f9f-4b81-887b-4ebd3de4e658"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2192781d-92c5-43ae-ab27-db9bad99e31b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc2ddd5e-2e03-4d33-8421-6b97dbae59ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8694bbf-f3e3-4069-89bc-33a9abf5826d",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ac7225c-6b5f-4d7a-8b7c-5bc8b1d9ccb4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19482084-f465-420e-b5a8-2340db216951"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc8395db-6865-4b9f-8c36-233b47733f2d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f4a5284-39f4-49cf-ac76-81b252412744"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0a6b8d2-b502-47d4-98d1-2182f84d09e5",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e282b3d7-3a7d-49f2-8670-132646785d2c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af9ba63e-1fdf-4a86-97f7-d1e0970c8ab9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3dc1092-5430-47f3-a325-a60f7d7541f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7d99ae7-e807-45a7-84bd-995d7a8f62f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f782076e-d0c0-4b5f-85d6-815774ca97b1",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3e58a47-1db6-4263-99e0-24aa8c31b830",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6232628e-08c9-478c-a25a-981ea02ea8b4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "58fe6279-5ea4-4509-af79-37c7cb02276e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7b8c2ad-bdfb-4f29-8ae5-66c82adb660f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35bb2794-e090-41f5-971b-04378e71682d",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7661a4d7-1bee-49c2-a2b6-b8d95273638e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1eb026f-b239-41e3-92cb-2d48218be5ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "265ce997-1e52-490b-8b9f-47d2bc3e15cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "62dfa94a-21b1-4b8f-8613-6662940c4786"
                        }
                      }
                    ]
                  },
                  {
                    "id": "688164e9-c8fe-4231-8d8a-436e9115d36c",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed3f06b4-2470-4d4f-91c1-9e54fb14ee82",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c29fd13-5b8b-438f-82c4-1532eb934ad6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc1f8e08-08aa-403c-ab76-91d232b8298b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c32b643e-e155-402e-8791-f28008e69b11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1393b91b-379a-4848-8b05-1aae3ac7a9a4",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f9b4200-549c-4e27-a8b8-667b06d4ca10",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76622363-9e1f-4ee4-9349-370a91f57ae5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b32f84c8-fa47-4042-87c7-2b24696d551f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc7e3158-e555-4aac-ba4d-b3f25e96ed8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55cfcb97-4ccd-48ec-8c3d-f6de4dc4ac06",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9241e01-e265-4eed-9c84-5d293a48ef95",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "edd31fe0-3894-4255-97a2-22682fb175ce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5704673-5806-40ac-b9dd-08132973cd63",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f768fcd-ce8c-4808-a3fa-51ba5ab0b75e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80c4a1ec-86a1-4777-91c3-d5623bdd34cc",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71f236f4-8208-495b-aa79-c5f0f81c56d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae722901-fd62-42ec-88a6-878c6f40ea5f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9dd69b29-0077-4717-9577-2ff9a4630cc6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "66ffd720-96bf-45a0-92fb-d85a2d39e1ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00d99adc-a095-4f98-a1c4-d13b7c1e05ef",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e85957e-8ad4-496a-a60d-c4b1d9908365",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7bdb2d6-b4ce-4f3e-a72e-9213d21e5f4e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbf08521-14c3-4454-9d22-0d59ab5d2d50",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "302c0303-1b1c-4689-b390-68708f35fd80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3e8468c-56b7-4fb4-b873-290388b6051f",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "910dde45-dc88-4483-b814-2d350714c97d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "27be29f2-cd1b-4258-a0f2-793700a191f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "00b24d07-a3ec-4162-babe-414e4ab095d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "648d2062-f425-4c01-9e2f-1dc4d040516e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6cf1ed5-d6f4-4179-b816-3ced72d5b0e1",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37dbfe73-72c8-46b0-9827-52cdbe44f43d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3fa035bd-6e33-4860-b60e-4bf256eaedec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "71348c4c-97d2-4172-9873-a6e973e17a3f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae51c18a-354c-42f7-9a2c-9d1660afc58b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6b334e4-d58f-4180-989a-6e7e99792823",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83ceeedd-c668-4742-9884-d6a6a219ecb3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "86cdbc72-b249-492d-94fe-95fa3eb5627b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bec4636f-64f8-4f51-852c-f57803db87ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "413aeed4-b115-44b7-9638-64c8b18575aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71e25fdf-755c-43ae-a751-aef2b69127f6",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8355b82a-1500-4b21-8708-c31cd61fd23f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7b0a1a1c-ffbb-4005-a0a8-2b468f3b2157"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "92e171a5-f9fe-42fc-9277-314a8d7c80f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06be2dd1-e71a-4799-ae85-e934bfdc110c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c33f387b-53ea-4b53-976a-454040daafd9",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d256029e-618d-4da2-b443-685fc6db04df",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "84d6c195-8981-42ee-bee3-be198e969c21"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "05e5af58-c875-4f5a-a6d8-21baa345b310",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "285b3682-b340-496d-bc87-82c150c5e28e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77906cff-d36c-432a-88c5-b42e127ada0d",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "149c4bd5-96ba-4233-892f-93505e5542ba",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cc4889bf-dbd5-4f1f-9673-ad772a51839a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8726abd-715c-4f97-9a51-78558495c5e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4156f27e-156f-48a1-bcbb-7f860efcabb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b45d94ad-5bbb-4e47-83fc-b4b6ec76d993",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5b48803-df73-4035-be43-e357721ca461",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "da860e32-0d25-4dc6-9cbd-dfc0bb3cd545"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd0c0605-59cf-45cb-9b60-3646b78b093e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45c3cfd8-c024-4598-a420-7caad6b6ce73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9be781d-3f61-43ef-94da-7e89fe99f5f5",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3c2b80d-854e-41bc-ae68-fd05d4157ffd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0d5b4079-bef2-43f1-a2ac-7f0b9c650922"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c747b858-b468-4b89-b5b4-c45ddc3100d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8294cc1a-9609-4597-b2e9-c5d9d9b7b044"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57b65ab8-736c-424a-92de-0836974f494c",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d6b5661-fa37-4c0d-97c3-2541a1936fb0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7ca8e250-5f35-47e7-a963-cfc9729c916b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "be11c075-f914-44e3-a5fe-6cb6744c6e1a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e5ecf1d-ca40-4dec-90c3-07a5f1de75f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa11f7b0-c065-4900-9c79-82df63f9bcb0",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b6a5ebf-3684-4d1a-9ee3-3e82d2d53d53",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "46de3470-62b3-48d4-a98c-45fd7f6cf4d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "671b025c-a07d-4a09-b202-2e4d44e85975",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26faf0ed-e7a4-49c5-a55e-93c42df07872"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0706b418-754b-47fc-98df-c7450704c015",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41d1e513-5f16-473f-bdb7-f589a102265e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "92094ff6-1482-4abf-ae7c-3540b943b534"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b003b3a9-90e8-4b3e-9edb-5482aa9a06ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69f17b91-90f2-4378-bd8e-93aa5767bb22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "044d3253-8180-4cb5-be3c-6cb4543c782e",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad424549-faf2-4aa1-8db7-056cb3c7887d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "65c8c679-b036-4706-8c36-f570226fa784"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "81c522cd-f1d6-4bfe-8bb5-d304c37e8535",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e81a809-acec-4be1-96fe-b2e8bd840882"
                        }
                      }
                    ]
                  },
                  {
                    "id": "429ed332-cdf1-4489-9dba-c7a9c1c93a2e",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e654d1a-d3f1-42b8-8521-18bb28909815",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b91267ed-d4b7-42aa-a17d-d422e848e903"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fcbe368-14fb-4f03-ad2a-734c7d56873a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7b24863-f3fc-4ca4-822a-adb2af3b2dd5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70622529-1094-4ffc-861a-99a1a8f7d2d6",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7af10e15-0c3f-4a30-80c7-ca6e1872f0a9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1951b88a-fd2e-42ad-a046-27f79a981ba0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7792b3f8-f7d5-4b6a-a551-c92094cdd1d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71f49a9c-02b2-4337-89b8-600ded3d4289"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68c81c16-e956-49f4-a942-2fc78482e8d4",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ec008dd-7ebc-48cd-9e5c-6e9773cdaaf9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "96787acd-03e4-4c1d-b793-d3221b35298c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca05e50e-6cb1-4ec1-8c3e-552445dc9e6c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97626691-12f9-4aaf-b65a-d817a7d1983f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4268c2fa-3051-49f9-89d8-cc3cc12a093b",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "164ae9f5-be19-4e15-b807-9967aa4856c7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6029f712-4e87-4e58-940c-3518be42fbc2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "16752d6d-f4ee-4b8c-8faa-84683f8c50af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "298baeff-b0ff-416a-97aa-890e6b36fb49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86453bc9-3b55-4b24-80ae-e502897b102e",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4adee9c1-1fe3-4fa7-9473-10a19eeac3ba",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0a0294ef-6fb5-49ca-8916-ea5c5255be31"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "71f3f380-e8b6-4766-9385-859d682b586e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4ce4040-479c-4f5d-9c1a-db4c22cecfe2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8f93f8b-e621-4979-b570-29065e5270bc",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1ac1584-8048-4342-8df3-1b9683036fd4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f4bd8f6a-45cc-492a-8677-4d274fc18da5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f489a853-ad8f-4c44-97c4-4cedea89b802",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2d59767-c0da-4720-859e-212723d15809"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aee6f31c-4a22-4046-a8a6-f4d05be659af",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82870e0a-880d-49d7-b6b3-3a400236aaf4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "103d5cfc-80fb-47dd-8ca3-b0265ce1ea03"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "911c2ed6-a93b-4fab-9dff-ef10726bf16c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f6e8d24-c526-4572-a822-aef07627d155"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e593506-efc2-4eae-984f-2743d144625e",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc4cd035-4bcc-49a3-9aab-cc97ab075bc0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "60a21ea2-7a34-4846-9c6e-2dee0920ec8a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "13adc22e-7898-449d-bca8-380f74a6bc97",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf54d2fb-b0cc-4696-b40a-1359f752c14e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfbb95fa-66b9-4306-a6fd-4dd54c6bea47",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74bceb07-f5bd-406f-b103-b51c5f88dc84",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cd082583-479e-49eb-b397-d1b164cb4adb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8258787f-104c-45b8-8e58-17b1ab98e794",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d89bb6d5-fd88-4f6f-9d31-b49d8906c025"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4816bbcb-b28c-445a-95a0-d3890926c39f",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc24ad4d-0bab-4f55-bc08-bc8ff72688d0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f73ce17e-60f3-4015-a51d-901e59370cfc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1c8b9a4-5a1d-46a0-963a-a4ef7dc257d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e233d0c-b991-4969-965d-8bad17cf2b6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87b37eed-7c2d-436d-a964-3ba8baa84064",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2475fea-f826-45a7-9264-21a1cce15bfd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4c7ab348-7cea-4574-9332-ec705b12b229"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a848f846-4f9e-43f0-9032-ce186cd6f274",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab6997e5-e06a-47ae-8c65-fca1abbbc0e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d8df841-45f8-4d2f-a10c-8087fbcea8ee",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af693941-d222-43a8-a8e2-1829c35990f8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8251da29-250f-40a1-b4dc-aca6f5959194"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6420098-5823-438f-8b7d-0d44726ef17d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02c3e749-6500-4aee-91d4-f498afb6e248"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79197b6b-d9a6-4d70-bec8-86d922b49e9a",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94bd4ac2-cfad-4f1d-8831-30f4e3a956d8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3b44f41b-c4a6-4caa-8800-cfb75a43f629"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d43cc399-cf40-42d7-91d1-e78c8a96e2af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90234ec7-1ed0-45b7-8902-d41deb6f66ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "515f1280-706a-42ab-9c55-62b4714c809d",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65b7481a-60f6-420e-9d9b-7791f56b9d5a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5a6700ff-ae63-4486-8579-3575f3c42f67"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "024cac30-ed0f-4eca-af91-2f1e27b2a89a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e2b50f3-5387-4400-8505-89fa6dc5e87a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0117372d-8c60-46e6-b457-53def0e88e07",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d202fdce-737c-469a-bd37-ec32abdce3da",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2b173be6-e5ba-4b39-a002-b0240e855997"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d236e980-99e4-4ff4-9152-3673908fd99c",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51e02aa9-b5d8-4d9b-9234-0e2655b6f2fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aafde68d-003f-479b-bd4e-e2c6dcb0a006",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34c34395-10e9-4d77-bf07-aa675aae03af",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c111109b-f40b-4f7f-a3a2-8e8fc8934181"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8337242e-bbf0-4bc5-8872-c842807a12f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f2467e2-f134-4fc9-b0d2-0d55085ac9bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c41ceae-c1a6-471f-a621-554833d11a2b",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0671ed04-1045-47d6-9fee-494ec4dee7f1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b695c71a-05e9-4432-98c9-bc27f85b12c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "586bec18-b410-43a3-8c65-ca5b072b07c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0ef7707-a401-41ea-9951-3a5e19820869"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e189db0-23d8-42ff-9b2b-012e2bce4a10",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed950ed7-ed35-4bb4-8339-0228e2562f9f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b54242d5-8166-4b3a-b101-f85fce15b9b2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "50d39732-9383-4f55-a60f-cb7fea55c37b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb7423d5-3cad-4e41-8ab3-31a125c9116d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2878f7d5-b806-4237-9cbc-d7c32156c77a",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89129e42-ff20-4f98-92d5-af2da92418aa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3a63cfff-ef9f-444a-a95e-4c77c8a7ba45"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c213e05-9536-4e72-ae4a-7419847ba1d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91557c80-d3b7-4f0d-86e3-964ae67f458e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0dc9653d-7c6a-4e25-aa32-b5e9c59e7592",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3667c551-1dcc-47d6-b899-1db7e1acb838",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2009ac33-1ded-4a3e-afd8-e789a9f41dc4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc8f79a2-3cef-4427-8976-144d7255e98c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a228d6e-2fc4-4887-977a-fab10e40a99f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d052cf67-63a7-491e-a518-924ee336d4a3",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33564561-59bb-4bab-ac8a-04a23652abc1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f5fe4db8-b4ae-4bc8-a554-49584b170f2b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "22f6edb0-1f5a-49fd-861e-a3c54b2657b3",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c46f66ab-faee-4115-baec-93516e19f7ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7bc0aa7-1dea-40d7-9dab-832ceace34aa",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4cf2c8a-9a59-4437-9af9-4775283144a7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e99a3012-3d11-4283-a5ef-cb4dcc642b22"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b29db18-9a4e-499e-a4e8-e0527be1c34c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d880f0ee-b98c-4cc0-b127-eefbb13b014f"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bdf82e0b-5924-4177-83f8-164a64969122",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a9d49080-c3ac-4da4-a0a0-8e5c2585b869"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "67ef22e3-2254-40b6-a127-51e446e4ec39",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "eae24742-1e55-411b-8e39-c69c0420a372"
                    }
                  }
                ]
              },
              {
                "id": "2c4cfee1-d605-429b-a201-2801298f9a12",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "48c463d9-a98b-4208-ab82-08c62e578b40",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d180458b-36c3-4b42-9df0-e3a3189cead0",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "9447d98b-64f3-4f3b-8dcb-ac5c5e65cffa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "47184208-c8c7-4366-b864-940f9f98b9c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d53678ae-06d9-480f-bf5a-d32bb2619862"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f2a24067-aea4-4c0f-8c17-3cd30f4f3378",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "cfc77f1a-af9f-4810-8d45-70a39c3b34de"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "95030038-a29b-4877-9a8c-96e2942cfdde",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8f6a24ad-4470-4ee7-9d1b-e2276b90c94d"
                    }
                  }
                ]
              },
              {
                "id": "d9e15591-9db9-4103-a91a-4c5df3112bac",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "62d11737-6840-4c00-b62f-488f748924ef",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71d14c74-82b8-4286-a68e-c4f0dfcd5a34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "5f58832e-d71a-4a4a-bfa0-57353ad9a6c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "650acbcd-d293-47c0-b5a7-0600efdb61fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a0fd24a-1978-4112-ad85-c45d5bc3d2fa"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "cb7fce31-4789-4e41-9776-1c62db7967ef",
            "name": "Positive Testing",
            "item": [
              {
                "id": "4fd2dc12-23a1-4394-9adc-d4811745154e",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "aeabe188-af56-4eef-8e5f-1b6debcaf76a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "9a0f3270-9650-44a0-a641-8a71130c2880"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "37aae4a9-3d20-41a7-8ff6-1c8d80326564",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a09910ff-5df1-4898-a6ea-2bdbd2bbf119"
                    }
                  }
                ]
              },
              {
                "id": "a955cc48-1acc-4a6a-a6fb-62bba19de9d0",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a1222ebf-8ede-492f-9a24-c61e760d31ed",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "29dd7a81-7c90-4928-9f49-d09ae03396b0"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0bc60c34-1aab-43b6-acc4-811b212d040f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "223638d3-f5eb-4bd7-9514-352ad1be7261"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "bf888560-d0c9-4718-bbfa-698e32ca1758",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "ba552a0a-270d-42d7-afe5-39acd7d4aa47"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a2537706-0717-4143-8dd0-434af7a90c74",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "887b3307-6e12-475f-bc48-0a79d8485a53"
            }
          }
        ]
      },
      {
        "id": "44dbd94c-987c-48dd-b893-6856ce81eab5",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "3e708ec1-0f07-4455-835d-e2b90cb7fe84",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b7e5d631-988f-491e-9809-61cbbe3f9887",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "21c71d20-c965-4725-acc6-5fdd736ffdfc",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bccb0d7-0873-4a4c-bc75-d7356176d5c4",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "8656be0a-3020-42da-8bef-3b72e11cad93"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d636348-b85c-4c6f-9121-e36e67bf42a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5c714c66-c960-4152-9e47-32da4c75c774"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a08b1b52-f094-43f6-820c-a86d4061bf5d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0a4ca127-cdaa-433a-a7e1-04b2cbc94a00"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e8ccd158-27fe-4337-883a-38fea9742d6a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "49e98b7e-e361-4281-bde9-e299e912b39c"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d87bf8ce-7795-49de-a54a-40dc89e38747",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "3b8faa78-92fe-4fcf-9804-b98381d658af"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "15a8fe4c-caac-41d8-aca3-0d26983da3d1",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1a7dabee-f208-4468-994b-46a707bab2dd"
            }
          }
        ]
      },
      {
        "id": "2f0a944a-92ba-43e2-ba78-ae219ac15434",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "a2e83d8f-2893-41b6-a227-300e83cbabec",
            "name": "Negative Testing",
            "item": [
              {
                "id": "146896af-f7d7-4d87-9f73-1e118fe8218d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "acf6cbb0-ee3a-4d58-9e82-8054005d5797",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f18940b9-f26e-44f8-a7a4-d8c16557c8d1",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ef0dcd0c-6f1b-456c-9484-fa17f091e836"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0754ab22-1e20-4cf9-bd7c-c21204c3f965",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6a2a7287-c559-4a4a-b8cd-53f4960a80b2"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5f2a2f6b-5079-41df-8230-ed0d822200b4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5f92f65b-2d04-4cb6-9f54-5b0a51fdfdaa"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5e048314-01fc-4914-8a04-fd0be3f58a8a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8d473b47-cbe7-4d65-a830-5d9bd3af99e2"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b7b2c0e3-6e05-4f66-b978-34b612459b52",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "11e3bbea-1ec5-4c91-820d-4597f9e03141"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "419c6a40-99b8-4d20-b22a-f84f00b18214",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "44eda0ce-a097-49e8-b38f-3c9a2eab8243"
            }
          }
        ]
      },
      {
        "id": "d93da88c-f036-4f4e-a205-6d8da3128400",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "251efeca-1d67-4957-bfe2-0c3f18663393",
            "name": "Negative Testing",
            "item": [
              {
                "id": "77ea3698-b4b4-4c9c-a428-c166e2cba9e5",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "fd8557ba-6d08-484b-a63f-930ae8d6ceec",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4032380a-7686-4c75-8fbc-430ea1e3bcda",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "af43c71b-ba10-4855-b7ef-e65f78f1b422"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "96f14520-07a2-4f77-a70e-25b33251bea6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7f1f5e29-5cfc-4b75-a589-fb4f5a108dd7"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "aa19ba21-e9ca-43ba-9352-b0dd08a987f3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "85f0d67f-769d-4311-b354-c1abd6777e34"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "15785c59-1a9e-4a51-9af7-8b8b9316f50a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0018477e-63d1-4453-a117-e91a7ee1288c"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f4574715-dba2-4120-a79e-49d6327860d5",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "5bffa79d-e557-45f2-b992-bab050a22cf1"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "11e51d41-4d5a-46bd-86b9-45edcf7d3c3d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "fe6c3653-b781-4bd5-a613-0d99432a5d4d"
            }
          }
        ]
      },
      {
        "id": "ac6b93ab-f3a7-4534-a712-1fc9641cd669",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "35d78c09-1b39-487b-b3df-08df9b9fd9e4",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6ac79ba5-3c64-4b93-9f00-0c06fb08d6f9",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "4b14b6c2-9892-41c7-a82e-a05ab82adc69",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e6d7f298-62bd-41e5-8a87-376868b9d280",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "eac151d7-ce23-4abe-a028-b2cfd5073e0e",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2091,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 564,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 573,
        "pending": 0,
        "failed": 294
      },
      "testScripts": {
        "total": 1050,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1041,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 89.38829787234043,
      "responseMin": 20,
      "responseMax": 414,
      "responseSd": 22.20943041211142,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1707784473394,
      "completed": 1707784533621
    },
    "executions": [
      {
        "id": "afe5e84f-d82f-4ff6-874d-624dd5d28945",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 283,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "2c319a59-4b42-40dc-bb0f-6955fdb44479",
          "httpRequestId": "e2577479-ffdc-4d8e-add8-6825889668b5"
        },
        "item": {
          "id": "afe5e84f-d82f-4ff6-874d-624dd5d28945",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "504ea0de-8480-4b61-bfc2-5d4bf60ee51e",
          "status": "OK",
          "code": 200,
          "responseTime": 74,
          "responseSize": 0
        }
      },
      {
        "id": "0eb98979-3fa5-4a68-b5d6-9c0b2b6905a1",
        "cursor": {
          "ref": "78f5d8f4-a52d-44f9-b375-5510bfee6d09",
          "length": 283,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "67f2c8e5-3c82-4f91-b615-897b9a1e6e43"
        },
        "item": {
          "id": "0eb98979-3fa5-4a68-b5d6-9c0b2b6905a1",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "91fd8be1-0c32-4d53-b3c4-ffc2aeb1c6f5",
          "status": "OK",
          "code": 200,
          "responseTime": 20,
          "responseSize": 0
        }
      },
      {
        "id": "5653790a-883b-4548-ba7a-b579cb941016",
        "cursor": {
          "ref": "bc7c03bb-623a-47fc-8489-52d8122ea688",
          "length": 283,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "f18ff0eb-f6bf-47aa-a016-cd21e6e458e1"
        },
        "item": {
          "id": "5653790a-883b-4548-ba7a-b579cb941016",
          "name": "did_json"
        },
        "response": {
          "id": "3defb406-88b7-4646-8298-ee62b2904791",
          "status": "OK",
          "code": 200,
          "responseTime": 414,
          "responseSize": 1640
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8330239d-6b96-42b0-a1af-d409d2dc7929",
        "cursor": {
          "ref": "add9eb26-2ec6-478d-b42f-7acf7162c98f",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "3da5da24-7faf-43cf-bb7e-b3c108f87996"
        },
        "item": {
          "id": "8330239d-6b96-42b0-a1af-d409d2dc7929",
          "name": "did:invalid"
        },
        "response": {
          "id": "daf332d1-b323-4f6e-8548-74d6cb5c1b10",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 95,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8330239d-6b96-42b0-a1af-d409d2dc7929",
        "cursor": {
          "ref": "add9eb26-2ec6-478d-b42f-7acf7162c98f",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "3da5da24-7faf-43cf-bb7e-b3c108f87996"
        },
        "item": {
          "id": "8330239d-6b96-42b0-a1af-d409d2dc7929",
          "name": "did:invalid"
        },
        "response": {
          "id": "daf332d1-b323-4f6e-8548-74d6cb5c1b10",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 95,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26c034ed-f236-43df-bb6a-1364f1d410f4",
        "cursor": {
          "ref": "86e9fa46-15c1-487b-89e3-649090b9d1c6",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "e71ac1af-d33e-41a1-bfa4-84b7d374a3c0"
        },
        "item": {
          "id": "26c034ed-f236-43df-bb6a-1364f1d410f4",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "e380e41b-90cb-4254-8e8d-36de1657687c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 87,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 404",
              "message": "expected response to have status code 404 but got 401",
              "stack": "AssertionError: expected response to have status code 404 but got 401\n   at Object.eval sandbox-script.js:1:5)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26c034ed-f236-43df-bb6a-1364f1d410f4",
        "cursor": {
          "ref": "86e9fa46-15c1-487b-89e3-649090b9d1c6",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "e71ac1af-d33e-41a1-bfa4-84b7d374a3c0"
        },
        "item": {
          "id": "26c034ed-f236-43df-bb6a-1364f1d410f4",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "e380e41b-90cb-4254-8e8d-36de1657687c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 87,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 404",
              "message": "expected response to have status code 404 but got 401",
              "stack": "AssertionError: expected response to have status code 404 but got 401\n   at Object.eval sandbox-script.js:1:5)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d61709a9-a45e-4a96-a990-33aa408a284d",
        "cursor": {
          "ref": "f2a76148-ec57-4c31-b912-07e6bae2f4ab",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "11ecdd22-f638-42ae-ae5f-ede895d72111"
        },
        "item": {
          "id": "d61709a9-a45e-4a96-a990-33aa408a284d",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "b9482288-e199-482c-9c37-d9a3cacb3a49",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 404",
              "message": "expected response to have status code 404 but got 401",
              "stack": "AssertionError: expected response to have status code 404 but got 401\n   at Object.eval sandbox-script.js:1:6)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d61709a9-a45e-4a96-a990-33aa408a284d",
        "cursor": {
          "ref": "f2a76148-ec57-4c31-b912-07e6bae2f4ab",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "11ecdd22-f638-42ae-ae5f-ede895d72111"
        },
        "item": {
          "id": "d61709a9-a45e-4a96-a990-33aa408a284d",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "b9482288-e199-482c-9c37-d9a3cacb3a49",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 404",
              "message": "expected response to have status code 404 but got 401",
              "stack": "AssertionError: expected response to have status code 404 but got 401\n   at Object.eval sandbox-script.js:1:6)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45cf3a98-a15e-4b5b-b2e6-00e55db8daf8",
        "cursor": {
          "ref": "7f5f7ab5-3b3e-411a-9136-88e60bf03a72",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "137b5ecf-e33c-435e-b0a6-1f62730d2d27"
        },
        "item": {
          "id": "45cf3a98-a15e-4b5b-b2e6-00e55db8daf8",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "9015f582-f3df-4a37-9aef-989493d99f2f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 84,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45cf3a98-a15e-4b5b-b2e6-00e55db8daf8",
        "cursor": {
          "ref": "7f5f7ab5-3b3e-411a-9136-88e60bf03a72",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "137b5ecf-e33c-435e-b0a6-1f62730d2d27"
        },
        "item": {
          "id": "45cf3a98-a15e-4b5b-b2e6-00e55db8daf8",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "9015f582-f3df-4a37-9aef-989493d99f2f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 84,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc58e77a-c1d3-4b96-99b8-481f9bc3a06f",
        "cursor": {
          "ref": "2e687f34-1448-46f0-839e-33d86ee04ff8",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "260369c8-e48a-40c3-9bae-ea59987a609c"
        },
        "item": {
          "id": "dc58e77a-c1d3-4b96-99b8-481f9bc3a06f",
          "name": "identifiers"
        },
        "response": {
          "id": "7c3bee4a-0f6f-4681-b59f-d74a0d5e8f69",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'didDocument'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'didDocument'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "dc58e77a-c1d3-4b96-99b8-481f9bc3a06f",
        "cursor": {
          "ref": "2e687f34-1448-46f0-839e-33d86ee04ff8",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "260369c8-e48a-40c3-9bae-ea59987a609c"
        },
        "item": {
          "id": "dc58e77a-c1d3-4b96-99b8-481f9bc3a06f",
          "name": "identifiers"
        },
        "response": {
          "id": "7c3bee4a-0f6f-4681-b59f-d74a0d5e8f69",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'didDocument'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'didDocument'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "2424debe-1a63-49c9-94ea-3cc8436bc7b7",
        "cursor": {
          "ref": "705cc0ba-e22f-408e-8423-1046b89f0ad2",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "86911758-66eb-44fb-89fd-000dd85769ac"
        },
        "item": {
          "id": "2424debe-1a63-49c9-94ea-3cc8436bc7b7",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "43ac443a-2550-4a64-8161-bfebf757d998",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 86,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2424debe-1a63-49c9-94ea-3cc8436bc7b7",
        "cursor": {
          "ref": "705cc0ba-e22f-408e-8423-1046b89f0ad2",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "86911758-66eb-44fb-89fd-000dd85769ac"
        },
        "item": {
          "id": "2424debe-1a63-49c9-94ea-3cc8436bc7b7",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "43ac443a-2550-4a64-8161-bfebf757d998",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 86,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43d287cd-c2d4-4c0d-8cf6-6add1aee1de2",
        "cursor": {
          "ref": "0c4a14ed-d660-4c66-80ba-d5387fb8e855",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "c7f47aee-7eb4-44b6-bb15-5f44e8b9b453"
        },
        "item": {
          "id": "43d287cd-c2d4-4c0d-8cf6-6add1aee1de2",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "d18928b7-c455-4f17-a498-c6bb1fb9f4f5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 83,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43d287cd-c2d4-4c0d-8cf6-6add1aee1de2",
        "cursor": {
          "ref": "0c4a14ed-d660-4c66-80ba-d5387fb8e855",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "c7f47aee-7eb4-44b6-bb15-5f44e8b9b453"
        },
        "item": {
          "id": "43d287cd-c2d4-4c0d-8cf6-6add1aee1de2",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "d18928b7-c455-4f17-a498-c6bb1fb9f4f5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 83,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b2f69e1-279e-472c-9632-1840bb1c99df",
        "cursor": {
          "ref": "8cc6569a-7fe7-4803-8c5f-599018cd9780",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "2eb1044a-2bcf-4472-a4bc-e2ef520dc1a4"
        },
        "item": {
          "id": "0b2f69e1-279e-472c-9632-1840bb1c99df",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "067b294e-8429-4fc6-a2a6-43772baef150",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 82,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b2f69e1-279e-472c-9632-1840bb1c99df",
        "cursor": {
          "ref": "8cc6569a-7fe7-4803-8c5f-599018cd9780",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "2eb1044a-2bcf-4472-a4bc-e2ef520dc1a4"
        },
        "item": {
          "id": "0b2f69e1-279e-472c-9632-1840bb1c99df",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "067b294e-8429-4fc6-a2a6-43772baef150",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 82,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c811b4e6-5221-419a-ae35-d528c5178eb4",
        "cursor": {
          "ref": "ceca8b93-1b99-4e24-9938-022b0bfb42ee",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "529cb084-45af-4a94-b795-9a76139660fa"
        },
        "item": {
          "id": "c811b4e6-5221-419a-ae35-d528c5178eb4",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "4af13c06-7e9d-4f25-9264-dbe304b1f22e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c811b4e6-5221-419a-ae35-d528c5178eb4",
        "cursor": {
          "ref": "ceca8b93-1b99-4e24-9938-022b0bfb42ee",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "529cb084-45af-4a94-b795-9a76139660fa"
        },
        "item": {
          "id": "c811b4e6-5221-419a-ae35-d528c5178eb4",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "4af13c06-7e9d-4f25-9264-dbe304b1f22e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22ee707f-4805-4d6b-94d0-63878b5cba70",
        "cursor": {
          "ref": "303c29ff-b7e9-4cc0-a888-90514cddb558",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "804570d2-ef46-4ed6-b720-e3b68da03513"
        },
        "item": {
          "id": "22ee707f-4805-4d6b-94d0-63878b5cba70",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "5b7cfb8b-23a1-44f5-b9a8-38770bb5fd3c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 83,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:13)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22ee707f-4805-4d6b-94d0-63878b5cba70",
        "cursor": {
          "ref": "303c29ff-b7e9-4cc0-a888-90514cddb558",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "804570d2-ef46-4ed6-b720-e3b68da03513"
        },
        "item": {
          "id": "22ee707f-4805-4d6b-94d0-63878b5cba70",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "5b7cfb8b-23a1-44f5-b9a8-38770bb5fd3c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 83,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:13)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "198e3935-2347-44aa-a992-d758f84f4f9c",
        "cursor": {
          "ref": "62dfe4d3-65ae-4a6f-9375-1702da4eb94a",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "e4c2c148-4b8d-4c63-a82c-941f5e8a07eb"
        },
        "item": {
          "id": "198e3935-2347-44aa-a992-d758f84f4f9c",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "dea7b98f-7cd8-47a3-a84b-0c009a29c685",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 91,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:14)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "198e3935-2347-44aa-a992-d758f84f4f9c",
        "cursor": {
          "ref": "62dfe4d3-65ae-4a6f-9375-1702da4eb94a",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "e4c2c148-4b8d-4c63-a82c-941f5e8a07eb"
        },
        "item": {
          "id": "198e3935-2347-44aa-a992-d758f84f4f9c",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "dea7b98f-7cd8-47a3-a84b-0c009a29c685",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 91,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:14)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0f55e0a-bad6-40c6-ad19-fa849ef1fe3e",
        "cursor": {
          "ref": "36ffd653-3008-4336-a65e-d65d6d12620e",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "03ba327a-ec3d-4e15-ba71-c0782ca7556d"
        },
        "item": {
          "id": "c0f55e0a-bad6-40c6-ad19-fa849ef1fe3e",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "e25d4edc-de2c-431a-9768-25d703de004d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 82,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0f55e0a-bad6-40c6-ad19-fa849ef1fe3e",
        "cursor": {
          "ref": "36ffd653-3008-4336-a65e-d65d6d12620e",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "03ba327a-ec3d-4e15-ba71-c0782ca7556d"
        },
        "item": {
          "id": "c0f55e0a-bad6-40c6-ad19-fa849ef1fe3e",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "e25d4edc-de2c-431a-9768-25d703de004d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 82,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91872aa8-6a53-41f9-a68e-54abdbade390",
        "cursor": {
          "ref": "3c4281d5-9df9-4aee-8d3a-d36b08f45d62",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "ba4fc1f3-97fe-4f67-9de8-5e72ddc945a8"
        },
        "item": {
          "id": "91872aa8-6a53-41f9-a68e-54abdbade390",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "26195994-3b84-4543-9ea9-a8a10d40ca9c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 83,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91872aa8-6a53-41f9-a68e-54abdbade390",
        "cursor": {
          "ref": "3c4281d5-9df9-4aee-8d3a-d36b08f45d62",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "ba4fc1f3-97fe-4f67-9de8-5e72ddc945a8"
        },
        "item": {
          "id": "91872aa8-6a53-41f9-a68e-54abdbade390",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "26195994-3b84-4543-9ea9-a8a10d40ca9c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 83,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ffa657a-75f6-4386-a3f0-65a0937b82ed",
        "cursor": {
          "ref": "12759cab-c8ff-4001-9b75-6f7ce83b1e1e",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "cdd4bbc8-d8e0-4cca-9f64-4f9abddcf368"
        },
        "item": {
          "id": "4ffa657a-75f6-4386-a3f0-65a0937b82ed",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "ac8512d1-03ac-42f2-9afe-c4a308224fdb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ffa657a-75f6-4386-a3f0-65a0937b82ed",
        "cursor": {
          "ref": "12759cab-c8ff-4001-9b75-6f7ce83b1e1e",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "cdd4bbc8-d8e0-4cca-9f64-4f9abddcf368"
        },
        "item": {
          "id": "4ffa657a-75f6-4386-a3f0-65a0937b82ed",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "ac8512d1-03ac-42f2-9afe-c4a308224fdb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b955f80d-b3e0-4e8c-a11d-ac87dd37ba64",
        "cursor": {
          "ref": "d435a463-1edd-49fe-b04f-f361d1da2645",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "9665f7bd-7223-4b5c-bded-213b6639273c"
        },
        "item": {
          "id": "b955f80d-b3e0-4e8c-a11d-ac87dd37ba64",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "99f0593b-15b1-43b0-910e-95e82bed701e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:18)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b955f80d-b3e0-4e8c-a11d-ac87dd37ba64",
        "cursor": {
          "ref": "d435a463-1edd-49fe-b04f-f361d1da2645",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "9665f7bd-7223-4b5c-bded-213b6639273c"
        },
        "item": {
          "id": "b955f80d-b3e0-4e8c-a11d-ac87dd37ba64",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "99f0593b-15b1-43b0-910e-95e82bed701e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:18)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ede5d228-1aad-4ed7-9a19-30a87f138339",
        "cursor": {
          "ref": "029e3fd3-c1b3-4a75-964e-3a183d0c7ae0",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "ab5f390d-6d9f-498e-84ff-bb1da0c6151c"
        },
        "item": {
          "id": "ede5d228-1aad-4ed7-9a19-30a87f138339",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "c2aa7279-8957-484e-a351-a860331aee23",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 89,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:19)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ede5d228-1aad-4ed7-9a19-30a87f138339",
        "cursor": {
          "ref": "029e3fd3-c1b3-4a75-964e-3a183d0c7ae0",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "ab5f390d-6d9f-498e-84ff-bb1da0c6151c"
        },
        "item": {
          "id": "ede5d228-1aad-4ed7-9a19-30a87f138339",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "c2aa7279-8957-484e-a351-a860331aee23",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 89,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:19)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23b554bf-9e24-4818-a215-3b5606bd2a21",
        "cursor": {
          "ref": "9953e33a-365a-4de9-9a09-d4b8a6fbbf56",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "3b0fa849-fa69-454a-9b25-588d36f1ce5b"
        },
        "item": {
          "id": "23b554bf-9e24-4818-a215-3b5606bd2a21",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "2d904a1f-5be6-47a7-80d1-0330dde57d22",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23b554bf-9e24-4818-a215-3b5606bd2a21",
        "cursor": {
          "ref": "9953e33a-365a-4de9-9a09-d4b8a6fbbf56",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "3b0fa849-fa69-454a-9b25-588d36f1ce5b"
        },
        "item": {
          "id": "23b554bf-9e24-4818-a215-3b5606bd2a21",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "2d904a1f-5be6-47a7-80d1-0330dde57d22",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d91386df-84fa-43c0-ad87-3e6a1a66ec8f",
        "cursor": {
          "ref": "2d7bbedf-866a-42ad-94e1-e622da0e7b8b",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "6b63fb03-4239-4fb7-8850-f0f002e054a5"
        },
        "item": {
          "id": "d91386df-84fa-43c0-ad87-3e6a1a66ec8f",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "d88537c3-3fb5-4831-bed8-6cea93ebf2b6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d91386df-84fa-43c0-ad87-3e6a1a66ec8f",
        "cursor": {
          "ref": "2d7bbedf-866a-42ad-94e1-e622da0e7b8b",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "6b63fb03-4239-4fb7-8850-f0f002e054a5"
        },
        "item": {
          "id": "d91386df-84fa-43c0-ad87-3e6a1a66ec8f",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "d88537c3-3fb5-4831-bed8-6cea93ebf2b6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c260821e-148f-4e50-83cb-d541cf00f48d",
        "cursor": {
          "ref": "37205f11-0055-440b-9f15-bd4170bf5ef7",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "0490cd89-eb01-4b88-a019-34412be7f178"
        },
        "item": {
          "id": "c260821e-148f-4e50-83cb-d541cf00f48d",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "862fc687-e9c4-4cfb-a875-3ec5cc31bf03",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c260821e-148f-4e50-83cb-d541cf00f48d",
        "cursor": {
          "ref": "37205f11-0055-440b-9f15-bd4170bf5ef7",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "0490cd89-eb01-4b88-a019-34412be7f178"
        },
        "item": {
          "id": "c260821e-148f-4e50-83cb-d541cf00f48d",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "862fc687-e9c4-4cfb-a875-3ec5cc31bf03",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e4f7978-02c8-4148-b91e-7f38160c0a2a",
        "cursor": {
          "ref": "b3f511fb-b5ff-4cdf-8a27-425b4e2c154b",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "5d034592-931b-4860-bfe2-354f78c7009d"
        },
        "item": {
          "id": "1e4f7978-02c8-4148-b91e-7f38160c0a2a",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "bbb0f744-779b-44e7-9165-538ba27b30cb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 83,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e4f7978-02c8-4148-b91e-7f38160c0a2a",
        "cursor": {
          "ref": "b3f511fb-b5ff-4cdf-8a27-425b4e2c154b",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "5d034592-931b-4860-bfe2-354f78c7009d"
        },
        "item": {
          "id": "1e4f7978-02c8-4148-b91e-7f38160c0a2a",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "bbb0f744-779b-44e7-9165-538ba27b30cb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 83,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4804dc3-6442-41f8-b67a-c39208a45f15",
        "cursor": {
          "ref": "39bf8f3a-7844-4311-9a79-2b120102cbdd",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "6ebf152d-44d8-4040-ae4d-63cde23cbb52"
        },
        "item": {
          "id": "d4804dc3-6442-41f8-b67a-c39208a45f15",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "2942f0ad-f46b-41b8-af47-d9532923b9ff",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4804dc3-6442-41f8-b67a-c39208a45f15",
        "cursor": {
          "ref": "39bf8f3a-7844-4311-9a79-2b120102cbdd",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "6ebf152d-44d8-4040-ae4d-63cde23cbb52"
        },
        "item": {
          "id": "d4804dc3-6442-41f8-b67a-c39208a45f15",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "2942f0ad-f46b-41b8-af47-d9532923b9ff",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16b4d496-0dc9-47d4-989b-a8eadc9cae10",
        "cursor": {
          "ref": "63801d82-1f99-4eb4-be4d-d0c5ce340709",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "219b6cd7-91c9-4629-88fa-1db74588199a"
        },
        "item": {
          "id": "16b4d496-0dc9-47d4-989b-a8eadc9cae10",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "9189c39b-6150-44bc-9c61-4f74dd9851c6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16b4d496-0dc9-47d4-989b-a8eadc9cae10",
        "cursor": {
          "ref": "63801d82-1f99-4eb4-be4d-d0c5ce340709",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "219b6cd7-91c9-4629-88fa-1db74588199a"
        },
        "item": {
          "id": "16b4d496-0dc9-47d4-989b-a8eadc9cae10",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "9189c39b-6150-44bc-9c61-4f74dd9851c6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8cbed46d-0d0c-450c-a36d-7b064462816d",
        "cursor": {
          "ref": "753b34ab-a65c-43ae-945f-b63ec5943900",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "e2b0f965-6dd9-4886-8c16-76b34ddf0af8"
        },
        "item": {
          "id": "8cbed46d-0d0c-450c-a36d-7b064462816d",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "6047f216-71d2-4659-8654-2dbefa99a9d1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 82,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:26)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8cbed46d-0d0c-450c-a36d-7b064462816d",
        "cursor": {
          "ref": "753b34ab-a65c-43ae-945f-b63ec5943900",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "e2b0f965-6dd9-4886-8c16-76b34ddf0af8"
        },
        "item": {
          "id": "8cbed46d-0d0c-450c-a36d-7b064462816d",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "6047f216-71d2-4659-8654-2dbefa99a9d1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 82,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:26)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab9826f9-2106-45f6-90fc-a85bd3d328de",
        "cursor": {
          "ref": "50c81619-8f8a-43c5-9afd-27762829372a",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "cb36a859-092d-4370-9df6-7ea1f6681e19"
        },
        "item": {
          "id": "ab9826f9-2106-45f6-90fc-a85bd3d328de",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "372d8c37-77c5-4572-8eed-a55012fe04a5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 88,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:27)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab9826f9-2106-45f6-90fc-a85bd3d328de",
        "cursor": {
          "ref": "50c81619-8f8a-43c5-9afd-27762829372a",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "cb36a859-092d-4370-9df6-7ea1f6681e19"
        },
        "item": {
          "id": "ab9826f9-2106-45f6-90fc-a85bd3d328de",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "372d8c37-77c5-4572-8eed-a55012fe04a5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 88,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:27)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "535203f5-e003-4bbd-8724-f69a79c9988e",
        "cursor": {
          "ref": "379f4057-e7df-4d98-9f4d-24d89732d9eb",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "691d5a52-8b2b-457d-9b4e-a0bd8cc63dcb"
        },
        "item": {
          "id": "535203f5-e003-4bbd-8724-f69a79c9988e",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "24b51a1c-82b5-43aa-8a11-b79d2db33c43",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:28)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "535203f5-e003-4bbd-8724-f69a79c9988e",
        "cursor": {
          "ref": "379f4057-e7df-4d98-9f4d-24d89732d9eb",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "691d5a52-8b2b-457d-9b4e-a0bd8cc63dcb"
        },
        "item": {
          "id": "535203f5-e003-4bbd-8724-f69a79c9988e",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "24b51a1c-82b5-43aa-8a11-b79d2db33c43",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:28)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3aa92225-762c-4251-be6b-a9b62c5f2410",
        "cursor": {
          "ref": "033cb594-f87c-47cf-8b52-69c73a730334",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "0ead8f27-defc-4c47-bbb7-6d650b057f47"
        },
        "item": {
          "id": "3aa92225-762c-4251-be6b-a9b62c5f2410",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "a22fcf59-dcf9-4294-b193-fa29f7d6b9db",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:29)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3aa92225-762c-4251-be6b-a9b62c5f2410",
        "cursor": {
          "ref": "033cb594-f87c-47cf-8b52-69c73a730334",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "0ead8f27-defc-4c47-bbb7-6d650b057f47"
        },
        "item": {
          "id": "3aa92225-762c-4251-be6b-a9b62c5f2410",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "a22fcf59-dcf9-4294-b193-fa29f7d6b9db",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:29)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4dfc98b6-5ffa-464c-9d0c-bc025d482956",
        "cursor": {
          "ref": "f23bb66d-2fb7-48b6-9dcc-0fecad76afac",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "a8e41078-9892-4625-bf8b-f4589ee2187b"
        },
        "item": {
          "id": "4dfc98b6-5ffa-464c-9d0c-bc025d482956",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "6c7442a6-4b3a-44c8-a785-fb3f36db08c0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 83,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:30)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4dfc98b6-5ffa-464c-9d0c-bc025d482956",
        "cursor": {
          "ref": "f23bb66d-2fb7-48b6-9dcc-0fecad76afac",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "a8e41078-9892-4625-bf8b-f4589ee2187b"
        },
        "item": {
          "id": "4dfc98b6-5ffa-464c-9d0c-bc025d482956",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "6c7442a6-4b3a-44c8-a785-fb3f36db08c0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 83,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:30)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9d72bf8-c248-4b10-a344-a32d8516bf97",
        "cursor": {
          "ref": "081ca63c-4e92-496d-a1ab-0652b926c110",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "dd532a7e-8ec3-4af0-a76b-80bebd14579e"
        },
        "item": {
          "id": "f9d72bf8-c248-4b10-a344-a32d8516bf97",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "f1cab9e4-432c-46a0-8db3-4d3b935eef77",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 85,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:31)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9d72bf8-c248-4b10-a344-a32d8516bf97",
        "cursor": {
          "ref": "081ca63c-4e92-496d-a1ab-0652b926c110",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "dd532a7e-8ec3-4af0-a76b-80bebd14579e"
        },
        "item": {
          "id": "f9d72bf8-c248-4b10-a344-a32d8516bf97",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "f1cab9e4-432c-46a0-8db3-4d3b935eef77",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 85,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:31)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2b8d5d3-64d3-4d1d-be34-506c54b2156b",
        "cursor": {
          "ref": "ae48702f-5d50-4a60-aa10-db542f6f9c5a",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "092894e9-6f5f-45a1-a1e8-86e5b3d894d2"
        },
        "item": {
          "id": "f2b8d5d3-64d3-4d1d-be34-506c54b2156b",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "fea5b64b-14de-4d61-8274-a17d875446d0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 88,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2b8d5d3-64d3-4d1d-be34-506c54b2156b",
        "cursor": {
          "ref": "ae48702f-5d50-4a60-aa10-db542f6f9c5a",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "092894e9-6f5f-45a1-a1e8-86e5b3d894d2"
        },
        "item": {
          "id": "f2b8d5d3-64d3-4d1d-be34-506c54b2156b",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "fea5b64b-14de-4d61-8274-a17d875446d0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 88,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0d61379-84ef-439a-a0fc-89c351d87062",
        "cursor": {
          "ref": "94706e02-e1cf-4c4b-8fcd-b8a739e124c0",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "2b1297bf-50ef-45ba-a2db-36281bd5f5ed"
        },
        "item": {
          "id": "a0d61379-84ef-439a-a0fc-89c351d87062",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "d5d33e91-68a7-4257-9e9b-5578b8874e6c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 89,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:33)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0d61379-84ef-439a-a0fc-89c351d87062",
        "cursor": {
          "ref": "94706e02-e1cf-4c4b-8fcd-b8a739e124c0",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "2b1297bf-50ef-45ba-a2db-36281bd5f5ed"
        },
        "item": {
          "id": "a0d61379-84ef-439a-a0fc-89c351d87062",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "d5d33e91-68a7-4257-9e9b-5578b8874e6c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 89,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:33)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e57172ee-1d2f-4c51-92b8-270044192d43",
        "cursor": {
          "ref": "0ad6e6b4-6d53-40ec-a5de-799ad0e3a6f0",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "5090c5ee-1242-4a0d-b1ff-4bd3fdc21eb3"
        },
        "item": {
          "id": "e57172ee-1d2f-4c51-92b8-270044192d43",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "4d414f9c-a490-497e-9421-bc29700422a1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e57172ee-1d2f-4c51-92b8-270044192d43",
        "cursor": {
          "ref": "0ad6e6b4-6d53-40ec-a5de-799ad0e3a6f0",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "5090c5ee-1242-4a0d-b1ff-4bd3fdc21eb3"
        },
        "item": {
          "id": "e57172ee-1d2f-4c51-92b8-270044192d43",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "4d414f9c-a490-497e-9421-bc29700422a1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11acea5b-316a-4803-bb8a-41c242ad2193",
        "cursor": {
          "ref": "2977d87f-898d-4951-8318-0360a8339078",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "a735d6ac-0490-47d7-b3ac-a4e2b1d3b1b1"
        },
        "item": {
          "id": "11acea5b-316a-4803-bb8a-41c242ad2193",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "35fdfc57-2bb9-4a1d-be53-f9773a045855",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:35)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11acea5b-316a-4803-bb8a-41c242ad2193",
        "cursor": {
          "ref": "2977d87f-898d-4951-8318-0360a8339078",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "a735d6ac-0490-47d7-b3ac-a4e2b1d3b1b1"
        },
        "item": {
          "id": "11acea5b-316a-4803-bb8a-41c242ad2193",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "35fdfc57-2bb9-4a1d-be53-f9773a045855",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:35)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b1b5a0c-e6d3-42ce-a0cc-a6a1af5c7214",
        "cursor": {
          "ref": "b924aa92-f166-440e-b2fb-3a650b487919",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "3f1f728b-a82a-4874-b2cb-f8b630a12685"
        },
        "item": {
          "id": "4b1b5a0c-e6d3-42ce-a0cc-a6a1af5c7214",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "2bb99400-e1f3-4411-9db3-d6196e8d5407",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:36)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b1b5a0c-e6d3-42ce-a0cc-a6a1af5c7214",
        "cursor": {
          "ref": "b924aa92-f166-440e-b2fb-3a650b487919",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "3f1f728b-a82a-4874-b2cb-f8b630a12685"
        },
        "item": {
          "id": "4b1b5a0c-e6d3-42ce-a0cc-a6a1af5c7214",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "2bb99400-e1f3-4411-9db3-d6196e8d5407",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:36)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5663958-0c79-48d6-8369-d58e032a770d",
        "cursor": {
          "ref": "82efd6c4-e08b-446f-a02f-82a03d17d173",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "043d587e-a268-4e49-a7bf-d030a8b9a35f"
        },
        "item": {
          "id": "b5663958-0c79-48d6-8369-d58e032a770d",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "67697f93-a10e-4784-bada-316dc08f783c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:37)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5663958-0c79-48d6-8369-d58e032a770d",
        "cursor": {
          "ref": "82efd6c4-e08b-446f-a02f-82a03d17d173",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "043d587e-a268-4e49-a7bf-d030a8b9a35f"
        },
        "item": {
          "id": "b5663958-0c79-48d6-8369-d58e032a770d",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "67697f93-a10e-4784-bada-316dc08f783c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:37)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c695dccf-803c-49bb-a3cb-7db5be757697",
        "cursor": {
          "ref": "238e21b8-fc35-414b-80a2-3fe1cab994f0",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "e7a8ff28-0fbd-4f29-8282-2ab078e707d3"
        },
        "item": {
          "id": "c695dccf-803c-49bb-a3cb-7db5be757697",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "74efc837-abe3-42c4-a078-011c35726c9d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:38)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c695dccf-803c-49bb-a3cb-7db5be757697",
        "cursor": {
          "ref": "238e21b8-fc35-414b-80a2-3fe1cab994f0",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "e7a8ff28-0fbd-4f29-8282-2ab078e707d3"
        },
        "item": {
          "id": "c695dccf-803c-49bb-a3cb-7db5be757697",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "74efc837-abe3-42c4-a078-011c35726c9d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:38)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd556e24-5ad3-4cea-9c08-79e7d5587142",
        "cursor": {
          "ref": "55ae9833-32e5-4040-bc7f-b8a220f81dff",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "255c8e85-5878-49d1-a0dd-9958a16333f4"
        },
        "item": {
          "id": "fd556e24-5ad3-4cea-9c08-79e7d5587142",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "daec9f10-1c00-49f5-81a4-c97483732b41",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 84,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd556e24-5ad3-4cea-9c08-79e7d5587142",
        "cursor": {
          "ref": "55ae9833-32e5-4040-bc7f-b8a220f81dff",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "255c8e85-5878-49d1-a0dd-9958a16333f4"
        },
        "item": {
          "id": "fd556e24-5ad3-4cea-9c08-79e7d5587142",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "daec9f10-1c00-49f5-81a4-c97483732b41",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 84,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80e9883d-75b2-4bb5-bf07-df0664f63f41",
        "cursor": {
          "ref": "9e243dac-1051-47e0-9c5d-24fabca39906",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "a0fdf76e-435d-4718-a451-fec844aaa943"
        },
        "item": {
          "id": "80e9883d-75b2-4bb5-bf07-df0664f63f41",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "cd7a9c99-4ca9-4b5e-b7fc-2b2089b244d7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80e9883d-75b2-4bb5-bf07-df0664f63f41",
        "cursor": {
          "ref": "9e243dac-1051-47e0-9c5d-24fabca39906",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "a0fdf76e-435d-4718-a451-fec844aaa943"
        },
        "item": {
          "id": "80e9883d-75b2-4bb5-bf07-df0664f63f41",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "cd7a9c99-4ca9-4b5e-b7fc-2b2089b244d7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a06c496-0fd6-4b9b-bf9f-dc6a65dc8b1f",
        "cursor": {
          "ref": "2197c65c-e978-4652-95c6-29cbec702135",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "f3a148f6-3cbd-441e-a4f6-f0a91cde3180"
        },
        "item": {
          "id": "4a06c496-0fd6-4b9b-bf9f-dc6a65dc8b1f",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "171c81ec-b974-4d1c-8a7f-383b27acb023",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a06c496-0fd6-4b9b-bf9f-dc6a65dc8b1f",
        "cursor": {
          "ref": "2197c65c-e978-4652-95c6-29cbec702135",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "f3a148f6-3cbd-441e-a4f6-f0a91cde3180"
        },
        "item": {
          "id": "4a06c496-0fd6-4b9b-bf9f-dc6a65dc8b1f",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "171c81ec-b974-4d1c-8a7f-383b27acb023",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2ce8133-aadb-476e-9ba1-e8b94c5bd276",
        "cursor": {
          "ref": "71d8eb07-d919-43ea-825a-ab2008101b63",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "8dbe2708-b6c1-47cb-9913-dbfb2399455a"
        },
        "item": {
          "id": "e2ce8133-aadb-476e-9ba1-e8b94c5bd276",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "fee3b126-ae6a-4f01-9720-b816dc9e9637",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:42)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2ce8133-aadb-476e-9ba1-e8b94c5bd276",
        "cursor": {
          "ref": "71d8eb07-d919-43ea-825a-ab2008101b63",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "8dbe2708-b6c1-47cb-9913-dbfb2399455a"
        },
        "item": {
          "id": "e2ce8133-aadb-476e-9ba1-e8b94c5bd276",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "fee3b126-ae6a-4f01-9720-b816dc9e9637",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:42)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efc3f3af-d488-44eb-9d52-d1c7f35b8d01",
        "cursor": {
          "ref": "b536168c-233e-4b64-bd45-676f9d5ca043",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "472e1192-a05f-4cf9-bf27-3b3629ebfc83"
        },
        "item": {
          "id": "efc3f3af-d488-44eb-9d52-d1c7f35b8d01",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "9d5d00cf-eade-4858-ac4f-8a73685151fb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efc3f3af-d488-44eb-9d52-d1c7f35b8d01",
        "cursor": {
          "ref": "b536168c-233e-4b64-bd45-676f9d5ca043",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "472e1192-a05f-4cf9-bf27-3b3629ebfc83"
        },
        "item": {
          "id": "efc3f3af-d488-44eb-9d52-d1c7f35b8d01",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "9d5d00cf-eade-4858-ac4f-8a73685151fb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f2ed701-e195-4dfe-b64c-65b0bb2da62a",
        "cursor": {
          "ref": "85eb9938-15e3-4221-8f7f-483ccf1103ba",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "1ce5cb4f-03ef-4c19-89fe-f7fa2b0508f8"
        },
        "item": {
          "id": "2f2ed701-e195-4dfe-b64c-65b0bb2da62a",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "773c8809-fa67-4887-8fd7-14d7e6e7db3c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 401",
              "stack": "AssertionError: expected response to have status code 422 but got 401\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f2ed701-e195-4dfe-b64c-65b0bb2da62a",
        "cursor": {
          "ref": "85eb9938-15e3-4221-8f7f-483ccf1103ba",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "1ce5cb4f-03ef-4c19-89fe-f7fa2b0508f8"
        },
        "item": {
          "id": "2f2ed701-e195-4dfe-b64c-65b0bb2da62a",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "773c8809-fa67-4887-8fd7-14d7e6e7db3c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 401",
              "stack": "AssertionError: expected response to have status code 422 but got 401\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d458486d-70c3-4347-a5a1-c36e701cbb1c",
        "cursor": {
          "ref": "e8a473e4-daff-4500-9510-a5f7c32ea097",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "87e1ee82-ea7a-4b64-a7f2-b116e746ac4d"
        },
        "item": {
          "id": "d458486d-70c3-4347-a5a1-c36e701cbb1c",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "c2bca6f8-d8d8-4074-9dc0-0f7ae567c660",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d458486d-70c3-4347-a5a1-c36e701cbb1c",
        "cursor": {
          "ref": "e8a473e4-daff-4500-9510-a5f7c32ea097",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "87e1ee82-ea7a-4b64-a7f2-b116e746ac4d"
        },
        "item": {
          "id": "d458486d-70c3-4347-a5a1-c36e701cbb1c",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "c2bca6f8-d8d8-4074-9dc0-0f7ae567c660",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a230cd6e-5501-4699-b0db-ad7f37599cae",
        "cursor": {
          "ref": "1009e3f3-3317-4606-9a61-c3bee2bc3d96",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "c9894370-7533-49d3-a2a6-65e2a9798444"
        },
        "item": {
          "id": "a230cd6e-5501-4699-b0db-ad7f37599cae",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "3b67f19b-858b-4bbf-84c5-858c495dc3b8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a230cd6e-5501-4699-b0db-ad7f37599cae",
        "cursor": {
          "ref": "1009e3f3-3317-4606-9a61-c3bee2bc3d96",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "c9894370-7533-49d3-a2a6-65e2a9798444"
        },
        "item": {
          "id": "a230cd6e-5501-4699-b0db-ad7f37599cae",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "3b67f19b-858b-4bbf-84c5-858c495dc3b8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0491c46-7a3e-4249-9b57-3672f128deb0",
        "cursor": {
          "ref": "663200be-1a12-4ab8-b5c9-7e4791af9401",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "bd465c2e-371e-474b-9bd2-d04e0df73b96"
        },
        "item": {
          "id": "a0491c46-7a3e-4249-9b57-3672f128deb0",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "2169a30b-10fd-4d49-9a6c-ea2a4869eccc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 83,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0491c46-7a3e-4249-9b57-3672f128deb0",
        "cursor": {
          "ref": "663200be-1a12-4ab8-b5c9-7e4791af9401",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "bd465c2e-371e-474b-9bd2-d04e0df73b96"
        },
        "item": {
          "id": "a0491c46-7a3e-4249-9b57-3672f128deb0",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "2169a30b-10fd-4d49-9a6c-ea2a4869eccc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 83,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e639d4a-c56b-4cee-858d-d114a36a2692",
        "cursor": {
          "ref": "4db48315-b69e-4058-956a-57967ab8f2cc",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "fcfc8477-dc07-4ee8-8d45-60c7cfd2f92d"
        },
        "item": {
          "id": "7e639d4a-c56b-4cee-858d-d114a36a2692",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "ece803ba-57ee-444a-8e6e-d6d68dc88fa3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e639d4a-c56b-4cee-858d-d114a36a2692",
        "cursor": {
          "ref": "4db48315-b69e-4058-956a-57967ab8f2cc",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "fcfc8477-dc07-4ee8-8d45-60c7cfd2f92d"
        },
        "item": {
          "id": "7e639d4a-c56b-4cee-858d-d114a36a2692",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "ece803ba-57ee-444a-8e6e-d6d68dc88fa3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6740b986-09cf-47c9-a969-a83bd706ea9c",
        "cursor": {
          "ref": "a12e84cf-d664-4699-804c-3831e9a878e0",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "6e5e36e2-45bf-45bb-a32f-bc0d749340bf"
        },
        "item": {
          "id": "6740b986-09cf-47c9-a969-a83bd706ea9c",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "e94abac3-2161-4ac5-85a7-4511f19a4830",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6740b986-09cf-47c9-a969-a83bd706ea9c",
        "cursor": {
          "ref": "a12e84cf-d664-4699-804c-3831e9a878e0",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "6e5e36e2-45bf-45bb-a32f-bc0d749340bf"
        },
        "item": {
          "id": "6740b986-09cf-47c9-a969-a83bd706ea9c",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "e94abac3-2161-4ac5-85a7-4511f19a4830",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "354b1905-f3d5-4299-a3b3-72eb2e7780cb",
        "cursor": {
          "ref": "fdc69fc6-9cf6-40a4-bf3e-1a19ad497ce4",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "07bda46f-8519-4b81-9746-5169629172f4"
        },
        "item": {
          "id": "354b1905-f3d5-4299-a3b3-72eb2e7780cb",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "e5fa2eb5-b544-43a1-b48f-1f68de2ef96c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "354b1905-f3d5-4299-a3b3-72eb2e7780cb",
        "cursor": {
          "ref": "fdc69fc6-9cf6-40a4-bf3e-1a19ad497ce4",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "07bda46f-8519-4b81-9746-5169629172f4"
        },
        "item": {
          "id": "354b1905-f3d5-4299-a3b3-72eb2e7780cb",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "e5fa2eb5-b544-43a1-b48f-1f68de2ef96c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbbf480d-05a4-4c03-85bc-7d544ef7fc78",
        "cursor": {
          "ref": "59264a82-12fb-46dd-a89d-88882ba4eb0a",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "9202e633-4a95-4cac-a204-55891a79de15"
        },
        "item": {
          "id": "dbbf480d-05a4-4c03-85bc-7d544ef7fc78",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "fe065125-de04-4d4f-bd98-8eb8148ee975",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 401",
              "stack": "AssertionError: expected response to have status code 422 but got 401\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbbf480d-05a4-4c03-85bc-7d544ef7fc78",
        "cursor": {
          "ref": "59264a82-12fb-46dd-a89d-88882ba4eb0a",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "9202e633-4a95-4cac-a204-55891a79de15"
        },
        "item": {
          "id": "dbbf480d-05a4-4c03-85bc-7d544ef7fc78",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "fe065125-de04-4d4f-bd98-8eb8148ee975",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 401",
              "stack": "AssertionError: expected response to have status code 422 but got 401\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04239e07-01fb-476c-ab24-0ce8f2e09e8f",
        "cursor": {
          "ref": "f621f560-d2d3-443c-aacc-586f7e341c29",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "3c2f947e-44b0-4626-bf75-36126ba04639"
        },
        "item": {
          "id": "04239e07-01fb-476c-ab24-0ce8f2e09e8f",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "90be6b26-394e-45a2-87b6-48badb001e51",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04239e07-01fb-476c-ab24-0ce8f2e09e8f",
        "cursor": {
          "ref": "f621f560-d2d3-443c-aacc-586f7e341c29",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "3c2f947e-44b0-4626-bf75-36126ba04639"
        },
        "item": {
          "id": "04239e07-01fb-476c-ab24-0ce8f2e09e8f",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "90be6b26-394e-45a2-87b6-48badb001e51",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2282eaf4-acd0-4d16-95a4-dbe912873716",
        "cursor": {
          "ref": "bb2bd858-5297-471d-ad67-fff9af598235",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "a8f39771-324d-45e4-acb5-0da99b5f667c"
        },
        "item": {
          "id": "2282eaf4-acd0-4d16-95a4-dbe912873716",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "6ce9ddc7-0a08-464e-9acb-e2a9b81904a9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 90,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2282eaf4-acd0-4d16-95a4-dbe912873716",
        "cursor": {
          "ref": "bb2bd858-5297-471d-ad67-fff9af598235",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "a8f39771-324d-45e4-acb5-0da99b5f667c"
        },
        "item": {
          "id": "2282eaf4-acd0-4d16-95a4-dbe912873716",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "6ce9ddc7-0a08-464e-9acb-e2a9b81904a9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 90,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f7f32f2-eb93-491d-94da-d20848257363",
        "cursor": {
          "ref": "378405e9-aaae-483f-ae46-04c9639e9f1e",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "c894f0e8-959a-4f4c-b4a4-ec36ab780bce"
        },
        "item": {
          "id": "6f7f32f2-eb93-491d-94da-d20848257363",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "57290eae-c1bf-45d6-b4a0-e2331d87491e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 117,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f7f32f2-eb93-491d-94da-d20848257363",
        "cursor": {
          "ref": "378405e9-aaae-483f-ae46-04c9639e9f1e",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "c894f0e8-959a-4f4c-b4a4-ec36ab780bce"
        },
        "item": {
          "id": "6f7f32f2-eb93-491d-94da-d20848257363",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "57290eae-c1bf-45d6-b4a0-e2331d87491e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 117,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cac9a0ac-7c0d-45b3-9cd6-0e635fa7dbb9",
        "cursor": {
          "ref": "46cdb403-aaa4-4358-a1cb-46ed5c3efc24",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "9946a101-e840-4726-81b9-6cbc9b11ae25"
        },
        "item": {
          "id": "cac9a0ac-7c0d-45b3-9cd6-0e635fa7dbb9",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "91ea6194-fcc1-4102-830d-37368f720172",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:55)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cac9a0ac-7c0d-45b3-9cd6-0e635fa7dbb9",
        "cursor": {
          "ref": "46cdb403-aaa4-4358-a1cb-46ed5c3efc24",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "9946a101-e840-4726-81b9-6cbc9b11ae25"
        },
        "item": {
          "id": "cac9a0ac-7c0d-45b3-9cd6-0e635fa7dbb9",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "91ea6194-fcc1-4102-830d-37368f720172",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:55)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0cb44756-3599-44a1-9f20-8bcb1c03e34a",
        "cursor": {
          "ref": "620ee9cf-7dc2-4a52-99e3-8d78877e252c",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "f3a4a413-744e-40ec-a789-101a84aa1365"
        },
        "item": {
          "id": "0cb44756-3599-44a1-9f20-8bcb1c03e34a",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "696e8abe-cb01-4b9a-b882-598afb1e0bd5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 84,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:56)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0cb44756-3599-44a1-9f20-8bcb1c03e34a",
        "cursor": {
          "ref": "620ee9cf-7dc2-4a52-99e3-8d78877e252c",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "f3a4a413-744e-40ec-a789-101a84aa1365"
        },
        "item": {
          "id": "0cb44756-3599-44a1-9f20-8bcb1c03e34a",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "696e8abe-cb01-4b9a-b882-598afb1e0bd5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 84,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:56)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "138467fa-7cae-4191-85af-a370a89396c3",
        "cursor": {
          "ref": "235518c4-4fd0-421b-a9d2-688015dac14f",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "1bdab31f-9d01-4be4-93e1-a3d07238f16f"
        },
        "item": {
          "id": "138467fa-7cae-4191-85af-a370a89396c3",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "43826f3c-a306-447b-afc2-9170bffd00a9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:57)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "138467fa-7cae-4191-85af-a370a89396c3",
        "cursor": {
          "ref": "235518c4-4fd0-421b-a9d2-688015dac14f",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "1bdab31f-9d01-4be4-93e1-a3d07238f16f"
        },
        "item": {
          "id": "138467fa-7cae-4191-85af-a370a89396c3",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "43826f3c-a306-447b-afc2-9170bffd00a9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:57)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90dfcc5c-58b8-4409-b334-bd447d8040ba",
        "cursor": {
          "ref": "1823eb05-b232-4cc0-895f-eece5831be70",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "8d4c9184-8b2b-4a27-aeb3-6b82cfb54ff8"
        },
        "item": {
          "id": "90dfcc5c-58b8-4409-b334-bd447d8040ba",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "243da614-fdc3-4940-8363-3e2f8b0f69c1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 83,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:58)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90dfcc5c-58b8-4409-b334-bd447d8040ba",
        "cursor": {
          "ref": "1823eb05-b232-4cc0-895f-eece5831be70",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "8d4c9184-8b2b-4a27-aeb3-6b82cfb54ff8"
        },
        "item": {
          "id": "90dfcc5c-58b8-4409-b334-bd447d8040ba",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "243da614-fdc3-4940-8363-3e2f8b0f69c1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 83,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:58)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3b3073a-122b-4b0c-97e0-faca4c478d54",
        "cursor": {
          "ref": "8758fc30-9bc9-46d7-90dd-a7ef042669a4",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "48c35663-0eeb-4784-ad47-98a8f24ab57d"
        },
        "item": {
          "id": "d3b3073a-122b-4b0c-97e0-faca4c478d54",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "393e8fb0-d4cf-4179-b909-7675179cb248",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 83,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:59)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3b3073a-122b-4b0c-97e0-faca4c478d54",
        "cursor": {
          "ref": "8758fc30-9bc9-46d7-90dd-a7ef042669a4",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "48c35663-0eeb-4784-ad47-98a8f24ab57d"
        },
        "item": {
          "id": "d3b3073a-122b-4b0c-97e0-faca4c478d54",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "393e8fb0-d4cf-4179-b909-7675179cb248",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 83,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:59)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1a093ce-1582-4e13-9eff-1b8281c5e1e7",
        "cursor": {
          "ref": "fe82d3f2-c9bd-4b8f-a9f8-2853bb186e2f",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "ec2cf0bb-caeb-4dfb-a828-a39fdb8c6f73"
        },
        "item": {
          "id": "e1a093ce-1582-4e13-9eff-1b8281c5e1e7",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "f1dc397d-77e0-459d-91b3-5adb625554e2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:60)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1a093ce-1582-4e13-9eff-1b8281c5e1e7",
        "cursor": {
          "ref": "fe82d3f2-c9bd-4b8f-a9f8-2853bb186e2f",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "ec2cf0bb-caeb-4dfb-a828-a39fdb8c6f73"
        },
        "item": {
          "id": "e1a093ce-1582-4e13-9eff-1b8281c5e1e7",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "f1dc397d-77e0-459d-91b3-5adb625554e2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:60)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5919fb8-0f0d-4df3-9a45-7f92646f0657",
        "cursor": {
          "ref": "7e0e8d83-418d-45b2-8c98-7d102eb29c87",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "80ca00f9-285a-467b-9184-7b8fd7e2f85c"
        },
        "item": {
          "id": "d5919fb8-0f0d-4df3-9a45-7f92646f0657",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "3a2c7aea-22ce-402c-a16c-bf7ff3f78823",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:61)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5919fb8-0f0d-4df3-9a45-7f92646f0657",
        "cursor": {
          "ref": "7e0e8d83-418d-45b2-8c98-7d102eb29c87",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "80ca00f9-285a-467b-9184-7b8fd7e2f85c"
        },
        "item": {
          "id": "d5919fb8-0f0d-4df3-9a45-7f92646f0657",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "3a2c7aea-22ce-402c-a16c-bf7ff3f78823",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:61)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28e85dbc-5b8b-4960-84c9-c4d6726456e3",
        "cursor": {
          "ref": "b81230c0-ee4e-42e3-ae03-edc3bb7ae0d8",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "483700e7-b003-44c5-a722-191ec1cb9fb2"
        },
        "item": {
          "id": "28e85dbc-5b8b-4960-84c9-c4d6726456e3",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "9748a386-69f6-4836-a0ce-3e43284f260c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 89,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:62)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28e85dbc-5b8b-4960-84c9-c4d6726456e3",
        "cursor": {
          "ref": "b81230c0-ee4e-42e3-ae03-edc3bb7ae0d8",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "483700e7-b003-44c5-a722-191ec1cb9fb2"
        },
        "item": {
          "id": "28e85dbc-5b8b-4960-84c9-c4d6726456e3",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "9748a386-69f6-4836-a0ce-3e43284f260c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 89,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:62)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abcb8624-8ec2-4d26-b6a5-989de97ff515",
        "cursor": {
          "ref": "666e2d13-729a-4d0b-b37d-9c43bf94fc2a",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "6cf389af-5ca9-44f7-a7a2-1467910b8d60"
        },
        "item": {
          "id": "abcb8624-8ec2-4d26-b6a5-989de97ff515",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "f9ad0995-6270-4d36-8fa5-0073d01d0862",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:63)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abcb8624-8ec2-4d26-b6a5-989de97ff515",
        "cursor": {
          "ref": "666e2d13-729a-4d0b-b37d-9c43bf94fc2a",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "6cf389af-5ca9-44f7-a7a2-1467910b8d60"
        },
        "item": {
          "id": "abcb8624-8ec2-4d26-b6a5-989de97ff515",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "f9ad0995-6270-4d36-8fa5-0073d01d0862",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:63)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea3dc135-473b-4591-89e4-4bbcbfd9cafa",
        "cursor": {
          "ref": "19537168-ab3c-4c4b-be23-92e78571a073",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "a78c69c7-10a0-43bb-b472-59236bbd39e1"
        },
        "item": {
          "id": "ea3dc135-473b-4591-89e4-4bbcbfd9cafa",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "cf570539-fb51-49df-9fd7-a687ebf4cc15",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:64)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea3dc135-473b-4591-89e4-4bbcbfd9cafa",
        "cursor": {
          "ref": "19537168-ab3c-4c4b-be23-92e78571a073",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "a78c69c7-10a0-43bb-b472-59236bbd39e1"
        },
        "item": {
          "id": "ea3dc135-473b-4591-89e4-4bbcbfd9cafa",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "cf570539-fb51-49df-9fd7-a687ebf4cc15",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:64)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68b2d554-341f-4de7-8151-ef7a3e017cef",
        "cursor": {
          "ref": "ec5254a8-cbda-4f4d-ba15-d5ddc75adf12",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "2d228d91-991c-46e8-96f9-71fd65ea6232"
        },
        "item": {
          "id": "68b2d554-341f-4de7-8151-ef7a3e017cef",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "fa40164c-b5a4-463c-839f-c10777090277",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68b2d554-341f-4de7-8151-ef7a3e017cef",
        "cursor": {
          "ref": "ec5254a8-cbda-4f4d-ba15-d5ddc75adf12",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "2d228d91-991c-46e8-96f9-71fd65ea6232"
        },
        "item": {
          "id": "68b2d554-341f-4de7-8151-ef7a3e017cef",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "fa40164c-b5a4-463c-839f-c10777090277",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8493717d-2d01-421f-9ba3-33e4944136a5",
        "cursor": {
          "ref": "97ffd252-f019-4623-829f-6129722c309c",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "c835fc69-8b09-4f5e-88c4-fd343ebdd77d"
        },
        "item": {
          "id": "8493717d-2d01-421f-9ba3-33e4944136a5",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "c2e364ea-2afe-4adb-9c61-c22b665941c4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8493717d-2d01-421f-9ba3-33e4944136a5",
        "cursor": {
          "ref": "97ffd252-f019-4623-829f-6129722c309c",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "c835fc69-8b09-4f5e-88c4-fd343ebdd77d"
        },
        "item": {
          "id": "8493717d-2d01-421f-9ba3-33e4944136a5",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "c2e364ea-2afe-4adb-9c61-c22b665941c4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e591d3db-0ac0-4505-a287-1633f252060f",
        "cursor": {
          "ref": "942ea1ee-985f-46e8-ad73-e7935a087a51",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "5c4f8462-d242-4011-90b6-cf1f341d77df"
        },
        "item": {
          "id": "e591d3db-0ac0-4505-a287-1633f252060f",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "23f8b427-9f93-4661-8d05-429f92ada060",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e591d3db-0ac0-4505-a287-1633f252060f",
        "cursor": {
          "ref": "942ea1ee-985f-46e8-ad73-e7935a087a51",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "5c4f8462-d242-4011-90b6-cf1f341d77df"
        },
        "item": {
          "id": "e591d3db-0ac0-4505-a287-1633f252060f",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "23f8b427-9f93-4661-8d05-429f92ada060",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce134829-6801-484d-8594-1b6e7892a399",
        "cursor": {
          "ref": "8bf296e6-fb8f-4150-b031-14b6568057e7",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "5dec8700-2dd6-4bdf-bcbf-a4108d7e7be2"
        },
        "item": {
          "id": "ce134829-6801-484d-8594-1b6e7892a399",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "e69ae476-b090-4f32-9dc1-483289b515a8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce134829-6801-484d-8594-1b6e7892a399",
        "cursor": {
          "ref": "8bf296e6-fb8f-4150-b031-14b6568057e7",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "5dec8700-2dd6-4bdf-bcbf-a4108d7e7be2"
        },
        "item": {
          "id": "ce134829-6801-484d-8594-1b6e7892a399",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "e69ae476-b090-4f32-9dc1-483289b515a8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbe00779-23e4-4c09-8886-ec67614130a2",
        "cursor": {
          "ref": "7904fc00-09ca-46ff-adb3-b4420efb31d5",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "45e62dd6-4be6-4cc2-a039-7409435eac3f"
        },
        "item": {
          "id": "bbe00779-23e4-4c09-8886-ec67614130a2",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "b825bc91-cf54-41d6-adc3-ba68e50fab6d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbe00779-23e4-4c09-8886-ec67614130a2",
        "cursor": {
          "ref": "7904fc00-09ca-46ff-adb3-b4420efb31d5",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "45e62dd6-4be6-4cc2-a039-7409435eac3f"
        },
        "item": {
          "id": "bbe00779-23e4-4c09-8886-ec67614130a2",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "b825bc91-cf54-41d6-adc3-ba68e50fab6d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6db923c2-a381-42be-a8bf-43f34c86b8cc",
        "cursor": {
          "ref": "d701a35a-7e77-4c67-9134-36d33dac1f7d",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "b52ca29c-ee20-4657-8b0d-2d7ebfb8dd06"
        },
        "item": {
          "id": "6db923c2-a381-42be-a8bf-43f34c86b8cc",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "27ed840a-6e6a-4270-a4db-522c0d9c519f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:70)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6db923c2-a381-42be-a8bf-43f34c86b8cc",
        "cursor": {
          "ref": "d701a35a-7e77-4c67-9134-36d33dac1f7d",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "b52ca29c-ee20-4657-8b0d-2d7ebfb8dd06"
        },
        "item": {
          "id": "6db923c2-a381-42be-a8bf-43f34c86b8cc",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "27ed840a-6e6a-4270-a4db-522c0d9c519f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:70)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "441298f9-e92e-4439-9786-2b6a66535658",
        "cursor": {
          "ref": "1eb72333-f6ac-4a6f-9730-03616244c186",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "de0c2dda-6168-4977-8289-8fddbb2de9e0"
        },
        "item": {
          "id": "441298f9-e92e-4439-9786-2b6a66535658",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "2320305d-4878-4484-8667-2e2117dbc531",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "441298f9-e92e-4439-9786-2b6a66535658",
        "cursor": {
          "ref": "1eb72333-f6ac-4a6f-9730-03616244c186",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "de0c2dda-6168-4977-8289-8fddbb2de9e0"
        },
        "item": {
          "id": "441298f9-e92e-4439-9786-2b6a66535658",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "2320305d-4878-4484-8667-2e2117dbc531",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cac6533b-cb5e-4d65-8117-23f4ee5e746f",
        "cursor": {
          "ref": "c7897716-a366-4963-9f8d-4084e3701e2c",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "29f9cff7-4957-491a-af1e-b5cd79b394d8"
        },
        "item": {
          "id": "cac6533b-cb5e-4d65-8117-23f4ee5e746f",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "2e7d0953-5ce0-4e28-bd99-71e707457914",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:72)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cac6533b-cb5e-4d65-8117-23f4ee5e746f",
        "cursor": {
          "ref": "c7897716-a366-4963-9f8d-4084e3701e2c",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "29f9cff7-4957-491a-af1e-b5cd79b394d8"
        },
        "item": {
          "id": "cac6533b-cb5e-4d65-8117-23f4ee5e746f",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "2e7d0953-5ce0-4e28-bd99-71e707457914",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:72)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "751c8062-36de-4dde-a452-e3cbc467b514",
        "cursor": {
          "ref": "498f0209-6d00-43f1-9e6f-5c8eec93feec",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "785dbfe6-c82f-4c33-8223-07f998f94f70"
        },
        "item": {
          "id": "751c8062-36de-4dde-a452-e3cbc467b514",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "74e647c6-ab43-4c64-9b05-c1dc695c04dd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:73)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "751c8062-36de-4dde-a452-e3cbc467b514",
        "cursor": {
          "ref": "498f0209-6d00-43f1-9e6f-5c8eec93feec",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "785dbfe6-c82f-4c33-8223-07f998f94f70"
        },
        "item": {
          "id": "751c8062-36de-4dde-a452-e3cbc467b514",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "74e647c6-ab43-4c64-9b05-c1dc695c04dd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:73)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8ec6468-3f90-41b9-9afe-f4b099803bd3",
        "cursor": {
          "ref": "95010da1-9965-4f9a-85fe-9753ff1b74ab",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "646a134c-042d-4ea6-93ea-27c6321cfccd"
        },
        "item": {
          "id": "d8ec6468-3f90-41b9-9afe-f4b099803bd3",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "7a91bf65-bb3d-431b-9d9d-7a63245e7860",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:74)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8ec6468-3f90-41b9-9afe-f4b099803bd3",
        "cursor": {
          "ref": "95010da1-9965-4f9a-85fe-9753ff1b74ab",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "646a134c-042d-4ea6-93ea-27c6321cfccd"
        },
        "item": {
          "id": "d8ec6468-3f90-41b9-9afe-f4b099803bd3",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "7a91bf65-bb3d-431b-9d9d-7a63245e7860",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:74)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "821eff5d-dd7f-4f99-973c-1a617b761762",
        "cursor": {
          "ref": "0fc09812-068c-4cda-a645-2dfa3b27d790",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "16108251-81c8-4b8f-af93-c090dd7944b6"
        },
        "item": {
          "id": "821eff5d-dd7f-4f99-973c-1a617b761762",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "19c17352-a1c0-4a96-a702-db7e090449cb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:75)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "821eff5d-dd7f-4f99-973c-1a617b761762",
        "cursor": {
          "ref": "0fc09812-068c-4cda-a645-2dfa3b27d790",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "16108251-81c8-4b8f-af93-c090dd7944b6"
        },
        "item": {
          "id": "821eff5d-dd7f-4f99-973c-1a617b761762",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "19c17352-a1c0-4a96-a702-db7e090449cb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:75)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4108b226-d048-4b2c-ba41-202b4a73b32f",
        "cursor": {
          "ref": "93ce4561-bd95-41aa-a93a-00bca36e349b",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "18a967fa-c0b1-4715-aa7d-db323e8815f5"
        },
        "item": {
          "id": "4108b226-d048-4b2c-ba41-202b4a73b32f",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "ba3c29f7-8a66-4714-93ec-c788d6e215f5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:76)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4108b226-d048-4b2c-ba41-202b4a73b32f",
        "cursor": {
          "ref": "93ce4561-bd95-41aa-a93a-00bca36e349b",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "18a967fa-c0b1-4715-aa7d-db323e8815f5"
        },
        "item": {
          "id": "4108b226-d048-4b2c-ba41-202b4a73b32f",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "ba3c29f7-8a66-4714-93ec-c788d6e215f5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:76)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b2be271-74d0-40b6-a709-d163de12015a",
        "cursor": {
          "ref": "ca8b1608-8e6c-4a28-a68f-ce63585e64c4",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "38f644d9-06c8-4f2a-90af-d43b5078df71"
        },
        "item": {
          "id": "6b2be271-74d0-40b6-a709-d163de12015a",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "302e115d-34c8-43cf-8c98-16abefd94410",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:77)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b2be271-74d0-40b6-a709-d163de12015a",
        "cursor": {
          "ref": "ca8b1608-8e6c-4a28-a68f-ce63585e64c4",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "38f644d9-06c8-4f2a-90af-d43b5078df71"
        },
        "item": {
          "id": "6b2be271-74d0-40b6-a709-d163de12015a",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "302e115d-34c8-43cf-8c98-16abefd94410",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:77)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6297685b-6e94-497c-95d5-d6b387a69f2b",
        "cursor": {
          "ref": "a0258368-97cd-44ba-8b15-fdd5a9cd4fb7",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "3b5b6c78-f172-45c7-a928-d6587c7ff6c9"
        },
        "item": {
          "id": "6297685b-6e94-497c-95d5-d6b387a69f2b",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "3692bc43-617d-4dad-add0-ba1525157c79",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:78)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6297685b-6e94-497c-95d5-d6b387a69f2b",
        "cursor": {
          "ref": "a0258368-97cd-44ba-8b15-fdd5a9cd4fb7",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "3b5b6c78-f172-45c7-a928-d6587c7ff6c9"
        },
        "item": {
          "id": "6297685b-6e94-497c-95d5-d6b387a69f2b",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "3692bc43-617d-4dad-add0-ba1525157c79",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:78)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55bec6e6-d6bc-4d9b-86a3-9c509a696be5",
        "cursor": {
          "ref": "a20e47cf-509e-4307-aca6-ef3d65316627",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "132b15ab-3219-4201-a62e-f1888601a6d9"
        },
        "item": {
          "id": "55bec6e6-d6bc-4d9b-86a3-9c509a696be5",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "0564884f-beef-4d1a-89e6-1a60a437dc26",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:79)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55bec6e6-d6bc-4d9b-86a3-9c509a696be5",
        "cursor": {
          "ref": "a20e47cf-509e-4307-aca6-ef3d65316627",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "132b15ab-3219-4201-a62e-f1888601a6d9"
        },
        "item": {
          "id": "55bec6e6-d6bc-4d9b-86a3-9c509a696be5",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "0564884f-beef-4d1a-89e6-1a60a437dc26",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:79)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f0da1d2-4042-4c07-b436-67f631917a10",
        "cursor": {
          "ref": "77f5fc92-46f6-46bf-b710-fee641eef6fa",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "505816e4-04c1-4879-bc4b-714b94c63ee4"
        },
        "item": {
          "id": "7f0da1d2-4042-4c07-b436-67f631917a10",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "2cfdc9c3-80c7-4d1b-82ae-07b4589f1c3a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:80)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f0da1d2-4042-4c07-b436-67f631917a10",
        "cursor": {
          "ref": "77f5fc92-46f6-46bf-b710-fee641eef6fa",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "505816e4-04c1-4879-bc4b-714b94c63ee4"
        },
        "item": {
          "id": "7f0da1d2-4042-4c07-b436-67f631917a10",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "2cfdc9c3-80c7-4d1b-82ae-07b4589f1c3a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:80)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a23edec1-3014-4fce-8752-51beab51f42d",
        "cursor": {
          "ref": "4dc6efcb-5bf2-4b2d-9819-da474696cbc6",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "0c0bbc96-f9a4-4694-877c-f50e0a58f4b9"
        },
        "item": {
          "id": "a23edec1-3014-4fce-8752-51beab51f42d",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "9668952b-1748-468c-a796-7265fff83194",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:81)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a23edec1-3014-4fce-8752-51beab51f42d",
        "cursor": {
          "ref": "4dc6efcb-5bf2-4b2d-9819-da474696cbc6",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "0c0bbc96-f9a4-4694-877c-f50e0a58f4b9"
        },
        "item": {
          "id": "a23edec1-3014-4fce-8752-51beab51f42d",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "9668952b-1748-468c-a796-7265fff83194",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:81)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2806d643-ebde-445b-8191-ebd7e4c024af",
        "cursor": {
          "ref": "a164045b-73d3-47c7-a5a4-84fbbfacea6d",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "b170ee76-880e-4126-bf5d-b25cb30fe7b9"
        },
        "item": {
          "id": "2806d643-ebde-445b-8191-ebd7e4c024af",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "b1512b3a-4c8a-4645-909f-edf15d14fedc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 83,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:82)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2806d643-ebde-445b-8191-ebd7e4c024af",
        "cursor": {
          "ref": "a164045b-73d3-47c7-a5a4-84fbbfacea6d",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "b170ee76-880e-4126-bf5d-b25cb30fe7b9"
        },
        "item": {
          "id": "2806d643-ebde-445b-8191-ebd7e4c024af",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "b1512b3a-4c8a-4645-909f-edf15d14fedc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 83,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:82)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dac45b49-5cf0-459b-9b22-8ef1abc75b22",
        "cursor": {
          "ref": "9160a231-21f6-4a17-a536-900852bbb162",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "65620199-5097-43da-9e96-168ab1bba645"
        },
        "item": {
          "id": "dac45b49-5cf0-459b-9b22-8ef1abc75b22",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "008cc2db-b1cc-45aa-a113-3928763ca5bd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 84,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:83)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dac45b49-5cf0-459b-9b22-8ef1abc75b22",
        "cursor": {
          "ref": "9160a231-21f6-4a17-a536-900852bbb162",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "65620199-5097-43da-9e96-168ab1bba645"
        },
        "item": {
          "id": "dac45b49-5cf0-459b-9b22-8ef1abc75b22",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "008cc2db-b1cc-45aa-a113-3928763ca5bd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 84,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:83)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d64e6490-0127-4357-8fc1-eb2033c0bd75",
        "cursor": {
          "ref": "8ff87de3-6f2c-4fee-af26-8f33fba18990",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "2147d940-eda0-4bbb-b462-4bc9710f83ba"
        },
        "item": {
          "id": "d64e6490-0127-4357-8fc1-eb2033c0bd75",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "47ea7474-2d51-48c2-82d6-0b18ed87eb39",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 82,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:84)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d64e6490-0127-4357-8fc1-eb2033c0bd75",
        "cursor": {
          "ref": "8ff87de3-6f2c-4fee-af26-8f33fba18990",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "2147d940-eda0-4bbb-b462-4bc9710f83ba"
        },
        "item": {
          "id": "d64e6490-0127-4357-8fc1-eb2033c0bd75",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "47ea7474-2d51-48c2-82d6-0b18ed87eb39",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 82,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:84)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e117fa7-dd03-47b4-98b6-2bd080571798",
        "cursor": {
          "ref": "6d7a536f-747e-49b9-8bd4-3248a0034c57",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "43c6f983-460b-440d-997c-6fad0496a6f4"
        },
        "item": {
          "id": "5e117fa7-dd03-47b4-98b6-2bd080571798",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "a9918daf-74aa-4732-9fd1-3719bbd03788",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:85)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e117fa7-dd03-47b4-98b6-2bd080571798",
        "cursor": {
          "ref": "6d7a536f-747e-49b9-8bd4-3248a0034c57",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "43c6f983-460b-440d-997c-6fad0496a6f4"
        },
        "item": {
          "id": "5e117fa7-dd03-47b4-98b6-2bd080571798",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "a9918daf-74aa-4732-9fd1-3719bbd03788",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:85)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f61259fa-8577-48b9-93b9-15b0c5975af5",
        "cursor": {
          "ref": "5db335ec-d6c2-4169-a4a6-8d7d07df4e50",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "dfe6d871-849e-4f6a-85a0-b81f603f9f2e"
        },
        "item": {
          "id": "f61259fa-8577-48b9-93b9-15b0c5975af5",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "df3bb77c-90ac-457a-8658-69922ac666c4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 92,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:86)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f61259fa-8577-48b9-93b9-15b0c5975af5",
        "cursor": {
          "ref": "5db335ec-d6c2-4169-a4a6-8d7d07df4e50",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "dfe6d871-849e-4f6a-85a0-b81f603f9f2e"
        },
        "item": {
          "id": "f61259fa-8577-48b9-93b9-15b0c5975af5",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "df3bb77c-90ac-457a-8658-69922ac666c4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 92,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:86)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1d9747c-6316-417d-9269-4f2464f43d74",
        "cursor": {
          "ref": "779faf51-32d6-487b-a4d4-d49eb6e43eb1",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "245e3807-1dd3-45a1-b7ce-85227fe56b6c"
        },
        "item": {
          "id": "b1d9747c-6316-417d-9269-4f2464f43d74",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "d9435bc8-d5b1-4787-af25-3212bafdb090",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:87)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1d9747c-6316-417d-9269-4f2464f43d74",
        "cursor": {
          "ref": "779faf51-32d6-487b-a4d4-d49eb6e43eb1",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "245e3807-1dd3-45a1-b7ce-85227fe56b6c"
        },
        "item": {
          "id": "b1d9747c-6316-417d-9269-4f2464f43d74",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "d9435bc8-d5b1-4787-af25-3212bafdb090",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:87)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6163877-bf28-40c6-80eb-aa413753d259",
        "cursor": {
          "ref": "98e82cf7-1244-4d8c-807f-04f879ae9b91",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "48d43625-04c1-45ba-8aa0-33b7fc8e4c1b"
        },
        "item": {
          "id": "d6163877-bf28-40c6-80eb-aa413753d259",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "15bd8787-5e79-46bf-bab8-1dd314f48b57",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:88)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6163877-bf28-40c6-80eb-aa413753d259",
        "cursor": {
          "ref": "98e82cf7-1244-4d8c-807f-04f879ae9b91",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "48d43625-04c1-45ba-8aa0-33b7fc8e4c1b"
        },
        "item": {
          "id": "d6163877-bf28-40c6-80eb-aa413753d259",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "15bd8787-5e79-46bf-bab8-1dd314f48b57",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:88)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4d1c5e9-9d5e-4959-8ca0-8ed363f56d94",
        "cursor": {
          "ref": "8cedcbbe-4882-4687-a2e5-9c31fac649d0",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "1349e38d-d387-41ee-8251-6d42f0376dff"
        },
        "item": {
          "id": "d4d1c5e9-9d5e-4959-8ca0-8ed363f56d94",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "6cafc8ca-4414-4b54-86b1-8f764ca0fceb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:89)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4d1c5e9-9d5e-4959-8ca0-8ed363f56d94",
        "cursor": {
          "ref": "8cedcbbe-4882-4687-a2e5-9c31fac649d0",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "1349e38d-d387-41ee-8251-6d42f0376dff"
        },
        "item": {
          "id": "d4d1c5e9-9d5e-4959-8ca0-8ed363f56d94",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "6cafc8ca-4414-4b54-86b1-8f764ca0fceb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:89)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f52514c-9146-4bf2-bdf3-77cb85757e57",
        "cursor": {
          "ref": "0671c396-6bd7-4c09-8959-f1a10aa31eb3",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "3687742b-2cde-4c49-a58c-536d674fc29a"
        },
        "item": {
          "id": "3f52514c-9146-4bf2-bdf3-77cb85757e57",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "5f44771d-fd91-40a4-9537-9465088279c9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:90)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f52514c-9146-4bf2-bdf3-77cb85757e57",
        "cursor": {
          "ref": "0671c396-6bd7-4c09-8959-f1a10aa31eb3",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "3687742b-2cde-4c49-a58c-536d674fc29a"
        },
        "item": {
          "id": "3f52514c-9146-4bf2-bdf3-77cb85757e57",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "5f44771d-fd91-40a4-9537-9465088279c9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:90)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "539d5de4-b59c-471c-8af4-79ccfa91fa4e",
        "cursor": {
          "ref": "385e03d7-19c5-4569-9361-8387e3605c90",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "5bcc80f9-53f8-47b6-a4f2-aef0fd808558"
        },
        "item": {
          "id": "539d5de4-b59c-471c-8af4-79ccfa91fa4e",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "5b4553c3-aa16-42ac-bfaa-8cc5bc4ed5c6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:91)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "539d5de4-b59c-471c-8af4-79ccfa91fa4e",
        "cursor": {
          "ref": "385e03d7-19c5-4569-9361-8387e3605c90",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "5bcc80f9-53f8-47b6-a4f2-aef0fd808558"
        },
        "item": {
          "id": "539d5de4-b59c-471c-8af4-79ccfa91fa4e",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "5b4553c3-aa16-42ac-bfaa-8cc5bc4ed5c6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:91)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4da65587-b3b2-4eae-8d8a-893a3e692396",
        "cursor": {
          "ref": "d19fabe7-a302-44a8-9fb9-4d49f1e06194",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "5ace46ce-3962-43e9-bbb9-f053d8509ef0"
        },
        "item": {
          "id": "4da65587-b3b2-4eae-8d8a-893a3e692396",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "9c518301-9bb5-45e7-a98b-973bdd57e81d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:92)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4da65587-b3b2-4eae-8d8a-893a3e692396",
        "cursor": {
          "ref": "d19fabe7-a302-44a8-9fb9-4d49f1e06194",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "5ace46ce-3962-43e9-bbb9-f053d8509ef0"
        },
        "item": {
          "id": "4da65587-b3b2-4eae-8d8a-893a3e692396",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "9c518301-9bb5-45e7-a98b-973bdd57e81d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:92)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44a1dfdd-01df-462f-9f99-b42b0cd17e16",
        "cursor": {
          "ref": "149a7e17-89a6-4921-a97d-7f5afdf49ac0",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "1e58abb7-1ddc-4d86-8921-0fa9860b7688"
        },
        "item": {
          "id": "44a1dfdd-01df-462f-9f99-b42b0cd17e16",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "bb0181ff-6bfc-477f-ad87-bb4e8de78da2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:93)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44a1dfdd-01df-462f-9f99-b42b0cd17e16",
        "cursor": {
          "ref": "149a7e17-89a6-4921-a97d-7f5afdf49ac0",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "1e58abb7-1ddc-4d86-8921-0fa9860b7688"
        },
        "item": {
          "id": "44a1dfdd-01df-462f-9f99-b42b0cd17e16",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "bb0181ff-6bfc-477f-ad87-bb4e8de78da2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:93)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5b4702e-fbc0-4496-bc3e-a8ced38c01de",
        "cursor": {
          "ref": "edc1930e-c52c-4b62-8e48-2958463724e1",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "1374bc3b-d4fa-451b-b776-7c843bb7f709"
        },
        "item": {
          "id": "b5b4702e-fbc0-4496-bc3e-a8ced38c01de",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "c6ab293b-ccb5-4ad1-a204-44ad14d0b053",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:94)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5b4702e-fbc0-4496-bc3e-a8ced38c01de",
        "cursor": {
          "ref": "edc1930e-c52c-4b62-8e48-2958463724e1",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "1374bc3b-d4fa-451b-b776-7c843bb7f709"
        },
        "item": {
          "id": "b5b4702e-fbc0-4496-bc3e-a8ced38c01de",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "c6ab293b-ccb5-4ad1-a204-44ad14d0b053",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:94)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2eecce16-39dc-4d11-b378-c743c5552e64",
        "cursor": {
          "ref": "62ee2649-870d-48be-98f4-9178efa3ef81",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "e97e7a89-372f-4c5b-8fc6-90808bd5c207"
        },
        "item": {
          "id": "2eecce16-39dc-4d11-b378-c743c5552e64",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "ed98ad10-878a-4c74-9a83-3f8d5b63bd3b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 85,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:95)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2eecce16-39dc-4d11-b378-c743c5552e64",
        "cursor": {
          "ref": "62ee2649-870d-48be-98f4-9178efa3ef81",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "e97e7a89-372f-4c5b-8fc6-90808bd5c207"
        },
        "item": {
          "id": "2eecce16-39dc-4d11-b378-c743c5552e64",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "ed98ad10-878a-4c74-9a83-3f8d5b63bd3b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 85,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:95)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dcce6e8e-5eae-4cf0-811e-d0ecdc147ecb",
        "cursor": {
          "ref": "d845b7fd-cf3b-4e85-937d-863ee7fb697a",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "b7eed1dc-8074-4c2a-8950-17cc6521484c"
        },
        "item": {
          "id": "dcce6e8e-5eae-4cf0-811e-d0ecdc147ecb",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "acb9e708-98a6-4510-9cd4-f1e837afde50",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:96)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dcce6e8e-5eae-4cf0-811e-d0ecdc147ecb",
        "cursor": {
          "ref": "d845b7fd-cf3b-4e85-937d-863ee7fb697a",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "b7eed1dc-8074-4c2a-8950-17cc6521484c"
        },
        "item": {
          "id": "dcce6e8e-5eae-4cf0-811e-d0ecdc147ecb",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "acb9e708-98a6-4510-9cd4-f1e837afde50",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:96)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f313578-4b7f-461f-a140-8f92114d2c9f",
        "cursor": {
          "ref": "9576eec1-34ec-4a88-a7fe-33cfcbb357f0",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "48708f32-d4e9-4130-a0c0-5fd777235359"
        },
        "item": {
          "id": "2f313578-4b7f-461f-a140-8f92114d2c9f",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "ffa88b02-edf9-4136-b74d-5c3803e0fc7f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:97)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f313578-4b7f-461f-a140-8f92114d2c9f",
        "cursor": {
          "ref": "9576eec1-34ec-4a88-a7fe-33cfcbb357f0",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "48708f32-d4e9-4130-a0c0-5fd777235359"
        },
        "item": {
          "id": "2f313578-4b7f-461f-a140-8f92114d2c9f",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "ffa88b02-edf9-4136-b74d-5c3803e0fc7f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:97)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3551bb8-59e4-4d0c-a08f-5b64c2750f40",
        "cursor": {
          "ref": "571f18f4-25f4-4823-bae2-f2de1ba30292",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "0d31ba9c-18a2-49ac-b821-7029a390589f"
        },
        "item": {
          "id": "d3551bb8-59e4-4d0c-a08f-5b64c2750f40",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "7a1f375c-d57f-4ea7-814d-863a63765545",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:98)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3551bb8-59e4-4d0c-a08f-5b64c2750f40",
        "cursor": {
          "ref": "571f18f4-25f4-4823-bae2-f2de1ba30292",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "0d31ba9c-18a2-49ac-b821-7029a390589f"
        },
        "item": {
          "id": "d3551bb8-59e4-4d0c-a08f-5b64c2750f40",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "7a1f375c-d57f-4ea7-814d-863a63765545",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:98)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b460b77-194e-488e-bc33-572b7b567d74",
        "cursor": {
          "ref": "cad9fdc4-dd63-4cb2-a0f3-5c853b4cd760",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "45dd3323-4fc6-4f9a-84c8-8eddeb9505bd"
        },
        "item": {
          "id": "0b460b77-194e-488e-bc33-572b7b567d74",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "d9eb0145-ea48-47ce-afce-12c7a4a12209",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:99)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b460b77-194e-488e-bc33-572b7b567d74",
        "cursor": {
          "ref": "cad9fdc4-dd63-4cb2-a0f3-5c853b4cd760",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "45dd3323-4fc6-4f9a-84c8-8eddeb9505bd"
        },
        "item": {
          "id": "0b460b77-194e-488e-bc33-572b7b567d74",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "d9eb0145-ea48-47ce-afce-12c7a4a12209",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:99)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b061078e-8a0e-43d9-8302-e234ba3d530a",
        "cursor": {
          "ref": "c3526ff4-8924-4bb6-9ce6-4ff48219a93e",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "5f346a3a-c7e4-44fe-a616-b9af213b98f2"
        },
        "item": {
          "id": "b061078e-8a0e-43d9-8302-e234ba3d530a",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "f2f01898-e4fd-44db-8cbe-59ca012f415e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:100)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b061078e-8a0e-43d9-8302-e234ba3d530a",
        "cursor": {
          "ref": "c3526ff4-8924-4bb6-9ce6-4ff48219a93e",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "5f346a3a-c7e4-44fe-a616-b9af213b98f2"
        },
        "item": {
          "id": "b061078e-8a0e-43d9-8302-e234ba3d530a",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "f2f01898-e4fd-44db-8cbe-59ca012f415e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:100)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9dd41830-c49b-4d0b-988b-c27e04a2cf7f",
        "cursor": {
          "ref": "d06a2575-b5a3-442f-a17b-4ea016319c5f",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "17aeaca5-a326-4a06-8edd-13720ec63c88"
        },
        "item": {
          "id": "9dd41830-c49b-4d0b-988b-c27e04a2cf7f",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "7d8fa167-7cca-4019-8432-55773d001f0c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9dd41830-c49b-4d0b-988b-c27e04a2cf7f",
        "cursor": {
          "ref": "d06a2575-b5a3-442f-a17b-4ea016319c5f",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "17aeaca5-a326-4a06-8edd-13720ec63c88"
        },
        "item": {
          "id": "9dd41830-c49b-4d0b-988b-c27e04a2cf7f",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "7d8fa167-7cca-4019-8432-55773d001f0c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1247cb74-11ed-447b-8419-03b1db881fab",
        "cursor": {
          "ref": "ed6a745c-beb9-498a-a2e7-9183152c6469",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "b6a50a4a-cf63-48a1-aee3-3de6efe1f52c"
        },
        "item": {
          "id": "1247cb74-11ed-447b-8419-03b1db881fab",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "96bf7b9c-7d9c-4532-8e6f-2bf8b8ebb646",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 82,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "1247cb74-11ed-447b-8419-03b1db881fab",
        "cursor": {
          "ref": "ed6a745c-beb9-498a-a2e7-9183152c6469",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "b6a50a4a-cf63-48a1-aee3-3de6efe1f52c"
        },
        "item": {
          "id": "1247cb74-11ed-447b-8419-03b1db881fab",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "96bf7b9c-7d9c-4532-8e6f-2bf8b8ebb646",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 82,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "7fd90862-c1a1-44b6-bfd6-4028345c3c19",
        "cursor": {
          "ref": "1c58d607-96b2-4fe1-a331-3f9b96fb0bf9",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "574a3f9d-25e1-4136-b3e1-527839dcef26"
        },
        "item": {
          "id": "7fd90862-c1a1-44b6-bfd6-4028345c3c19",
          "name": "credentials_issue"
        },
        "response": {
          "id": "a2c42154-debd-42c3-8ec3-80a68aada899",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:103)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:103)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 3,
              "test": "response issuanceDate matches request credential.issuanceDate",
              "message": "Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:4:103)"
            }
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 4,
              "test": "response proof.created is close to 'now'",
              "message": "Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:5:103)"
            }
          }
        ]
      },
      {
        "id": "7fd90862-c1a1-44b6-bfd6-4028345c3c19",
        "cursor": {
          "ref": "1c58d607-96b2-4fe1-a331-3f9b96fb0bf9",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "574a3f9d-25e1-4136-b3e1-527839dcef26"
        },
        "item": {
          "id": "7fd90862-c1a1-44b6-bfd6-4028345c3c19",
          "name": "credentials_issue"
        },
        "response": {
          "id": "a2c42154-debd-42c3-8ec3-80a68aada899",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:103)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:103)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 3,
              "test": "response issuanceDate matches request credential.issuanceDate",
              "message": "Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:4:103)"
            }
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 4,
              "test": "response proof.created is close to 'now'",
              "message": "Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:5:103)"
            }
          }
        ]
      },
      {
        "id": "5c84263f-b382-4f0d-b3a8-ba8ad6702ca1",
        "cursor": {
          "ref": "0fa27663-e895-41cd-ba81-71b1964ec5b3",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "3328a2c9-7573-4916-b9f7-fc785734d47f"
        },
        "item": {
          "id": "5c84263f-b382-4f0d-b3a8-ba8ad6702ca1",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "20e7b5ac-9742-4b9b-ae60-405da081e907",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:104)"
            }
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response verifiableCredential.id matches request credential.id",
              "message": "Cannot read properties of undefined (reading 'id')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'id')\n   at Object.eval sandbox-script.js:3:104)"
            }
          }
        ]
      },
      {
        "id": "5c84263f-b382-4f0d-b3a8-ba8ad6702ca1",
        "cursor": {
          "ref": "0fa27663-e895-41cd-ba81-71b1964ec5b3",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "3328a2c9-7573-4916-b9f7-fc785734d47f"
        },
        "item": {
          "id": "5c84263f-b382-4f0d-b3a8-ba8ad6702ca1",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "20e7b5ac-9742-4b9b-ae60-405da081e907",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:104)"
            }
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response verifiableCredential.id matches request credential.id",
              "message": "Cannot read properties of undefined (reading 'id')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'id')\n   at Object.eval sandbox-script.js:3:104)"
            }
          }
        ]
      },
      {
        "id": "db08fff6-00b6-48df-9c0d-45b5a07888ce",
        "cursor": {
          "ref": "e8ce3520-ecdd-42d9-987c-b844a9679cb9",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "d256042b-d8bf-42b0-b480-597e004380eb"
        },
        "item": {
          "id": "db08fff6-00b6-48df-9c0d-45b5a07888ce",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "e4c28108-1f1c-4632-8c27-1580457aff3c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:105)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer.id",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:105)"
            }
          }
        ]
      },
      {
        "id": "db08fff6-00b6-48df-9c0d-45b5a07888ce",
        "cursor": {
          "ref": "e8ce3520-ecdd-42d9-987c-b844a9679cb9",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "d256042b-d8bf-42b0-b480-597e004380eb"
        },
        "item": {
          "id": "db08fff6-00b6-48df-9c0d-45b5a07888ce",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "e4c28108-1f1c-4632-8c27-1580457aff3c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:105)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer.id",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:105)"
            }
          }
        ]
      },
      {
        "id": "bb1ea000-99e5-40ff-ac3c-0262f834d8a5",
        "cursor": {
          "ref": "6733fbf2-73e7-46cc-9c4f-305bc9abb9a3",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "819d1cbb-ae20-47a0-ab92-9dfca9633cc2"
        },
        "item": {
          "id": "bb1ea000-99e5-40ff-ac3c-0262f834d8a5",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "7b226f67-8c19-44d8-86d3-51013605f6e2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:106)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:106)"
            }
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response credentialSubject.id matches request credential.credentialSubject.id",
              "message": "Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:106)"
            }
          }
        ]
      },
      {
        "id": "bb1ea000-99e5-40ff-ac3c-0262f834d8a5",
        "cursor": {
          "ref": "6733fbf2-73e7-46cc-9c4f-305bc9abb9a3",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "819d1cbb-ae20-47a0-ab92-9dfca9633cc2"
        },
        "item": {
          "id": "bb1ea000-99e5-40ff-ac3c-0262f834d8a5",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "7b226f67-8c19-44d8-86d3-51013605f6e2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:106)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:106)"
            }
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response credentialSubject.id matches request credential.credentialSubject.id",
              "message": "Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:106)"
            }
          }
        ]
      },
      {
        "id": "d3ba2601-b031-4382-96cb-57f7e4c9e07c",
        "cursor": {
          "ref": "94b3bcab-7f2d-4edc-acb7-9ead65cb45d4",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "02eb3233-7643-492e-a0c4-c5d070950ec1"
        },
        "item": {
          "id": "d3ba2601-b031-4382-96cb-57f7e4c9e07c",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "84158285-771b-42b1-bc40-57cd600ae790",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:107)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:107)"
            }
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "Cannot read properties of undefined (reading 'proof')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'proof')\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "d3ba2601-b031-4382-96cb-57f7e4c9e07c",
        "cursor": {
          "ref": "94b3bcab-7f2d-4edc-acb7-9ead65cb45d4",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "02eb3233-7643-492e-a0c4-c5d070950ec1"
        },
        "item": {
          "id": "d3ba2601-b031-4382-96cb-57f7e4c9e07c",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "84158285-771b-42b1-bc40-57cd600ae790",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:107)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:107)"
            }
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "Cannot read properties of undefined (reading 'proof')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'proof')\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "b9eedb77-e330-486c-a63e-9d3f5566cbe6",
        "cursor": {
          "ref": "5081e248-061f-4f84-b5c7-f620cb85e00c",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "49edfa2d-05c4-4393-902a-f1fc17e9fd5d"
        },
        "item": {
          "id": "b9eedb77-e330-486c-a63e-9d3f5566cbe6",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "a6de1480-f7a3-44b5-9066-e408c6e247ca",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:108)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:108)"
            }
          }
        ]
      },
      {
        "id": "b9eedb77-e330-486c-a63e-9d3f5566cbe6",
        "cursor": {
          "ref": "5081e248-061f-4f84-b5c7-f620cb85e00c",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "49edfa2d-05c4-4393-902a-f1fc17e9fd5d"
        },
        "item": {
          "id": "b9eedb77-e330-486c-a63e-9d3f5566cbe6",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "a6de1480-f7a3-44b5-9066-e408c6e247ca",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:108)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:108)"
            }
          }
        ]
      },
      {
        "id": "5dc0c0d4-929d-488a-a89b-02b401460b2d",
        "cursor": {
          "ref": "99060cc6-6d46-4d6d-a118-d764c682ad7b",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "7351bfec-0d54-412b-9405-d05cd1b00d27"
        },
        "item": {
          "id": "5dc0c0d4-929d-488a-a89b-02b401460b2d",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "b9192a67-9004-42f9-9bb2-689343efc3d2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 84,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:109)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5dc0c0d4-929d-488a-a89b-02b401460b2d",
        "cursor": {
          "ref": "99060cc6-6d46-4d6d-a118-d764c682ad7b",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "7351bfec-0d54-412b-9405-d05cd1b00d27"
        },
        "item": {
          "id": "5dc0c0d4-929d-488a-a89b-02b401460b2d",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "b9192a67-9004-42f9-9bb2-689343efc3d2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 84,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:109)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f490bb40-84a6-42f6-b601-3a42a0a35a6d",
        "cursor": {
          "ref": "45e94e49-99d0-45c6-ba2c-14fe07258db0",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "ef1dc5ed-3eca-4ffd-9cec-2590d42ddb06"
        },
        "item": {
          "id": "f490bb40-84a6-42f6-b601-3a42a0a35a6d",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "7e717b21-b123-45fa-a0bc-a893bf68e78b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f490bb40-84a6-42f6-b601-3a42a0a35a6d",
        "cursor": {
          "ref": "45e94e49-99d0-45c6-ba2c-14fe07258db0",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "ef1dc5ed-3eca-4ffd-9cec-2590d42ddb06"
        },
        "item": {
          "id": "f490bb40-84a6-42f6-b601-3a42a0a35a6d",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "7e717b21-b123-45fa-a0bc-a893bf68e78b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c84317a-a288-4d4f-865a-d18b078f5dcb",
        "cursor": {
          "ref": "6c721e31-946f-4340-a401-e88056b31b68",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "4e031b28-3a68-4471-a051-ab26b10767b0"
        },
        "item": {
          "id": "0c84317a-a288-4d4f-865a-d18b078f5dcb",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "98a52632-eb63-413c-aff7-5893a372e49c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c84317a-a288-4d4f-865a-d18b078f5dcb",
        "cursor": {
          "ref": "6c721e31-946f-4340-a401-e88056b31b68",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "4e031b28-3a68-4471-a051-ab26b10767b0"
        },
        "item": {
          "id": "0c84317a-a288-4d4f-865a-d18b078f5dcb",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "98a52632-eb63-413c-aff7-5893a372e49c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73bd2300-448c-4cec-bb8c-8531ef83728a",
        "cursor": {
          "ref": "6ee8b1e3-dd36-4053-800e-3923cd55ec61",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "dc54eba0-3a20-4658-8767-829a8fbc712b"
        },
        "item": {
          "id": "73bd2300-448c-4cec-bb8c-8531ef83728a",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "00cc93ac-2321-48b9-a033-738028e4982b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73bd2300-448c-4cec-bb8c-8531ef83728a",
        "cursor": {
          "ref": "6ee8b1e3-dd36-4053-800e-3923cd55ec61",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "dc54eba0-3a20-4658-8767-829a8fbc712b"
        },
        "item": {
          "id": "73bd2300-448c-4cec-bb8c-8531ef83728a",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "00cc93ac-2321-48b9-a033-738028e4982b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8638e8b4-e721-466d-89a0-89546a5e5113",
        "cursor": {
          "ref": "a5bcf68e-bff4-4934-b87d-d4d3fa221914",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "0252be06-7314-497b-ba49-eda25b8c85cd"
        },
        "item": {
          "id": "8638e8b4-e721-466d-89a0-89546a5e5113",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "a1d5042a-25ac-432b-b9e8-2525a761143c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8638e8b4-e721-466d-89a0-89546a5e5113",
        "cursor": {
          "ref": "a5bcf68e-bff4-4934-b87d-d4d3fa221914",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "0252be06-7314-497b-ba49-eda25b8c85cd"
        },
        "item": {
          "id": "8638e8b4-e721-466d-89a0-89546a5e5113",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "a1d5042a-25ac-432b-b9e8-2525a761143c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba26636f-6b0e-4e16-b4b7-0e60b3ee8f0e",
        "cursor": {
          "ref": "da670995-e7db-422a-bfc9-ea500b49fbf1",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "76e1e370-1e56-4f48-9b29-9d97a98b08af"
        },
        "item": {
          "id": "ba26636f-6b0e-4e16-b4b7-0e60b3ee8f0e",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "16a13ff6-3a98-4026-a6d6-4ccf985383df",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba26636f-6b0e-4e16-b4b7-0e60b3ee8f0e",
        "cursor": {
          "ref": "da670995-e7db-422a-bfc9-ea500b49fbf1",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "76e1e370-1e56-4f48-9b29-9d97a98b08af"
        },
        "item": {
          "id": "ba26636f-6b0e-4e16-b4b7-0e60b3ee8f0e",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "16a13ff6-3a98-4026-a6d6-4ccf985383df",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70004dae-01e7-47aa-a1de-73acf32e6612",
        "cursor": {
          "ref": "35fc67d9-ed46-4288-9ec9-c6e2aaaa8c8c",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "384f3ede-f721-4e69-8524-d55fcbb4bf7f"
        },
        "item": {
          "id": "70004dae-01e7-47aa-a1de-73acf32e6612",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "b36d3998-5c45-46ed-8b3d-d6b476b69c76",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70004dae-01e7-47aa-a1de-73acf32e6612",
        "cursor": {
          "ref": "35fc67d9-ed46-4288-9ec9-c6e2aaaa8c8c",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "384f3ede-f721-4e69-8524-d55fcbb4bf7f"
        },
        "item": {
          "id": "70004dae-01e7-47aa-a1de-73acf32e6612",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "b36d3998-5c45-46ed-8b3d-d6b476b69c76",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dda9d996-df6b-441a-b88e-d4426a886e5d",
        "cursor": {
          "ref": "6c44634a-9184-41e3-b17a-4297b97ada04",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "4c63e841-e67f-4ebe-974e-8528c33caabc"
        },
        "item": {
          "id": "dda9d996-df6b-441a-b88e-d4426a886e5d",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "11ea360d-3889-41d1-b1e9-72f24a845349",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 87,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dda9d996-df6b-441a-b88e-d4426a886e5d",
        "cursor": {
          "ref": "6c44634a-9184-41e3-b17a-4297b97ada04",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "4c63e841-e67f-4ebe-974e-8528c33caabc"
        },
        "item": {
          "id": "dda9d996-df6b-441a-b88e-d4426a886e5d",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "11ea360d-3889-41d1-b1e9-72f24a845349",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 87,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6fffdbde-7468-410b-8fba-0bc50f1113db",
        "cursor": {
          "ref": "f8aea118-94c5-4b29-86d5-388b16ff6658",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "1d37c34d-fafc-4dc9-93ae-f622533c6db0"
        },
        "item": {
          "id": "6fffdbde-7468-410b-8fba-0bc50f1113db",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "be09dec8-41f3-4dd7-934b-380fca123eef",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 73,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6fffdbde-7468-410b-8fba-0bc50f1113db",
        "cursor": {
          "ref": "f8aea118-94c5-4b29-86d5-388b16ff6658",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "1d37c34d-fafc-4dc9-93ae-f622533c6db0"
        },
        "item": {
          "id": "6fffdbde-7468-410b-8fba-0bc50f1113db",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "be09dec8-41f3-4dd7-934b-380fca123eef",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 73,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ea77865-2305-429b-9fab-70d9d8ce977b",
        "cursor": {
          "ref": "bfe14b96-fba1-40f1-b20f-4432ed7a509e",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "c79920ad-d19e-4eb4-a719-17a8cdd8f329"
        },
        "item": {
          "id": "9ea77865-2305-429b-9fab-70d9d8ce977b",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "017b9fe3-88ab-45d8-8f24-16330119483a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ea77865-2305-429b-9fab-70d9d8ce977b",
        "cursor": {
          "ref": "bfe14b96-fba1-40f1-b20f-4432ed7a509e",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "c79920ad-d19e-4eb4-a719-17a8cdd8f329"
        },
        "item": {
          "id": "9ea77865-2305-429b-9fab-70d9d8ce977b",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "017b9fe3-88ab-45d8-8f24-16330119483a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c128d1b-7068-438b-acd8-6ef1e1f838d0",
        "cursor": {
          "ref": "00c424bd-2564-49a3-8b23-cd17be7a69f9",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "42a532dd-a775-45a3-98f7-c0790b47174f"
        },
        "item": {
          "id": "3c128d1b-7068-438b-acd8-6ef1e1f838d0",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "11fc50b0-75a3-4dec-bc3e-439862bd7a31",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c128d1b-7068-438b-acd8-6ef1e1f838d0",
        "cursor": {
          "ref": "00c424bd-2564-49a3-8b23-cd17be7a69f9",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "42a532dd-a775-45a3-98f7-c0790b47174f"
        },
        "item": {
          "id": "3c128d1b-7068-438b-acd8-6ef1e1f838d0",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "11fc50b0-75a3-4dec-bc3e-439862bd7a31",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32c1c95f-0025-43f1-8551-3e29dd77cab8",
        "cursor": {
          "ref": "56c7ae88-940b-445c-acbc-fba8016d1caa",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "f54ea7dd-840f-4662-8c77-afca1217b77b"
        },
        "item": {
          "id": "32c1c95f-0025-43f1-8551-3e29dd77cab8",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "ef1b0dda-1c1e-4b65-8699-5d5b81c76b50",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32c1c95f-0025-43f1-8551-3e29dd77cab8",
        "cursor": {
          "ref": "56c7ae88-940b-445c-acbc-fba8016d1caa",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "f54ea7dd-840f-4662-8c77-afca1217b77b"
        },
        "item": {
          "id": "32c1c95f-0025-43f1-8551-3e29dd77cab8",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "ef1b0dda-1c1e-4b65-8699-5d5b81c76b50",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7b795e8-1d95-4d3e-91af-5486247332ec",
        "cursor": {
          "ref": "a2320fac-5bd9-4355-a682-118a2064a040",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "1e87b9dc-199a-44b3-9c3a-2caf05423fd4"
        },
        "item": {
          "id": "a7b795e8-1d95-4d3e-91af-5486247332ec",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "a11af159-4c3c-468b-bdda-d4c3333f645e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 83,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7b795e8-1d95-4d3e-91af-5486247332ec",
        "cursor": {
          "ref": "a2320fac-5bd9-4355-a682-118a2064a040",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "1e87b9dc-199a-44b3-9c3a-2caf05423fd4"
        },
        "item": {
          "id": "a7b795e8-1d95-4d3e-91af-5486247332ec",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "a11af159-4c3c-468b-bdda-d4c3333f645e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 83,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48482760-0170-4547-a391-98f5611fe69a",
        "cursor": {
          "ref": "e4a684fd-3c56-42d2-8922-c807cb20e860",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "73c08ebb-673f-4a87-8f22-dc25cd6f5da6"
        },
        "item": {
          "id": "48482760-0170-4547-a391-98f5611fe69a",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "064cc304-3063-4281-9298-516329d02de7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 82,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48482760-0170-4547-a391-98f5611fe69a",
        "cursor": {
          "ref": "e4a684fd-3c56-42d2-8922-c807cb20e860",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "73c08ebb-673f-4a87-8f22-dc25cd6f5da6"
        },
        "item": {
          "id": "48482760-0170-4547-a391-98f5611fe69a",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "064cc304-3063-4281-9298-516329d02de7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 82,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6bd60adb-165e-4204-a694-68c171339512",
        "cursor": {
          "ref": "a64e042e-7b93-47a9-a099-c9cbdc660b75",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "0a2a6d63-1056-4fa2-9966-e1ac8b44cd88"
        },
        "item": {
          "id": "6bd60adb-165e-4204-a694-68c171339512",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "69e1b619-8732-4d09-a14e-6bb942334862",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6bd60adb-165e-4204-a694-68c171339512",
        "cursor": {
          "ref": "a64e042e-7b93-47a9-a099-c9cbdc660b75",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "0a2a6d63-1056-4fa2-9966-e1ac8b44cd88"
        },
        "item": {
          "id": "6bd60adb-165e-4204-a694-68c171339512",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "69e1b619-8732-4d09-a14e-6bb942334862",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89cf4718-5c30-4645-a91f-b688008ab5e2",
        "cursor": {
          "ref": "590ea184-2897-4a99-a433-d066cbc28ca5",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "4d5b3cdf-1df0-4883-b863-d219078de9eb"
        },
        "item": {
          "id": "89cf4718-5c30-4645-a91f-b688008ab5e2",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "ee83956a-9eac-493e-b325-8af836527835",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89cf4718-5c30-4645-a91f-b688008ab5e2",
        "cursor": {
          "ref": "590ea184-2897-4a99-a433-d066cbc28ca5",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "4d5b3cdf-1df0-4883-b863-d219078de9eb"
        },
        "item": {
          "id": "89cf4718-5c30-4645-a91f-b688008ab5e2",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "ee83956a-9eac-493e-b325-8af836527835",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9f1ed4c-6fba-4bfe-8c49-75a11474d1f0",
        "cursor": {
          "ref": "66d774d2-57fa-4177-b901-6be1b954b90d",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "564ae3bb-6847-41e3-8505-427d827fa811"
        },
        "item": {
          "id": "c9f1ed4c-6fba-4bfe-8c49-75a11474d1f0",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "c1c99787-7edf-417e-bc77-ce299c7f950e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 82,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9f1ed4c-6fba-4bfe-8c49-75a11474d1f0",
        "cursor": {
          "ref": "66d774d2-57fa-4177-b901-6be1b954b90d",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "564ae3bb-6847-41e3-8505-427d827fa811"
        },
        "item": {
          "id": "c9f1ed4c-6fba-4bfe-8c49-75a11474d1f0",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "c1c99787-7edf-417e-bc77-ce299c7f950e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 82,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe45dcf0-3d59-4c01-8922-6139b59b2e52",
        "cursor": {
          "ref": "588d2997-23ab-49cb-8ae8-21baf85f7eb5",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "c77cf58e-3da0-49a3-ab61-692096f16da9"
        },
        "item": {
          "id": "fe45dcf0-3d59-4c01-8922-6139b59b2e52",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "06798827-e6ae-45b7-8e23-35af976a5845",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe45dcf0-3d59-4c01-8922-6139b59b2e52",
        "cursor": {
          "ref": "588d2997-23ab-49cb-8ae8-21baf85f7eb5",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "c77cf58e-3da0-49a3-ab61-692096f16da9"
        },
        "item": {
          "id": "fe45dcf0-3d59-4c01-8922-6139b59b2e52",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "06798827-e6ae-45b7-8e23-35af976a5845",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad985cf0-eb14-43e3-9b24-618084a0da3f",
        "cursor": {
          "ref": "5b10ef85-64a6-4a01-86f2-cc001527049b",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "ebae37d9-152a-4ec2-a14f-a3eef462abca"
        },
        "item": {
          "id": "ad985cf0-eb14-43e3-9b24-618084a0da3f",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "322a9a8a-9f8c-4102-b3a1-172fc35857da",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad985cf0-eb14-43e3-9b24-618084a0da3f",
        "cursor": {
          "ref": "5b10ef85-64a6-4a01-86f2-cc001527049b",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "ebae37d9-152a-4ec2-a14f-a3eef462abca"
        },
        "item": {
          "id": "ad985cf0-eb14-43e3-9b24-618084a0da3f",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "322a9a8a-9f8c-4102-b3a1-172fc35857da",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6a80878-74f4-46bb-a8a4-cedbb3de24ef",
        "cursor": {
          "ref": "d2129773-103c-4ac4-8fed-708ea7d8ff20",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "a0d01d1a-b0df-49df-8f55-4b3894ea047c"
        },
        "item": {
          "id": "f6a80878-74f4-46bb-a8a4-cedbb3de24ef",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "1b682988-869b-4126-9f08-d35b5e8b2a33",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 82,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6a80878-74f4-46bb-a8a4-cedbb3de24ef",
        "cursor": {
          "ref": "d2129773-103c-4ac4-8fed-708ea7d8ff20",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "a0d01d1a-b0df-49df-8f55-4b3894ea047c"
        },
        "item": {
          "id": "f6a80878-74f4-46bb-a8a4-cedbb3de24ef",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "1b682988-869b-4126-9f08-d35b5e8b2a33",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 82,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a297a7a5-d5ce-4924-9e22-663a0432e760",
        "cursor": {
          "ref": "67d33642-11b0-43d4-aba1-e7008563e8be",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "6b6ca03a-8435-4ab6-af7f-0ff012c42e26"
        },
        "item": {
          "id": "a297a7a5-d5ce-4924-9e22-663a0432e760",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "d8397995-42ad-499a-957c-a0405af84836",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a297a7a5-d5ce-4924-9e22-663a0432e760",
        "cursor": {
          "ref": "67d33642-11b0-43d4-aba1-e7008563e8be",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "6b6ca03a-8435-4ab6-af7f-0ff012c42e26"
        },
        "item": {
          "id": "a297a7a5-d5ce-4924-9e22-663a0432e760",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "d8397995-42ad-499a-957c-a0405af84836",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef5263db-6ff2-4a97-a9fa-f6e603bdbb5f",
        "cursor": {
          "ref": "f35c7b64-5cb2-4192-b08d-7229ce9a6b26",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "3bffea75-1aa5-4937-a1e1-9a7aee8fd35c"
        },
        "item": {
          "id": "ef5263db-6ff2-4a97-a9fa-f6e603bdbb5f",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "c19369fd-01a1-4966-bbc6-fd038e70202e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef5263db-6ff2-4a97-a9fa-f6e603bdbb5f",
        "cursor": {
          "ref": "f35c7b64-5cb2-4192-b08d-7229ce9a6b26",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "3bffea75-1aa5-4937-a1e1-9a7aee8fd35c"
        },
        "item": {
          "id": "ef5263db-6ff2-4a97-a9fa-f6e603bdbb5f",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "c19369fd-01a1-4966-bbc6-fd038e70202e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03a47aa2-0165-4c56-b012-7b4f6561b75d",
        "cursor": {
          "ref": "130bee87-2ebe-42c0-b417-3646641aff97",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "a4909888-8362-466d-9faf-7970555eb377"
        },
        "item": {
          "id": "03a47aa2-0165-4c56-b012-7b4f6561b75d",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "54f31497-5838-4cf2-9201-54fea55fb2c7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03a47aa2-0165-4c56-b012-7b4f6561b75d",
        "cursor": {
          "ref": "130bee87-2ebe-42c0-b417-3646641aff97",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "a4909888-8362-466d-9faf-7970555eb377"
        },
        "item": {
          "id": "03a47aa2-0165-4c56-b012-7b4f6561b75d",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "54f31497-5838-4cf2-9201-54fea55fb2c7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64272d62-ef41-4250-9824-73bf8257c465",
        "cursor": {
          "ref": "525885a8-fcc5-447f-876b-627d38d8f279",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "2e20cc19-4090-49d6-afbd-6076c938854e"
        },
        "item": {
          "id": "64272d62-ef41-4250-9824-73bf8257c465",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "15dfe2f8-ea86-4f12-9e6c-22af6601d9ae",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 87,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64272d62-ef41-4250-9824-73bf8257c465",
        "cursor": {
          "ref": "525885a8-fcc5-447f-876b-627d38d8f279",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "2e20cc19-4090-49d6-afbd-6076c938854e"
        },
        "item": {
          "id": "64272d62-ef41-4250-9824-73bf8257c465",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "15dfe2f8-ea86-4f12-9e6c-22af6601d9ae",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 87,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6cec8753-b3f2-414d-9bb1-e114b7c4e261",
        "cursor": {
          "ref": "b0534ed0-2328-4584-a619-90ea06419c72",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "cbb12fe8-5f15-4f39-83c5-9c148d856fc0"
        },
        "item": {
          "id": "6cec8753-b3f2-414d-9bb1-e114b7c4e261",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "9e71e744-b7c9-4c8f-9986-f3cffb0b3206",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 88,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6cec8753-b3f2-414d-9bb1-e114b7c4e261",
        "cursor": {
          "ref": "b0534ed0-2328-4584-a619-90ea06419c72",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "cbb12fe8-5f15-4f39-83c5-9c148d856fc0"
        },
        "item": {
          "id": "6cec8753-b3f2-414d-9bb1-e114b7c4e261",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "9e71e744-b7c9-4c8f-9986-f3cffb0b3206",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 88,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70f611b5-79e8-4b7f-be8b-0253d328a6e9",
        "cursor": {
          "ref": "16c208c7-5969-4bef-bf82-3c158750df5f",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "03c79159-1e42-4db8-b1f6-f75dbdc52947"
        },
        "item": {
          "id": "70f611b5-79e8-4b7f-be8b-0253d328a6e9",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "8e8c540a-5976-4a3d-87f3-e3d0f1f08e9a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70f611b5-79e8-4b7f-be8b-0253d328a6e9",
        "cursor": {
          "ref": "16c208c7-5969-4bef-bf82-3c158750df5f",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "03c79159-1e42-4db8-b1f6-f75dbdc52947"
        },
        "item": {
          "id": "70f611b5-79e8-4b7f-be8b-0253d328a6e9",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "8e8c540a-5976-4a3d-87f3-e3d0f1f08e9a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48abcec8-2cdd-4492-a404-59ecc3a7aaf8",
        "cursor": {
          "ref": "c4210bc1-1e7c-4011-ae15-eabac3a7ace2",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "e4e17f4c-9712-4633-9c0d-5ab0ecba4c82"
        },
        "item": {
          "id": "48abcec8-2cdd-4492-a404-59ecc3a7aaf8",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "f18d59ba-2acb-4e83-8341-a5588e05b022",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48abcec8-2cdd-4492-a404-59ecc3a7aaf8",
        "cursor": {
          "ref": "c4210bc1-1e7c-4011-ae15-eabac3a7ace2",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "e4e17f4c-9712-4633-9c0d-5ab0ecba4c82"
        },
        "item": {
          "id": "48abcec8-2cdd-4492-a404-59ecc3a7aaf8",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "f18d59ba-2acb-4e83-8341-a5588e05b022",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "acb4b309-8304-4759-a2b4-300fb8a1d0ca",
        "cursor": {
          "ref": "4701091a-4641-4f53-a6b5-56f8867434e8",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "fa635b23-1472-4dcf-9455-3b37d9035593"
        },
        "item": {
          "id": "acb4b309-8304-4759-a2b4-300fb8a1d0ca",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "ba38d118-c72e-4511-a8fe-1d945dc189da",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "acb4b309-8304-4759-a2b4-300fb8a1d0ca",
        "cursor": {
          "ref": "4701091a-4641-4f53-a6b5-56f8867434e8",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "fa635b23-1472-4dcf-9455-3b37d9035593"
        },
        "item": {
          "id": "acb4b309-8304-4759-a2b4-300fb8a1d0ca",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "ba38d118-c72e-4511-a8fe-1d945dc189da",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "849427a1-a8d1-49d9-a381-2a8513173cbc",
        "cursor": {
          "ref": "ecbcc0a1-d568-4a2e-8261-8834461601d5",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "f03201d8-038d-47ad-9aba-b4091b0a78ae"
        },
        "item": {
          "id": "849427a1-a8d1-49d9-a381-2a8513173cbc",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "1410f5d4-0596-447f-ba80-036d00cf7d54",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 91,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "849427a1-a8d1-49d9-a381-2a8513173cbc",
        "cursor": {
          "ref": "ecbcc0a1-d568-4a2e-8261-8834461601d5",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "f03201d8-038d-47ad-9aba-b4091b0a78ae"
        },
        "item": {
          "id": "849427a1-a8d1-49d9-a381-2a8513173cbc",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "1410f5d4-0596-447f-ba80-036d00cf7d54",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 91,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b337d3a-1f43-47cb-82eb-98e461157cb4",
        "cursor": {
          "ref": "65da3022-fa38-48cf-b5ee-e6b4fc4f2a14",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "553cf658-18da-4bfb-a0d4-7de80e1b70a0"
        },
        "item": {
          "id": "0b337d3a-1f43-47cb-82eb-98e461157cb4",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "f7a58868-edb1-49e0-a9de-9b525d0b9aed",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b337d3a-1f43-47cb-82eb-98e461157cb4",
        "cursor": {
          "ref": "65da3022-fa38-48cf-b5ee-e6b4fc4f2a14",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "553cf658-18da-4bfb-a0d4-7de80e1b70a0"
        },
        "item": {
          "id": "0b337d3a-1f43-47cb-82eb-98e461157cb4",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "f7a58868-edb1-49e0-a9de-9b525d0b9aed",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b559c49-70cc-4bf8-bcba-c9e92b882227",
        "cursor": {
          "ref": "29a8d8fc-e8fa-4b11-aa31-bcb899470f3e",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "716ebb0f-1fcd-4066-b8ee-7ca78f60d240"
        },
        "item": {
          "id": "2b559c49-70cc-4bf8-bcba-c9e92b882227",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "e81d8fc8-e13e-40cb-9ce7-4f72b34c85c1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b559c49-70cc-4bf8-bcba-c9e92b882227",
        "cursor": {
          "ref": "29a8d8fc-e8fa-4b11-aa31-bcb899470f3e",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "716ebb0f-1fcd-4066-b8ee-7ca78f60d240"
        },
        "item": {
          "id": "2b559c49-70cc-4bf8-bcba-c9e92b882227",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "e81d8fc8-e13e-40cb-9ce7-4f72b34c85c1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "afe4410d-b3dc-49ba-a60d-ac06989da685",
        "cursor": {
          "ref": "8187be79-bbdc-4ada-8f1e-9675dc048490",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "db92e9d1-d3d3-4343-af8b-8c9907e7bbad"
        },
        "item": {
          "id": "afe4410d-b3dc-49ba-a60d-ac06989da685",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "4cf781c1-cca0-4d70-836e-cc8a20caaf05",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 84,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "afe4410d-b3dc-49ba-a60d-ac06989da685",
        "cursor": {
          "ref": "8187be79-bbdc-4ada-8f1e-9675dc048490",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "db92e9d1-d3d3-4343-af8b-8c9907e7bbad"
        },
        "item": {
          "id": "afe4410d-b3dc-49ba-a60d-ac06989da685",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "4cf781c1-cca0-4d70-836e-cc8a20caaf05",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 84,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "737f0c1b-e9c0-4c80-ba49-06faf77db8c9",
        "cursor": {
          "ref": "48db9967-e7c5-46a9-af14-0aba372e4b14",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "13e17feb-7bfc-4fb4-bc5b-958c75ef7071"
        },
        "item": {
          "id": "737f0c1b-e9c0-4c80-ba49-06faf77db8c9",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "a3e2a715-c4bb-4fa8-ad67-c96fdcd32093",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "737f0c1b-e9c0-4c80-ba49-06faf77db8c9",
        "cursor": {
          "ref": "48db9967-e7c5-46a9-af14-0aba372e4b14",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "13e17feb-7bfc-4fb4-bc5b-958c75ef7071"
        },
        "item": {
          "id": "737f0c1b-e9c0-4c80-ba49-06faf77db8c9",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "a3e2a715-c4bb-4fa8-ad67-c96fdcd32093",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1160b25c-6963-4387-a1eb-5b5480aa472a",
        "cursor": {
          "ref": "19df6d30-81ad-4eb7-a411-8485cadb00e5",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "d48f5df0-3558-487f-b2b4-4994825435b8"
        },
        "item": {
          "id": "1160b25c-6963-4387-a1eb-5b5480aa472a",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "0e56219e-0110-4e55-a8bc-c811d623a264",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1160b25c-6963-4387-a1eb-5b5480aa472a",
        "cursor": {
          "ref": "19df6d30-81ad-4eb7-a411-8485cadb00e5",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "d48f5df0-3558-487f-b2b4-4994825435b8"
        },
        "item": {
          "id": "1160b25c-6963-4387-a1eb-5b5480aa472a",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "0e56219e-0110-4e55-a8bc-c811d623a264",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "acb43258-41d2-4264-95f8-7245cd67a24b",
        "cursor": {
          "ref": "3c3d3109-86df-45f0-8123-6bfe5abbf413",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "092fa35f-ce23-430b-930f-71a6449fdb62"
        },
        "item": {
          "id": "acb43258-41d2-4264-95f8-7245cd67a24b",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "590eaef6-95c3-44f4-8f68-cd93fc9aceb4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "acb43258-41d2-4264-95f8-7245cd67a24b",
        "cursor": {
          "ref": "3c3d3109-86df-45f0-8123-6bfe5abbf413",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "092fa35f-ce23-430b-930f-71a6449fdb62"
        },
        "item": {
          "id": "acb43258-41d2-4264-95f8-7245cd67a24b",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "590eaef6-95c3-44f4-8f68-cd93fc9aceb4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52793cab-8cac-407b-b434-4029d49fb760",
        "cursor": {
          "ref": "719d8cc9-56ac-4869-b62e-cc6ca10686a0",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "2d2bca75-3b55-4828-b9ee-b504fc0f0ec7"
        },
        "item": {
          "id": "52793cab-8cac-407b-b434-4029d49fb760",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "870a654c-029a-4edd-96da-392463c28eef",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:144)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52793cab-8cac-407b-b434-4029d49fb760",
        "cursor": {
          "ref": "719d8cc9-56ac-4869-b62e-cc6ca10686a0",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "2d2bca75-3b55-4828-b9ee-b504fc0f0ec7"
        },
        "item": {
          "id": "52793cab-8cac-407b-b434-4029d49fb760",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "870a654c-029a-4edd-96da-392463c28eef",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:144)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5758ed9e-e48d-40b7-86ef-c357d7be3f71",
        "cursor": {
          "ref": "bd9af95f-54d9-40f8-832a-c77cc99c77ca",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "c893e277-2410-4692-ba99-7819da01e61b"
        },
        "item": {
          "id": "5758ed9e-e48d-40b7-86ef-c357d7be3f71",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "54b26752-9347-4470-a388-ec3b833c3deb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:145)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5758ed9e-e48d-40b7-86ef-c357d7be3f71",
        "cursor": {
          "ref": "bd9af95f-54d9-40f8-832a-c77cc99c77ca",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "c893e277-2410-4692-ba99-7819da01e61b"
        },
        "item": {
          "id": "5758ed9e-e48d-40b7-86ef-c357d7be3f71",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "54b26752-9347-4470-a388-ec3b833c3deb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:145)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b73f8a2-1b51-46cf-b463-9563f6b34124",
        "cursor": {
          "ref": "659b838a-2e78-4388-99d4-488936b2c274",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "54ac92f1-369b-4e9f-bb44-fbe0a7b37b63"
        },
        "item": {
          "id": "3b73f8a2-1b51-46cf-b463-9563f6b34124",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "d3e21922-e66e-49fc-83f4-92919e5e509f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 82,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:146)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b73f8a2-1b51-46cf-b463-9563f6b34124",
        "cursor": {
          "ref": "659b838a-2e78-4388-99d4-488936b2c274",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "54ac92f1-369b-4e9f-bb44-fbe0a7b37b63"
        },
        "item": {
          "id": "3b73f8a2-1b51-46cf-b463-9563f6b34124",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "d3e21922-e66e-49fc-83f4-92919e5e509f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 82,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:146)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17915879-504e-4d93-b965-ec403f6f9658",
        "cursor": {
          "ref": "f26f4ce5-46aa-402e-9f79-52bddfb6ac86",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "6e95296f-a7aa-4e1f-aec6-93a20f3857cd"
        },
        "item": {
          "id": "17915879-504e-4d93-b965-ec403f6f9658",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "75918058-c42c-44b4-9f15-cd026861798d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:147)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17915879-504e-4d93-b965-ec403f6f9658",
        "cursor": {
          "ref": "f26f4ce5-46aa-402e-9f79-52bddfb6ac86",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "6e95296f-a7aa-4e1f-aec6-93a20f3857cd"
        },
        "item": {
          "id": "17915879-504e-4d93-b965-ec403f6f9658",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "75918058-c42c-44b4-9f15-cd026861798d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:147)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae4f0b24-12d0-4814-b10d-c0ebb3b9fa28",
        "cursor": {
          "ref": "5d403971-8ba7-40fd-8ec6-cd895ac3f462",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "4cccf7ea-4b96-4566-99c8-aa4ec6064ce6"
        },
        "item": {
          "id": "ae4f0b24-12d0-4814-b10d-c0ebb3b9fa28",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "e67515f3-2fa8-487d-8e25-6c04a6fd7002",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:148)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae4f0b24-12d0-4814-b10d-c0ebb3b9fa28",
        "cursor": {
          "ref": "5d403971-8ba7-40fd-8ec6-cd895ac3f462",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "4cccf7ea-4b96-4566-99c8-aa4ec6064ce6"
        },
        "item": {
          "id": "ae4f0b24-12d0-4814-b10d-c0ebb3b9fa28",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "e67515f3-2fa8-487d-8e25-6c04a6fd7002",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:148)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f79ee340-89fc-41e6-9c3e-b5ab0d7e0f98",
        "cursor": {
          "ref": "4f0a8878-6a41-4ca3-9cf2-10847e6fb936",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "14da6da5-96e0-46bb-9779-debe7f833af8"
        },
        "item": {
          "id": "f79ee340-89fc-41e6-9c3e-b5ab0d7e0f98",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "edc6fa30-eb3e-4c3a-bd23-15adc233c34a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:149)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f79ee340-89fc-41e6-9c3e-b5ab0d7e0f98",
        "cursor": {
          "ref": "4f0a8878-6a41-4ca3-9cf2-10847e6fb936",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "14da6da5-96e0-46bb-9779-debe7f833af8"
        },
        "item": {
          "id": "f79ee340-89fc-41e6-9c3e-b5ab0d7e0f98",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "edc6fa30-eb3e-4c3a-bd23-15adc233c34a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:149)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ed6804e-06a6-4904-80ba-8b1daf2d5883",
        "cursor": {
          "ref": "77023c11-6085-4150-b37f-4f39930b4ac0",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "e4d2b318-446d-4902-a510-d1c7f287b090"
        },
        "item": {
          "id": "0ed6804e-06a6-4904-80ba-8b1daf2d5883",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "30478a1c-1097-475f-9ded-0695b92b6e7d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 89,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:150)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ed6804e-06a6-4904-80ba-8b1daf2d5883",
        "cursor": {
          "ref": "77023c11-6085-4150-b37f-4f39930b4ac0",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "e4d2b318-446d-4902-a510-d1c7f287b090"
        },
        "item": {
          "id": "0ed6804e-06a6-4904-80ba-8b1daf2d5883",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "30478a1c-1097-475f-9ded-0695b92b6e7d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 89,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:150)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a73ec28d-af53-4d40-bdeb-f73ce3ce47e6",
        "cursor": {
          "ref": "f6305d4b-022c-41ca-98ca-fd7876e59f80",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "d9acfb82-1c68-4908-8000-bdc3cf824b03"
        },
        "item": {
          "id": "a73ec28d-af53-4d40-bdeb-f73ce3ce47e6",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "76aa9743-3847-46f8-b8cc-146b911d76d7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:151)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a73ec28d-af53-4d40-bdeb-f73ce3ce47e6",
        "cursor": {
          "ref": "f6305d4b-022c-41ca-98ca-fd7876e59f80",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "d9acfb82-1c68-4908-8000-bdc3cf824b03"
        },
        "item": {
          "id": "a73ec28d-af53-4d40-bdeb-f73ce3ce47e6",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "76aa9743-3847-46f8-b8cc-146b911d76d7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:151)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e8859fc-7070-4b11-a0c0-e15558f53a88",
        "cursor": {
          "ref": "a895a43e-ddc3-4eb4-9467-ae91d4c0588e",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "b2b0b957-8c95-45c8-80b3-a9d96025816e"
        },
        "item": {
          "id": "7e8859fc-7070-4b11-a0c0-e15558f53a88",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "09ad3894-3594-41eb-aa4d-a46bdc5be231",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 88,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e8859fc-7070-4b11-a0c0-e15558f53a88",
        "cursor": {
          "ref": "a895a43e-ddc3-4eb4-9467-ae91d4c0588e",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "b2b0b957-8c95-45c8-80b3-a9d96025816e"
        },
        "item": {
          "id": "7e8859fc-7070-4b11-a0c0-e15558f53a88",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "09ad3894-3594-41eb-aa4d-a46bdc5be231",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 88,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26c0b122-e419-4940-9021-24ed69a32236",
        "cursor": {
          "ref": "8e75b8b9-8f2f-4996-a093-3709db0d78f1",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "4b7bdcb0-8a70-4830-94c8-c94d198ef1c4"
        },
        "item": {
          "id": "26c0b122-e419-4940-9021-24ed69a32236",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "602f6798-9315-4b4a-ab24-a54143354264",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 82,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:153)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26c0b122-e419-4940-9021-24ed69a32236",
        "cursor": {
          "ref": "8e75b8b9-8f2f-4996-a093-3709db0d78f1",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "4b7bdcb0-8a70-4830-94c8-c94d198ef1c4"
        },
        "item": {
          "id": "26c0b122-e419-4940-9021-24ed69a32236",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "602f6798-9315-4b4a-ab24-a54143354264",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 82,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:153)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "534d4c2d-0436-485c-ae96-76676b0cbf98",
        "cursor": {
          "ref": "b2e6cadb-f5aa-43ed-8f5f-fb7e0f686b8d",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "e532058d-85bd-4e2e-988a-adb0a8ffee20"
        },
        "item": {
          "id": "534d4c2d-0436-485c-ae96-76676b0cbf98",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "5db8a292-6bb7-407a-950e-a78447a81803",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:154)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "534d4c2d-0436-485c-ae96-76676b0cbf98",
        "cursor": {
          "ref": "b2e6cadb-f5aa-43ed-8f5f-fb7e0f686b8d",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "e532058d-85bd-4e2e-988a-adb0a8ffee20"
        },
        "item": {
          "id": "534d4c2d-0436-485c-ae96-76676b0cbf98",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "5db8a292-6bb7-407a-950e-a78447a81803",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:154)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8770e4bf-2d49-4c53-99f8-db34af2d0398",
        "cursor": {
          "ref": "ff84f331-0d21-4eb2-9fcd-ab940b6954d8",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "19d6ffd3-4036-4a99-816c-728ca91a6714"
        },
        "item": {
          "id": "8770e4bf-2d49-4c53-99f8-db34af2d0398",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "1d2ae81f-96ac-4197-997e-65a39b6b21db",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8770e4bf-2d49-4c53-99f8-db34af2d0398",
        "cursor": {
          "ref": "ff84f331-0d21-4eb2-9fcd-ab940b6954d8",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "19d6ffd3-4036-4a99-816c-728ca91a6714"
        },
        "item": {
          "id": "8770e4bf-2d49-4c53-99f8-db34af2d0398",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "1d2ae81f-96ac-4197-997e-65a39b6b21db",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4ff8610-3187-436d-a04d-61ad19c80664",
        "cursor": {
          "ref": "3be2de23-bed2-47a4-8914-ffe1ac36052a",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "9b01727b-25af-4a78-978d-ccd354be1d14"
        },
        "item": {
          "id": "a4ff8610-3187-436d-a04d-61ad19c80664",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "db2ca02e-573b-405b-9b57-c2ad36f38a17",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:156)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4ff8610-3187-436d-a04d-61ad19c80664",
        "cursor": {
          "ref": "3be2de23-bed2-47a4-8914-ffe1ac36052a",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "9b01727b-25af-4a78-978d-ccd354be1d14"
        },
        "item": {
          "id": "a4ff8610-3187-436d-a04d-61ad19c80664",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "db2ca02e-573b-405b-9b57-c2ad36f38a17",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:156)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fca5ee77-bd86-47d5-93f5-08cee93c0ea5",
        "cursor": {
          "ref": "c15400e5-ac78-4856-93de-263fec213eb7",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "35bb1bb9-1909-4381-b186-cd21f6beaf8f"
        },
        "item": {
          "id": "fca5ee77-bd86-47d5-93f5-08cee93c0ea5",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "c96d3231-67f1-42ec-a52e-196990b5b8fe",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 84,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:157)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fca5ee77-bd86-47d5-93f5-08cee93c0ea5",
        "cursor": {
          "ref": "c15400e5-ac78-4856-93de-263fec213eb7",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "35bb1bb9-1909-4381-b186-cd21f6beaf8f"
        },
        "item": {
          "id": "fca5ee77-bd86-47d5-93f5-08cee93c0ea5",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "c96d3231-67f1-42ec-a52e-196990b5b8fe",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 84,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:157)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "377cd4ad-1d1f-422e-af86-4011143485f7",
        "cursor": {
          "ref": "1af9413f-96a4-47ad-9b6b-deeba8fc2592",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "1e49faa4-9c63-4842-add9-20c4cfa88a30"
        },
        "item": {
          "id": "377cd4ad-1d1f-422e-af86-4011143485f7",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "ebd6a32e-ab5b-4ff9-96a2-c47217cfce26",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:158)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "377cd4ad-1d1f-422e-af86-4011143485f7",
        "cursor": {
          "ref": "1af9413f-96a4-47ad-9b6b-deeba8fc2592",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "1e49faa4-9c63-4842-add9-20c4cfa88a30"
        },
        "item": {
          "id": "377cd4ad-1d1f-422e-af86-4011143485f7",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "ebd6a32e-ab5b-4ff9-96a2-c47217cfce26",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:158)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9b2c0f9-32a3-4471-8f93-c32cc6ace877",
        "cursor": {
          "ref": "1473bb44-9777-4cca-9c6a-a99ff7c35ffb",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "1f6e8092-c695-4e04-a6a9-a9250da63f88"
        },
        "item": {
          "id": "c9b2c0f9-32a3-4471-8f93-c32cc6ace877",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "796b496e-f3d3-492b-8b87-d00ad8beaba8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:159)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9b2c0f9-32a3-4471-8f93-c32cc6ace877",
        "cursor": {
          "ref": "1473bb44-9777-4cca-9c6a-a99ff7c35ffb",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "1f6e8092-c695-4e04-a6a9-a9250da63f88"
        },
        "item": {
          "id": "c9b2c0f9-32a3-4471-8f93-c32cc6ace877",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "796b496e-f3d3-492b-8b87-d00ad8beaba8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:159)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "016fb0ba-3d17-49f5-b605-4b30971700cf",
        "cursor": {
          "ref": "674bcad4-aca0-476c-97ca-3cebc314cbcf",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "b347014d-01f8-4404-805f-7f6f0c7cd5fa"
        },
        "item": {
          "id": "016fb0ba-3d17-49f5-b605-4b30971700cf",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "fb6d24e3-b24b-41c0-8ae5-1f49f7742467",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "016fb0ba-3d17-49f5-b605-4b30971700cf",
        "cursor": {
          "ref": "674bcad4-aca0-476c-97ca-3cebc314cbcf",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "b347014d-01f8-4404-805f-7f6f0c7cd5fa"
        },
        "item": {
          "id": "016fb0ba-3d17-49f5-b605-4b30971700cf",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "fb6d24e3-b24b-41c0-8ae5-1f49f7742467",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8bb714cd-d53c-4630-973d-8a1ceec2cf42",
        "cursor": {
          "ref": "c7673a2d-407a-4148-ad02-972b1044b6aa",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "47f2a54d-b985-499a-92e3-67d471bf5f46"
        },
        "item": {
          "id": "8bb714cd-d53c-4630-973d-8a1ceec2cf42",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "df41b88d-205c-42ca-aecd-1c6607227eb8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:161)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8bb714cd-d53c-4630-973d-8a1ceec2cf42",
        "cursor": {
          "ref": "c7673a2d-407a-4148-ad02-972b1044b6aa",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "47f2a54d-b985-499a-92e3-67d471bf5f46"
        },
        "item": {
          "id": "8bb714cd-d53c-4630-973d-8a1ceec2cf42",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "df41b88d-205c-42ca-aecd-1c6607227eb8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:161)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f234823-6307-49b9-bf97-1bf2c1c73695",
        "cursor": {
          "ref": "b464694e-1226-4e6a-a676-bed214e06ecb",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "fe1aa05d-2ab1-44df-9942-1a2e7728f776"
        },
        "item": {
          "id": "8f234823-6307-49b9-bf97-1bf2c1c73695",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "73d526aa-3237-4708-8e13-da547cb0fa0b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:162)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f234823-6307-49b9-bf97-1bf2c1c73695",
        "cursor": {
          "ref": "b464694e-1226-4e6a-a676-bed214e06ecb",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "fe1aa05d-2ab1-44df-9942-1a2e7728f776"
        },
        "item": {
          "id": "8f234823-6307-49b9-bf97-1bf2c1c73695",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "73d526aa-3237-4708-8e13-da547cb0fa0b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:162)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6038525b-52c1-4e2d-b8e0-7629e67edb44",
        "cursor": {
          "ref": "f1a0907d-5e89-4ac6-9502-6b9ec53dbe6b",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "c0ef9ac0-e8df-443b-b9f1-5790f45209e7"
        },
        "item": {
          "id": "6038525b-52c1-4e2d-b8e0-7629e67edb44",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "ccecdb23-61c9-4b81-bcb6-196a3b189ebc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 84,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:163)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6038525b-52c1-4e2d-b8e0-7629e67edb44",
        "cursor": {
          "ref": "f1a0907d-5e89-4ac6-9502-6b9ec53dbe6b",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "c0ef9ac0-e8df-443b-b9f1-5790f45209e7"
        },
        "item": {
          "id": "6038525b-52c1-4e2d-b8e0-7629e67edb44",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "ccecdb23-61c9-4b81-bcb6-196a3b189ebc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 84,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:163)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e58f048-d51d-437d-b86d-549b6be61207",
        "cursor": {
          "ref": "b1433013-6ce7-4ccc-ba56-88e1c403444c",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "6d1c297a-1877-4166-8d41-9a2bc431fa67"
        },
        "item": {
          "id": "1e58f048-d51d-437d-b86d-549b6be61207",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "36ffb905-58f0-4de2-b73d-eacad2bd1387",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:164)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e58f048-d51d-437d-b86d-549b6be61207",
        "cursor": {
          "ref": "b1433013-6ce7-4ccc-ba56-88e1c403444c",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "6d1c297a-1877-4166-8d41-9a2bc431fa67"
        },
        "item": {
          "id": "1e58f048-d51d-437d-b86d-549b6be61207",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "36ffb905-58f0-4de2-b73d-eacad2bd1387",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:164)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ff1fbf7-f7fc-4109-9fae-64e869d13d6e",
        "cursor": {
          "ref": "28195e3a-f881-4603-967c-55348db82d1a",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "5fe30e3a-1d8d-4b94-b808-3f5502d50306"
        },
        "item": {
          "id": "6ff1fbf7-f7fc-4109-9fae-64e869d13d6e",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "6fbd4d2f-4d25-4834-8867-eeaa89c734a2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:165)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ff1fbf7-f7fc-4109-9fae-64e869d13d6e",
        "cursor": {
          "ref": "28195e3a-f881-4603-967c-55348db82d1a",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "5fe30e3a-1d8d-4b94-b808-3f5502d50306"
        },
        "item": {
          "id": "6ff1fbf7-f7fc-4109-9fae-64e869d13d6e",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "6fbd4d2f-4d25-4834-8867-eeaa89c734a2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:165)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42524493-86f9-41b5-aa0e-3a2179a0adf2",
        "cursor": {
          "ref": "40fde0cd-1155-406f-9bc8-d573d5ba54a4",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "3f9b5936-a64f-4cf7-b4a1-b36ccd0dcf61"
        },
        "item": {
          "id": "42524493-86f9-41b5-aa0e-3a2179a0adf2",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "61c745c0-6fba-495c-ada5-4dc2da5c9d45",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 82,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:166)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42524493-86f9-41b5-aa0e-3a2179a0adf2",
        "cursor": {
          "ref": "40fde0cd-1155-406f-9bc8-d573d5ba54a4",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "3f9b5936-a64f-4cf7-b4a1-b36ccd0dcf61"
        },
        "item": {
          "id": "42524493-86f9-41b5-aa0e-3a2179a0adf2",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "61c745c0-6fba-495c-ada5-4dc2da5c9d45",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 82,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:166)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb4fe0f3-a804-44c5-8721-9e52383a1698",
        "cursor": {
          "ref": "46e8f7f7-fae3-47b3-88f6-26c7112ec13a",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "fb9ef635-049a-4fc1-ad47-967bd910d6fc"
        },
        "item": {
          "id": "bb4fe0f3-a804-44c5-8721-9e52383a1698",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "75b5b99e-a8ac-4db5-ab94-e64c0cdbe9ae",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 82,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:167)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb4fe0f3-a804-44c5-8721-9e52383a1698",
        "cursor": {
          "ref": "46e8f7f7-fae3-47b3-88f6-26c7112ec13a",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "fb9ef635-049a-4fc1-ad47-967bd910d6fc"
        },
        "item": {
          "id": "bb4fe0f3-a804-44c5-8721-9e52383a1698",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "75b5b99e-a8ac-4db5-ab94-e64c0cdbe9ae",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 82,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:167)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8e17103-73ca-4d00-8e42-8a30cd8a14e4",
        "cursor": {
          "ref": "6889a2b9-d879-4525-a8ec-18cf1c6e229b",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "65773d2b-7a84-46ba-bcf7-b2c97a759a64"
        },
        "item": {
          "id": "d8e17103-73ca-4d00-8e42-8a30cd8a14e4",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "70dd9fa0-b33a-4322-9234-3525cbd008c7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 82,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:168)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8e17103-73ca-4d00-8e42-8a30cd8a14e4",
        "cursor": {
          "ref": "6889a2b9-d879-4525-a8ec-18cf1c6e229b",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "65773d2b-7a84-46ba-bcf7-b2c97a759a64"
        },
        "item": {
          "id": "d8e17103-73ca-4d00-8e42-8a30cd8a14e4",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "70dd9fa0-b33a-4322-9234-3525cbd008c7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 82,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:168)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dca48aa0-6366-4c26-a907-4f37514a4ddd",
        "cursor": {
          "ref": "f978f8e6-4b25-46e3-a1da-5ee213f489a8",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "353786da-923d-47d4-b495-c34d03679529"
        },
        "item": {
          "id": "dca48aa0-6366-4c26-a907-4f37514a4ddd",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "8be4ee23-b537-4c31-8bce-fc4bc0ec5b60",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:169)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dca48aa0-6366-4c26-a907-4f37514a4ddd",
        "cursor": {
          "ref": "f978f8e6-4b25-46e3-a1da-5ee213f489a8",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "353786da-923d-47d4-b495-c34d03679529"
        },
        "item": {
          "id": "dca48aa0-6366-4c26-a907-4f37514a4ddd",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "8be4ee23-b537-4c31-8bce-fc4bc0ec5b60",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:169)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96eba7d1-bd70-4233-b2c9-ead5d9132ab2",
        "cursor": {
          "ref": "790b392c-3017-4cba-8e7e-99e3d5792eb5",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "4cdfa06f-d3ca-459c-bd0b-f26b6df04ace"
        },
        "item": {
          "id": "96eba7d1-bd70-4233-b2c9-ead5d9132ab2",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "902698fe-832b-4d31-b571-a74b87d498e4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:170)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96eba7d1-bd70-4233-b2c9-ead5d9132ab2",
        "cursor": {
          "ref": "790b392c-3017-4cba-8e7e-99e3d5792eb5",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "4cdfa06f-d3ca-459c-bd0b-f26b6df04ace"
        },
        "item": {
          "id": "96eba7d1-bd70-4233-b2c9-ead5d9132ab2",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "902698fe-832b-4d31-b571-a74b87d498e4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:170)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1f5bff6-4e45-402e-8dbf-98c2a1ebeb24",
        "cursor": {
          "ref": "f6f190c2-3cfa-4a11-ac40-f6eba622f793",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "5933e526-e3a9-4fa5-8532-40bf891cf164"
        },
        "item": {
          "id": "f1f5bff6-4e45-402e-8dbf-98c2a1ebeb24",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "8dbf3c06-d90e-458c-92e0-44ac095e5b4a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:171)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1f5bff6-4e45-402e-8dbf-98c2a1ebeb24",
        "cursor": {
          "ref": "f6f190c2-3cfa-4a11-ac40-f6eba622f793",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "5933e526-e3a9-4fa5-8532-40bf891cf164"
        },
        "item": {
          "id": "f1f5bff6-4e45-402e-8dbf-98c2a1ebeb24",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "8dbf3c06-d90e-458c-92e0-44ac095e5b4a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:171)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "755f3d7d-a171-4ac4-b50b-c3e93729f7f5",
        "cursor": {
          "ref": "41f5b141-b9eb-4ef7-a386-b0d148c9e39e",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "43c5b602-79c4-43bb-aaaa-d2057ed7e27a"
        },
        "item": {
          "id": "755f3d7d-a171-4ac4-b50b-c3e93729f7f5",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "98768a38-65cd-4b24-8527-f65bbc7619d3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:172)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "755f3d7d-a171-4ac4-b50b-c3e93729f7f5",
        "cursor": {
          "ref": "41f5b141-b9eb-4ef7-a386-b0d148c9e39e",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "43c5b602-79c4-43bb-aaaa-d2057ed7e27a"
        },
        "item": {
          "id": "755f3d7d-a171-4ac4-b50b-c3e93729f7f5",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "98768a38-65cd-4b24-8527-f65bbc7619d3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:172)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f62198a-4471-4b50-9a3a-22bb6d059eb0",
        "cursor": {
          "ref": "deb8a902-e5c8-428b-9129-3e8f7b6b75fa",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "d796e196-d244-493f-8c73-9c862519d704"
        },
        "item": {
          "id": "0f62198a-4471-4b50-9a3a-22bb6d059eb0",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "7dcccc15-c497-4a56-b5a5-160784d3516d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:173)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f62198a-4471-4b50-9a3a-22bb6d059eb0",
        "cursor": {
          "ref": "deb8a902-e5c8-428b-9129-3e8f7b6b75fa",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "d796e196-d244-493f-8c73-9c862519d704"
        },
        "item": {
          "id": "0f62198a-4471-4b50-9a3a-22bb6d059eb0",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "7dcccc15-c497-4a56-b5a5-160784d3516d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:173)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42e13de3-e002-4788-9a67-c25af7995d18",
        "cursor": {
          "ref": "e774d957-5b63-4f34-bce0-d90b0f315230",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "b6583921-090e-40b4-be0f-c855927aaec3"
        },
        "item": {
          "id": "42e13de3-e002-4788-9a67-c25af7995d18",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "e03599f2-a88c-4530-85ae-39b60d1fbdf8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 83,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:174)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42e13de3-e002-4788-9a67-c25af7995d18",
        "cursor": {
          "ref": "e774d957-5b63-4f34-bce0-d90b0f315230",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "b6583921-090e-40b4-be0f-c855927aaec3"
        },
        "item": {
          "id": "42e13de3-e002-4788-9a67-c25af7995d18",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "e03599f2-a88c-4530-85ae-39b60d1fbdf8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 83,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:174)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "416a4d92-d8a7-4552-961a-46ad54c74685",
        "cursor": {
          "ref": "bc77bd35-38c9-41aa-9115-3d3b0284a271",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "948a87c8-385f-495e-9880-e224a9667d4b"
        },
        "item": {
          "id": "416a4d92-d8a7-4552-961a-46ad54c74685",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "3d5572be-a1d6-4214-b678-a749c9adf2ea",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:175)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "416a4d92-d8a7-4552-961a-46ad54c74685",
        "cursor": {
          "ref": "bc77bd35-38c9-41aa-9115-3d3b0284a271",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "948a87c8-385f-495e-9880-e224a9667d4b"
        },
        "item": {
          "id": "416a4d92-d8a7-4552-961a-46ad54c74685",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "3d5572be-a1d6-4214-b678-a749c9adf2ea",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:175)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f23e20c-a825-4156-9953-9dcdbd28c410",
        "cursor": {
          "ref": "e8ad30b8-f70e-4971-becf-9dbbb5b494aa",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "9892fa1d-ff21-4bfb-aa85-30a1c9117104"
        },
        "item": {
          "id": "0f23e20c-a825-4156-9953-9dcdbd28c410",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "affc4810-207b-4bdd-ac67-ff9cddc5c8c0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 83,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:176)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f23e20c-a825-4156-9953-9dcdbd28c410",
        "cursor": {
          "ref": "e8ad30b8-f70e-4971-becf-9dbbb5b494aa",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "9892fa1d-ff21-4bfb-aa85-30a1c9117104"
        },
        "item": {
          "id": "0f23e20c-a825-4156-9953-9dcdbd28c410",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "affc4810-207b-4bdd-ac67-ff9cddc5c8c0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 83,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:176)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54b1054f-2510-42ac-a56c-d3cea8edfaf8",
        "cursor": {
          "ref": "27b70793-52c1-44ab-b779-bed5d98fcbb4",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "0ce0622d-d0f8-4c1d-893d-fd9d4d7c965e"
        },
        "item": {
          "id": "54b1054f-2510-42ac-a56c-d3cea8edfaf8",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "82671210-5de0-41c2-a700-acf501efbeb3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:177)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54b1054f-2510-42ac-a56c-d3cea8edfaf8",
        "cursor": {
          "ref": "27b70793-52c1-44ab-b779-bed5d98fcbb4",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "0ce0622d-d0f8-4c1d-893d-fd9d4d7c965e"
        },
        "item": {
          "id": "54b1054f-2510-42ac-a56c-d3cea8edfaf8",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "82671210-5de0-41c2-a700-acf501efbeb3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:177)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e432229a-f01e-42bb-a1d3-4230322a7743",
        "cursor": {
          "ref": "56322ad1-b77f-4c31-8b4b-54c78f7e4b86",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "b0ab8a57-f469-4007-9480-a9fb60518d7f"
        },
        "item": {
          "id": "e432229a-f01e-42bb-a1d3-4230322a7743",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "7d59950f-7c55-47b8-9408-611a42fa911f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 82,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:178)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e432229a-f01e-42bb-a1d3-4230322a7743",
        "cursor": {
          "ref": "56322ad1-b77f-4c31-8b4b-54c78f7e4b86",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "b0ab8a57-f469-4007-9480-a9fb60518d7f"
        },
        "item": {
          "id": "e432229a-f01e-42bb-a1d3-4230322a7743",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "7d59950f-7c55-47b8-9408-611a42fa911f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 82,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:178)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1663acd8-f3dc-4e55-8764-715bb270c87e",
        "cursor": {
          "ref": "73c5d93b-9253-4ffd-b7ef-e0048369769f",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "034d957a-36e5-434e-a641-c7ff1897ac3d"
        },
        "item": {
          "id": "1663acd8-f3dc-4e55-8764-715bb270c87e",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "c36648fd-2bb8-4596-91fe-2f6e1371204c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1663acd8-f3dc-4e55-8764-715bb270c87e",
        "cursor": {
          "ref": "73c5d93b-9253-4ffd-b7ef-e0048369769f",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "034d957a-36e5-434e-a641-c7ff1897ac3d"
        },
        "item": {
          "id": "1663acd8-f3dc-4e55-8764-715bb270c87e",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "c36648fd-2bb8-4596-91fe-2f6e1371204c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "754a73c4-9c61-4735-ab34-cfa0975bced4",
        "cursor": {
          "ref": "524f9efc-94c2-45a6-bee7-f04cecb58919",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "420cce28-cc75-4f08-861a-01d2c57ce725"
        },
        "item": {
          "id": "754a73c4-9c61-4735-ab34-cfa0975bced4",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "66e0e23e-df43-4e43-943e-d950cea9abbd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:180)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "754a73c4-9c61-4735-ab34-cfa0975bced4",
        "cursor": {
          "ref": "524f9efc-94c2-45a6-bee7-f04cecb58919",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "420cce28-cc75-4f08-861a-01d2c57ce725"
        },
        "item": {
          "id": "754a73c4-9c61-4735-ab34-cfa0975bced4",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "66e0e23e-df43-4e43-943e-d950cea9abbd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:180)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "afb4cde9-9915-41f0-9c98-d6740b6ca506",
        "cursor": {
          "ref": "eb34448b-83ac-46b6-bd26-4ceb1520f980",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "9b2699d7-a845-4da2-b1df-ec684d2edfde"
        },
        "item": {
          "id": "afb4cde9-9915-41f0-9c98-d6740b6ca506",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "436890fc-701a-4843-8154-321e802315cc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:181)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "afb4cde9-9915-41f0-9c98-d6740b6ca506",
        "cursor": {
          "ref": "eb34448b-83ac-46b6-bd26-4ceb1520f980",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "9b2699d7-a845-4da2-b1df-ec684d2edfde"
        },
        "item": {
          "id": "afb4cde9-9915-41f0-9c98-d6740b6ca506",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "436890fc-701a-4843-8154-321e802315cc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:181)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6fa0d87a-2883-4984-a4d4-a7f1310ca184",
        "cursor": {
          "ref": "a66437f3-96fd-4ba7-8a16-fbc9e7783c76",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "67d2afeb-c472-4341-b7c7-0a47b3458c4d"
        },
        "item": {
          "id": "6fa0d87a-2883-4984-a4d4-a7f1310ca184",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "1939a342-3346-4dd6-989a-64f4e5643def",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6fa0d87a-2883-4984-a4d4-a7f1310ca184",
        "cursor": {
          "ref": "a66437f3-96fd-4ba7-8a16-fbc9e7783c76",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "67d2afeb-c472-4341-b7c7-0a47b3458c4d"
        },
        "item": {
          "id": "6fa0d87a-2883-4984-a4d4-a7f1310ca184",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "1939a342-3346-4dd6-989a-64f4e5643def",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4e4c52b-e0ca-4071-a631-fe55bd681b4c",
        "cursor": {
          "ref": "66243073-4b92-43e2-bc90-0802c712eaad",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "35aed1dc-ea58-462f-8c9e-3f28076edf50"
        },
        "item": {
          "id": "e4e4c52b-e0ca-4071-a631-fe55bd681b4c",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "68899a60-652e-4dbb-8f65-a99f412b9b37",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4e4c52b-e0ca-4071-a631-fe55bd681b4c",
        "cursor": {
          "ref": "66243073-4b92-43e2-bc90-0802c712eaad",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "35aed1dc-ea58-462f-8c9e-3f28076edf50"
        },
        "item": {
          "id": "e4e4c52b-e0ca-4071-a631-fe55bd681b4c",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "68899a60-652e-4dbb-8f65-a99f412b9b37",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "963eeb9e-43e9-45c9-b923-fdac12bb7a41",
        "cursor": {
          "ref": "84f4559c-3e89-4bf6-a4f9-e6850d51789a",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "29a11470-eb0a-4ca4-bdfb-c772e65f5e1a"
        },
        "item": {
          "id": "963eeb9e-43e9-45c9-b923-fdac12bb7a41",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "4df399e4-12ff-4cbf-9a1f-5b4a7f23685f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "963eeb9e-43e9-45c9-b923-fdac12bb7a41",
        "cursor": {
          "ref": "84f4559c-3e89-4bf6-a4f9-e6850d51789a",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "29a11470-eb0a-4ca4-bdfb-c772e65f5e1a"
        },
        "item": {
          "id": "963eeb9e-43e9-45c9-b923-fdac12bb7a41",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "4df399e4-12ff-4cbf-9a1f-5b4a7f23685f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "217f67c6-83d9-4be9-acad-88715da23ba1",
        "cursor": {
          "ref": "6ab74889-739b-47aa-937d-131ad49f0dda",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "ed3dce1a-0efa-429a-a1dd-249186c30592"
        },
        "item": {
          "id": "217f67c6-83d9-4be9-acad-88715da23ba1",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "ea19c68b-55d1-4e5c-b5e7-3e5dab1bc574",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "217f67c6-83d9-4be9-acad-88715da23ba1",
        "cursor": {
          "ref": "6ab74889-739b-47aa-937d-131ad49f0dda",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "ed3dce1a-0efa-429a-a1dd-249186c30592"
        },
        "item": {
          "id": "217f67c6-83d9-4be9-acad-88715da23ba1",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "ea19c68b-55d1-4e5c-b5e7-3e5dab1bc574",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "270adcdc-cc63-47ad-9f65-09c3d49aab04",
        "cursor": {
          "ref": "1745e711-b407-4332-9805-46468769e7a7",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "6f759452-461d-4574-84ae-fbf66da5498b"
        },
        "item": {
          "id": "270adcdc-cc63-47ad-9f65-09c3d49aab04",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "02b7195b-b1a0-4719-999d-0da13c87b291",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "270adcdc-cc63-47ad-9f65-09c3d49aab04",
        "cursor": {
          "ref": "1745e711-b407-4332-9805-46468769e7a7",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "6f759452-461d-4574-84ae-fbf66da5498b"
        },
        "item": {
          "id": "270adcdc-cc63-47ad-9f65-09c3d49aab04",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "02b7195b-b1a0-4719-999d-0da13c87b291",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae6329ea-3420-4aef-9749-695eae2a93af",
        "cursor": {
          "ref": "fa6eb70c-7f95-4b7b-9a58-e2e6ecfbc889",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "96e84973-0b7b-483a-8ceb-38812aae3c72"
        },
        "item": {
          "id": "ae6329ea-3420-4aef-9749-695eae2a93af",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "1139d00a-824c-4808-8010-bfea958919e6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae6329ea-3420-4aef-9749-695eae2a93af",
        "cursor": {
          "ref": "fa6eb70c-7f95-4b7b-9a58-e2e6ecfbc889",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "96e84973-0b7b-483a-8ceb-38812aae3c72"
        },
        "item": {
          "id": "ae6329ea-3420-4aef-9749-695eae2a93af",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "1139d00a-824c-4808-8010-bfea958919e6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "352cdb8f-97bc-4150-8f6c-8ca2f91c9d20",
        "cursor": {
          "ref": "de311756-7195-414e-8593-13a510a9ab4f",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "675feb19-8e24-45b1-8639-a9e2a7498842"
        },
        "item": {
          "id": "352cdb8f-97bc-4150-8f6c-8ca2f91c9d20",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "706f6e2f-c21f-4d5c-9ab7-0cc51a279083",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "352cdb8f-97bc-4150-8f6c-8ca2f91c9d20",
        "cursor": {
          "ref": "de311756-7195-414e-8593-13a510a9ab4f",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "675feb19-8e24-45b1-8639-a9e2a7498842"
        },
        "item": {
          "id": "352cdb8f-97bc-4150-8f6c-8ca2f91c9d20",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "706f6e2f-c21f-4d5c-9ab7-0cc51a279083",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac045ae9-5a33-4118-88f8-60ef4c1cb006",
        "cursor": {
          "ref": "b29ebb69-869d-4f3e-80b8-659a4f099ebd",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "f418643f-bfeb-474c-820b-f6d6ef1859f1"
        },
        "item": {
          "id": "ac045ae9-5a33-4118-88f8-60ef4c1cb006",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "803266d7-3987-44c2-8e58-56c91ea46e9b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac045ae9-5a33-4118-88f8-60ef4c1cb006",
        "cursor": {
          "ref": "b29ebb69-869d-4f3e-80b8-659a4f099ebd",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "f418643f-bfeb-474c-820b-f6d6ef1859f1"
        },
        "item": {
          "id": "ac045ae9-5a33-4118-88f8-60ef4c1cb006",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "803266d7-3987-44c2-8e58-56c91ea46e9b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01633703-b612-4406-9f81-9be30cc3ebba",
        "cursor": {
          "ref": "d6de0e6a-b89e-4bb0-961d-33350bf31965",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "3a43f0cb-300c-4646-b845-ef02ee2d356b"
        },
        "item": {
          "id": "01633703-b612-4406-9f81-9be30cc3ebba",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "13be4d4c-6a7d-48c9-9fca-d6fc803b7de4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 86,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01633703-b612-4406-9f81-9be30cc3ebba",
        "cursor": {
          "ref": "d6de0e6a-b89e-4bb0-961d-33350bf31965",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "3a43f0cb-300c-4646-b845-ef02ee2d356b"
        },
        "item": {
          "id": "01633703-b612-4406-9f81-9be30cc3ebba",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "13be4d4c-6a7d-48c9-9fca-d6fc803b7de4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 86,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7104c0b7-48f8-401d-b6e8-c41201941a1f",
        "cursor": {
          "ref": "80a9efdc-c64f-480b-a7e0-4f918ec59888",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "e97e441d-908e-4064-b130-dcc96f421bd7"
        },
        "item": {
          "id": "7104c0b7-48f8-401d-b6e8-c41201941a1f",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "bfa0d1e7-07a2-4dde-a3e1-82ab92fda971",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7104c0b7-48f8-401d-b6e8-c41201941a1f",
        "cursor": {
          "ref": "80a9efdc-c64f-480b-a7e0-4f918ec59888",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "e97e441d-908e-4064-b130-dcc96f421bd7"
        },
        "item": {
          "id": "7104c0b7-48f8-401d-b6e8-c41201941a1f",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "bfa0d1e7-07a2-4dde-a3e1-82ab92fda971",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "116df2f0-0692-437f-9f28-6487e3e85047",
        "cursor": {
          "ref": "c786ff18-119e-4bae-a531-b37a8a2c12bf",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "92b98700-8253-4bf0-9210-ccc4e5cc037a"
        },
        "item": {
          "id": "116df2f0-0692-437f-9f28-6487e3e85047",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "c053cdf9-11c8-4b5b-bfca-79b5b05c50a6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:192)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "116df2f0-0692-437f-9f28-6487e3e85047",
        "cursor": {
          "ref": "c786ff18-119e-4bae-a531-b37a8a2c12bf",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "92b98700-8253-4bf0-9210-ccc4e5cc037a"
        },
        "item": {
          "id": "116df2f0-0692-437f-9f28-6487e3e85047",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "c053cdf9-11c8-4b5b-bfca-79b5b05c50a6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:192)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58fe8849-7525-41b1-80f4-525dd6b27c7d",
        "cursor": {
          "ref": "4e7e94d6-d2f0-4b1d-92d2-02ba9abfd207",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "b751a128-0db2-437c-a1ac-b55b2c6481f9"
        },
        "item": {
          "id": "58fe8849-7525-41b1-80f4-525dd6b27c7d",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "af8ac909-63e3-4383-8d58-08e124321c53",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:193)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58fe8849-7525-41b1-80f4-525dd6b27c7d",
        "cursor": {
          "ref": "4e7e94d6-d2f0-4b1d-92d2-02ba9abfd207",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "b751a128-0db2-437c-a1ac-b55b2c6481f9"
        },
        "item": {
          "id": "58fe8849-7525-41b1-80f4-525dd6b27c7d",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "af8ac909-63e3-4383-8d58-08e124321c53",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:193)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f16df188-3b86-463a-a6f4-f13aac05c900",
        "cursor": {
          "ref": "319fe9fe-e9f6-4934-89d5-f0a6a2a32522",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "4f6e3963-8260-401e-9c14-9feae272a639"
        },
        "item": {
          "id": "f16df188-3b86-463a-a6f4-f13aac05c900",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "751eef15-a5b3-43fe-bbab-efd5f596a9d3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:194)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f16df188-3b86-463a-a6f4-f13aac05c900",
        "cursor": {
          "ref": "319fe9fe-e9f6-4934-89d5-f0a6a2a32522",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "4f6e3963-8260-401e-9c14-9feae272a639"
        },
        "item": {
          "id": "f16df188-3b86-463a-a6f4-f13aac05c900",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "751eef15-a5b3-43fe-bbab-efd5f596a9d3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:194)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "437969ef-dc73-4739-99f1-903eaf0551dd",
        "cursor": {
          "ref": "e1adebc4-fd36-457e-8709-84c6833afb76",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "7680e45a-c179-411e-8538-4924a16042f9"
        },
        "item": {
          "id": "437969ef-dc73-4739-99f1-903eaf0551dd",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "3315430f-d689-4949-ba58-1a3525f0aa27",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:195)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "437969ef-dc73-4739-99f1-903eaf0551dd",
        "cursor": {
          "ref": "e1adebc4-fd36-457e-8709-84c6833afb76",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "7680e45a-c179-411e-8538-4924a16042f9"
        },
        "item": {
          "id": "437969ef-dc73-4739-99f1-903eaf0551dd",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "3315430f-d689-4949-ba58-1a3525f0aa27",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:195)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e80e5f9-ce80-4910-80dd-62836ae68f6a",
        "cursor": {
          "ref": "91e2780f-78c3-4579-86e5-b557a2f3fee1",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "ba2fefcc-9895-4804-a53c-34fa38a49866"
        },
        "item": {
          "id": "7e80e5f9-ce80-4910-80dd-62836ae68f6a",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "a0800f0f-4f6a-492f-b2d4-4daaadbb41a4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:196)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e80e5f9-ce80-4910-80dd-62836ae68f6a",
        "cursor": {
          "ref": "91e2780f-78c3-4579-86e5-b557a2f3fee1",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "ba2fefcc-9895-4804-a53c-34fa38a49866"
        },
        "item": {
          "id": "7e80e5f9-ce80-4910-80dd-62836ae68f6a",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "a0800f0f-4f6a-492f-b2d4-4daaadbb41a4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:196)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0788d34-ad03-4dab-b25d-ed66b41355a6",
        "cursor": {
          "ref": "6c137464-fa69-4c76-9922-9859e0694e73",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "b3b11c69-2f01-4379-ba18-849cd0b2bf40"
        },
        "item": {
          "id": "f0788d34-ad03-4dab-b25d-ed66b41355a6",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "6f4588a0-3573-46ee-a31d-76aa3859d407",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:197)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0788d34-ad03-4dab-b25d-ed66b41355a6",
        "cursor": {
          "ref": "6c137464-fa69-4c76-9922-9859e0694e73",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "b3b11c69-2f01-4379-ba18-849cd0b2bf40"
        },
        "item": {
          "id": "f0788d34-ad03-4dab-b25d-ed66b41355a6",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "6f4588a0-3573-46ee-a31d-76aa3859d407",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:197)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78c97f6e-4193-473c-9a1a-1c6ac6b96eea",
        "cursor": {
          "ref": "98cf9c86-3efb-4fc1-9ee3-503bb4a28075",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "a7f05129-b823-4efb-88d7-7dfc307e813a"
        },
        "item": {
          "id": "78c97f6e-4193-473c-9a1a-1c6ac6b96eea",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "0ea5280f-819d-484e-8727-afe6b5967df1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 83,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:198)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78c97f6e-4193-473c-9a1a-1c6ac6b96eea",
        "cursor": {
          "ref": "98cf9c86-3efb-4fc1-9ee3-503bb4a28075",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "a7f05129-b823-4efb-88d7-7dfc307e813a"
        },
        "item": {
          "id": "78c97f6e-4193-473c-9a1a-1c6ac6b96eea",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "0ea5280f-819d-484e-8727-afe6b5967df1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 83,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:198)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "752e5f70-695e-4abb-a8ff-0c39b4ce4241",
        "cursor": {
          "ref": "19cca5a8-1201-4e90-bb16-81dbb401c6e3",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "af7f7a24-09ad-442c-9cdb-c265a10b6de3"
        },
        "item": {
          "id": "752e5f70-695e-4abb-a8ff-0c39b4ce4241",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "0ba95391-8ab6-42c0-acdc-fc007c0dc794",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:199)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "752e5f70-695e-4abb-a8ff-0c39b4ce4241",
        "cursor": {
          "ref": "19cca5a8-1201-4e90-bb16-81dbb401c6e3",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "af7f7a24-09ad-442c-9cdb-c265a10b6de3"
        },
        "item": {
          "id": "752e5f70-695e-4abb-a8ff-0c39b4ce4241",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "0ba95391-8ab6-42c0-acdc-fc007c0dc794",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:199)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "daca4155-2e55-401e-8474-616c4be5d1b4",
        "cursor": {
          "ref": "d3e379a3-14d2-4b3c-be1e-fc75e7dabed0",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "12535bba-b527-4d1d-8f4c-74ef919ee617"
        },
        "item": {
          "id": "daca4155-2e55-401e-8474-616c4be5d1b4",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "0598886c-8ac1-4968-9f47-652f8dd8342e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 82,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:200)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "daca4155-2e55-401e-8474-616c4be5d1b4",
        "cursor": {
          "ref": "d3e379a3-14d2-4b3c-be1e-fc75e7dabed0",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "12535bba-b527-4d1d-8f4c-74ef919ee617"
        },
        "item": {
          "id": "daca4155-2e55-401e-8474-616c4be5d1b4",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "0598886c-8ac1-4968-9f47-652f8dd8342e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 82,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:200)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5b242fe-b35a-49db-bf8f-2ec6be0f50b2",
        "cursor": {
          "ref": "c8f3fff0-98a0-4236-b9cb-584aaf99df6b",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "deb6b20f-c16b-49b1-ad8b-b225c5941975"
        },
        "item": {
          "id": "c5b242fe-b35a-49db-bf8f-2ec6be0f50b2",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "30807f71-c358-456f-b42d-9706bbb3b764",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:201)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5b242fe-b35a-49db-bf8f-2ec6be0f50b2",
        "cursor": {
          "ref": "c8f3fff0-98a0-4236-b9cb-584aaf99df6b",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "deb6b20f-c16b-49b1-ad8b-b225c5941975"
        },
        "item": {
          "id": "c5b242fe-b35a-49db-bf8f-2ec6be0f50b2",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "30807f71-c358-456f-b42d-9706bbb3b764",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:201)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd685b88-7d2b-4a15-ad43-c2bcd096a706",
        "cursor": {
          "ref": "6f40c435-226a-4888-91f1-19de148acc58",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "45abb029-0f00-4145-a135-78088b6ed0a1"
        },
        "item": {
          "id": "cd685b88-7d2b-4a15-ad43-c2bcd096a706",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "fd4ac82b-5e5e-49b0-b194-3cf418590a1f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 84,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:202)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd685b88-7d2b-4a15-ad43-c2bcd096a706",
        "cursor": {
          "ref": "6f40c435-226a-4888-91f1-19de148acc58",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "45abb029-0f00-4145-a135-78088b6ed0a1"
        },
        "item": {
          "id": "cd685b88-7d2b-4a15-ad43-c2bcd096a706",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "fd4ac82b-5e5e-49b0-b194-3cf418590a1f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 84,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:202)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88d0ef2c-823d-4df6-986e-4e7423410bf0",
        "cursor": {
          "ref": "245cc929-813e-41f2-a863-c7cab6839615",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "cdc8e3d1-5b2b-4a78-bb00-683ccfc444d5"
        },
        "item": {
          "id": "88d0ef2c-823d-4df6-986e-4e7423410bf0",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "38101612-2522-4ba7-8ad7-e046a338ec6b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:203)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88d0ef2c-823d-4df6-986e-4e7423410bf0",
        "cursor": {
          "ref": "245cc929-813e-41f2-a863-c7cab6839615",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "cdc8e3d1-5b2b-4a78-bb00-683ccfc444d5"
        },
        "item": {
          "id": "88d0ef2c-823d-4df6-986e-4e7423410bf0",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "38101612-2522-4ba7-8ad7-e046a338ec6b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:203)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "730f031d-b1de-4be3-9425-9d960c5f59fe",
        "cursor": {
          "ref": "59ef0437-2dc3-4877-9433-8fce460ab755",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "b11c13d5-c494-4588-b595-86a00ceae490"
        },
        "item": {
          "id": "730f031d-b1de-4be3-9425-9d960c5f59fe",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "fe1580c4-b5a3-48f9-a1ad-90cf6abc8dc3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:204)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "730f031d-b1de-4be3-9425-9d960c5f59fe",
        "cursor": {
          "ref": "59ef0437-2dc3-4877-9433-8fce460ab755",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "b11c13d5-c494-4588-b595-86a00ceae490"
        },
        "item": {
          "id": "730f031d-b1de-4be3-9425-9d960c5f59fe",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "fe1580c4-b5a3-48f9-a1ad-90cf6abc8dc3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:204)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3aca655-c4c6-4886-b8f9-71ee5dd32674",
        "cursor": {
          "ref": "4497213c-ee15-4d3e-9524-5252ebb7d396",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "25949423-63fa-457f-a2af-1e671f2b6598"
        },
        "item": {
          "id": "a3aca655-c4c6-4886-b8f9-71ee5dd32674",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "5e410d43-83fb-4e17-942d-02aa2c130dba",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 82,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3aca655-c4c6-4886-b8f9-71ee5dd32674",
        "cursor": {
          "ref": "4497213c-ee15-4d3e-9524-5252ebb7d396",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "25949423-63fa-457f-a2af-1e671f2b6598"
        },
        "item": {
          "id": "a3aca655-c4c6-4886-b8f9-71ee5dd32674",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "5e410d43-83fb-4e17-942d-02aa2c130dba",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 82,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8d68eb9-5747-4c4e-a536-ab397df68885",
        "cursor": {
          "ref": "93182a95-db57-46e7-9c8e-2907f0765c17",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "f98f0fc5-04ee-46e0-b8a5-086e609ae782"
        },
        "item": {
          "id": "a8d68eb9-5747-4c4e-a536-ab397df68885",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "801adca6-2655-4de1-971c-31bbc3b1588f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 82,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8d68eb9-5747-4c4e-a536-ab397df68885",
        "cursor": {
          "ref": "93182a95-db57-46e7-9c8e-2907f0765c17",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "f98f0fc5-04ee-46e0-b8a5-086e609ae782"
        },
        "item": {
          "id": "a8d68eb9-5747-4c4e-a536-ab397df68885",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "801adca6-2655-4de1-971c-31bbc3b1588f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 82,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "256ed8b2-3d16-405e-9738-82e51c3f2566",
        "cursor": {
          "ref": "dd500f49-1bf6-4ab6-8c71-ebfa71df7fb1",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "304eb1ac-7aa5-4c2f-ab45-f1705f889f12"
        },
        "item": {
          "id": "256ed8b2-3d16-405e-9738-82e51c3f2566",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "096e737c-df8b-4bb3-bd3d-f1d5630cdc8b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "256ed8b2-3d16-405e-9738-82e51c3f2566",
        "cursor": {
          "ref": "dd500f49-1bf6-4ab6-8c71-ebfa71df7fb1",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "304eb1ac-7aa5-4c2f-ab45-f1705f889f12"
        },
        "item": {
          "id": "256ed8b2-3d16-405e-9738-82e51c3f2566",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "096e737c-df8b-4bb3-bd3d-f1d5630cdc8b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2982a579-ae7f-4ed8-80c5-2c664db55d55",
        "cursor": {
          "ref": "bc361a8d-911a-4f92-b594-13baf5ba5dec",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "3c392aa9-4d75-41f4-b00f-20e10148aac3"
        },
        "item": {
          "id": "2982a579-ae7f-4ed8-80c5-2c664db55d55",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "46fc61c0-ae10-480a-851c-d7ca2e292437",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 82,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2982a579-ae7f-4ed8-80c5-2c664db55d55",
        "cursor": {
          "ref": "bc361a8d-911a-4f92-b594-13baf5ba5dec",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "3c392aa9-4d75-41f4-b00f-20e10148aac3"
        },
        "item": {
          "id": "2982a579-ae7f-4ed8-80c5-2c664db55d55",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "46fc61c0-ae10-480a-851c-d7ca2e292437",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 82,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "235f7372-4252-465a-8608-03614602d485",
        "cursor": {
          "ref": "77e20e9f-07bd-4522-b5ff-4fb31f0c2eb4",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "585c2942-45ca-4908-888f-c01caaf2e07a"
        },
        "item": {
          "id": "235f7372-4252-465a-8608-03614602d485",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "ae2468e8-c59d-4c66-8d70-c9ca1736c3e6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "235f7372-4252-465a-8608-03614602d485",
        "cursor": {
          "ref": "77e20e9f-07bd-4522-b5ff-4fb31f0c2eb4",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "585c2942-45ca-4908-888f-c01caaf2e07a"
        },
        "item": {
          "id": "235f7372-4252-465a-8608-03614602d485",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "ae2468e8-c59d-4c66-8d70-c9ca1736c3e6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf272d6a-8670-41f6-8ec4-31e73ed06f54",
        "cursor": {
          "ref": "7c499e59-dab1-4499-bd1f-6e9a062dd204",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "74ca431f-519c-4280-9c55-aafd034602e8"
        },
        "item": {
          "id": "cf272d6a-8670-41f6-8ec4-31e73ed06f54",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "a9f4f3d4-2f33-4dc2-b5d3-6cf791e77bbc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:210)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf272d6a-8670-41f6-8ec4-31e73ed06f54",
        "cursor": {
          "ref": "7c499e59-dab1-4499-bd1f-6e9a062dd204",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "74ca431f-519c-4280-9c55-aafd034602e8"
        },
        "item": {
          "id": "cf272d6a-8670-41f6-8ec4-31e73ed06f54",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "a9f4f3d4-2f33-4dc2-b5d3-6cf791e77bbc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:210)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2bf87726-4c78-4710-bbad-a96e3efc7399",
        "cursor": {
          "ref": "e8325a52-252d-448b-9f7f-384885278324",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "e1de496c-b17f-4f9f-8d23-bce81eb4b262"
        },
        "item": {
          "id": "2bf87726-4c78-4710-bbad-a96e3efc7399",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "12359d9b-d845-4482-b9dd-4b6176e81246",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:211)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2bf87726-4c78-4710-bbad-a96e3efc7399",
        "cursor": {
          "ref": "e8325a52-252d-448b-9f7f-384885278324",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "e1de496c-b17f-4f9f-8d23-bce81eb4b262"
        },
        "item": {
          "id": "2bf87726-4c78-4710-bbad-a96e3efc7399",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "12359d9b-d845-4482-b9dd-4b6176e81246",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:211)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9df02dfd-c926-44f3-b646-397e0c6f001f",
        "cursor": {
          "ref": "72320857-af07-4aa3-be76-1012b584305c",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "607f63ab-f0d2-4b82-af46-1a0eeea12335"
        },
        "item": {
          "id": "9df02dfd-c926-44f3-b646-397e0c6f001f",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "6576f935-1e84-467e-8561-cf199168d882",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:212)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9df02dfd-c926-44f3-b646-397e0c6f001f",
        "cursor": {
          "ref": "72320857-af07-4aa3-be76-1012b584305c",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "607f63ab-f0d2-4b82-af46-1a0eeea12335"
        },
        "item": {
          "id": "9df02dfd-c926-44f3-b646-397e0c6f001f",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "6576f935-1e84-467e-8561-cf199168d882",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:212)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5db3037c-5f76-431a-ad56-bf68860f4c29",
        "cursor": {
          "ref": "a00773a6-6f92-436c-93d4-bda8edc89aad",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "ddf92ecc-7a45-42cc-81b2-68d3f8b6394e"
        },
        "item": {
          "id": "5db3037c-5f76-431a-ad56-bf68860f4c29",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "3c79308c-685f-4521-a2cd-e7c7ec97ea06",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 82,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:213)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5db3037c-5f76-431a-ad56-bf68860f4c29",
        "cursor": {
          "ref": "a00773a6-6f92-436c-93d4-bda8edc89aad",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "ddf92ecc-7a45-42cc-81b2-68d3f8b6394e"
        },
        "item": {
          "id": "5db3037c-5f76-431a-ad56-bf68860f4c29",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "3c79308c-685f-4521-a2cd-e7c7ec97ea06",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 82,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:213)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1600d63b-9c75-4f92-9067-6c404aa86fe0",
        "cursor": {
          "ref": "cd497021-2e1f-423c-a63f-fcf1653ea3f3",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "a2d73abe-48bb-4aac-892c-219109b41b5d"
        },
        "item": {
          "id": "1600d63b-9c75-4f92-9067-6c404aa86fe0",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "c0f83b80-423f-4655-9556-4119b765641c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:214)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1600d63b-9c75-4f92-9067-6c404aa86fe0",
        "cursor": {
          "ref": "cd497021-2e1f-423c-a63f-fcf1653ea3f3",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "a2d73abe-48bb-4aac-892c-219109b41b5d"
        },
        "item": {
          "id": "1600d63b-9c75-4f92-9067-6c404aa86fe0",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "c0f83b80-423f-4655-9556-4119b765641c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:214)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a93f9e73-0b8f-4284-80eb-67cb67b54a0e",
        "cursor": {
          "ref": "4d0be9b3-5fef-4447-b76b-90e454e5467f",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "ca778abf-c2e0-4ee1-b190-256c5df73b1b"
        },
        "item": {
          "id": "a93f9e73-0b8f-4284-80eb-67cb67b54a0e",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "dfd99879-4f1f-4bd4-86b2-19b4c9bab88f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a93f9e73-0b8f-4284-80eb-67cb67b54a0e",
        "cursor": {
          "ref": "4d0be9b3-5fef-4447-b76b-90e454e5467f",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "ca778abf-c2e0-4ee1-b190-256c5df73b1b"
        },
        "item": {
          "id": "a93f9e73-0b8f-4284-80eb-67cb67b54a0e",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "dfd99879-4f1f-4bd4-86b2-19b4c9bab88f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a96237e-e364-4ec3-8f58-da281b412884",
        "cursor": {
          "ref": "2fa77cb6-c0c9-4a88-955b-e70bfbcb4b4f",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "8b5ac0dc-af76-4b38-a561-b7499c258ba5"
        },
        "item": {
          "id": "0a96237e-e364-4ec3-8f58-da281b412884",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "ec83e66a-6ed3-4ce4-8531-cabd1d3db851",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a96237e-e364-4ec3-8f58-da281b412884",
        "cursor": {
          "ref": "2fa77cb6-c0c9-4a88-955b-e70bfbcb4b4f",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "8b5ac0dc-af76-4b38-a561-b7499c258ba5"
        },
        "item": {
          "id": "0a96237e-e364-4ec3-8f58-da281b412884",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "ec83e66a-6ed3-4ce4-8531-cabd1d3db851",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6264c2f-4a9d-4f08-bcd9-75ff912300a2",
        "cursor": {
          "ref": "e3b767b0-a7da-4a4c-ad42-1aa92d04d6b1",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "478984d8-cf49-4e4d-b55b-c6454a35aeca"
        },
        "item": {
          "id": "d6264c2f-4a9d-4f08-bcd9-75ff912300a2",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "8f952fe4-9b00-4aee-9252-9bf9ecf17d17",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6264c2f-4a9d-4f08-bcd9-75ff912300a2",
        "cursor": {
          "ref": "e3b767b0-a7da-4a4c-ad42-1aa92d04d6b1",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "478984d8-cf49-4e4d-b55b-c6454a35aeca"
        },
        "item": {
          "id": "d6264c2f-4a9d-4f08-bcd9-75ff912300a2",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "8f952fe4-9b00-4aee-9252-9bf9ecf17d17",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54a718e3-3e01-4daf-862a-a24092179a26",
        "cursor": {
          "ref": "df9f85c3-c067-4c5a-8065-fc9cf7773d6e",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "c1888f5e-366c-495e-b863-56448cae7fb7"
        },
        "item": {
          "id": "54a718e3-3e01-4daf-862a-a24092179a26",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "b128fd01-29e9-4404-9035-fc6161efc084",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 85,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:218)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54a718e3-3e01-4daf-862a-a24092179a26",
        "cursor": {
          "ref": "df9f85c3-c067-4c5a-8065-fc9cf7773d6e",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "c1888f5e-366c-495e-b863-56448cae7fb7"
        },
        "item": {
          "id": "54a718e3-3e01-4daf-862a-a24092179a26",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "b128fd01-29e9-4404-9035-fc6161efc084",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 85,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:218)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9282a3c7-1c8a-44ca-95df-64157334391b",
        "cursor": {
          "ref": "3387580f-43d0-4edf-83b0-ddd87128729f",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "ac93548c-8756-47e7-bd3a-bb2c43c6deab"
        },
        "item": {
          "id": "9282a3c7-1c8a-44ca-95df-64157334391b",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "9365ae02-608e-45c7-8459-e29c78650f91",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9282a3c7-1c8a-44ca-95df-64157334391b",
        "cursor": {
          "ref": "3387580f-43d0-4edf-83b0-ddd87128729f",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "ac93548c-8756-47e7-bd3a-bb2c43c6deab"
        },
        "item": {
          "id": "9282a3c7-1c8a-44ca-95df-64157334391b",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "9365ae02-608e-45c7-8459-e29c78650f91",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81d7b86b-ada5-4098-bb7c-d321c3653d99",
        "cursor": {
          "ref": "608b1e18-7f9e-430e-bda5-c81e080d5349",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "cd74f193-7186-4133-b057-db0abc3aa674"
        },
        "item": {
          "id": "81d7b86b-ada5-4098-bb7c-d321c3653d99",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "609ab5a3-df48-4216-a1af-731e79a675d6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81d7b86b-ada5-4098-bb7c-d321c3653d99",
        "cursor": {
          "ref": "608b1e18-7f9e-430e-bda5-c81e080d5349",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "cd74f193-7186-4133-b057-db0abc3aa674"
        },
        "item": {
          "id": "81d7b86b-ada5-4098-bb7c-d321c3653d99",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "609ab5a3-df48-4216-a1af-731e79a675d6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f695e4b-2a0e-453b-9fce-4584800b3959",
        "cursor": {
          "ref": "5a09df84-e666-4d70-8edb-73d810c3d160",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "7b761727-f5e1-43e8-873f-998fa24d67d9"
        },
        "item": {
          "id": "1f695e4b-2a0e-453b-9fce-4584800b3959",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "bb1c5d4b-e52e-4609-af05-0d1a1839977e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 82,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f695e4b-2a0e-453b-9fce-4584800b3959",
        "cursor": {
          "ref": "5a09df84-e666-4d70-8edb-73d810c3d160",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "7b761727-f5e1-43e8-873f-998fa24d67d9"
        },
        "item": {
          "id": "1f695e4b-2a0e-453b-9fce-4584800b3959",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "bb1c5d4b-e52e-4609-af05-0d1a1839977e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 82,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "599b7048-4ab9-410e-a60b-1a6e84856f9c",
        "cursor": {
          "ref": "fae0c553-8921-4f9d-a0d6-ff954299647d",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "c3a86a8c-aa7e-459d-8725-e6a010b2ac1e"
        },
        "item": {
          "id": "599b7048-4ab9-410e-a60b-1a6e84856f9c",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "c9fd2a53-6f15-4d02-abad-c4e635111bcb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "599b7048-4ab9-410e-a60b-1a6e84856f9c",
        "cursor": {
          "ref": "fae0c553-8921-4f9d-a0d6-ff954299647d",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "c3a86a8c-aa7e-459d-8725-e6a010b2ac1e"
        },
        "item": {
          "id": "599b7048-4ab9-410e-a60b-1a6e84856f9c",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "c9fd2a53-6f15-4d02-abad-c4e635111bcb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aebee4c0-763e-49e6-805e-380e1789a460",
        "cursor": {
          "ref": "3bd4d0ce-892e-4a63-bed2-3f3631ee3b7b",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "b64db4b8-2ac9-4ba1-a082-c57c67e3ee24"
        },
        "item": {
          "id": "aebee4c0-763e-49e6-805e-380e1789a460",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "a3b1155c-3104-4571-9b6c-dbc000698fc3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aebee4c0-763e-49e6-805e-380e1789a460",
        "cursor": {
          "ref": "3bd4d0ce-892e-4a63-bed2-3f3631ee3b7b",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "b64db4b8-2ac9-4ba1-a082-c57c67e3ee24"
        },
        "item": {
          "id": "aebee4c0-763e-49e6-805e-380e1789a460",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "a3b1155c-3104-4571-9b6c-dbc000698fc3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c654692-3314-42f2-84e4-e3deda498f02",
        "cursor": {
          "ref": "7951e2f5-0149-46d3-a41e-86310d5e0cd2",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "0a69ed44-57bc-45ef-a0d5-aa8139a6258f"
        },
        "item": {
          "id": "3c654692-3314-42f2-84e4-e3deda498f02",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "6930f52e-f5ee-4ddd-91e6-a14919439044",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c654692-3314-42f2-84e4-e3deda498f02",
        "cursor": {
          "ref": "7951e2f5-0149-46d3-a41e-86310d5e0cd2",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "0a69ed44-57bc-45ef-a0d5-aa8139a6258f"
        },
        "item": {
          "id": "3c654692-3314-42f2-84e4-e3deda498f02",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "6930f52e-f5ee-4ddd-91e6-a14919439044",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1848e5f8-4450-4a09-860f-4066c2a38483",
        "cursor": {
          "ref": "ef39ec25-a8f9-470c-93ba-365ec0227e5e",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "790c7645-dc67-4718-869e-ca393e6575a7"
        },
        "item": {
          "id": "1848e5f8-4450-4a09-860f-4066c2a38483",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "6519d50e-3826-456c-8d57-cea1257a4a27",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 83,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:225)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1848e5f8-4450-4a09-860f-4066c2a38483",
        "cursor": {
          "ref": "ef39ec25-a8f9-470c-93ba-365ec0227e5e",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "790c7645-dc67-4718-869e-ca393e6575a7"
        },
        "item": {
          "id": "1848e5f8-4450-4a09-860f-4066c2a38483",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "6519d50e-3826-456c-8d57-cea1257a4a27",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 83,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:225)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "373639de-649b-4363-9796-9e741163f4fa",
        "cursor": {
          "ref": "cada80ad-3f26-4c22-8d67-c4cde3d619dc",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "a8054586-0254-415a-8d13-ded91e7ede94"
        },
        "item": {
          "id": "373639de-649b-4363-9796-9e741163f4fa",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "eebd5d4a-891f-480d-964c-97888cceeca7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:226)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "373639de-649b-4363-9796-9e741163f4fa",
        "cursor": {
          "ref": "cada80ad-3f26-4c22-8d67-c4cde3d619dc",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "a8054586-0254-415a-8d13-ded91e7ede94"
        },
        "item": {
          "id": "373639de-649b-4363-9796-9e741163f4fa",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "eebd5d4a-891f-480d-964c-97888cceeca7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:226)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db720a1a-d1d2-4c55-ba55-a1f35377952a",
        "cursor": {
          "ref": "22db42c1-9d8b-4297-9c7f-7572f19e2e48",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "884e8481-25e0-40eb-9fa2-3e8261b74ae5"
        },
        "item": {
          "id": "db720a1a-d1d2-4c55-ba55-a1f35377952a",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "dc56c717-08d2-4e78-bbff-68eab426ef9f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:227)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db720a1a-d1d2-4c55-ba55-a1f35377952a",
        "cursor": {
          "ref": "22db42c1-9d8b-4297-9c7f-7572f19e2e48",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "884e8481-25e0-40eb-9fa2-3e8261b74ae5"
        },
        "item": {
          "id": "db720a1a-d1d2-4c55-ba55-a1f35377952a",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "dc56c717-08d2-4e78-bbff-68eab426ef9f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:227)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "589d2a86-7e51-47d4-9c35-13de3c9b2c9c",
        "cursor": {
          "ref": "b461685c-3267-40e7-87a3-34bf091f56c0",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "cf854045-ef33-4237-b22d-10bd6da29d85"
        },
        "item": {
          "id": "589d2a86-7e51-47d4-9c35-13de3c9b2c9c",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "6d998678-35ad-430c-adf8-e6509905eb20",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:228)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "589d2a86-7e51-47d4-9c35-13de3c9b2c9c",
        "cursor": {
          "ref": "b461685c-3267-40e7-87a3-34bf091f56c0",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "cf854045-ef33-4237-b22d-10bd6da29d85"
        },
        "item": {
          "id": "589d2a86-7e51-47d4-9c35-13de3c9b2c9c",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "6d998678-35ad-430c-adf8-e6509905eb20",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:228)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93fc81eb-6658-4591-b9b0-6fad9d104a48",
        "cursor": {
          "ref": "83138a22-b04c-42ca-bfa8-b79e04a6eee2",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "f9a6e02c-8249-4ac9-b5d2-36342652fcb5"
        },
        "item": {
          "id": "93fc81eb-6658-4591-b9b0-6fad9d104a48",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "a83f6883-22b7-43e8-9b24-0d94894f4af3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:229)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93fc81eb-6658-4591-b9b0-6fad9d104a48",
        "cursor": {
          "ref": "83138a22-b04c-42ca-bfa8-b79e04a6eee2",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "f9a6e02c-8249-4ac9-b5d2-36342652fcb5"
        },
        "item": {
          "id": "93fc81eb-6658-4591-b9b0-6fad9d104a48",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "a83f6883-22b7-43e8-9b24-0d94894f4af3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:229)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f28e43f9-7995-467c-8b5f-f8dc45439306",
        "cursor": {
          "ref": "94abb413-b6d8-4ea4-ad45-38f586ee0395",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "347f8a45-ff85-49bb-aa06-772839ce4c52"
        },
        "item": {
          "id": "f28e43f9-7995-467c-8b5f-f8dc45439306",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "34c8a1f3-ab68-43ed-a451-e954c6ef2cf6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:230)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f28e43f9-7995-467c-8b5f-f8dc45439306",
        "cursor": {
          "ref": "94abb413-b6d8-4ea4-ad45-38f586ee0395",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "347f8a45-ff85-49bb-aa06-772839ce4c52"
        },
        "item": {
          "id": "f28e43f9-7995-467c-8b5f-f8dc45439306",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "34c8a1f3-ab68-43ed-a451-e954c6ef2cf6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:230)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1c632eb-3d52-4c76-96fc-b0798cde38e8",
        "cursor": {
          "ref": "8495ddb2-90cf-46c8-81f3-a782ecd83e1b",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "50b936ab-4cb6-4895-9e63-4451e97a0eee"
        },
        "item": {
          "id": "c1c632eb-3d52-4c76-96fc-b0798cde38e8",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "89b12f9b-2cb8-474c-a2f9-97ce92c70a17",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 87,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:231)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1c632eb-3d52-4c76-96fc-b0798cde38e8",
        "cursor": {
          "ref": "8495ddb2-90cf-46c8-81f3-a782ecd83e1b",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "50b936ab-4cb6-4895-9e63-4451e97a0eee"
        },
        "item": {
          "id": "c1c632eb-3d52-4c76-96fc-b0798cde38e8",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "89b12f9b-2cb8-474c-a2f9-97ce92c70a17",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 87,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:231)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e7bb475-0117-4a7e-9453-48807ab818f9",
        "cursor": {
          "ref": "0adc677a-d669-4cea-ad21-a6ef00cbb553",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "6f3585c3-3dac-4a57-b0dc-55e583d7f1e4"
        },
        "item": {
          "id": "6e7bb475-0117-4a7e-9453-48807ab818f9",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "cbe836d3-4710-4b0e-b7d1-1bce10185a9b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 86,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:232)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e7bb475-0117-4a7e-9453-48807ab818f9",
        "cursor": {
          "ref": "0adc677a-d669-4cea-ad21-a6ef00cbb553",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "6f3585c3-3dac-4a57-b0dc-55e583d7f1e4"
        },
        "item": {
          "id": "6e7bb475-0117-4a7e-9453-48807ab818f9",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "cbe836d3-4710-4b0e-b7d1-1bce10185a9b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 86,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:232)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c33e8747-6cd6-40f5-a6d1-1af837d2fa63",
        "cursor": {
          "ref": "b94fbded-cd38-40d4-8b84-9c97eb8a59b7",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "4d04ad17-3cd1-4470-9139-a932f7f08a09"
        },
        "item": {
          "id": "c33e8747-6cd6-40f5-a6d1-1af837d2fa63",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "e3591904-b2a3-4e8c-92b2-e8595d7ed46d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:233)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c33e8747-6cd6-40f5-a6d1-1af837d2fa63",
        "cursor": {
          "ref": "b94fbded-cd38-40d4-8b84-9c97eb8a59b7",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "4d04ad17-3cd1-4470-9139-a932f7f08a09"
        },
        "item": {
          "id": "c33e8747-6cd6-40f5-a6d1-1af837d2fa63",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "e3591904-b2a3-4e8c-92b2-e8595d7ed46d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:233)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8694bbf-f3e3-4069-89bc-33a9abf5826d",
        "cursor": {
          "ref": "4abe9d8d-f279-42d2-b2d2-f35a2d3f8580",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "db2e87b9-1be0-45b5-b9b8-c4d157a3205c"
        },
        "item": {
          "id": "d8694bbf-f3e3-4069-89bc-33a9abf5826d",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "0fd492b2-9cf9-4ddb-9377-376d983557cb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 83,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:234)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8694bbf-f3e3-4069-89bc-33a9abf5826d",
        "cursor": {
          "ref": "4abe9d8d-f279-42d2-b2d2-f35a2d3f8580",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "db2e87b9-1be0-45b5-b9b8-c4d157a3205c"
        },
        "item": {
          "id": "d8694bbf-f3e3-4069-89bc-33a9abf5826d",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "0fd492b2-9cf9-4ddb-9377-376d983557cb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 83,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:234)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0a6b8d2-b502-47d4-98d1-2182f84d09e5",
        "cursor": {
          "ref": "634486f9-4c7b-45e1-a610-0e9860ed513d",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "594ac6f3-9ae4-4508-b821-8d62b15a5f33"
        },
        "item": {
          "id": "b0a6b8d2-b502-47d4-98d1-2182f84d09e5",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "8e8649fa-d7c6-4395-b14d-b6a87857309e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 82,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:235)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0a6b8d2-b502-47d4-98d1-2182f84d09e5",
        "cursor": {
          "ref": "634486f9-4c7b-45e1-a610-0e9860ed513d",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "594ac6f3-9ae4-4508-b821-8d62b15a5f33"
        },
        "item": {
          "id": "b0a6b8d2-b502-47d4-98d1-2182f84d09e5",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "8e8649fa-d7c6-4395-b14d-b6a87857309e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 82,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:235)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f782076e-d0c0-4b5f-85d6-815774ca97b1",
        "cursor": {
          "ref": "5481c8d8-47c6-43c9-b118-12135060e8d9",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "05e769f2-3419-4ffe-98d8-232a916278c5"
        },
        "item": {
          "id": "f782076e-d0c0-4b5f-85d6-815774ca97b1",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "2cde1ecd-0527-44aa-9b45-e4aed8811a54",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 84,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:236)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f782076e-d0c0-4b5f-85d6-815774ca97b1",
        "cursor": {
          "ref": "5481c8d8-47c6-43c9-b118-12135060e8d9",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "05e769f2-3419-4ffe-98d8-232a916278c5"
        },
        "item": {
          "id": "f782076e-d0c0-4b5f-85d6-815774ca97b1",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "2cde1ecd-0527-44aa-9b45-e4aed8811a54",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 84,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:236)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35bb2794-e090-41f5-971b-04378e71682d",
        "cursor": {
          "ref": "2856ee7a-28fc-4492-b49c-2308e42a1ada",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "fcb5143c-75c1-4201-80e6-75eaca8c684e"
        },
        "item": {
          "id": "35bb2794-e090-41f5-971b-04378e71682d",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "ef6a79dd-547a-4337-b6d1-3d70efaae4ed",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 84,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:237)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35bb2794-e090-41f5-971b-04378e71682d",
        "cursor": {
          "ref": "2856ee7a-28fc-4492-b49c-2308e42a1ada",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "fcb5143c-75c1-4201-80e6-75eaca8c684e"
        },
        "item": {
          "id": "35bb2794-e090-41f5-971b-04378e71682d",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "ef6a79dd-547a-4337-b6d1-3d70efaae4ed",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 84,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:237)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "688164e9-c8fe-4231-8d8a-436e9115d36c",
        "cursor": {
          "ref": "62d6d266-1180-466b-a690-4e5c9728e92e",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "6667e3fe-5745-4114-9596-06e10b25603b"
        },
        "item": {
          "id": "688164e9-c8fe-4231-8d8a-436e9115d36c",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "0a3219dc-f953-4713-b8d5-059636463c20",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 83,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "688164e9-c8fe-4231-8d8a-436e9115d36c",
        "cursor": {
          "ref": "62d6d266-1180-466b-a690-4e5c9728e92e",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "6667e3fe-5745-4114-9596-06e10b25603b"
        },
        "item": {
          "id": "688164e9-c8fe-4231-8d8a-436e9115d36c",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "0a3219dc-f953-4713-b8d5-059636463c20",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 83,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1393b91b-379a-4848-8b05-1aae3ac7a9a4",
        "cursor": {
          "ref": "b76b9efb-dfc6-4064-b281-54db9604ad75",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "ca3ef3f5-fef4-4bf5-897d-2141af0bc723"
        },
        "item": {
          "id": "1393b91b-379a-4848-8b05-1aae3ac7a9a4",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "f0364ef3-70de-483d-8349-0399f52f38b8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 85,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1393b91b-379a-4848-8b05-1aae3ac7a9a4",
        "cursor": {
          "ref": "b76b9efb-dfc6-4064-b281-54db9604ad75",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "ca3ef3f5-fef4-4bf5-897d-2141af0bc723"
        },
        "item": {
          "id": "1393b91b-379a-4848-8b05-1aae3ac7a9a4",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "f0364ef3-70de-483d-8349-0399f52f38b8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 85,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55cfcb97-4ccd-48ec-8c3d-f6de4dc4ac06",
        "cursor": {
          "ref": "2d9f85d0-e268-418a-b4d4-c9e0f3a3dba4",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "7edd4952-cdc2-4efc-aa6e-2848f10f9524"
        },
        "item": {
          "id": "55cfcb97-4ccd-48ec-8c3d-f6de4dc4ac06",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "fd06dcfa-edad-4536-bc12-d87892c33524",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55cfcb97-4ccd-48ec-8c3d-f6de4dc4ac06",
        "cursor": {
          "ref": "2d9f85d0-e268-418a-b4d4-c9e0f3a3dba4",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "7edd4952-cdc2-4efc-aa6e-2848f10f9524"
        },
        "item": {
          "id": "55cfcb97-4ccd-48ec-8c3d-f6de4dc4ac06",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "fd06dcfa-edad-4536-bc12-d87892c33524",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80c4a1ec-86a1-4777-91c3-d5623bdd34cc",
        "cursor": {
          "ref": "ff8d511b-7f9f-4414-bcba-3bec79df51f5",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "ceef5752-2f2a-45dd-a121-bb02cb8eeecc"
        },
        "item": {
          "id": "80c4a1ec-86a1-4777-91c3-d5623bdd34cc",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "47954879-1db0-4bb3-9857-7cabce3d0bd8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 85,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80c4a1ec-86a1-4777-91c3-d5623bdd34cc",
        "cursor": {
          "ref": "ff8d511b-7f9f-4414-bcba-3bec79df51f5",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "ceef5752-2f2a-45dd-a121-bb02cb8eeecc"
        },
        "item": {
          "id": "80c4a1ec-86a1-4777-91c3-d5623bdd34cc",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "47954879-1db0-4bb3-9857-7cabce3d0bd8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 85,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00d99adc-a095-4f98-a1c4-d13b7c1e05ef",
        "cursor": {
          "ref": "d54fd047-9c1b-4bbc-9d1e-22fc805915a6",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "430a6e6d-16d0-4967-95fc-db742d8d503e"
        },
        "item": {
          "id": "00d99adc-a095-4f98-a1c4-d13b7c1e05ef",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "09c429d2-deeb-4088-b40b-acd2742055c6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00d99adc-a095-4f98-a1c4-d13b7c1e05ef",
        "cursor": {
          "ref": "d54fd047-9c1b-4bbc-9d1e-22fc805915a6",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "430a6e6d-16d0-4967-95fc-db742d8d503e"
        },
        "item": {
          "id": "00d99adc-a095-4f98-a1c4-d13b7c1e05ef",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "09c429d2-deeb-4088-b40b-acd2742055c6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3e8468c-56b7-4fb4-b873-290388b6051f",
        "cursor": {
          "ref": "2e2f51d4-3ff7-4d8e-a585-929f504f6390",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "b95ce573-875f-427c-9a77-fafb2d239834"
        },
        "item": {
          "id": "f3e8468c-56b7-4fb4-b873-290388b6051f",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "2a149c00-9e58-4449-bd8c-ace6a12cc645",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:243)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3e8468c-56b7-4fb4-b873-290388b6051f",
        "cursor": {
          "ref": "2e2f51d4-3ff7-4d8e-a585-929f504f6390",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "b95ce573-875f-427c-9a77-fafb2d239834"
        },
        "item": {
          "id": "f3e8468c-56b7-4fb4-b873-290388b6051f",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "2a149c00-9e58-4449-bd8c-ace6a12cc645",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:243)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6cf1ed5-d6f4-4179-b816-3ced72d5b0e1",
        "cursor": {
          "ref": "22c6511a-6ee5-4be6-9c3b-557da1dba459",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "1e78a0b3-fd12-4b01-bcd3-019c137866ae"
        },
        "item": {
          "id": "b6cf1ed5-d6f4-4179-b816-3ced72d5b0e1",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "0348b37f-2750-42c9-b7b1-0df33c31192e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:244)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6cf1ed5-d6f4-4179-b816-3ced72d5b0e1",
        "cursor": {
          "ref": "22c6511a-6ee5-4be6-9c3b-557da1dba459",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "1e78a0b3-fd12-4b01-bcd3-019c137866ae"
        },
        "item": {
          "id": "b6cf1ed5-d6f4-4179-b816-3ced72d5b0e1",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "0348b37f-2750-42c9-b7b1-0df33c31192e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:244)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6b334e4-d58f-4180-989a-6e7e99792823",
        "cursor": {
          "ref": "5d1bb58c-d127-4345-921b-b79b6605cc6f",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "132f2a4d-ca57-4614-a2bd-d55a16c3a40a"
        },
        "item": {
          "id": "d6b334e4-d58f-4180-989a-6e7e99792823",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "da76d9c8-f980-4ce8-83a5-9aaa5aeb0ade",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 95,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:245)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6b334e4-d58f-4180-989a-6e7e99792823",
        "cursor": {
          "ref": "5d1bb58c-d127-4345-921b-b79b6605cc6f",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "132f2a4d-ca57-4614-a2bd-d55a16c3a40a"
        },
        "item": {
          "id": "d6b334e4-d58f-4180-989a-6e7e99792823",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "da76d9c8-f980-4ce8-83a5-9aaa5aeb0ade",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 95,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:245)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71e25fdf-755c-43ae-a751-aef2b69127f6",
        "cursor": {
          "ref": "8e86820b-cb1f-4990-bc0e-23f980d8aca7",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "8c0ed3b4-76a8-4408-b10a-5a5afcf58777"
        },
        "item": {
          "id": "71e25fdf-755c-43ae-a751-aef2b69127f6",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "20ed00c9-a72e-4687-a461-a3e3e37b1c8f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:246)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71e25fdf-755c-43ae-a751-aef2b69127f6",
        "cursor": {
          "ref": "8e86820b-cb1f-4990-bc0e-23f980d8aca7",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "8c0ed3b4-76a8-4408-b10a-5a5afcf58777"
        },
        "item": {
          "id": "71e25fdf-755c-43ae-a751-aef2b69127f6",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "20ed00c9-a72e-4687-a461-a3e3e37b1c8f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:246)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c33f387b-53ea-4b53-976a-454040daafd9",
        "cursor": {
          "ref": "be9030a6-fb05-4909-b90c-9cff3d77024c",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "7e7a7128-b2f4-4ba5-97cb-903092b00c74"
        },
        "item": {
          "id": "c33f387b-53ea-4b53-976a-454040daafd9",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "4a9da160-6f81-403d-8e37-b7da5d1687ed",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 82,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c33f387b-53ea-4b53-976a-454040daafd9",
        "cursor": {
          "ref": "be9030a6-fb05-4909-b90c-9cff3d77024c",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "7e7a7128-b2f4-4ba5-97cb-903092b00c74"
        },
        "item": {
          "id": "c33f387b-53ea-4b53-976a-454040daafd9",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "4a9da160-6f81-403d-8e37-b7da5d1687ed",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 82,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77906cff-d36c-432a-88c5-b42e127ada0d",
        "cursor": {
          "ref": "90d77dcf-681d-4de3-87c2-4c272b5e1201",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "a6f0636b-648f-4e86-9433-ae27cc2bb085"
        },
        "item": {
          "id": "77906cff-d36c-432a-88c5-b42e127ada0d",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "06d10ac9-9add-4b0e-a5b3-79abda78ef09",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77906cff-d36c-432a-88c5-b42e127ada0d",
        "cursor": {
          "ref": "90d77dcf-681d-4de3-87c2-4c272b5e1201",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "a6f0636b-648f-4e86-9433-ae27cc2bb085"
        },
        "item": {
          "id": "77906cff-d36c-432a-88c5-b42e127ada0d",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "06d10ac9-9add-4b0e-a5b3-79abda78ef09",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b45d94ad-5bbb-4e47-83fc-b4b6ec76d993",
        "cursor": {
          "ref": "5a5e5f70-3e49-410c-9218-97de3da50bc3",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "89446f12-f967-4e47-8960-b49c76b5064b"
        },
        "item": {
          "id": "b45d94ad-5bbb-4e47-83fc-b4b6ec76d993",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "cd48653d-2dc2-4dcd-a84c-e581d9c3f0e2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 84,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b45d94ad-5bbb-4e47-83fc-b4b6ec76d993",
        "cursor": {
          "ref": "5a5e5f70-3e49-410c-9218-97de3da50bc3",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "89446f12-f967-4e47-8960-b49c76b5064b"
        },
        "item": {
          "id": "b45d94ad-5bbb-4e47-83fc-b4b6ec76d993",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "cd48653d-2dc2-4dcd-a84c-e581d9c3f0e2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 84,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9be781d-3f61-43ef-94da-7e89fe99f5f5",
        "cursor": {
          "ref": "c4e35604-07bb-4f56-a838-9ae542b8226a",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "8f16c413-5504-481a-b1c6-c662773d3b5e"
        },
        "item": {
          "id": "a9be781d-3f61-43ef-94da-7e89fe99f5f5",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "40944d91-0c81-4d25-bbed-8c6bcd726a8b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 88,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9be781d-3f61-43ef-94da-7e89fe99f5f5",
        "cursor": {
          "ref": "c4e35604-07bb-4f56-a838-9ae542b8226a",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "8f16c413-5504-481a-b1c6-c662773d3b5e"
        },
        "item": {
          "id": "a9be781d-3f61-43ef-94da-7e89fe99f5f5",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "40944d91-0c81-4d25-bbed-8c6bcd726a8b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 88,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57b65ab8-736c-424a-92de-0836974f494c",
        "cursor": {
          "ref": "f49fac78-e544-4508-82b5-499a58520f26",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "5d60c2aa-aca9-4c24-a983-ef7d5d3fcf4b"
        },
        "item": {
          "id": "57b65ab8-736c-424a-92de-0836974f494c",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "e0ecc077-7878-4802-8d54-6cb669c43eee",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 85,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57b65ab8-736c-424a-92de-0836974f494c",
        "cursor": {
          "ref": "f49fac78-e544-4508-82b5-499a58520f26",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "5d60c2aa-aca9-4c24-a983-ef7d5d3fcf4b"
        },
        "item": {
          "id": "57b65ab8-736c-424a-92de-0836974f494c",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "e0ecc077-7878-4802-8d54-6cb669c43eee",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 85,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa11f7b0-c065-4900-9c79-82df63f9bcb0",
        "cursor": {
          "ref": "e5f7fb8e-e92e-4176-9fb5-f6ca3f49fdcd",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "bd2585da-6e47-4df7-a8ab-234d5aa99f5d"
        },
        "item": {
          "id": "fa11f7b0-c065-4900-9c79-82df63f9bcb0",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "5e9535c9-a1f6-4301-b149-28bc10e10b31",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 85,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa11f7b0-c065-4900-9c79-82df63f9bcb0",
        "cursor": {
          "ref": "e5f7fb8e-e92e-4176-9fb5-f6ca3f49fdcd",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "bd2585da-6e47-4df7-a8ab-234d5aa99f5d"
        },
        "item": {
          "id": "fa11f7b0-c065-4900-9c79-82df63f9bcb0",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "5e9535c9-a1f6-4301-b149-28bc10e10b31",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 85,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0706b418-754b-47fc-98df-c7450704c015",
        "cursor": {
          "ref": "c369f83e-eb15-4a39-b084-6251299d968c",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "dbec8866-f0c1-4722-a0ad-f537070ba497"
        },
        "item": {
          "id": "0706b418-754b-47fc-98df-c7450704c015",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "ec28a2bb-e70a-47f5-8f5e-aa48788b3494",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:253)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0706b418-754b-47fc-98df-c7450704c015",
        "cursor": {
          "ref": "c369f83e-eb15-4a39-b084-6251299d968c",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "dbec8866-f0c1-4722-a0ad-f537070ba497"
        },
        "item": {
          "id": "0706b418-754b-47fc-98df-c7450704c015",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "ec28a2bb-e70a-47f5-8f5e-aa48788b3494",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:253)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "044d3253-8180-4cb5-be3c-6cb4543c782e",
        "cursor": {
          "ref": "3fb48930-2e3e-4057-a0a4-735d8f9275fa",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "8ffcff68-799d-49e8-9775-7c21d81e340d"
        },
        "item": {
          "id": "044d3253-8180-4cb5-be3c-6cb4543c782e",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "3107c982-f61a-4138-8575-78cfb1201e15",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:254)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "044d3253-8180-4cb5-be3c-6cb4543c782e",
        "cursor": {
          "ref": "3fb48930-2e3e-4057-a0a4-735d8f9275fa",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "8ffcff68-799d-49e8-9775-7c21d81e340d"
        },
        "item": {
          "id": "044d3253-8180-4cb5-be3c-6cb4543c782e",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "3107c982-f61a-4138-8575-78cfb1201e15",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:254)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "429ed332-cdf1-4489-9dba-c7a9c1c93a2e",
        "cursor": {
          "ref": "e60e18c8-ceee-4b94-a99f-833ce8bb2cb2",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "01b52e45-4229-41c2-b583-c2a73c71cff4"
        },
        "item": {
          "id": "429ed332-cdf1-4489-9dba-c7a9c1c93a2e",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "1babc192-b705-4169-977f-dddbac39ffde",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:255)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "429ed332-cdf1-4489-9dba-c7a9c1c93a2e",
        "cursor": {
          "ref": "e60e18c8-ceee-4b94-a99f-833ce8bb2cb2",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "01b52e45-4229-41c2-b583-c2a73c71cff4"
        },
        "item": {
          "id": "429ed332-cdf1-4489-9dba-c7a9c1c93a2e",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "1babc192-b705-4169-977f-dddbac39ffde",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:255)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70622529-1094-4ffc-861a-99a1a8f7d2d6",
        "cursor": {
          "ref": "6777bf4f-1472-450a-aca7-d88550aaf8e7",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "bf451a1f-2991-452b-b9a2-61c3208033f3"
        },
        "item": {
          "id": "70622529-1094-4ffc-861a-99a1a8f7d2d6",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "3f6805f0-bc31-478a-aee0-ea0b8dc0a361",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 82,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:256)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70622529-1094-4ffc-861a-99a1a8f7d2d6",
        "cursor": {
          "ref": "6777bf4f-1472-450a-aca7-d88550aaf8e7",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "bf451a1f-2991-452b-b9a2-61c3208033f3"
        },
        "item": {
          "id": "70622529-1094-4ffc-861a-99a1a8f7d2d6",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "3f6805f0-bc31-478a-aee0-ea0b8dc0a361",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 82,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:256)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68c81c16-e956-49f4-a942-2fc78482e8d4",
        "cursor": {
          "ref": "38d22d98-a9d6-4c04-9972-c8f5af66a917",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "869c941e-6c7d-4947-b9b1-6eecc3d0184f"
        },
        "item": {
          "id": "68c81c16-e956-49f4-a942-2fc78482e8d4",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "e5a32898-a75a-4bbf-aeaa-66b9cffe8bcd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 83,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:257)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68c81c16-e956-49f4-a942-2fc78482e8d4",
        "cursor": {
          "ref": "38d22d98-a9d6-4c04-9972-c8f5af66a917",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "869c941e-6c7d-4947-b9b1-6eecc3d0184f"
        },
        "item": {
          "id": "68c81c16-e956-49f4-a942-2fc78482e8d4",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "e5a32898-a75a-4bbf-aeaa-66b9cffe8bcd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 83,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:257)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4268c2fa-3051-49f9-89d8-cc3cc12a093b",
        "cursor": {
          "ref": "f0a81f7b-9968-436d-8e30-7d270212a4ef",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "f647db42-4ba1-4ccd-8654-976b16b72875"
        },
        "item": {
          "id": "4268c2fa-3051-49f9-89d8-cc3cc12a093b",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "1a9da05e-f604-4e3c-b559-177b5a4d54e0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:258)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4268c2fa-3051-49f9-89d8-cc3cc12a093b",
        "cursor": {
          "ref": "f0a81f7b-9968-436d-8e30-7d270212a4ef",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "f647db42-4ba1-4ccd-8654-976b16b72875"
        },
        "item": {
          "id": "4268c2fa-3051-49f9-89d8-cc3cc12a093b",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "1a9da05e-f604-4e3c-b559-177b5a4d54e0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:258)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86453bc9-3b55-4b24-80ae-e502897b102e",
        "cursor": {
          "ref": "e30d26ed-fa51-4d52-b25d-e1c918a31d95",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "02c94ac1-26a2-448d-8a7e-8f9a80bac246"
        },
        "item": {
          "id": "86453bc9-3b55-4b24-80ae-e502897b102e",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "ac50dce7-218f-4f48-8328-41f4e2a992c1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:259)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86453bc9-3b55-4b24-80ae-e502897b102e",
        "cursor": {
          "ref": "e30d26ed-fa51-4d52-b25d-e1c918a31d95",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "02c94ac1-26a2-448d-8a7e-8f9a80bac246"
        },
        "item": {
          "id": "86453bc9-3b55-4b24-80ae-e502897b102e",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "ac50dce7-218f-4f48-8328-41f4e2a992c1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:259)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8f93f8b-e621-4979-b570-29065e5270bc",
        "cursor": {
          "ref": "1afe2202-79c1-4f42-a123-65a081d2dfa3",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "5434b83b-bae0-4167-8495-b42213da7af0"
        },
        "item": {
          "id": "d8f93f8b-e621-4979-b570-29065e5270bc",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "4c3065df-db42-4a30-9eb8-9e27d62e20e9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:260)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8f93f8b-e621-4979-b570-29065e5270bc",
        "cursor": {
          "ref": "1afe2202-79c1-4f42-a123-65a081d2dfa3",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "5434b83b-bae0-4167-8495-b42213da7af0"
        },
        "item": {
          "id": "d8f93f8b-e621-4979-b570-29065e5270bc",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "4c3065df-db42-4a30-9eb8-9e27d62e20e9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:260)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aee6f31c-4a22-4046-a8a6-f4d05be659af",
        "cursor": {
          "ref": "d4699e3d-7eee-41eb-853f-07cf260e08d1",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "ef2eec44-2a14-4916-9745-c9aebd3cd8af"
        },
        "item": {
          "id": "aee6f31c-4a22-4046-a8a6-f4d05be659af",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "be87f39b-62c9-4023-96d1-2814bbc5b419",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:261)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aee6f31c-4a22-4046-a8a6-f4d05be659af",
        "cursor": {
          "ref": "d4699e3d-7eee-41eb-853f-07cf260e08d1",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "ef2eec44-2a14-4916-9745-c9aebd3cd8af"
        },
        "item": {
          "id": "aee6f31c-4a22-4046-a8a6-f4d05be659af",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "be87f39b-62c9-4023-96d1-2814bbc5b419",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:261)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e593506-efc2-4eae-984f-2743d144625e",
        "cursor": {
          "ref": "a21320d4-454b-4fc8-83ea-f1955bf09a57",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "f302db34-e0d4-4506-b4e5-9d7b62a2a405"
        },
        "item": {
          "id": "5e593506-efc2-4eae-984f-2743d144625e",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "15a0c701-9b31-44ea-9076-1d84598ff3de",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:262)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e593506-efc2-4eae-984f-2743d144625e",
        "cursor": {
          "ref": "a21320d4-454b-4fc8-83ea-f1955bf09a57",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "f302db34-e0d4-4506-b4e5-9d7b62a2a405"
        },
        "item": {
          "id": "5e593506-efc2-4eae-984f-2743d144625e",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "15a0c701-9b31-44ea-9076-1d84598ff3de",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:262)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfbb95fa-66b9-4306-a6fd-4dd54c6bea47",
        "cursor": {
          "ref": "8a1c844e-86a1-44a6-854a-7e387e3d5dc3",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "7f23a484-68fa-4d6f-bc9c-f90af18749be"
        },
        "item": {
          "id": "dfbb95fa-66b9-4306-a6fd-4dd54c6bea47",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "cf0da474-85c1-4f2f-b942-4d4024d1067b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 84,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:263)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfbb95fa-66b9-4306-a6fd-4dd54c6bea47",
        "cursor": {
          "ref": "8a1c844e-86a1-44a6-854a-7e387e3d5dc3",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "7f23a484-68fa-4d6f-bc9c-f90af18749be"
        },
        "item": {
          "id": "dfbb95fa-66b9-4306-a6fd-4dd54c6bea47",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "cf0da474-85c1-4f2f-b942-4d4024d1067b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 84,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:263)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4816bbcb-b28c-445a-95a0-d3890926c39f",
        "cursor": {
          "ref": "4b250580-2018-45a6-a332-7abafec107cd",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "93ed58f7-49ab-409e-992a-8f20e7fcef33"
        },
        "item": {
          "id": "4816bbcb-b28c-445a-95a0-d3890926c39f",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "528c2868-58b2-420b-bc1c-41ad30e622c1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 82,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:264)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4816bbcb-b28c-445a-95a0-d3890926c39f",
        "cursor": {
          "ref": "4b250580-2018-45a6-a332-7abafec107cd",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "93ed58f7-49ab-409e-992a-8f20e7fcef33"
        },
        "item": {
          "id": "4816bbcb-b28c-445a-95a0-d3890926c39f",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "528c2868-58b2-420b-bc1c-41ad30e622c1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 82,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:264)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87b37eed-7c2d-436d-a964-3ba8baa84064",
        "cursor": {
          "ref": "d7062715-36cf-4e07-a00f-8e0a1ff347dc",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "66e3af94-0c22-438a-88c4-823abf562e38"
        },
        "item": {
          "id": "87b37eed-7c2d-436d-a964-3ba8baa84064",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "2f225b2f-44ff-4a7d-903d-28b2e8283268",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:265)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87b37eed-7c2d-436d-a964-3ba8baa84064",
        "cursor": {
          "ref": "d7062715-36cf-4e07-a00f-8e0a1ff347dc",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "66e3af94-0c22-438a-88c4-823abf562e38"
        },
        "item": {
          "id": "87b37eed-7c2d-436d-a964-3ba8baa84064",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "2f225b2f-44ff-4a7d-903d-28b2e8283268",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:265)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d8df841-45f8-4d2f-a10c-8087fbcea8ee",
        "cursor": {
          "ref": "cef54f8c-ba68-4e5d-b90d-76d8674c7858",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "98724ee4-38f5-4895-9589-c4946854f96d"
        },
        "item": {
          "id": "7d8df841-45f8-4d2f-a10c-8087fbcea8ee",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "9cffe674-0226-4ab7-97b9-2571961bc1dc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:266)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d8df841-45f8-4d2f-a10c-8087fbcea8ee",
        "cursor": {
          "ref": "cef54f8c-ba68-4e5d-b90d-76d8674c7858",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "98724ee4-38f5-4895-9589-c4946854f96d"
        },
        "item": {
          "id": "7d8df841-45f8-4d2f-a10c-8087fbcea8ee",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "9cffe674-0226-4ab7-97b9-2571961bc1dc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:266)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79197b6b-d9a6-4d70-bec8-86d922b49e9a",
        "cursor": {
          "ref": "cc1af65f-3356-45e5-a626-73c54fadf68e",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "cdebfef2-d322-4fdf-93c7-3106f51588a2"
        },
        "item": {
          "id": "79197b6b-d9a6-4d70-bec8-86d922b49e9a",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "2e869869-eb20-4186-bc51-5c853961d684",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:267)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79197b6b-d9a6-4d70-bec8-86d922b49e9a",
        "cursor": {
          "ref": "cc1af65f-3356-45e5-a626-73c54fadf68e",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "cdebfef2-d322-4fdf-93c7-3106f51588a2"
        },
        "item": {
          "id": "79197b6b-d9a6-4d70-bec8-86d922b49e9a",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "2e869869-eb20-4186-bc51-5c853961d684",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:267)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "515f1280-706a-42ab-9c55-62b4714c809d",
        "cursor": {
          "ref": "ddab49a0-c7e4-4f16-bf1b-1566e4f6746f",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "44e26ed8-c8f3-4d59-80f0-d3168dff2970"
        },
        "item": {
          "id": "515f1280-706a-42ab-9c55-62b4714c809d",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "da2e7d46-0ab1-4bba-b2f9-a0b13314836c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 87,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:268)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "515f1280-706a-42ab-9c55-62b4714c809d",
        "cursor": {
          "ref": "ddab49a0-c7e4-4f16-bf1b-1566e4f6746f",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "44e26ed8-c8f3-4d59-80f0-d3168dff2970"
        },
        "item": {
          "id": "515f1280-706a-42ab-9c55-62b4714c809d",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "da2e7d46-0ab1-4bba-b2f9-a0b13314836c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 87,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:268)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0117372d-8c60-46e6-b457-53def0e88e07",
        "cursor": {
          "ref": "f4b66b8a-f4d4-49c9-b5a1-effbb75ef3d4",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "a3e27692-48b4-4a40-ac7d-6130cfe16918"
        },
        "item": {
          "id": "0117372d-8c60-46e6-b457-53def0e88e07",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "6171caf0-974b-41a3-92a5-aa41957df9f8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 89,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:269)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0117372d-8c60-46e6-b457-53def0e88e07",
        "cursor": {
          "ref": "f4b66b8a-f4d4-49c9-b5a1-effbb75ef3d4",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "a3e27692-48b4-4a40-ac7d-6130cfe16918"
        },
        "item": {
          "id": "0117372d-8c60-46e6-b457-53def0e88e07",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "6171caf0-974b-41a3-92a5-aa41957df9f8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 89,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:269)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aafde68d-003f-479b-bd4e-e2c6dcb0a006",
        "cursor": {
          "ref": "9a36508c-d102-445b-be95-01f2ce143ff1",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "9a548674-aa11-4ab1-bdb4-d81f74ff6f4b"
        },
        "item": {
          "id": "aafde68d-003f-479b-bd4e-e2c6dcb0a006",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "53debcd5-8dcb-448e-a0cf-651b4dc09fec",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:270)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aafde68d-003f-479b-bd4e-e2c6dcb0a006",
        "cursor": {
          "ref": "9a36508c-d102-445b-be95-01f2ce143ff1",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "9a548674-aa11-4ab1-bdb4-d81f74ff6f4b"
        },
        "item": {
          "id": "aafde68d-003f-479b-bd4e-e2c6dcb0a006",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "53debcd5-8dcb-448e-a0cf-651b4dc09fec",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:270)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c41ceae-c1a6-471f-a621-554833d11a2b",
        "cursor": {
          "ref": "335c9cbf-923d-4afd-95b9-bc27e89b857c",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "6d51d8d2-0b91-4b05-9c68-92429af61577"
        },
        "item": {
          "id": "3c41ceae-c1a6-471f-a621-554833d11a2b",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "89efda25-d9cf-4c4e-981a-66dc813e866e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:271)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c41ceae-c1a6-471f-a621-554833d11a2b",
        "cursor": {
          "ref": "335c9cbf-923d-4afd-95b9-bc27e89b857c",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "6d51d8d2-0b91-4b05-9c68-92429af61577"
        },
        "item": {
          "id": "3c41ceae-c1a6-471f-a621-554833d11a2b",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "89efda25-d9cf-4c4e-981a-66dc813e866e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:271)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e189db0-23d8-42ff-9b2b-012e2bce4a10",
        "cursor": {
          "ref": "025c54a7-6372-4bc0-8ba9-539bd7bd6344",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "6482a022-98bb-4c32-9bcb-19e3cb03d7d6"
        },
        "item": {
          "id": "8e189db0-23d8-42ff-9b2b-012e2bce4a10",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "ba6255b7-fa2e-4862-84d9-6a53260991a3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 86,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:272)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e189db0-23d8-42ff-9b2b-012e2bce4a10",
        "cursor": {
          "ref": "025c54a7-6372-4bc0-8ba9-539bd7bd6344",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "6482a022-98bb-4c32-9bcb-19e3cb03d7d6"
        },
        "item": {
          "id": "8e189db0-23d8-42ff-9b2b-012e2bce4a10",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "ba6255b7-fa2e-4862-84d9-6a53260991a3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 86,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:272)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2878f7d5-b806-4237-9cbc-d7c32156c77a",
        "cursor": {
          "ref": "3e859446-bdfb-4921-b251-c64da32000ba",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "ba67194f-9805-403f-83b7-30ca78696fda"
        },
        "item": {
          "id": "2878f7d5-b806-4237-9cbc-d7c32156c77a",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "76c7e9b7-80f4-437d-8d21-501949649cef",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 85,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:273)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2878f7d5-b806-4237-9cbc-d7c32156c77a",
        "cursor": {
          "ref": "3e859446-bdfb-4921-b251-c64da32000ba",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "ba67194f-9805-403f-83b7-30ca78696fda"
        },
        "item": {
          "id": "2878f7d5-b806-4237-9cbc-d7c32156c77a",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "76c7e9b7-80f4-437d-8d21-501949649cef",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 85,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:273)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0dc9653d-7c6a-4e25-aa32-b5e9c59e7592",
        "cursor": {
          "ref": "1c47a1f4-1206-4390-bfa1-32eaa3c93f56",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "ffcd1054-8ef7-44e5-8d5d-45d88203f177"
        },
        "item": {
          "id": "0dc9653d-7c6a-4e25-aa32-b5e9c59e7592",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "ff5e8f8d-e8ea-4107-b5fa-5388c6896b26",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 82,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:274)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0dc9653d-7c6a-4e25-aa32-b5e9c59e7592",
        "cursor": {
          "ref": "1c47a1f4-1206-4390-bfa1-32eaa3c93f56",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "ffcd1054-8ef7-44e5-8d5d-45d88203f177"
        },
        "item": {
          "id": "0dc9653d-7c6a-4e25-aa32-b5e9c59e7592",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "ff5e8f8d-e8ea-4107-b5fa-5388c6896b26",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 82,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:274)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d052cf67-63a7-491e-a518-924ee336d4a3",
        "cursor": {
          "ref": "808783ad-5e52-4263-ae6e-f3d59bf1e7c6",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "6fa380d2-a292-4e30-ac2f-915657632314"
        },
        "item": {
          "id": "d052cf67-63a7-491e-a518-924ee336d4a3",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "9e9bd7e0-150e-4a9d-aa5f-6698410f3c53",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 83,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:275)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d052cf67-63a7-491e-a518-924ee336d4a3",
        "cursor": {
          "ref": "808783ad-5e52-4263-ae6e-f3d59bf1e7c6",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "6fa380d2-a292-4e30-ac2f-915657632314"
        },
        "item": {
          "id": "d052cf67-63a7-491e-a518-924ee336d4a3",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "9e9bd7e0-150e-4a9d-aa5f-6698410f3c53",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 83,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:275)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7bc0aa7-1dea-40d7-9dab-832ceace34aa",
        "cursor": {
          "ref": "b4a967a3-923a-4f49-b18c-0b3675c414fb",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "a7bdc65b-b345-4e8a-8863-e24aa0d10a18"
        },
        "item": {
          "id": "b7bc0aa7-1dea-40d7-9dab-832ceace34aa",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "d7d7fc37-e0c5-463a-8348-61dae90cc281",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:276)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7bc0aa7-1dea-40d7-9dab-832ceace34aa",
        "cursor": {
          "ref": "b4a967a3-923a-4f49-b18c-0b3675c414fb",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "a7bdc65b-b345-4e8a-8863-e24aa0d10a18"
        },
        "item": {
          "id": "b7bc0aa7-1dea-40d7-9dab-832ceace34aa",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "d7d7fc37-e0c5-463a-8348-61dae90cc281",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:276)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48c463d9-a98b-4208-ab82-08c62e578b40",
        "cursor": {
          "ref": "d0f8ffc9-97f1-4317-a59c-d0dab4e195b5",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "51c65165-8a68-4126-bea0-e18a8cd6c8a2"
        },
        "item": {
          "id": "48c463d9-a98b-4208-ab82-08c62e578b40",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "94b6f51d-503a-4670-a601-3fea9fb7f43b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48c463d9-a98b-4208-ab82-08c62e578b40",
        "cursor": {
          "ref": "d0f8ffc9-97f1-4317-a59c-d0dab4e195b5",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "51c65165-8a68-4126-bea0-e18a8cd6c8a2"
        },
        "item": {
          "id": "48c463d9-a98b-4208-ab82-08c62e578b40",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "94b6f51d-503a-4670-a601-3fea9fb7f43b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62d11737-6840-4c00-b62f-488f748924ef",
        "cursor": {
          "ref": "e7a449b7-57bc-4917-afdf-0c9f046c30db",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "f86198a7-8b36-41df-ac11-8150f1c57ea5"
        },
        "item": {
          "id": "62d11737-6840-4c00-b62f-488f748924ef",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "8ed47899-786f-4cb6-9f32-73e6b02e960c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:278)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:278)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected undefined to be false",
              "stack": "AssertionError: expected undefined to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "62d11737-6840-4c00-b62f-488f748924ef",
        "cursor": {
          "ref": "e7a449b7-57bc-4917-afdf-0c9f046c30db",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "f86198a7-8b36-41df-ac11-8150f1c57ea5"
        },
        "item": {
          "id": "62d11737-6840-4c00-b62f-488f748924ef",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "8ed47899-786f-4cb6-9f32-73e6b02e960c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:278)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:278)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected undefined to be false",
              "stack": "AssertionError: expected undefined to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "4fd2dc12-23a1-4394-9adc-d4811745154e",
        "cursor": {
          "ref": "7f6daa90-409f-4a50-ac09-d30aec0794eb",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "e435b62a-d954-4414-adfe-c796633f8d92"
        },
        "item": {
          "id": "4fd2dc12-23a1-4394-9adc-d4811745154e",
          "name": "credentials_verify"
        },
        "response": {
          "id": "5f2aa069-6e30-4473-a698-41ab04e692ea",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 82,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:279)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:279)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:279)"
            }
          }
        ]
      },
      {
        "id": "4fd2dc12-23a1-4394-9adc-d4811745154e",
        "cursor": {
          "ref": "7f6daa90-409f-4a50-ac09-d30aec0794eb",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "e435b62a-d954-4414-adfe-c796633f8d92"
        },
        "item": {
          "id": "4fd2dc12-23a1-4394-9adc-d4811745154e",
          "name": "credentials_verify"
        },
        "response": {
          "id": "5f2aa069-6e30-4473-a698-41ab04e692ea",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 82,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:279)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:279)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:279)"
            }
          }
        ]
      },
      {
        "id": "a955cc48-1acc-4a6a-a6fb-62bba19de9d0",
        "cursor": {
          "ref": "eeb67f34-f754-41f7-bd65-5f15128238d8",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "51b6a994-9ff1-42a8-928d-0d95e634b752"
        },
        "item": {
          "id": "a955cc48-1acc-4a6a-a6fb-62bba19de9d0",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "74e8a407-791a-492d-9835-a6ac30f3734a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 84,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:280)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:280)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:280)"
            }
          }
        ]
      },
      {
        "id": "a955cc48-1acc-4a6a-a6fb-62bba19de9d0",
        "cursor": {
          "ref": "eeb67f34-f754-41f7-bd65-5f15128238d8",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "51b6a994-9ff1-42a8-928d-0d95e634b752"
        },
        "item": {
          "id": "a955cc48-1acc-4a6a-a6fb-62bba19de9d0",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "74e8a407-791a-492d-9835-a6ac30f3734a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 84,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:280)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:280)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:280)"
            }
          }
        ]
      },
      {
        "id": "21c71d20-c965-4725-acc6-5fdd736ffdfc",
        "cursor": {
          "ref": "4b841d2f-6298-466f-a66d-588dcaf86b8a",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "ec9c26ea-667b-4392-ab75-bc1dbf38f177"
        },
        "item": {
          "id": "21c71d20-c965-4725-acc6-5fdd736ffdfc",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "b29d6dbe-da2b-46e5-8ba9-7a12d538ebba",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21c71d20-c965-4725-acc6-5fdd736ffdfc",
        "cursor": {
          "ref": "4b841d2f-6298-466f-a66d-588dcaf86b8a",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "ec9c26ea-667b-4392-ab75-bc1dbf38f177"
        },
        "item": {
          "id": "21c71d20-c965-4725-acc6-5fdd736ffdfc",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "b29d6dbe-da2b-46e5-8ba9-7a12d538ebba",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21c71d20-c965-4725-acc6-5fdd736ffdfc",
        "cursor": {
          "ref": "4b841d2f-6298-466f-a66d-588dcaf86b8a",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "ec9c26ea-667b-4392-ab75-bc1dbf38f177"
        },
        "item": {
          "id": "21c71d20-c965-4725-acc6-5fdd736ffdfc",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "b29d6dbe-da2b-46e5-8ba9-7a12d538ebba",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "acf6cbb0-ee3a-4d58-9e82-8054005d5797",
        "cursor": {
          "ref": "0ec763a7-d0f5-4b52-8fc8-a638fbebec17",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "ae0d7572-cb87-4421-8584-21fabdfddfef"
        },
        "item": {
          "id": "acf6cbb0-ee3a-4d58-9e82-8054005d5797",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "d5cf2e98-bc47-4d5a-8d9d-b2e013016391",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 86,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "acf6cbb0-ee3a-4d58-9e82-8054005d5797",
        "cursor": {
          "ref": "0ec763a7-d0f5-4b52-8fc8-a638fbebec17",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "ae0d7572-cb87-4421-8584-21fabdfddfef"
        },
        "item": {
          "id": "acf6cbb0-ee3a-4d58-9e82-8054005d5797",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "d5cf2e98-bc47-4d5a-8d9d-b2e013016391",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 86,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd8557ba-6d08-484b-a63f-930ae8d6ceec",
        "cursor": {
          "ref": "092f23d5-3d95-4b91-96c8-afc1307fb11d",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "9ccdcf82-66d8-4522-96e2-8ddabc3c22b7"
        },
        "item": {
          "id": "fd8557ba-6d08-484b-a63f-930ae8d6ceec",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "30c3d988-857a-4d39-82f3-bd281eca62bf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 82,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd8557ba-6d08-484b-a63f-930ae8d6ceec",
        "cursor": {
          "ref": "092f23d5-3d95-4b91-96c8-afc1307fb11d",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "9ccdcf82-66d8-4522-96e2-8ddabc3c22b7"
        },
        "item": {
          "id": "fd8557ba-6d08-484b-a63f-930ae8d6ceec",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "30c3d988-857a-4d39-82f3-bd281eca62bf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 82,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}