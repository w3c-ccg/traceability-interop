{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "b590227c-258e-40c2-84b8-241f20fadcd5",
        "name": "Clear Cache",
        "item": [
          {
            "id": "9b4b3c30-91b8-4920-8947-8549b82a374b",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "f1f317a3-e9a1-40ce-8021-f2765576516d",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "1a855261-bd25-4c2e-bb66-d992aa11f54f"
                }
              }
            ]
          },
          {
            "id": "25b4eaf3-c594-4915-9e67-dc79563aa062",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "60d45641-c4c4-4560-b129-e912418b576a",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "67ed25b9-e705-46b4-925d-b41d066d1ea6"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "36016525-cdd4-4085-8bd1-658444f359ff",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "815c3e3c-d7be-4ab9-a86c-3741d26448e7",
            "name": "Positive Testing",
            "item": [
              {
                "id": "552b9427-c764-4a86-9784-d230928b36d9",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2fdd31a9-becd-4ab0-b311-bb4ab6c981b2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5d575475-2cff-4893-8ed5-e071ac3d10de"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "867f5cd3-ef88-4f8c-87be-fbea90501672",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "eef05ca9-daba-4893-917d-928b29fa6a06"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "b567fc63-1c5c-4bf9-b921-c98bb2adeb94",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "f854e16e-eea6-4db6-a4f5-55db593a38d9"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c0ea9352-6bf3-4940-ba27-80fe4f3998f0",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "115a0b8f-2c3b-4d7f-91cc-1a31eed77589"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4aae02c6-7341-40dc-a1fd-166b835a8a64",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f70ccaeb-ae35-4dc7-8624-bfd6d2edf93a"
            }
          }
        ]
      },
      {
        "id": "39f8b6d8-4265-40d9-b2a0-651323e78bba",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "d56a78e8-57f3-4b80-81ef-52d035083bdb",
            "name": "Negative Testing",
            "item": [
              {
                "id": "93ced8f5-be36-40fd-b2e3-660068978b91",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "f0040cd7-c2dc-4fa3-b159-4eaa1a381dbd",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2d2d056-87b4-4293-8149-4f1e9a6743a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "58a9cc50-254e-4cee-9ef3-4f36d49e79a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd3394c0-c351-44b7-a4ed-7dcd0df467b5",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24a6ed49-fb71-4ef8-a054-bb7e375e1f57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "95025156-f58b-47be-bd2e-0077301f1c47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f1cfe49-b209-4b4f-9d80-fbe332ae4090",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c4fe309-287a-460d-9d1b-fe58dadbcc64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "efd89e07-ddb7-46fe-b998-0c08d1d1502f"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "138622d6-0cb8-4c62-95cc-7873ac1b6d41",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "3862bc36-9709-4190-a3a8-87a8c810937b",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a83bd09e-1496-4c87-9d60-2111933866a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "61a4d206-fa03-4b39-b587-f0061697e57e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0ed11bf-10c5-420f-bb36-c1d3634b46aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb81cddd-cff7-4eb8-8a32-04d40db7e1dd"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "b1d183c0-7607-44ed-b8ac-ace00182148e",
            "name": "Positive Testing",
            "item": [
              {
                "id": "56b0618d-a7a1-4cf1-a400-48a68a572890",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "91e90015-f119-497d-9b5c-71d5da2273bb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "857048c6-19d0-4e1b-9e26-aa06ca9ae8f5"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b4746bb3-a1b2-4788-86d4-1f58e5529a41",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "93d054bf-4d4f-4ac1-af1c-a1d30d1a4616"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e7767cc5-cdf1-455e-aa74-8b3a601fc440",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4cae1318-a1fd-497f-9b49-a4a62f5a9ade"
            }
          }
        ]
      },
      {
        "id": "eb88ac47-740b-496f-ae14-81da8df27833",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "d9d2128f-89a7-4ba7-a8bc-ca7a93627594",
            "name": "Negative Testing",
            "item": [
              {
                "id": "64035868-43f8-4337-bb35-cef494d3cb10",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "9dcd1252-942c-4c5d-8439-9b6801eeeae9",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "935291b4-d406-4a17-b35d-99b2297291cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "117c86ec-f704-4d1e-b035-a085e70807ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0fbcfc23-2c79-4c0d-8f4a-23021522e89a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "60d07915-3400-4e3b-995e-56b35052d611"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d39f47e-8bfa-4b03-bc0a-e92cce4df5fb",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df3f4411-abde-4726-8898-8dcfb406d57a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2532303-6ace-4c3f-9237-100aa9d63d46"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68db3761-b546-4fbc-bb03-90781a73f952",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e84285f7-15ee-4e21-8651-0bb5ab03ae9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a23ee6f3-1007-44e4-b80c-ac0d13075120",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2c4b91d-bb9a-40e1-ab87-07fee1d21703",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66b2d6e0-cbf2-48c5-a286-4c6b7b4aa86c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77ac30dd-ccab-4197-8ff4-5b757df48e5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "809abb86-f256-4457-9012-7ba6b1d13e54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f1ff34c-50f8-482e-82fe-b7e35febe4d9",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32371497-2355-4706-8c3e-d22894ebb2cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85802fe0-898e-473e-b9cd-8778593ef327"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f72f8e59-97a7-4b07-bbf1-7957376d23ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "16869549-d007-4df2-94a7-c5a06d876422"
                        }
                      }
                    ]
                  },
                  {
                    "id": "727a71cc-893b-458c-9e79-3c6cfa268a67",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b16546c-5288-48fb-bbf0-79255dd5ddc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0df46221-be3c-4697-abdc-35d25884a111"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d2b36b6-5d2c-4688-a86e-1294010d0b98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "90f98e2b-f35e-4c5b-a504-6eb5cf1031b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dffeba35-9914-41a3-ad06-41892d1220a7",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e5357c8-63f0-4887-9315-e6372258a7e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08eb9ed4-330c-443a-892b-0973a10ccba0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6b75fc0-ae63-494e-b36a-1d7473193ccd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "50baf0d6-fe15-497a-be47-642934f23ead"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03d510bf-f056-4eeb-bd01-201961ae1440",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8feb65b-e06b-402c-b527-2702b451f915",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02babfdf-9290-4050-a6c6-8032a4763af8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d64107a-51b5-4ce1-9a3a-dde7b0474611",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "48ec3468-c638-4d1b-9f3b-3f43166c6793"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0cb443ae-243f-454e-b6c3-473d585a9045",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "acc5e5c9-78c4-4b20-90b3-c754bc2c3328",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10a36a6d-d47a-4f3a-8475-b805162fc6bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b353ed3b-24ac-4ed4-bcc1-d658f92183d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c26e8134-920a-44be-8d10-415cc2c46349"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e68f7a86-9a0f-4aeb-b6fc-458514e4a648",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f63acd79-9bde-42fb-9f90-f8bbe8f7e81b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68d5e1e2-c9ec-4e51-aa54-b76667999c94"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3f13b96-f233-4aa6-a90a-ee07313d143b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "dfd632bd-3267-4b2c-a01a-91b79e4b72a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33027092-6a2c-4940-9dd3-3f83e998727e",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af95f8d8-ddd9-496c-8b8b-0a1f95fe1b9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54e7e907-5e59-4672-a782-f59a9e02a232"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f45da8b6-42ce-40d3-ab50-a6578e719810",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d00e6c8f-abcb-4584-8db3-433b0394975e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2dffe73-f211-44b2-832d-887469085a27",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "138e24f8-3715-410f-9dc7-53ab84fce311",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4543d01-c1f9-40c3-9457-52a297409801"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5da20e93-8f4e-4032-aa9d-4ad55f2effb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "81c34fd9-f753-4d0f-a43c-ff17d52f4846"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fb63383-8843-45e2-ade0-f1f4461946f1",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3dc37533-6806-41db-ab5e-b74602ee3057",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04f9062a-48c6-45fc-9c1f-b5399122f1ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac0ba7f7-df09-4724-9ec7-45b13bd173e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "642447fc-465a-473c-a948-4ad4392b1334"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67c05c32-71e9-4785-97f4-b3563a43995f",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70e66c55-699e-4b7c-b9b0-c0d4157eef66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b5895b4-d77f-4159-91e4-6872cd8ea480"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76b3e4aa-986d-4ba0-bf5f-8ef8ee35d1b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "24b52f4a-ad44-42ec-bc2f-eceee2814049"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4326a9d5-8b38-44a3-81e3-960fa8dcba65",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64b50e7f-07d3-47b0-adf7-3351014f1bc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bcab6035-75ba-4ad4-b5bc-8e65241dd7b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01f66381-16c8-4ab7-88e1-16f0fd5c82e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "43cbb9f6-b2a2-45ab-8bd8-642e79fa5e39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fb6c65c-99b0-4cf6-9bc4-e87718fc6df9",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb3e352e-2449-431a-92bb-cdadfe3d3295",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "511401bc-0827-4486-a697-316966533d7a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e4df863-76fb-4e4b-b622-d61b2a801aef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7c102060-f135-4447-aec7-70c71d2bf255"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e11e6a69-19c1-4c8e-9d9c-f2691beaba9b",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c77701da-bcac-494c-a19e-dfac2532e5fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "967ec832-f4ec-4765-a5f8-4f27339e2833"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e206d5fd-c4d5-4a95-8272-fd3b81b66b7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "62c86e45-2e90-4e2a-b894-46e6053722e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed3c4779-db13-4c49-a8e7-538018139f56",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1e81138-0134-4046-ac6e-c21ef3192928",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc9046b6-9980-4c11-9a41-f795f4ce481a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6c3bd20-7631-4728-8b7f-650fc279930e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ae8f0c0e-37f8-48e2-b8f1-ca21c426a262"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acaaa342-21b8-4534-aeb1-44554154fef4",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "331a2e4e-a395-4d21-925f-242c0d46fbae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9f5120e-bde7-4806-95b8-ee57e0cd972f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6364f697-2846-4a98-9e23-89478cce4856",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "5fcc1442-1460-4473-937c-c1db1af045e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1c6c057-153d-47fe-ba78-0f3d222fcad4",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b787ab75-ef4b-4c57-b330-759888137d4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b8da0fc-1fe6-4f24-80a7-1532ab867a0f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1583a48-969c-458c-8616-38ffc28d0ca4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "96f5a643-ccf2-4b50-a36c-18d053d3d376"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b638f89d-45b6-40ab-9340-083a5527e58e",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ff1e3b5-c833-4fe6-b3f7-4764c616fc0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28e0d8d3-b0f0-4cea-b0f6-d6b5c99831b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12a75aa0-0c1e-4a7e-9244-9e8e19ff719a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4ac9cae7-ff3e-44d0-a55a-942423d1ae82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd1ff5a3-0d3e-4043-be64-536745c8a64d",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ef2bec5-ad11-4207-8fdf-97b8a1390ddf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0429418-0475-4005-ae6c-8e60f4eddc73"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08554fb1-d8f9-4f88-8e68-a2c8df243597",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "dafb5d75-c595-4d0c-ba8e-1caea2a0ac62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d8584ba-d0c1-42a2-92e9-1c2c6350031a",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0049c562-124e-42c2-98fb-a3aeae31d52f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "594d1264-1abc-4c88-b722-12a7c8bc49e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "adcf3e00-aeec-419f-8bcf-6e468f0ea4da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "04a4955a-2c7a-4d70-b80e-acd71ba00de0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0adb232-ead0-4756-ab4e-f67e609ef8f4",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed835249-5b95-46a4-be6f-d733cea0d4aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6a5b833-ab4e-4a36-bdc5-51d77fd29132"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fa40ec1-95da-4edb-a8d9-4fb4f82a0b18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "505a0fe4-0b40-43a5-a1f3-17438d0566a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b1283e5-5814-4820-98d6-873e007a461b",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7059efbf-ccdd-4f01-a195-6909e1edf171",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ddd42f42-6dab-4a56-80ed-982d9332d853"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a398bd9-fae9-4eb9-9138-304f3ff44910",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "3438e4a0-c4da-4c01-9c75-0b9fbd724544"
                        }
                      }
                    ]
                  },
                  {
                    "id": "176d74fb-20c8-4ed9-ad61-455d932e9aed",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d74b0d10-505f-41eb-b533-32de3a16d4d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60c84b58-a7d9-4945-9d7c-f7f33ef8d157"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16921dd5-1e95-4485-8cbc-05d84baca1c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "ac7dbc8c-b789-4bd2-8f2e-108c4881a0b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1ecb1f7-3d6d-43d5-8c45-6203db440bb7",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4dcbcd38-b0b6-4bce-8d88-8bb7d8bf723a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca7f91e3-b76c-4bc0-86a3-12c67dba9106"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72765407-a254-4300-b7d8-d3168f6f67cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "65dab0a5-e435-45b5-bf59-f06a8aa7c1c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78768e4b-1aef-42d3-bc80-2c8acee0fceb",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdbe5c25-c72e-4135-8843-4160ef046c27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6cd9fc67-5bba-47b6-95c2-e6dadf83e563"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f961e3e-5bc5-4250-b7af-3eba5248310c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "57c941e9-0de8-456a-ae09-3e1916af0ede"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc109f9c-56dd-452e-bf00-55864b4864f2",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fb28633-065e-4c1d-94a2-e4a1202f7184",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8bcfcf18-6e30-4096-aa7a-682ac4b4c241"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62e49a66-cae8-4164-862e-db0b233c80ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "1eebdfa5-43f0-4e18-94d8-307c3f5a9d96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b33591fb-08c4-4425-86ae-5dc0ccc90f21",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39882f40-2141-4882-8175-6a636d494ca2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2bcf9f0e-2f98-459f-b0bc-12df308341c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e6946f6-f16b-4260-aa01-e934b8459f61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "1267d229-e390-48b9-85e9-ba91f6df13b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6805e9c1-e91a-46d1-94da-1e908fd7c965",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5dc4c1e5-99f9-4835-8563-e16ce61e9c6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ebe1ab91-992f-4203-a396-f7669a4f93d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82e3faea-0377-49aa-9237-f0667b3b3d74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "5db365f6-fbdc-49bb-93a8-62f419c82329"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dae648aa-feb2-4640-9f91-a04326e1d7d3",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be05b9b4-6d33-4144-9e46-0e85e7cf26ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c63f02d-2e6c-4113-b64f-430f53d3ed60"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f6dff3e-f331-4f6d-ab9d-bd1e718aa4f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "37a1a749-030b-4159-a2a7-3db544b58f73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "051667d9-084c-487d-9462-839076f94e12",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83fa1051-8bc2-48ab-b00b-c5d420bba5bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a07caff-cfc9-4645-9235-4e71e7cce87c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fed9c1a-55df-48fd-b419-6476c8d422be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e3b2e5de-412f-485b-852b-7e6b5319b7cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c26cd917-92ac-4fac-adf6-3efe06b536f2",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a80957c-5981-49bf-9d01-9bbc70dbf00b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aef50f76-4466-4184-a805-b89a1ef59537"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "253b3618-23e3-4644-8883-105d16d07ce2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3a7c5d2f-6795-45f8-bb5b-6e486b8236c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f793fbfa-95e4-4bf3-8afd-0599c9e05059",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1246a212-35df-46fe-a869-150a90389f3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b28f094-98ff-43e4-943c-8e2ba6a5c3d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd86a736-58ab-483d-8fda-61ed4c82bdd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6ea51260-749a-4cfd-9781-7fbbf8f4a6b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b5937ac-b1ce-43a7-84a6-220921c99a54",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "003ad075-9b86-46fd-803d-5b7f95db4301",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d18536b3-7267-4dce-b317-ec78c6e5ab6a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b31a001e-4427-4f55-8a4d-92e8edf44249",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "376e6bb9-0b7d-49f9-88f6-a62fc4870433"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cafc2372-0a78-4bc0-9c53-1fd23f14b661",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc350745-0077-4b4c-a5a1-2451d083dc29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a1d16b43-3ff6-491a-a28c-fc2d9ed80897"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c81d2b30-9cfd-402a-91ad-85532efd376a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "393a82ab-1aa2-4a24-82dd-4020958de0a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05f7eeaa-f8d1-4c16-ae7f-cb7f22d23169",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "442d4bc3-6472-4d41-8094-dc61fd7b4f21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "729d6cdc-abe0-4878-979e-d2ddf99d25b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8c56a05-67e7-46f2-8377-22daef2fd128",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "8195b712-11f9-4ef3-b27c-f3d44b5f8dc2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37d32804-0ac5-46e8-b59a-634bf550d97d",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "484cbc04-6bc4-4bbb-b62e-4bbc09aca8fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99dbbc07-6d26-470b-b89c-ad481111396c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88e68b00-0847-493f-9995-6df18d8a65c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "0d22aeac-a163-408e-9f9f-b45fd96837d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff4af42c-6743-41bd-8082-8b938a4f4be7",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f22f1ce3-2887-420c-8cea-4de71f1089a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b909c7bc-00de-4197-a3e5-a993a3e13117"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9836916-7c60-4b38-8844-76bf3ce8d70e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "ffdcc5c8-91b8-4bf8-97ae-8deef2e1a8e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0af49cf-636c-4cc6-b898-8c843fdac626",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d79bc2c3-311f-4455-8e25-6971a47608f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78f324d9-1524-4418-ae0e-4aada9728bd8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "681c6635-eb9c-4844-b72b-c354b8e02986",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "d5e7d2f8-4132-4f54-8f6d-ace998ea99d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "baa95a59-f262-4d7b-b731-5060e0c048c6",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78668afa-39b8-4a50-8c27-fc64b5a9a2b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f89a5bd-5201-4058-9d2f-0c29d76e1a92"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48a6ced2-14a2-46c8-a10e-46d19de1f217",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "5c56776d-4851-4390-afba-154badc0528b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7010922b-973e-4d19-8f05-395a8ba51e81",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "938f29cd-409d-42c2-9543-74761a48cd13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb83fb07-0879-49a1-90a7-0ecff6de35bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "845d6cce-987d-4018-a73d-5ccbd9984452",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "8378b47a-b24f-4c8b-b2bf-b43bc8d19e56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac9869e2-2068-4e82-99c1-1c98971d5aca",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dce0b43e-8ec6-49e7-bff5-72d6497c0519",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8cbe99ae-da91-4421-b8a8-aa13574cd01f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e574b2d-ea9f-4b9c-b9f2-942b698bfd76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "b67f0155-e46a-4cbf-b947-c306e7f6dbd1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98664c1e-ce97-4297-b61b-865fe059191d",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6688b23-ec9c-45f6-a1b7-c98b379d7d3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1270e3d-446a-4158-9beb-b7d28a9a6702"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "578698c4-43a3-4f5b-b55e-3c7e67b60587",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "13986a79-0040-4fb2-8fb8-448b2cbb5702"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01bcbf94-2f93-4f3b-bb09-3aaa36740a36",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbf35fd5-5174-4ec3-be41-285834b62717",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2f20e36-90a8-405c-b490-abd989e50969"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5a5ae26-075f-4170-8e37-52abc2c21b18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "76fa8392-46b1-4987-9bbc-cd338774634f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f2906b8-8708-4b31-9b1d-310918ed1d62",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ded55ea-74f6-4836-bd2b-dfa479f3ce0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de6cbe79-9bcd-48bd-a73b-6e8305e6ba24"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "040b5368-5a21-46cf-9a61-8a0545548492",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "de46ddfb-4e61-49bf-b3dd-f0d7e0815820"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26ceeebc-cd87-44df-a8d7-abc35ed17464",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fa80924-2dc5-44d2-b5f4-9c574eb23a1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4981f1bb-874d-49be-9bf3-eb3af0cdf6d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e62db5cf-899a-42d3-805a-7d85c75f85d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "436b0760-88cd-4782-a957-4fa227af1784"
                        }
                      }
                    ]
                  },
                  {
                    "id": "173a72bb-33de-4f46-b0f2-0bd3ea56e321",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4609bc8f-ba49-4f6a-9d5f-f594740da237",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ce12c26-9a23-4832-9d5c-28374f3c78bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "006e5402-9018-4693-accc-8c33fb10b238",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4ccaa061-80af-4785-aa56-42e4d3fd1606"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c75a37c1-c51f-4795-8a91-fa4d86dcc640",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca3f518c-4227-43c5-a649-031fa25760ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33eadc7a-9437-460a-9662-c7789df887e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2c86192-0b64-4460-a0af-514fcc542a0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "8f6a3688-920e-4163-9945-579972ff954b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bfc9898-fc96-439c-9521-9c967603121b",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c1ddafb-359b-4b53-8274-d84bf85d7708",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f667ae8-51df-41ab-804a-58901f57efa0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4e817b3-378f-4a9f-8cb8-523e1b243a5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "5c284af7-c79a-4794-adf0-121a4d3d3751"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb89c3a4-45d2-4ec2-9ac3-5dddac677d80",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fcf52c4-e2e6-443f-9a9c-4a96246b1f11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13e7bf82-5204-4316-bd2f-ac12e40168ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97fbeec3-b2e0-4ffb-aea4-0d87f209452e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "9e2e5ac4-8c58-4a2a-9622-a8177090c6c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5acb3d69-70e0-4767-9a8f-5074abf02e18",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2768e66-62ce-45a5-a25b-3d84d1299d89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "223a85dc-e6b5-4c93-b2dc-aa1588886c19"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05115f15-94bf-4b7e-8cf1-10821b2b4e1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "0a50d776-a3e3-4a56-9090-b41c271a2e63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "877b8265-a7d1-460a-91fe-3c4b0e4879cf",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12f9467f-1487-4938-9fcb-c2b5b681f1e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d931c88-8329-4fc0-a755-cfe0cb2ec1a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a68cefe-cada-499f-b9ba-12ccfe65b120",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c093613e-5664-4503-b9f7-4afd2b8e2075"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03c3cfc6-1df8-4872-a2b2-e325648a6eeb",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cea085fb-d808-4285-ad9d-c8e9aa4da10d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c483bb5c-6417-4b67-bc45-be8bfe0fa762"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2bfcb28a-6bdb-4a47-82f2-3556af10665d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d62eca72-8ffb-4183-a717-a65d0281a397"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cec52340-9db1-4b16-b62b-aa0ca795aaca",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25b5e1f9-84c4-4a9f-90e2-ee3f7664d4e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59f89a5b-c622-4b5b-9273-f613c63d952a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6101cebe-64e7-4037-993f-3a3308c6efb6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2009d661-661e-47e3-9e1f-462e070e6a4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7e46faf-eeb7-4391-a3f5-eba49a5520c4",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00b61b7b-042f-450e-9b92-3dd017db5512",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb0f480c-13b2-4e89-b725-39d40c6022f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2166f7dd-2374-4a38-9ac3-f865a3a581e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "4ea0f60a-c84d-46de-bd1d-02c796a98677"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db240dcc-f74a-4b61-94fb-4264d2de7698",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b38a2a8-138c-4ada-87d4-32f6489272f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78bbba76-56bc-4dbc-8d8c-7f8730c37433"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b313272-787d-4f77-8eb3-5b22419d65bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "3d8f1556-b47a-483c-8b7b-ac4b0bb0c447"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b06e8e6a-e951-4b19-8729-35f306cb55f0",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7be59dec-d7e7-44c8-82b4-44387a953ccc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "103f71a2-b092-42f6-9825-7338abe5d663"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5e58ef1-3063-48e4-9e60-c10a424ff89a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "06b61855-18cd-46bf-a057-0a5dd273739f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c95346cc-cf01-4071-aa03-a6ec127480a7",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d576abab-931f-4c48-b3a1-2f5436192c8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3cd0d6d-8809-4684-941b-636cd6b51d17"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb813063-c279-4c1f-b869-30d5b53cf034",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "e8209f0c-5762-4387-955d-5f30f4206c62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6cc870e-bb55-484f-9b11-113c662a4624",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "852a794b-a401-41b9-bd6a-95cab2babacb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4fa31ef3-6d2f-4446-a1a8-14534bb52717"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cdbe062-0fd5-4213-a084-9cac10b82e14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "0c6efb8a-3366-4726-9bc4-33e2b6523762"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46c304aa-cd79-4fc5-8d3c-f6ab0c5957d3",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9514f220-feab-4e27-a686-a02526eb5246",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df8a1822-7e10-4136-ba3e-4a97f504e90a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e3ac864-94e5-47af-9f1d-f8f4a02fa66d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "7773d5e4-730c-4516-805b-55ec145a2a1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f074c5f-8f0e-4eab-b1c5-22ac0246bd30",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fb4a625-a7c2-409b-83a9-4665e9ad9aff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab7e2bb4-8568-410f-88d4-d62879101983"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db3ddd73-06f0-4a7a-931a-e8d73b6fe788",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "2bb901ea-1fa8-4556-b8b6-9bfebf0314fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7929f2a8-bf20-4931-9320-54efc66794ad",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0c04d43-1a1a-45dc-b4e0-b18d84394116",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21192983-092f-4fa4-b8d5-fc1155e1448c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "966c085f-ec94-4ee7-8bb6-029f82f29310",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "31c894ca-bf14-4964-863c-d7bb75aeaf03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d8409fb-124d-40c7-8f7d-8c88c11cdc7a",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3463bcc7-e824-4215-baa3-a29d6be8f017",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd34b54f-d2c7-4f43-aa31-4943971a70ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84f49414-94cb-4f5c-9b5a-10331ba376c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "980aa4dc-d6bb-4c1a-81eb-b263e1e43332"
                        }
                      }
                    ]
                  },
                  {
                    "id": "994c2ffb-8817-400b-be6f-d0178b8ce4e4",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2478d0a-725f-48c6-b227-f8b80f01cffb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2702f0c9-71f7-4be8-8d51-55ba0cb46524"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbe3db44-88bc-4102-b0cf-a3f9121ce502",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "225b9e76-6aa4-41e5-ba20-e6c17f3bcc42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e569a4f3-2e6f-4611-b55c-673428117bdb",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdda96fb-c65f-4c1d-b480-a1af187b90cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f38d5bca-6c7d-470c-817d-9aca54bcb32a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44044c04-c63c-45f0-bfbd-f973bfb1d731",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "79b782ac-e4f2-4986-87be-e80f3aa92f76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39baca55-efd0-44c5-b4ad-92905483dc9c",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfe724ba-0d17-44de-8467-9e843eca7941",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3a1e6e3-9977-413e-8511-b940772f1010"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c08602b8-c964-4891-8bb3-34e425b23e35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "874f18e5-5279-432c-bc8a-7aeb2e69a319"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e38eaf66-ea2d-4d8f-92ad-7e09a2d000e9",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9337a28a-7039-4ee7-bb4f-6e2acbd11565",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50aec47d-93f2-439b-a660-82f4f578e2f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21ffee81-5f9b-4bc1-9358-4985dea23d71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "7710de02-df67-439a-b0c8-281f5631d349"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54f55d5d-d74a-4a47-bc09-5612d01ad845",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4517782-09bc-4bb1-9038-e1b8ad2e8350",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0cd647af-31d4-4524-a728-b192e4263902"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82f6411e-c0a2-4488-9537-fa7c9b42411a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "b9caa9bb-6a7b-4ddb-ac3a-d5b5b1aae4c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47bb082a-c129-4cbb-8719-2e06b348f92b",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae866df2-1f69-4962-841f-3fed90cb54a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b67527d-c1f0-4c5c-b1a3-0ca4c0770296"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be253d8d-a867-4c8c-8882-9c8af969d874",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "04ee1c1c-3f7f-4579-9e02-57e7c6d0b0fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7717c31-ce05-41e8-b58b-4963334f6574",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdbfcf39-36eb-4b89-b183-6f6cc67f5790",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62309dad-7364-4f1d-a966-46213925a528"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0197fa3-318f-4910-9abe-61e5d9f8be2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "eb340bc4-c3f7-4b90-94e7-900068971283"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13a3c30a-a9d9-4c31-bb23-1609282c9401",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5ed7890-0938-4c68-be96-3e200178f423",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b80e9f7-387d-4c9f-9dcf-75936123f090"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f4d3298-2611-48fc-af24-6b62c9ab3554",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ed3f549c-27e7-46af-9a6a-3c4bd056a134"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2bd1f292-54cb-4e6b-beb1-85a6ddfa682d",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4976bd52-e62a-4bc6-b877-133876346ee1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4569a7f6-447a-428d-a29f-2fa78944f224"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d53254b-0c2e-48e1-ac1d-7ad6bbe1e6b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ad17953f-1e9e-43d4-9113-a1fdc318abbd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ce55581-79bb-4472-a027-26788b729d10",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35a43f98-128d-461b-a346-6e4003770eeb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd6a6eab-2f9d-4248-a04a-e5a4437dfc67"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fed3941a-578a-4245-abff-cd8f61d0ea06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "14289dc5-9045-44d3-9e7a-df7ea9244847"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98652c53-e030-4af6-8aba-cfde3befa4f4",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bea12a47-1d2c-4178-ae39-65fc22c8b72f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7161b2a-32ec-4847-8fe7-210349e8a57c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49b7e254-c0db-4904-b368-ff2229c7d0da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "6966860f-0d53-4d38-bf85-8e3415e5c5ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ce3dbf8-f6e7-40b1-820c-4acfb795f1ed",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c42a016-407c-42ed-a216-eaa7ec9a243f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50ecc221-3c36-4c02-95f9-9f282b7035ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6fda28b-dbdd-45a7-99ee-072f5ffe813d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d04c6406-6370-4188-b0f0-8435d54f7a48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbc53cf9-85ae-4bb8-912e-33cb518c56d0",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9949bd8-ec4a-4a9b-843d-a8e066c82ec6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38ed2423-bddc-4298-8cf0-605ff2b8edcf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56c649d7-1e08-444a-bbd7-68c0944cd49c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a6295e5f-141c-4ade-98f7-4e18bef5748d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb5cb54b-3072-4104-83f1-4a78a4f65280",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e224a4fe-3342-455c-8eff-1979bacec5da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48ecb144-49b3-4473-9394-675563be1e1c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4607b6c2-6f8c-4565-a92c-2311546ea851",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1c5656d4-25f9-4b1f-8b2d-7b4ebfd3c9cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c13d9920-880d-42c6-a4eb-5a5fa56d4b69",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99fb64ac-cde4-451e-b70c-3722a1ad36c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "757411f8-2410-4ca6-89e5-aafb648c0d75"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0937366-f00a-4705-8047-2801c906dede",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a89db100-7a2c-41a7-83b8-5d2c6cd13b84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c00a176e-4008-4303-bdb9-882930688490",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5c032ba-a512-46be-aa3a-d25e0f90cd89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e27be83-09fa-4b53-a1f8-e9502bddac9e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c9615e4-efe7-47be-a8c9-b88ec3538b47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a35c75f5-e9e9-4058-acbc-df4df9b30207"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a20166b-1572-4d6e-9db6-e74276a9e74c",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fbca4c5-dd97-492c-98bd-7e1dfb835de0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af331f24-234f-4ba6-8cd5-fa2f34ffe0c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9bb9318-b079-4e6e-9639-70533bd7aaa5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "e45a4388-057d-45a4-aae1-93021baf4245"
                        }
                      }
                    ]
                  },
                  {
                    "id": "978e04a5-0c61-4edf-ba76-dc02d9b51b09",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "839ed510-fecf-4439-bf84-cc337be26483",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1bb37cea-c4bf-413f-927b-b69f5d7f8f13"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2983db1f-06b6-4279-90c4-da6f65eb37c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "83dba205-981d-4271-8b79-0a1090318ed1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df47e4ce-a993-41d9-aec2-62062a64c25e",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85c074be-a515-4918-be72-ba88e8486cea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad50cf3e-52a4-4f89-8f0f-4e2e6e344e63"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9eb0096d-1a09-4783-8ecc-1bdd0f925d2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d029e0fb-8d2f-4ce8-91b9-f3e564192f1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "610ad4a9-a43f-4847-96f7-2e17f4bb4b31",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d27b07b-fc2b-4571-9f24-986aaa8d5aed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce10f482-dba5-4453-9167-dc40d752cff8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0cff381-5c00-417e-b235-53cb440b258c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1eea601e-b00f-4f3f-9548-27ce8f9caf3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3a94fc6-6ef8-4a66-aefe-3ec14c872e7e",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "909423cb-f4f8-45e6-b2ab-b68513c2d40b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c420c93-219a-48e2-9b35-b9bd1173052a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dda93c43-4da2-47d7-8173-074e94ac5270",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "320cccee-b712-4490-a675-491c1546c6e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fae26988-5f05-40f1-a974-a5958ab933f0",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40dfbc84-5853-475f-ac0a-52ad13ecd8f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7cf8484b-0825-460e-9129-b4f0f8db05ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7969f8b2-a432-4f3a-be7b-f25df5dadcc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "00ddd09d-bc9b-4dd4-b48e-4cb83af860a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6567ffa-fe03-41e3-9e40-e1b1e3e57dc2",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "288ce24f-c1f0-43d0-aecb-58f4a124a77c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2cfc426e-2638-430b-ba2e-9d3b431db3e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0f10350-8445-41c1-a7d7-c42906214a8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "843b0c83-ef71-4246-ac35-e2765c1e41ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d90d2d2-455a-41c2-9b37-80cce8056d9e",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91e414c0-98de-49d9-8a6c-c35d8999037c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71c3b45e-e84e-48c8-bb9e-30506a06cba2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fb09d18-af10-4fef-a2d4-1e7bab4908da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "b8a59dcc-8a85-4b2b-9b2a-1032ca345bb3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e92c65f-1688-4057-85b7-67ff4b14b21a",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57a9d057-acb4-4fda-b387-b5b44f5d9677",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0fb14226-ab0f-43bd-9a8a-737578b7edbb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e3d558a-0e26-4763-ab05-ee2c7018b0c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "8069e543-f691-484e-ba43-b328b4280cf9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0f5cb33-55e1-4d10-8029-4b7828d68a42",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f585a73-3ef7-4bb8-b8c4-200f4477d90f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83c88745-a638-4044-9a01-697b7fe66bf0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8cb3bca5-607a-4b27-a0c3-c3773075f68d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "92c85871-f7d6-4444-9861-b066b3d93d98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e18d5da-cdd0-40eb-86ba-569376ea6961",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b211a53-93f5-46fa-b68b-e8e60b9a1d97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2e05e65-956d-4e27-8ed2-f30ec9b403c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e6808be-7c82-4f2f-a8f4-03ca566a9a02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "e91c38b6-0a03-47cb-bf2b-2a144e117b82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8d7e258-9098-465c-a147-10d2c8201b1b",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "847b5578-e6c7-4725-9d58-5da8d09e148d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "088edf7d-ea52-4c49-8a20-cc098ad24495"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5479484-1f61-4271-8bb7-40e57a351356",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "ff818c7c-63b8-47b2-b3d0-bbe879ce327e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "650c019f-398d-4d49-bae8-6ea0dc52524c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ada79106-c306-40c7-b40f-ad577e48a496",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f736194f-bd4e-4ae4-8fac-58c548d80ebf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0b6048c1-7233-4b44-8563-501fbc4682c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c91d0a4e-264d-4925-b0bb-25fabb7c8c38",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "50be4cf2-f98b-44bf-9c32-9523cf141090"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d4b13015-a0fe-4206-8749-af45772b7ff8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d0063608-9f6c-48db-822b-68e1d58d90be"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8a84b1c8-9e26-4c98-b46e-bcaa1ce6d1da",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9317f8e8-fe07-405f-bace-fbf693d2ba94"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "e795227e-f8fb-48da-ace8-1b83bf12ac1d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "dcbf6fb7-711e-4227-99aa-a200d6b7493d"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "f11551d3-3e82-4e9f-a648-662f20ee63f1",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "3d31e322-c460-42ee-9905-2ea47409149f"
                }
              }
            ]
          },
          {
            "id": "fe4ddb19-1e93-4922-be49-7f9213fbe364",
            "name": "Positive Testing",
            "item": [
              {
                "id": "97c1ada5-435e-482f-83f0-de119cce572e",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "39ea393a-51a1-4972-b58d-f0e1b549f5d5",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9fad486-0bbf-4f49-9529-e5fb5416bece",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "48671b23-fd88-4835-a567-18b10cd74689"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c0ffc22-0d16-4d7d-bd63-8b6a56b9bf4c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "859e6baf-f10a-47fe-b594-8ec9832a51d7"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "f0c27ec6-d796-4ae0-b3ac-41a707e394e3",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e9571fcb-20b7-40b9-bfa4-1243e22c8693",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "3da5cdde-3ded-4119-b353-1073b99e8260"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2f038e63-b53d-4485-a42d-9f098c013c33",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "7d905273-e37d-4de3-838e-61ef8baf8a90"
                    }
                  }
                ]
              },
              {
                "id": "ed1f7df7-b2fb-4a2f-ad2a-506ec96894f6",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b6767b75-7446-4dde-88e0-94da0fcc9d3d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "77885245-0302-4ef0-bd08-06fbc88d0a27"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "478f9437-5993-4d4a-9f3a-e1d6b9a15cd0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "02c17996-0604-4610-9203-e4b0331cbac8"
                    }
                  }
                ]
              },
              {
                "id": "9d024fcf-9dc2-4d20-8b3b-5913459f524b",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "be581525-2f01-4024-a11b-2210aaa6df5b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "58d6c275-230e-4666-8960-337606f48f77"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b7753cb8-8466-4876-b035-42857d27547f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "a395749a-f22d-4297-a0c0-493ae8b0fde9"
                    }
                  }
                ]
              },
              {
                "id": "fabaf2d3-037d-4c13-9e38-3519c43a7190",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "959fbd2b-77d1-4aac-bed6-9f794cbc2217",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "cbfb85b1-c033-439b-a7bc-911085b28be9"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "677e20b8-ca66-4503-996b-49f02fba28fd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "73242b22-6bda-4436-94ae-c8a2b70f1e02"
                    }
                  }
                ]
              },
              {
                "id": "f468c318-379b-4013-9c7a-f9027f7f19a6",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "be78fe24-1ffb-4e92-b949-75a9fc9ed71f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "8e116165-c5ef-4ac3-9e0f-37fb1144624d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "dc57df8c-fba6-47d0-8ae0-67e009bfbe85",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "3ee09bd4-7f36-42da-8fc5-e667e3344533"
                    }
                  }
                ]
              },
              {
                "id": "9a2d5448-0616-4f6b-a540-16905f1f7437",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "74ff0cdb-8a98-49e2-bd8b-ce80043d88ca",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "41c5fcdc-2245-45d8-93d2-3a2a3fbe5134"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e60669a4-9603-42d3-af67-0b3fde7b3f96",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "22d4484a-b6ec-4a70-bfad-4bf47a0d24bd"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "7581bfa4-5fd0-49ef-86ff-57b7d1da9774",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "3d6f65dc-77d2-4993-bb68-c4dfdd5f8ee5"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "8a35e7d8-5aa6-4af4-8271-0ff53a8f0e84",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ba291d3e-707a-4dc7-a8da-e42351f3c3c4"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "09dd53f3-7faf-46c5-b11c-679a8470a55c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "746c2ffa-711f-4d5f-bfb2-6d45c682fcd0"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "07ee1fe9-e39a-4b57-aa48-70cf214bd610",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "401cca4e-980d-415d-999b-5e701b6c71ca"
            }
          }
        ]
      },
      {
        "id": "b420ac1d-59e5-4754-8cd9-7cd156b7a26c",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "dde93ade-ceea-4898-b959-47b12ef46768",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a4e0f56e-51d0-4018-a313-4878568f5618",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "aa18232f-f8a1-4eeb-b022-afc806b39dd9",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e01ff488-0f06-407f-971b-d2f6b651a8ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12bf60c8-ce47-4228-bc99-709412189523"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78ad4940-7586-4fd0-8d11-492e1658a3ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "55c9a23e-64f9-4ded-bab4-cb7b78c4ff69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d8fa275-e1f8-4009-9fdb-6568ec97efd6",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e27624ff-14d8-4de5-9499-94ed361cbd22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02a2f896-8822-414c-a602-b662ba2045c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ebfab36-a055-48c7-9061-3a3d9a500eee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "9b4026af-e003-4f4d-b7c9-061071856df5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f96ac90-eba3-40d0-9bc5-1727c2f851aa",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2a83834-6dae-4a23-84b6-cd71e97e4908",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c9a4183-4d10-44cc-a534-81531f21d177"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bcf18ff-1464-4511-b785-1312127ee8bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3703e042-c803-4fd9-832f-65e911751c94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee234ad4-79fa-4549-bf80-ebf86c83c695",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f3f99a3-b4c1-421d-8111-3971fa68f548",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22d9723e-80ca-474c-9db4-d7e56e0c1009"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dafdafe0-68c1-41e3-b5d5-46a0d48033fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "60beec1f-4211-4066-a91c-187123f3e5d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abff6368-a31c-4b4d-995a-28a60967eab8",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fcf979f-e76b-4ddc-9b1a-40dd364c5bbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2545ded4-0439-47bd-8b38-4c11c7dcde89"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11639dcf-c3d3-4cde-8bee-7dd74cab9484",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6f843048-7540-4530-babb-ebb8405d53f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8157ede4-f992-4261-aaba-e9f309f6c294",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8873a987-b0df-420a-9a3b-1b4bba5049cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "afde4c24-7a01-4015-b03f-c03d03b16d54"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f93293c-cf9b-47c9-8781-ba6db07ac56f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d0ad69f6-8062-42af-8aad-fadbfef04847"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fe3a3aa-9d97-4205-b295-34643f825a51",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55989f6c-d570-46ae-b1a2-1547176dc3bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d10530c5-cc50-47e1-aab3-f74d1f724325"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac8eb250-ed4c-4e1a-a7fa-5e3c3806e13b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "e5c16fd1-0197-422d-9aa2-d85b4d73c1ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f56ba793-2ca7-4fc3-8498-acbda5fd50ec",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2c64846-1da0-447d-80bc-57865548fbf7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ca85447-0454-47fe-b0ed-41e13432e45f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a1b1c47-6bf3-4e48-a226-20473faa8331",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1a9de90b-8ebc-4455-a963-98eb8f944358"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c609102-4973-463d-b59b-1c1464758daf",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "755ea955-96c0-41cf-a68d-e7801fb4c0e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94baee90-81af-4063-859a-1b717e9d804a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8af8ff8-2a93-4173-9012-6a4f51f34379",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "63cb9520-17f5-4266-bfae-1d08441a117c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2d06dcd-f107-4d15-8144-f3dc2554563a",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b7eac30-1337-4eb5-aa72-e3316cb5129c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e89ea3ce-c868-40fa-bd77-39adc7b2f5a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ad128cf-279c-40cf-a99d-6fd4af9a353d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "98f92f23-5985-42e3-899f-a7fcc5910b3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7c03789-6a7b-4a65-a5ea-fa3c0b0e23fc",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11958b01-7c19-4b72-946a-69116cad71f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8bc55c26-25c8-461c-b576-053bde1a2918"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4196f817-ce98-43d7-8ab6-fe011e69f9e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "25d35644-fb04-460e-9e50-21abd0a7039b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12d88c5c-ad79-45dd-97af-d9816265f761",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65eece32-7f88-47ad-8fc8-8b6eaa5ba050",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a898d149-eb20-4706-9cec-4d1cf3bb696a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f8c4a23-28f0-4292-8a2a-a3ac0a3c9eac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d9ab6aa4-e930-48db-bd52-809260635a0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c248c9b3-798a-47cc-b524-b4051b678f34",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a835fdb-7e76-441e-8783-50481c40bb92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b69f08e5-73f0-4899-9919-f80780e0692f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5383a05-2488-4526-92c1-65104076098d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "44380ccc-13e5-4151-8e19-e718b2d242e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95dddca8-a586-4bdc-af22-5abfdb3e4a49",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a542cf6-7618-4b57-98d3-2e1bb4718409",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "239f059d-dd95-46eb-8032-20dc7570a35e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "454c0a96-fdf5-4e68-8150-d7df529e1222",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "a8f8b2a4-c5cf-4c91-b419-f639885bd610"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34d50a03-0274-47e6-ba83-e0e92e062171",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52c97f0c-b992-439e-b945-bd6aff91dd41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b82c317-62dc-4f14-8ce8-802bc42e9876"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03bdcbd4-2bc6-4ff2-837c-2b083f50602c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "980e5bdc-1e9f-4ef8-b5c5-bbf0e8a0c467"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de39fcc0-6a34-4e75-929b-31d3152a63f9",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1eae22f3-e333-4776-b021-c482ef684a2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "679d0c0f-f880-45c7-98c9-f0f5c0084c5b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afd17c70-31be-4791-a141-c50828d8bfbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "6f7c5f22-101a-4032-a5d3-9896aa1d155d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56969371-4ca6-4b5c-a6c4-7a7ae1d35238",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac9d2f52-088a-4fda-9a80-a016f420ef95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6f897a4-2b5f-4cb5-b9c8-f512a25f0695"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4ccb620-8a27-4476-9fe9-cd90f263d8d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "1c6e7365-f97d-451b-b1c2-42b138f8cbeb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b979b9b6-4bfb-44cc-8b09-7ac72b9d22d5",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "007d2d71-1c31-4588-b76d-a03c6e820a3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c4fa074-5b11-453e-aafc-c9d0c58ea106"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cad45fe3-8ea3-44be-a0ab-6580dd2b3bd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "25db3082-2a91-49c6-b97e-c95602f18501"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1973d59-84d7-469c-8da2-584f96d4e5c0",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "953809d9-f2c6-483f-a90e-56cbf23b17a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3cf0bbe-c794-4258-bbed-8e981126e434"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6153fcf5-bd10-46e4-b545-fc916f2aab7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e8e9a3bb-bb1f-4059-9cc7-10c72df95473"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e79b6bb5-a0b3-4041-9469-262bcbb6da69",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7cafcb3-ba17-45c1-8e1f-1dc20ab16988",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7efe27a4-51f1-4e49-acc2-f9198036f24a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3272ea21-412f-4227-9ae8-218917fa4209",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5783be3d-60b1-4605-a223-6a3d0c6f35a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c8fdffb-05b2-4439-9243-7aea82ff1c03",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8a3b84a-c8f3-4595-8247-ffa704a42573",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8fbc0b08-2760-4fa2-905e-dd31f0ad2877"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a57e00a0-59a9-4504-968e-f0f08cfc3041",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "539a6592-2b7a-4f7f-aae2-59f6ca196ab4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "451f5121-cb77-4d43-8468-78f04dff8b21",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27532884-8e62-45ee-b84a-771c5d9b81ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d72e382-dbe1-442f-acaf-acf5a8552ff1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfa00a73-010d-43ec-bd45-706649d7bdae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1fc8401f-388f-4625-abca-15e516c6bb28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab4950a6-e1e7-45f4-a2f3-4a7aa2448726",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d66f768-d697-4430-ad72-80a9ea7f6f56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b4f1e34-8fdd-413f-9971-01bfe3f7135b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44b120d9-492d-445c-9272-03544de16a7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "017a56a7-d6f6-43c2-8198-ce8316ef7a0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b28b977-4b3b-477d-9253-c2e12c62a102",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f865048-e846-4928-a903-c75cc786155d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d1e8c4c-8f8f-402a-a067-a952d59ebeab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67307761-675d-42a8-9c9d-9ee3a839ed11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f1cf52b6-f500-44ef-bc13-31d1bfbd4925"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df4f1b4e-869a-44d8-a4b6-0ba3acf67f8a",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "897db834-70a3-4a89-911b-11cdd305e5e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "050cbfc4-85df-457d-b091-79b607b01860"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bc3332b-34a1-42eb-968f-c630353420f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1ef4c13f-2fb5-4b34-93a1-7e026e785739"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c30ea636-2eca-45e3-bff7-d84abd8b23f0",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0879a85c-c430-44f6-a72a-07e93ca4dc77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae75f38b-908f-4e46-8dfe-332951efed88"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23b5633a-a5ff-46e7-9f58-929536a907e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "46a0096b-96d4-4f53-9c17-20ffededa861"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29933c1c-2b73-48c5-88ec-33fdedcb42e4",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e94e271-b086-476b-8655-658d2bfbe1fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2ac57e6-555c-4be3-9c94-7fcb97c4bbef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4e37bd3-d20e-42d8-8779-e06e3104db2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9200acd2-ddfb-425e-b1c5-d3085cd9b50f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2c47f69-7f99-425d-98ae-50052418ae8b",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fa0644a-3cee-443b-acb3-21ea4d2a8549",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b54e25a7-1b31-40eb-b9d3-387e7e6815fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "520287ce-d04d-490a-9aae-3cdeb38bc6cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "318ba489-6c82-43ad-9a79-ef816d6bdd66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3dd4ea5d-ab90-43f8-8976-c53ddd43295b",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "124afc0d-cb6b-468c-8193-8c1951097038",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3f604bc-aa98-4c43-80d6-1c71e9cb1af4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33e5f7d2-313f-44ea-b660-4d56c66c931f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2c27ddd6-f7d7-49df-859b-83bb3d7a7ae9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cb63ff4-b5d2-48d1-ab46-068096470a27",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8dd88ee7-7e4b-4e7b-bbd3-ceb28b5281b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "743b1a53-9e16-44e8-96a6-1fbfc11a4a31"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "568a56f5-ca40-4ad9-af2a-a976acc39fed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c5359a7f-78cc-4225-8f87-81bc921a30e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2c32a4e-695f-4ac0-8178-60db32557bdf",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e51da66a-d90e-4403-b583-f64477c288f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "373731f6-69e4-480d-8933-e4fa6c61960f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27de83d0-af65-498d-becb-bcde5c99326b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "09da9efd-ec0c-4319-abd3-ea7b534c3e3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "defab66b-aa32-4632-b6d5-bac9a9cb6b28",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7e53f86-4eca-416c-9cd9-79edd0a32b39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b052e17b-fcea-45d5-8eea-4752c940b0c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d40ccf1-3bbc-419d-b67a-d06252167471",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fa70cf2d-1d55-4834-ad63-5dfbf8a22c03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "432d3ed4-37e6-4c97-802e-b20d80d66152",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8bfae11-723c-41b7-83b4-2b357c80a717",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44594997-d411-4d52-bb42-3e6dd9b9799c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aecdbf30-939e-4a1b-ac3c-ea39a9b51cdd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "77879b39-71a5-4976-8e57-1e9f37ed15da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa26f3cb-aeda-452e-b5ce-55a7a1a024a0",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee9d6667-9f12-4d67-a605-65b5b5002efb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b4c25c8-008b-4a48-b672-0ba07540b166"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d70ca017-7fdc-49c2-a2e6-5bd41b9e41f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "91e68306-ca57-4adb-a73d-4a48e152d2d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "597afbf8-8be1-4463-811b-6fcad5dd38c6",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "007b1d07-32b9-455f-8e2b-79a051726793",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4025c2cb-8244-4ce8-a19a-1e5be54223ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b481d27-028a-4fc3-99e2-dc7e76375530",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "37587e6e-8c23-4a11-86f8-b315822b2bfc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7daf005c-8ca4-4349-9323-badbe4b73b86",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d658e391-9daf-4062-becc-68a76f781e1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0bb8c80-7799-4ac7-89c5-25388815aa13"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae335f9c-1ab1-40d4-9f15-ed9cdf59da5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e7c8b0ea-3aa4-4007-bd31-7f8f165614ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8807ad7-e352-4552-9921-bc2797444d6a",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34e83584-d604-4b19-a425-3db29e17bd50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aeb1c5b7-4650-438b-ab3b-8dc4d0f1a8bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2e7bf2e-f6d9-4666-80d3-ef69ffc8dfb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "89f345f6-772b-4bc9-a5a0-21746c503399"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "bfc7f9a0-08b8-423a-8a10-07cf8dc25a3f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "9fe15b34-4e3a-41c5-9da5-50115cae5c1d",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0499cec-6b2b-4cc2-a5f6-a0260f2f3aee",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "58875379-e025-4df5-bc0d-920ce8523a72"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e7694ad-51ff-4332-86b4-41a50d6f837b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9619bfc7-89ff-4942-be19-9b3558c9b670"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c4bb7717-0f91-4d6f-8f5e-5e9d083e378a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c06fd144-2362-49f9-b80a-e2ca1859e933"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "be4dd76a-8173-4ff6-b32f-d535c6ace868",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4ea2934e-cc70-4674-af39-d8f1ddcbfff5"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "71613e46-22a2-4a4c-b823-b3a519cab9a8",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "1f17daee-9e24-47e2-94d0-394a9fcbdf60"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7d082e96-d62e-437c-8930-2aeb0278dd11",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "28a7efcc-390b-4b5b-a4e5-51013f2fcce3"
            }
          }
        ]
      },
      {
        "id": "33199468-5bf2-45ba-853c-79b846e089b5",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "eab23d10-e3ea-4022-ae4a-2d212e4c5af8",
            "name": "Negative Testing",
            "item": [
              {
                "id": "7a16fee5-42a1-4961-b22d-ce0c1bbd820b",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "801fa8c1-522b-40fa-943a-98fccfd6be7c",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cb11709-c4a4-4c08-b606-a155419f6b08",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae938c55-1a3d-4d62-9875-9bfd0b3cd9f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e64d0871-1d6b-4536-97dc-baa5104df7db",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6d4217d-9ce5-49f5-90d1-8974e84de650",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9dd06848-a4e7-4267-ae10-f7ee5b769677"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9343a1f7-8d7f-462e-9d27-5c469bd4979d",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7ee0c66-cbaa-482a-8425-006b2ae8f84f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7753f371-03f5-41a2-94a1-6696b2241118"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80f87915-8176-4606-93ca-b6d7e470e536",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8ba80a3-a26c-4554-9354-8896de1cf037",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54796642-ee70-4684-ba05-25ea7140531c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "193d36f1-67d1-496b-a075-f7ff8e9f07a1",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a240ce1e-e1b5-4098-98e0-a54be0664867",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50b4c021-0e79-4d20-9575-c303df6cde90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7735c745-411f-4a7c-9911-0b62bbb1ef76",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22d856ca-6798-44f5-9375-d4f9ba9f830a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c750c0a8-436b-4280-9a0c-706b69095ad3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cdee3db-cddc-47e5-8905-5eea9e2886b8",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21d3eb2b-8446-4c35-a624-de241f4b49d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ee5972f-43ab-4547-a1d2-6ae763338e76"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "206f7b3c-3fa0-491c-9e8e-0efce9f46122",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3c1d18e-6c14-4da7-afe2-4e0dd8872264"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d1274c4-fdc5-4d39-ab15-4c171a762a9d",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "267cc99f-516d-4542-9883-5f1760d7f3bb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3b8db71f-e421-4780-bdb3-c1b7aeafed4c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5b56415-905c-4df3-b68b-b76f9da4a244",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c48ea70f-19cd-4014-841d-db6130aff05d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2e8bdcc-3dfb-4d9e-bdff-9d664c1915f3",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efdd7246-7db9-4a1e-b20a-031029854cf2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "81444642-02b2-4dc0-bf32-6265ec8df804"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c09ed218-42b1-46b6-8a90-e6bed9584c3e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9f06720-f50f-4769-a3b3-66aab6cbaadb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb811d41-0a5b-4a8e-9bb7-9527be5e65b8",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92fb5e96-0c61-44fd-89f6-2ff6bb2c1d15",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b34ad67a-517c-4469-8b4a-f718a6092ad1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b7330bd-e983-445b-aa6a-6c7b4a1c1068",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0fbf0ed-4737-4d59-b341-a8df5d79fb81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88b2d569-730d-47fc-b9fa-0368d7bebea6",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c28eb556-1dd4-4d0b-a21f-9af74a4a3a1a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae1efec5-826a-40b7-a46f-6f426bdec4bd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c64eee85-953f-4cb6-8720-e8501cda2ab2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "011a838d-52a4-46c5-8700-85617187f64c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "baf2c8e1-ca5e-4ef6-9f1f-964460bf6b1c",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e26e4c7-3d3b-43f1-923f-43a20d0fb7af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f33f5ce4-9041-4f8d-a3ec-84e511505d74"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9e7ccfa-5e67-42d8-bf4c-c0244a1e41d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb3e8d38-77e9-4c26-9ec9-49f0f540b2a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62bd6cb1-2986-4ac2-896c-986bee6e32c5",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5146da3-83e1-466a-83d0-dfa9993302f8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "24a626bb-3fcf-464e-8944-f41184c62a22"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d28d9261-2ac3-45a5-b33f-705393873896",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1563f40d-e1a1-416b-ba1e-6a2219240df5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27b88776-ded8-48a5-971e-b9355e6d11a4",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a749905f-58ec-4eac-8d6c-d4fc0bfc17ae",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ec4931ae-9953-48c6-8a48-0ed4ba5d5764"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c67803f8-3639-4cdf-b62c-46819e8b3f44",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8792bda9-01ac-495b-9118-63bbc7719feb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb8865f0-15c5-4942-aca9-00421623c4a7",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10389eee-d3c0-4355-93eb-110cee6f3917",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d5ff58d9-3c66-4828-b379-11644ad187ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "641d63e7-3c3a-4d16-9b2c-33bdf74af856",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ae25447-2285-457c-ae43-b41f81b5c977"
                        }
                      }
                    ]
                  },
                  {
                    "id": "195cf060-a995-4e10-a9a7-3cab60bba506",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59469fec-c14f-4bd3-af14-93cf68ab5372",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f0fe07c5-6fd1-499d-af31-e3826a3cdd7c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fecde2cb-c940-4731-b2ab-88ab3bcce420",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ad46b1e-0304-4ab8-ae55-438ec3cabe60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe061bd6-3b03-4759-818e-4b6c6da9a899",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7c71a04-382d-487b-af37-ed5fd05e786c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08357615-cae8-45f8-aa32-b1e9669b6e56"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "98850ff3-485a-4e84-a0f0-8d597a68c92c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28acebad-ca9e-4f17-bf0b-d09e0c350a3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15f02989-86da-44ad-8e09-d94ece9970da",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f70da0ae-64a2-468d-9688-237ae53c0f2f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ccb3312-f78b-4614-b8cb-8149987d2315"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8312c2cc-bafe-45d3-a963-7171c1aa65a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72d3e914-3d0e-4dba-9814-f1618f65bd22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99948ddf-4d03-43e9-804d-a77dc0e4b3d3",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb85613b-bc1c-4c9d-a0aa-eee71cb183f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7d5d119-907a-4eb8-a8a7-87fa0a8302de"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f3d7d2c-12fe-409f-a475-6f75247826b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4bcab9ef-06b4-46ba-83c5-f39cf1788132"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4a8fb9d-7304-4e8b-a092-1d9ecebc1c2d",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1989a7e1-2fad-4fdf-8cf1-f7697b827689",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff605dba-f142-44df-b894-30d44ff3cb9a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fc299af-59fe-4747-bb00-6f097edd13d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3457d4d4-0bc8-45f7-9c02-71a089f8ba25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bcfa9ee-7893-4a98-933e-1f2e7e1d43e2",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51d3734e-0832-4cda-934b-f5cf83c30df2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a5c520ce-8a39-4939-aa12-b27a392cc70c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f6b024e-8ad4-472c-8e76-bee7693e4669",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76ce7317-e05a-4fd6-9bba-2cdceeb6b3fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97c40895-63f3-40ff-8a2b-591825a057e2",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7734f73b-4238-49f8-9181-d04fa5ced4c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36e3290e-390a-4f8e-a5f1-f0784a07551f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b21c3218-fc52-43cc-aba8-3cfb00224037",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac1955ae-565d-4330-b082-bb9bab9a5203"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dee7e075-e364-4ddc-b936-cdb1e6544138",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c1e22f4-df17-4341-8dc3-12a43a9a8893",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8ca8b52-286a-4efc-95fe-92253e900335"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf51a852-44cd-4c2f-a6f8-731e8fcc0f65",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24b8f9eb-b73b-42ff-a2e6-9d168f75121f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3e1f5fa-1d72-4cfb-b1c6-6d7c85b4d932",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26e2b900-195e-4ee0-9c0f-d5ae13c8f8ba",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "54ebe5f8-26fe-4ea6-9de0-ed95812d95e1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eac72952-30aa-478d-90f2-7cc0ff75c258",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5749a39c-d1fb-4b0e-8d76-121fc0925b90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90a7790d-ac70-46ac-869d-b98f86b2e04e",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb8e5146-1bae-4c8d-9483-3963003b114b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f2423f0f-d3c5-45b1-a111-b80f96b06361"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9f313c7-8f1c-4034-a5d6-794596b7b062",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d2a89ee-5420-45f0-87ae-cddcf33fc145"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2699e8a9-54c6-4053-b87d-c1e0924a44cd",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f205f07b-7a10-4be8-82d1-4594c0135035",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3c730e8f-602f-4971-a3a4-4aa79b5fee4a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "40d47ce9-0d9f-4d23-bab1-6ecef644bb99",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43f1ff89-1596-4fec-a54d-85a532b161ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b3f99f9-b54e-4744-ab04-9a9d0fac6bf5",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35f74250-1fe3-41b6-b0db-15635487f27c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a4db8a0f-ba9e-4a18-9a73-8ff6901c9635"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1878381f-ea83-4319-a3c0-e16dd9fbc138",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2904395f-fdde-4daa-acf2-68f1029a0c5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4c00612-d594-44a8-b59d-b607d87fdcd3",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6146a71e-4783-446e-8a25-e3abdf73de0c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75231274-5ac6-4abf-a48b-f00f490ca33a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecc0cb9e-fd93-4d09-a3a6-048e10a4d49c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab7daeaa-cdd4-4d15-a6be-aa0818b35c1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5e310aa-b45d-47e0-8be1-2fa2e1158dca",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09107ce1-fd17-4d2b-9a78-d5ce4144f159",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3be16b83-bb90-4950-ab05-f7d261863040"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "979df59f-6ed4-4bef-a2ee-4b04fb607e40",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "236547a8-36d0-428d-b1a3-2940f4dc2ace"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42ac0861-bf81-456d-97a0-30d721404c9c",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6b65994-0f07-4af8-9b50-5d417e959418",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fc0238aa-fc5e-4205-9d65-bb0a38f2d2f4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "80e9026d-e884-4bb0-b539-6bfef9ab40c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba084351-acb7-4fcb-bd27-3b5dc70c71ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f7d3f74-04e7-47ef-ad4c-b868d077b8cf",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7e2c026-ebcd-45b0-94b5-f79345f47f76",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6a4e9178-2f2c-4b34-a3fd-22bfef2b65f3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4baf1590-68b8-4497-bb96-01905a1800e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a646f35a-83c0-4360-a600-06447ca6339e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "136c7c12-7fc2-4bea-8146-754968d39048",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fe51bb6-fff6-45fe-8e93-db613ac6b07b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "82fe9d69-ab85-460d-beb6-b5fbfce38e39"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "788012dd-c84b-4c61-9984-5d195d742a28",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45089195-8ca4-4f5e-96ee-e79c5379754c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "505373c9-938a-411f-995d-26b656b3e5ce",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "913f2ea3-7f5f-4c1c-9496-dd6088eb9ce3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "85180658-d8d1-4474-b5d1-65217a467f0c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bcd6d109-b971-4ed1-b19d-1d488de67db0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8029e98a-b46e-46c1-bd06-df932ce87669"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffc528a4-a63a-4933-89e8-bec6a0170a17",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7a628f9-2e5d-42f4-b33a-7a0e104f096e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f0399fdf-52f9-4477-a71a-1f5626671c0c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "60843d90-3d2e-4e8d-94ea-e55eee3268f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f61ac152-482e-4fa7-a7f7-b1bd4069f696"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aec4488c-f31b-4a5b-b654-6d786c014dee",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88109c9c-d3d4-4c7b-9b51-6c1457259bc0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb6c2282-50ad-4d7a-8d13-a5d1c4cfdfa4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cb5d9ec-473d-423a-90d7-4de80ddd3bb7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34c82b6f-c6fb-4a0b-9479-8eb07350c770"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6503787b-64eb-4915-a33a-9950b8af09ae",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35ae8f6c-c5a0-4398-9703-e3e63943e134",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5408018c-c577-4f0b-9b9c-4d2b986dc1f6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1673980-b29d-4506-8f9f-275fe641b4f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec6dd0d8-fcfc-4d08-b5b9-64f435fe8348"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c13b9de-39aa-4d3d-8aa9-fb2ad0506ce7",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d64fc48-7719-47ce-8f4e-2dee5cc1d20b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ecad257-b05d-467b-965b-09b874359660"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2eacf0f6-0a7a-46d6-b8a2-2f45676f2dfa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa4f993e-2d15-4545-aa21-27338bb3b37e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf4bad2f-5e97-4465-b00a-0de109238843",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "401bcf9c-98e5-4b1b-806f-1ce399ddb5cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f0599a9-cb46-4057-8ecd-c96cbe3104b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "83d239d2-19f5-4105-8cfd-36651eddeb00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "15ff7ed8-94f9-4423-a09d-f5f1648b126b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03bdb95b-a993-4922-9b40-e1c1e66a06a8",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "621f2fe7-aac2-4aee-a608-d58aabbf06ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5bbd837f-6ff2-4335-b4e5-4627b881ca27"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "73a0474f-26fd-4a3e-8f97-09b1de80a152",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fcf86abd-757f-4735-855d-50b23c370a6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6256269-bd13-47ce-85b7-fe8b1144b8f9",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07aba8f5-cc92-4e97-a24c-56ff3a3e3c8f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6578f8e6-fb5b-4801-b326-ef8aff842ab3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d0851cb-dc8c-4bbd-ab1b-c46e310865f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "864f9090-043b-4394-90e2-505fbbeb8e58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f15774e-3e7c-4713-bfbf-96bc518d0682",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4cb05287-a04d-4b3b-872c-5ca8840368d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f398e12f-f396-4bc2-8fbd-16cffb9c79e9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7f10c6d-96ee-434d-a923-41c2f492d251",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6b0b691-afed-4756-9248-1128a933eeff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60001613-f815-463b-948b-e7c510179a56",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e324a360-9298-4445-b508-4eba445bd8b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ffdd52e-cebe-4f48-b951-222470a62c80"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "127a970c-5fed-4356-80ca-a0f7667781e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a02d953-4899-4dea-b797-f84bf48dbd4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b6fa9ae-703a-4583-8bab-4ced46af0c55",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69fb4d94-be51-49ce-be0a-511b2885a538",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16a7d970-a02b-4c03-9252-1bcbfadcb7ea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "20a3b832-960e-43bd-82d0-72af08932f83",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1267ee4b-9a95-4b91-ad00-3869ca0a2c84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6b187fe-cb8f-4de2-a132-64c8f12a6668",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef78ecce-64fc-4a52-9e25-06411404eecb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca181b0d-8f76-4a06-881b-f77d02784213"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb227e9e-2314-43ab-8d67-025aa3b1c094",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd42a27b-51a7-4188-8537-1e11ae5a4879"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a62138e-5646-4d67-9503-f8dc3427b377",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd098659-dd99-41ec-aa0f-cce1c1d02d6a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c579d4a-1219-4c4b-844d-1a842a7b0327"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7d3051b-244c-451f-b6b9-9bfd5452ccdb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "429136f3-a297-4dc2-9e07-cc236a1367d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3f33bff-d6d5-4f27-b860-4a8e6dfdbd6a",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f20762e-b972-48a6-8c07-03cb29beafc6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3fc10cd8-79f2-45c1-b895-edf60057a8ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fe77919-b107-4618-a66b-ee569df199d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ba61532-7245-452d-b221-ba6530cf5645"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9553cb6-8d18-473c-8a5b-44d10d9c0b46",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "970f1f37-b5fc-47ac-817d-f447c044dd4e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da6ba221-2c97-49a0-987f-9190d32d1a92"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "26633fe2-5274-4adb-8ff1-fb5fc03978c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f0fde18-e023-4b3e-8c64-7dffddc1b050"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8e676c5-840f-4404-84ee-990682df95e2",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e8b3921-21ff-404a-bb56-d88671edbbf6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37a644b6-355f-46b6-9663-a3f42a64a8bf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c440f5b6-a7de-433f-9ebd-3d3a2588f428",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0098268e-2490-45af-847e-e1d9d3a00cd6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bfd8161-8580-4ab8-9ae9-0dd18499d40c",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbc8c0ec-03b9-41d5-8e3d-71fb83bb5a40",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04808c90-b235-4f0d-b1a5-09ede74e899f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "505c18b9-d48d-4a96-92e7-237d3847d58f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "539f74d8-d975-4df7-8bcd-e389d7510360"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f8a73a3-526d-4183-b5d4-0a26f42cae91",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3ee377d-b336-4f5c-9785-86a4ddeeffe3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0b5191f-bb02-445e-8be1-c389fd8acd1a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9eb1912f-5b1c-4148-8e85-012f41d3fd80",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22b1abd2-33ef-406f-b904-4b6e8f0debd8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e560fbb-f72b-4a0d-b8ca-100ca0d5cfa2",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1157df56-5f45-470e-a432-ae6512f36e80",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d351a57f-e918-461c-8735-901da3d58191"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "84856b2e-f71e-48bb-ad35-d42cbb588504",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72e3d2e6-2db9-4a4c-ba67-bdfe2d3882aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4235379e-35f6-4dd8-8484-f675a11a9761",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf18381f-0c65-4fae-8658-5a0c111630b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7599b094-6461-4e11-870d-d92f70cc6c11"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "87ce7ed6-c507-4aa4-b0d4-d53c3530b9e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "12d92258-c6a5-4f8e-903c-347e642fc2fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb68ee96-8072-477f-9a78-b92cf7ae3c0c",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ff03db0-7295-4702-b893-d64e39b53fce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c7addc2-0ae9-4f38-bca4-5169bcc09ea7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "28f6c95a-cfa3-4932-a629-9dee59fe37bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a72f2ca-d268-402a-a7cc-edab04cee4e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e9f5bae-da3a-4914-9744-c3f4700a3d58",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5960238c-12aa-43c4-a9e0-f0c8c33e525f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b52d716-e1d9-4879-81f2-92147a87282f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b79e5b6-0ce9-41ea-a156-876e17cfd298",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "183acc0f-dde0-4083-9f46-425a885dd0af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f6f14c0-0aeb-47f4-822d-051530d1b29c",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2983d03-536c-4938-b6dd-30a46e856a30",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "064c7434-3c45-4d1d-b3c7-93cdd3d96640"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a2bb79a-3e86-41b8-9e0e-e8e3b4611d2c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ba91adc-fbde-4caf-ae85-439850d22b35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41f0bca3-af33-4918-8efb-7edb707f5daf",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b2c4e75-2b34-4a1f-ba79-db59b2f51813",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38d0fbf1-0154-4cc0-b7b6-128620f9d4b5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "26b63ff3-0add-41e7-bc8a-73b28db48aab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50dbff66-9feb-4ad5-af82-ec72d6ff1f5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9788ee78-54e0-4748-b3d0-21c49bc78ee7",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11a43e22-99b6-4750-86ab-89f85a4c5805",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3995778f-4c57-4172-a96f-9140a1fc137d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "95bcb0a3-5e58-4474-9ece-bbe06916079a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38ea66de-c17c-45b5-8b6c-afaf87df2d4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e78bc61-57d5-4b4a-afe4-7152eed15c12",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "677f1721-dca1-42f1-80aa-8224cefbfaf5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6eaa6395-72d2-4553-8f32-e2ca372ac8b6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "81da9f4f-9d10-4041-ae70-2804308640df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3879c1e4-e576-4a98-a0ca-0929d6c308da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3870e457-79cd-487d-92d3-30577f51523a",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be53573f-9ff6-4e78-859b-c43715419e1d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad706e4a-1c54-4bec-ae53-97117f2a24a4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "777aeaca-7a81-4fbb-b294-997e968906df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "744eedc2-f800-4dc8-a91d-82e00f8abbb3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ca827da-58e6-43a4-b12c-b8c33eec3168",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2f35c3b-9f62-4436-bba7-bbb06571a0ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ee10cf7-eb7f-437b-8839-04b56374ea39"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "752109c2-15a1-452a-99da-203c85426f64",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e483435-c008-4dd1-b5d2-2bcc0a9991a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44c95fe3-c87b-44eb-a98d-16ad18cef2d0",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59396a8f-532a-4ce0-8938-29c223dd0a9d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b17aa51f-769e-4045-ab11-3f09021caacc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b198d8e-3182-43e5-b74d-506bfc70ce1b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8458c99d-e8ab-48a7-95a5-67cd6fb710f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25326816-4bce-45a1-baef-8d734b557d23",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98783604-2ea6-471f-a95e-e74b3e32e9fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11c89c6b-5216-474e-bdc4-7ef95ffbe491"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "105a47e6-e1cf-4a92-8d36-7bc54b837071",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "318a7424-0ea7-48ac-b645-3564cd6a2faf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "805cc2e9-fdc1-4d8e-be91-67328c267322",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00089ce6-561e-4b66-9fd4-fd0dd5c4b0a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5188ebf0-441c-481f-8f08-b1fbdf6c3263"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec2abe37-0653-477b-a49f-1667b43de11d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de8d10b7-13c9-442b-9268-2a57cee3db47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "666e0f47-02d9-4edf-b3bf-d2affa9ecbe6",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75377e1c-c7e2-43c2-b9e9-cf52152d3edf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ddda290a-601a-4830-a2ae-aa1d0c94679e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a69717ef-e01d-4e6b-ba8a-6d2a330d359e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56f945ac-ffed-4bce-a294-cd89a38ff61f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d59a2656-5c20-4867-b982-28e49212d73e",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f9b79ed-d076-4f2f-b929-d1723be6f185",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c55beae4-ad60-4eea-a03e-df35337059ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "17754fc8-d24b-426d-97d9-a7c85f8a478a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0aed4ec-979f-4519-87e7-a28c0813263f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "579989a1-a824-4a10-be5f-b6bd9f811189",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1da03b62-92ee-4ca1-9199-c5e1b4afaf29",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8762bed2-dcf6-4eed-9f8e-172d26dfd3e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "33a2c626-04cb-4908-b6b7-5d8431847311",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80532524-edb0-46ea-aabd-4c865adac596"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45d8be41-fe1d-4f66-b1f4-db7f111aa760",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c96fe634-680b-4df5-8f93-a7f14e7ebc31",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "52612b14-d8cc-40c7-9a7b-a7a8f4dd2040"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bdd8cc2-d400-4742-9cb6-2e137b0d1432",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82278223-e675-49b8-abb8-c09b460c2e18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b558ce16-b1a5-45e6-9cd6-1785023d9bca",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f35f002-cbf4-42f5-b8a2-32fc31e4156a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4f70e9ac-89f0-4ebe-af0e-381962d5c311"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e57f1f5-3cec-4932-a11b-2c0d3a63a62d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9cce1a8a-7dc3-4b1e-b1b5-4d56c3866ced"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41ebf359-9c26-4fab-a4c1-3f0853554e01",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a4fa176-94e1-4817-82e1-0bc60542c194",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7a9dbd49-2cdf-439f-b862-6f4b4b377394"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b527325-91d9-43ce-9e78-b238e519efc1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38be3e84-a980-4fd6-8d73-5b6104a4cf95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "216b4bcb-6438-4b73-93bc-8884be7819ff",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dba17d64-03b4-4490-bb65-7ab7799de423",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aeb729a7-f4f2-47db-92e2-39e9a413e566"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4413a75a-c6e1-4f22-b79d-393fbdfee46c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59b6f8f0-f94c-4f02-bf62-53efa6cca5f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68f54558-951c-4d48-a816-3ed203c21de2",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb8669e6-6b0d-4ffe-ac6b-fca209ae1453",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c8eac086-947f-4f19-8b9a-9a35e5d9e105"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "70cee9bf-925c-4c05-93a4-dd80c0b44536",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c15089c-6248-4730-8e5b-3e5ba4016081"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6668421f-44ae-4523-9e59-6a82056b2342",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9eb20cf3-61da-4f68-b47b-e5696e248fed",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e6cc1c89-2aa8-4935-bbc7-efc2a147796b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9368e8e5-472d-46bd-8ba4-e2b1b2ea1cfa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32d7b97c-463d-422f-91d0-8b7b097b6ccb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e822d1f-829c-46a7-8ada-75bb660b6503",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8275bd07-5240-4d3c-b38e-e288b2900ef3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6089b416-6de9-4a7a-8a02-8ed94bbc594a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3cf3fae1-f5ba-4c6e-8f98-df1a4382b932",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1298659-bd01-4530-bd8e-54682e708a7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77dfc210-c2dc-4bf2-80fa-4638b62f0c5a",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a53de63-6398-4cae-9b12-45202377f090",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0856d3ec-32d3-44d7-9f3f-a1531e5ff913"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3765653c-703a-4af8-8d22-c3cedf556081",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3c557a9-f904-47df-8815-cc5ebf8c72d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e2fd92b-e73b-463a-930c-929c9fa91455",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5acc978d-b2d8-4d4e-a058-6bd76fa5a277",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ea32ee0c-94f8-4c73-b427-ab38395859a1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "81ba4648-0567-4eb1-be56-905f04edd5cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55b3d464-1a02-43b8-963d-d1a8e1f6d983"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4873bbf8-a4a8-4595-8bbc-dda69f3a2b26",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee07d7d7-0b11-48e9-9453-96cfbfb86bd4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e5613753-873e-48cd-8d30-4fddfa4b0c55"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1f3eec6-dc0c-4072-9b1c-18a4078c14d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc17b736-ae43-418b-83c2-00dfeeb1bf1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0889522-224f-4b0d-848e-d69d0c04bcb4",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ab8056f-2982-47c3-8c2d-781c7934856a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9ce37543-cf5a-49be-89fc-71a12679070e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f83344b-35a8-414c-b2b6-9153985c6cbd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69db62d9-aa33-46bd-85f6-456fac7853df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af9784e9-c45a-498d-a03e-67763153a3fe",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c07be1a6-699b-42b5-9772-21f52a56bdac",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ebf6ab3c-010e-4ac9-96d5-7fdca5bd7218"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "179e530a-a996-4d94-81cd-d96b1848247c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c678003-650c-42e1-b40e-c9232d7dd55b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c6425a7-9209-41cf-998b-9cd9d088daaf",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca5436ce-a417-440f-bacc-59051ce20028",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ae660fa6-0223-4a7d-8ab1-e0874479360c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "64032916-e51b-4ccf-aa4b-1d52f87bbc30",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1abe095-4fed-4060-812f-0404cc3941d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1cb0194-759b-4469-bfb2-f2b2c31de687",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f911b08-9987-4040-9fb2-23d6bc4ec696",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "291d8dbc-a38e-4c2d-a39b-d8e66f80c211"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b772de4d-3927-4355-a231-1b98ba9a6f31",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d56b6cc-dc2c-474a-8318-3a55122903a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b99ce94b-9d7f-4325-97a4-d3d6020243d7",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "716f4c4c-a98b-4f3c-9f55-d92710bcc49f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c9b55cd6-9827-4142-aa84-2b270941b1dd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "27ecba49-8415-413f-a678-808fe3f8e5f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4af6bc0f-65ad-4385-9f5f-b4be20787fad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0b43fb3-4edf-4c80-a8fb-c5cfa999d938",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be476497-41f4-4850-b04c-260176714ea3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "86047cbf-54a8-43d0-8b9c-534822ee8781"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "48db55ff-20f9-4939-9b35-a3b4e086ce2c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79a3b1ba-7e47-4787-bdf0-ed32efe5243a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee171e3a-7c0e-4081-81c4-fceab7d2dfd7",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3291343d-4309-4ed3-b0f6-cae776f26a35",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "87740d6d-d74c-4c5a-9941-304811068063"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "40f4abff-3c87-4f60-8fb3-2bf0731197c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e28223b-eb30-4cf6-ba52-18dce0b48750"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7816426-b7a9-4ff4-8769-52c5f99c1e6d",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6a5e3ed-cb80-4791-a9af-e0bd798a2a03",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d4db9ac9-603c-4fa5-b68c-ef973a43ecc3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "feabdef9-0ee6-482f-b3c0-9508f0e868ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2169a31-4f33-4667-86b8-a459210e0dc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2535e08d-300c-4b87-8d0d-bf0e2f99fe6d",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c9f5028-49bc-41e1-bded-cb0e0d130ce0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7d847b5f-9769-4a64-b71c-14012934ed5f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c7d339f-8dd9-4e21-8dcd-02c8ec72e51a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b23c5ec-61be-49bb-b43a-0371442393fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b68b499f-18dd-4049-8493-39810b3ccc6b",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a53e8f5-e92b-4bfc-9879-42c240e11360",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "80d5e06c-1c2d-45b5-a75b-c00db557a29f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5047c34e-2746-45f8-9c85-2c9cfd4f984b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2481ba4-87a9-4905-9210-c9a452f807b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "522ec801-b95a-4f50-a439-5e6a0818ff8d",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55cb4c50-76ed-4cb1-8827-2aa94b79da59",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f67c681d-1ef9-449e-a430-065534b2cfff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a57571df-68e8-4002-ab85-ccd300da7ef5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76fd1043-1bf2-4f98-ab54-a7169671fc03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "933fe9f0-5a5c-4990-8fb8-3c5a8954a796",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65a8d7c8-33fe-47ff-a684-1ec8d51dba5d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "45659b21-a468-4a13-ba02-5de019014817"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1befb692-dbd6-4a11-b0a2-e6641f39f85f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3dee5af3-bb30-4ecd-8971-560dd9a91df7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60442d3f-8d32-4369-823a-4252185dc3e0",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c79e5fa-11d3-4b39-b479-3a94d3e10ab7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "07c02d29-3c64-4d18-a0f0-5a2d0edf4d82"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7fb5243-98ce-4314-8011-efb2614f322b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b6337e9-342c-4a0c-b959-f89cdbf58693"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95393146-c468-4d5d-b108-be30eb41d3ad",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6a58016-05dd-4314-a640-dd00552d1a5d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "af8b6a73-e2d1-462e-84ac-1692cd4c840b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3afd7bb6-2da1-47d6-8f3c-c4af15348f62",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dce16581-ebe6-4f26-ab3c-88327e2c7c96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d0093c7-1191-4579-aa5b-60bbac29b776",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1144eb16-4b1f-4e75-98fa-f5938be726ef",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d541c2ba-132d-46fe-9b0d-33bba684fb0c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "92a4697d-4456-4a00-ab1f-94cb0299906d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba898587-bed9-46dd-bb95-6fcd6603c3c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aaa1ce15-f0fe-4442-93cc-909538e64252",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a26cd829-9f67-4db0-82d5-3944883406a3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7ee35762-647b-4137-94fc-0dd09c0a91ad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b096546-8074-414a-8a36-7d9c8f27e983",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0460b811-41bb-480e-a7fe-0e20185c7316"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6486e988-6894-44fc-a4fb-edfc4f7ad67f",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9880d23-3a41-4a49-bc66-992034301a83",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a589fa92-761b-4c9e-9929-272bc92eb506"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb9438b2-8b43-4b9f-a0b6-b2b52d39634d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd464541-c35a-424e-9961-eba6bb651d08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "728440a4-053a-438a-b24f-41d903817a6f",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cefbbc91-83d6-4272-b1fd-bf7f3078f495",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "82c79842-93dd-480b-8ef5-ac427ef12833"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9adcf66f-b4d8-4345-94fe-6303fbe81160",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3c50833-0552-442a-8478-894d05054015"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a1c6ae8-30bc-4c8c-8aac-ac041f232d6c",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0b5182f-1c76-47e3-a6ca-393c12d0281f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0a909b9a-7749-4bb6-ac2c-fcdeae01886c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "33200722-49c3-459a-99ff-464f184801a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7403bbbb-3ddf-4326-9c54-1f3b3b4125dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3ec4273-838f-4530-bac2-3ce9280c75c4",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "239f3798-07ed-4385-b34c-744b2c60f796",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "04ab57ad-6add-4e8e-813c-6d3aa6895115"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "28c84e50-c4d2-4cf9-9d5c-a4073ed31634",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e2f7d09-6f3e-494e-9ea2-831401b1b85b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70beb96a-2b3e-4884-b9f8-2c040dfdb560",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "630189e9-b6d0-4aa7-9a94-666a92f36edc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7d64e9d8-646a-4e20-abf2-218c8aef02a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e52fdc8-00b6-4390-a928-829801ba8ae7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "322ef77f-8635-4f3c-9262-a18e6cb29931"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cfedbb94-98b9-4e85-8c5a-c37a23dcc3e5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "719f9a60-a182-4b92-af36-8b258c6bb69b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ebc672fa-9600-42f0-9f80-8df4d99bdb45",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1e9992d3-3058-4dd4-964a-b1adf16bc6bc"
                    }
                  }
                ]
              },
              {
                "id": "a6f1e79f-1a82-498a-a173-d84fbd45e1b6",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "fac30de1-e16e-4eec-bd85-63560c8a8e2c",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56eaf50f-b080-4d78-82a6-b810e562c7c5",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "8dfdfe6c-a3ef-4c86-9d9e-f73bf9814e81"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ef74a17-2d6a-49bf-ab62-161243a6c712",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b934e757-2161-4f0e-89b3-a1ac3f1e3e35"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a7fdab76-3c73-4ba8-ac72-f703bf516f98",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7d497c2c-4d0a-4934-a165-6d41d77dfd35"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "61c4d44b-01b4-4f9a-810e-1dfc6c24f479",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "cad7c982-cf4c-40e9-913b-d20afe678dc6"
                    }
                  }
                ]
              },
              {
                "id": "6fc38446-018c-46e5-bfb8-8ecfb105b7d7",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "3a1ebcbc-c2d3-42aa-b0d7-edbf1d3bfe1e",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5ca20cc-97e9-4a40-b062-cbe0a3a58d99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "a1c35aef-2e40-4617-b665-bdca26125fc6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d33d80a7-c502-4cb0-bf8d-60ad2f94d7f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09104010-df9c-495f-82dd-9616b75a35a9"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "a3718209-d383-4303-b0e8-9b2c5e5e9578",
            "name": "Positive Testing",
            "item": [
              {
                "id": "25370ee9-2322-44f9-ae33-1fc5d748583f",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "44f48938-f50f-49e1-9ad9-ef8bde2c789d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "07b1c1a1-ce34-4e9a-b39c-bd31710a1a1f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9602158e-1dd6-41d8-9816-0231401a10de",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "35467c4f-a9c7-42aa-a3b8-413bdb9c9b22"
                    }
                  }
                ]
              },
              {
                "id": "f79000d5-f722-4349-9b07-5bc8385b3e9c",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7e4be2f2-a38f-4f97-af59-7d2897e7b208",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "2d18e09d-0235-4621-b9a2-b2602080f7cb"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "19667e38-7948-4378-80b4-0dc78152b690",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f3c8359f-e3a7-4ce7-bfba-8e2624594087"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ceff6547-326c-4964-bccd-7aceac8924d4",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "84aa1c9d-3a79-47b2-bf41-2a7ac2f01869"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "369f9412-1937-4992-862d-00fc47494117",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d32c9000-09af-462e-b23f-af6c69602a59"
            }
          }
        ]
      },
      {
        "id": "c727ef2e-a313-4766-a434-ecbe6a5a212c",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "6d8d9a19-36fb-43bd-907b-d0017422ef9d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "009dfe47-4911-4fe5-bde7-4fb42bd9b225",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "7732d3cc-8a84-46d8-bfc0-71171ee99a0c",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ee5d0a1-902e-461d-9d89-68b7ec843d69",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "1719a004-9546-41c1-9420-8c5f4b742247"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "177ae49c-1544-471b-b243-067cba45fd3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "604d0821-c234-481a-8f75-3be5b3e570f1"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0468e717-d60d-4844-b7a1-31be3aeb473e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e24d4ce8-5201-4e24-a05c-13bdcd7bfba6"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8af9e58d-7a0e-4b1c-ba2b-4650219a1de1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f1ef333f-66a8-4311-acb4-e2734c67c017"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "cfcbd86e-498f-4dca-9f83-19c019591560",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "dc71ed9e-cd1e-4c4e-a150-f06334fc1e74"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9aad148e-5f9e-40ef-bf00-35ecf4f110ed",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "bf873d0b-d035-42e1-9267-5b871f4a5986"
            }
          }
        ]
      },
      {
        "id": "6cdf8cfc-3278-4aa1-97fc-d6bd7361385e",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "d6021a82-421d-4390-ac35-d0ab7aae4037",
            "name": "Negative Testing",
            "item": [
              {
                "id": "fd392374-8349-423e-bb8d-9faaa72114e1",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f35e62bd-ba67-4746-a227-7a8c4fd64f96",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42cb304f-da8b-4957-8d58-c40bc873c300",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8ea9164b-a7d8-4982-b3e2-f424c6146bb8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8bb02c5-d513-4ea6-9179-60e64fc1db75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b4d07029-2c1b-454b-9788-d875aa5f55b1"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6c1e504b-7850-4c3a-95d4-f72c32f96fa0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "dc3170bf-0d6c-4639-99b3-0c4a10b9a4d0"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "caba4b51-743d-4b81-b454-6cd5b87b8ab4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "39a26d27-5927-472a-b28c-dc9b8f53f024"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c1f3f5aa-79f4-40c1-9394-fde633397162",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "de896191-eda2-4526-9a21-14ea3e489dec"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "820bad7c-a02e-427f-811e-f192b7f9b2ac",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6bb5d3ea-8e8e-4dfa-8451-6636891e6f91"
            }
          }
        ]
      },
      {
        "id": "249c1f46-0c52-4525-a76d-095d7f8c3683",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "49f498e9-7e11-49ba-adcd-f68b2e6e2cac",
            "name": "Negative Testing",
            "item": [
              {
                "id": "968576ca-9ae1-4caa-8d07-2d67022f5881",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "0958c7ee-df4c-4589-abd8-0120f68ec53d",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b72971a-6843-4ad4-b092-0c266c9637f6",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "40aa058c-3695-44c4-8a62-2db9f04320cc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "212d741f-cf09-4e0f-a1f2-e792c4238421",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a4537182-7d16-4fcb-b440-80ae146b3c01"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "35353ca3-43d1-4224-8508-9c2403b9e65a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ce73c318-3f12-4c1f-ac69-4d6b34bc9e48"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8033a8dd-1542-4269-9442-c38df882bdfc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "45e83380-3ff7-4d0f-92bc-ecffa37aa4fd"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3368acd6-27de-4523-8539-4cdc12b337b7",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "d9339801-18f9-4fbe-b76e-2b7fc7bd3764"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7e61ecc8-6296-4cab-9614-b814131915a2",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2e04aef7-9a62-46e2-8c11-86a34785b7dd"
            }
          }
        ]
      },
      {
        "id": "035aaae1-8361-43a1-a250-300cbdb4583e",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "09de8cf1-fa08-46c0-8094-9b7f66fe5b6d",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "454bc6d1-cf7c-42a9-b673-62da889c2921",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "c53ace97-5dda-4214-afe1-cf37b46ccfb1",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "223b3a92-0be9-430b-9449-c8f7b990c9a5",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "89b43150-e1b4-4a0d-b0f1-3ef9d39cc57e",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1891,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 507,
        "pending": 0,
        "failed": 264
      },
      "testScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 941,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 80.89682539682539,
      "responseMin": 17,
      "responseMax": 762,
      "responseSd": 94.19882125817628,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1726447591076,
      "completed": 1726447620023
    },
    "executions": [
      {
        "id": "9b4b3c30-91b8-4920-8947-8549b82a374b",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 250,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "6aca050a-a181-4f47-94a4-492d8f85f6c5",
          "httpRequestId": "423fa444-17b0-42cc-993e-bbf8bfde402e"
        },
        "item": {
          "id": "9b4b3c30-91b8-4920-8947-8549b82a374b",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "9e9408cb-3147-4598-b264-bf7e1fca87e6",
          "status": "OK",
          "code": 200,
          "responseTime": 52,
          "responseSize": 0
        }
      },
      {
        "id": "25b4eaf3-c594-4915-9e67-dc79563aa062",
        "cursor": {
          "ref": "62d7f885-787c-4321-8cfb-391c360124d3",
          "length": 250,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "be9089b2-e1b6-42fa-bc15-87809728ef99"
        },
        "item": {
          "id": "25b4eaf3-c594-4915-9e67-dc79563aa062",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "79123605-3bec-411a-af12-e63c60163716",
          "status": "OK",
          "code": 200,
          "responseTime": 17,
          "responseSize": 0
        }
      },
      {
        "id": "552b9427-c764-4a86-9784-d230928b36d9",
        "cursor": {
          "ref": "dedf243f-e8ea-46d6-bf4a-ff5e1b50bc67",
          "length": 250,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "4c77a1c9-c12d-4b0d-bfb7-5067edafdd0f"
        },
        "item": {
          "id": "552b9427-c764-4a86-9784-d230928b36d9",
          "name": "did_json"
        },
        "response": {
          "id": "149bb113-3c2b-418f-a7a2-f7c2d10ae895",
          "status": "OK",
          "code": 200,
          "responseTime": 255,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0040cd7-c2dc-4fa3-b159-4eaa1a381dbd",
        "cursor": {
          "ref": "e53ff9d7-5da1-49df-a1ac-7d616c82bbb8",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "323a800a-7bcf-4cce-a7f2-b8d5f95887d8"
        },
        "item": {
          "id": "f0040cd7-c2dc-4fa3-b159-4eaa1a381dbd",
          "name": "did:invalid"
        },
        "response": {
          "id": "bf4dd321-135f-45f8-b312-989f004e55da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0040cd7-c2dc-4fa3-b159-4eaa1a381dbd",
        "cursor": {
          "ref": "e53ff9d7-5da1-49df-a1ac-7d616c82bbb8",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "323a800a-7bcf-4cce-a7f2-b8d5f95887d8"
        },
        "item": {
          "id": "f0040cd7-c2dc-4fa3-b159-4eaa1a381dbd",
          "name": "did:invalid"
        },
        "response": {
          "id": "bf4dd321-135f-45f8-b312-989f004e55da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd3394c0-c351-44b7-a4ed-7dcd0df467b5",
        "cursor": {
          "ref": "9529d8ae-6880-4082-8560-b88ae5c0b34f",
          "length": 250,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "5fca1356-81a9-4624-8996-e8e4795d613f"
        },
        "item": {
          "id": "fd3394c0-c351-44b7-a4ed-7dcd0df467b5",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "51b97fcd-c6bd-40cb-b2cd-b1d1700c6297",
          "status": "Not Found",
          "code": 404,
          "responseTime": 111,
          "responseSize": 49
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f1cfe49-b209-4b4f-9d80-fbe332ae4090",
        "cursor": {
          "ref": "58a4cf50-2c6b-47e5-bb44-f7c54d68d350",
          "length": 250,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "9f521e93-41f7-43ce-ac93-77d73a119736"
        },
        "item": {
          "id": "4f1cfe49-b209-4b4f-9d80-fbe332ae4090",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "1d41716e-eb84-4d1f-9d7d-ad8cc35ba63c",
          "status": "Not Found",
          "code": 404,
          "responseTime": 44,
          "responseSize": 82
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3862bc36-9709-4190-a3a8-87a8c810937b",
        "cursor": {
          "ref": "8b265966-c6ab-4a86-a8c0-a35b8aca00a5",
          "length": 250,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "7fd35374-fd5d-4f79-9826-5c78a6e02432"
        },
        "item": {
          "id": "3862bc36-9709-4190-a3a8-87a8c810937b",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "d32345fc-ba89-4ce8-ada4-bf38d9e435a8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 37,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56b0618d-a7a1-4cf1-a400-48a68a572890",
        "cursor": {
          "ref": "893d6ce8-4740-444e-b8e8-f511fd90c0a6",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "890542f4-8bec-4387-a914-babe7081cefc"
        },
        "item": {
          "id": "56b0618d-a7a1-4cf1-a400-48a68a572890",
          "name": "identifiers"
        },
        "response": {
          "id": "91dd87aa-28bc-49e5-851e-5e7bee8295de",
          "status": "OK",
          "code": 200,
          "responseTime": 85,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9dcd1252-942c-4c5d-8439-9b6801eeeae9",
        "cursor": {
          "ref": "2e67e2ee-9a1f-4265-b101-ec2a178eed50",
          "length": 250,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "b7d8d426-716c-4e72-b572-0fa5be5f9cc0"
        },
        "item": {
          "id": "9dcd1252-942c-4c5d-8439-9b6801eeeae9",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "3a75e3bb-39b9-4ff4-bccc-35045718eb5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:9)"
            }
          }
        ]
      },
      {
        "id": "2d39f47e-8bfa-4b03-bc0a-e92cce4df5fb",
        "cursor": {
          "ref": "5bc51fbb-4870-4300-bcc6-327e9496efe7",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "84eab865-aeca-49dd-9017-2106d69d3131"
        },
        "item": {
          "id": "2d39f47e-8bfa-4b03-bc0a-e92cce4df5fb",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "97a51084-1a47-444d-acd1-6a8d36382bca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 204
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "a23ee6f3-1007-44e4-b80c-ac0d13075120",
        "cursor": {
          "ref": "3bd544dc-7407-4a8b-b34e-a117391332f9",
          "length": 250,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "4905ce53-0a80-4554-90bc-e9dd6a07393b"
        },
        "item": {
          "id": "a23ee6f3-1007-44e4-b80c-ac0d13075120",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "5feb4505-2356-4542-aa6a-68ba94f54121",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 204
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "id": "2f1ff34c-50f8-482e-82fe-b7e35febe4d9",
        "cursor": {
          "ref": "6204abf9-34fc-4abb-a661-3124237deee2",
          "length": 250,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "59f1f05c-11c2-4665-aea8-81d7a654ac61"
        },
        "item": {
          "id": "2f1ff34c-50f8-482e-82fe-b7e35febe4d9",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "ba459b67-98e6-45a6-a23f-55e70d316662",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 204
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "727a71cc-893b-458c-9e79-3c6cfa268a67",
        "cursor": {
          "ref": "1a7ff269-a171-431c-9686-d7e7c2d9b96c",
          "length": 250,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "e4403c68-35e8-4f71-a410-80509cd7b4d6"
        },
        "item": {
          "id": "727a71cc-893b-458c-9e79-3c6cfa268a67",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "548d6ea0-2725-4f88-a0b5-39b2eee28259",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 204
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      },
      {
        "id": "dffeba35-9914-41a3-ad06-41892d1220a7",
        "cursor": {
          "ref": "f0daf515-2987-48d1-b6d8-71ae8968447e",
          "length": 250,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "23a00c43-ce3a-4f3d-abd6-ff7db20e8904"
        },
        "item": {
          "id": "dffeba35-9914-41a3-ad06-41892d1220a7",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "74b0878e-81a1-4961-ba41-8962f1317492",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 204
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:14)"
            }
          }
        ]
      },
      {
        "id": "03d510bf-f056-4eeb-bd01-201961ae1440",
        "cursor": {
          "ref": "6413fbe6-29e4-4837-92d5-8fd39a7563ba",
          "length": 250,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "503ec52e-d9bf-41c3-9e06-cbda2a39cb49"
        },
        "item": {
          "id": "03d510bf-f056-4eeb-bd01-201961ae1440",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "4cb1d475-a412-476e-b560-5e150d6b9d63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:15)"
            }
          }
        ]
      },
      {
        "id": "0cb443ae-243f-454e-b6c3-473d585a9045",
        "cursor": {
          "ref": "60558e80-601c-451d-8da7-d9ecdd43f71d",
          "length": 250,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "cfeb1814-fd81-417c-ab4f-42cfbc5f5951"
        },
        "item": {
          "id": "0cb443ae-243f-454e-b6c3-473d585a9045",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "9594f52c-141d-47a6-9c5a-ca5353ffad87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "e68f7a86-9a0f-4aeb-b6fc-458514e4a648",
        "cursor": {
          "ref": "abd8a706-5d70-4e3f-9b28-74fc214f2ae8",
          "length": 250,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "e7b480a6-f440-4052-95b1-e5b282e660d9"
        },
        "item": {
          "id": "e68f7a86-9a0f-4aeb-b6fc-458514e4a648",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "f8219735-3630-4483-b85d-8a1fc609c94f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "33027092-6a2c-4940-9dd3-3f83e998727e",
        "cursor": {
          "ref": "a741a0b8-9b9e-4cf8-8e02-037cacc91f7d",
          "length": 250,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "5a6ca8bb-222d-4610-8ae8-12126844cb63"
        },
        "item": {
          "id": "33027092-6a2c-4940-9dd3-3f83e998727e",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "aa58c5bc-1506-42eb-9365-bc34a1f557ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:18)"
            }
          }
        ]
      },
      {
        "id": "f2dffe73-f211-44b2-832d-887469085a27",
        "cursor": {
          "ref": "831200ef-4232-4a19-aa29-d645967e83e2",
          "length": 250,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "90c1ae4b-7ae5-42cf-83b6-0fe9625523e4"
        },
        "item": {
          "id": "f2dffe73-f211-44b2-832d-887469085a27",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "269d9ce9-fa8a-4a06-a3c8-7007000287ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:19)"
            }
          }
        ]
      },
      {
        "id": "0fb63383-8843-45e2-ade0-f1f4461946f1",
        "cursor": {
          "ref": "9bf918b6-6b7f-4264-9546-5502542369be",
          "length": 250,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "3ee3f6c4-03bb-4965-aefb-73f88b6b091c"
        },
        "item": {
          "id": "0fb63383-8843-45e2-ade0-f1f4461946f1",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "2c35d649-db1e-4502-9961-c62b66d0529b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "67c05c32-71e9-4785-97f4-b3563a43995f",
        "cursor": {
          "ref": "a1f4cb92-e9d9-4251-b72e-177e8da9ec2b",
          "length": 250,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "cb4b53da-702c-4353-915d-62bbe832e0ed"
        },
        "item": {
          "id": "67c05c32-71e9-4785-97f4-b3563a43995f",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "eac7f817-3a98-4fc0-8a34-5060ab7e477c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "4326a9d5-8b38-44a3-81e3-960fa8dcba65",
        "cursor": {
          "ref": "1503a77d-6298-4e45-88e4-831bfcceb3e5",
          "length": 250,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "96e8381d-1fed-44c5-8717-3d1784971c82"
        },
        "item": {
          "id": "4326a9d5-8b38-44a3-81e3-960fa8dcba65",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "9249c3cf-012b-4c7a-bef8-ac6561c82894",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "4fb6c65c-99b0-4cf6-9bc4-e87718fc6df9",
        "cursor": {
          "ref": "182ecf3c-d0a0-439c-9e66-551d9143c3c6",
          "length": 250,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "de476aba-3b1f-48bf-a7cc-43fc6385efd8"
        },
        "item": {
          "id": "4fb6c65c-99b0-4cf6-9bc4-e87718fc6df9",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "73ccf4aa-eaa1-49c0-904f-5ae071bb2357",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "e11e6a69-19c1-4c8e-9d9c-f2691beaba9b",
        "cursor": {
          "ref": "bd8965c1-15b0-4332-9e0e-f558eedb852a",
          "length": 250,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "f049ca65-5723-4cb2-9464-eff9a7db8337"
        },
        "item": {
          "id": "e11e6a69-19c1-4c8e-9d9c-f2691beaba9b",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "201153ab-c780-4499-935f-c804ec8e1e45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "ed3c4779-db13-4c49-a8e7-538018139f56",
        "cursor": {
          "ref": "1b3572cd-4661-44cd-91b3-2f8da6542ca5",
          "length": 250,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "38b0633e-ba52-4b28-9d34-5cf97e372838"
        },
        "item": {
          "id": "ed3c4779-db13-4c49-a8e7-538018139f56",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "c8b54a5f-b238-47e7-997a-a83a64c0dee8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "acaaa342-21b8-4534-aeb1-44554154fef4",
        "cursor": {
          "ref": "be68ca63-feec-44ac-b8c9-970a5485e0ee",
          "length": 250,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "145419fa-96c5-4ce8-a4f9-44c722746740"
        },
        "item": {
          "id": "acaaa342-21b8-4534-aeb1-44554154fef4",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "202aaa2b-1589-470a-b5fc-c758fabf5383",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:26)"
            }
          }
        ]
      },
      {
        "id": "e1c6c057-153d-47fe-ba78-0f3d222fcad4",
        "cursor": {
          "ref": "1e1c5573-54be-4a00-9dd2-54daf6b61019",
          "length": 250,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "5af14dd8-23de-4a44-93ec-08674563b217"
        },
        "item": {
          "id": "e1c6c057-153d-47fe-ba78-0f3d222fcad4",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "a341ccd9-4c13-40f6-aa74-a34b56783ca8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:27)"
            }
          }
        ]
      },
      {
        "id": "b638f89d-45b6-40ab-9340-083a5527e58e",
        "cursor": {
          "ref": "aa034779-9f6f-4ae5-a2c3-e91ccf1db185",
          "length": 250,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "cd9e4ab1-a16b-45d8-b193-22736d8e71e9"
        },
        "item": {
          "id": "b638f89d-45b6-40ab-9340-083a5527e58e",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "a66642ed-7034-414b-a07f-15380935c40a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:28)"
            }
          }
        ]
      },
      {
        "id": "cd1ff5a3-0d3e-4043-be64-536745c8a64d",
        "cursor": {
          "ref": "d2c433f3-338c-40b4-9809-544d4cbb451a",
          "length": 250,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "229b8aca-81ed-40e1-a1d1-255d2b67e585"
        },
        "item": {
          "id": "cd1ff5a3-0d3e-4043-be64-536745c8a64d",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "a2c75433-0fbd-47ce-9d34-b51e5e6f4ce9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:29)"
            }
          }
        ]
      },
      {
        "id": "7d8584ba-d0c1-42a2-92e9-1c2c6350031a",
        "cursor": {
          "ref": "9d7a2033-c348-4114-afc9-c9d6cb900224",
          "length": 250,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "bc4922e7-dc0f-4d83-926d-254524fc0f56"
        },
        "item": {
          "id": "7d8584ba-d0c1-42a2-92e9-1c2c6350031a",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "ec35af30-3180-4846-bab8-7773d71db683",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:30)"
            }
          }
        ]
      },
      {
        "id": "e0adb232-ead0-4756-ab4e-f67e609ef8f4",
        "cursor": {
          "ref": "d9c6d507-5ade-4628-9c1e-9388cff55e9e",
          "length": 250,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "f3c1f0a7-896c-42ff-9155-4914c48df4cb"
        },
        "item": {
          "id": "e0adb232-ead0-4756-ab4e-f67e609ef8f4",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "7b179d8b-0b60-4267-9f81-660f65e18a30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 103
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:31)"
            }
          }
        ]
      },
      {
        "id": "3b1283e5-5814-4820-98d6-873e007a461b",
        "cursor": {
          "ref": "fff3e828-cf02-41d8-acd1-bfcdb4ddf25c",
          "length": 250,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "e18b47a4-e46a-4df8-9755-1b5923c1417d"
        },
        "item": {
          "id": "3b1283e5-5814-4820-98d6-873e007a461b",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "51ee7642-3889-4aca-b89e-f6c4fade9f35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 103
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "176d74fb-20c8-4ed9-ad61-455d932e9aed",
        "cursor": {
          "ref": "419e9dc9-7030-456a-a6ef-06cffdb11a26",
          "length": 250,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "4790a940-b6a7-4d51-8066-2f5401fe6205"
        },
        "item": {
          "id": "176d74fb-20c8-4ed9-ad61-455d932e9aed",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "e67c5a1c-8ee8-42b2-a071-9f7c468f9777",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:33)"
            }
          }
        ]
      },
      {
        "id": "b1ecb1f7-3d6d-43d5-8c45-6203db440bb7",
        "cursor": {
          "ref": "7729f7c3-2fb8-4c44-952c-e596614a669e",
          "length": 250,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "0e3554d8-e055-49e6-946c-75933dc2a4da"
        },
        "item": {
          "id": "b1ecb1f7-3d6d-43d5-8c45-6203db440bb7",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "85dae506-c9d9-4399-98d7-55ee6a4ebd81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "78768e4b-1aef-42d3-bc80-2c8acee0fceb",
        "cursor": {
          "ref": "8ea7226a-6e70-40d2-9057-e1c7b3f543f1",
          "length": 250,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "3682b32c-c707-4d3b-a179-bbb23200bc84"
        },
        "item": {
          "id": "78768e4b-1aef-42d3-bc80-2c8acee0fceb",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "391aceee-30be-444c-a29e-7faa46d5142d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:35)"
            }
          }
        ]
      },
      {
        "id": "dc109f9c-56dd-452e-bf00-55864b4864f2",
        "cursor": {
          "ref": "6d440e00-d6e1-45dc-9d6b-da623cc28853",
          "length": 250,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "a7813191-e624-4bed-a17e-46c22471f155"
        },
        "item": {
          "id": "dc109f9c-56dd-452e-bf00-55864b4864f2",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "be43e57e-f1f7-4078-944d-547a9bdf047c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "id": "b33591fb-08c4-4425-86ae-5dc0ccc90f21",
        "cursor": {
          "ref": "a3c11ce5-8e1b-4e68-a565-dc19a543f027",
          "length": 250,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "a4fdb4ba-b7e6-41a3-9dbb-4115b25d329f"
        },
        "item": {
          "id": "b33591fb-08c4-4425-86ae-5dc0ccc90f21",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "112f8105-118c-4845-962a-7014d2a0dabb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      },
      {
        "id": "6805e9c1-e91a-46d1-94da-1e908fd7c965",
        "cursor": {
          "ref": "4db3a6b8-2788-42f8-8490-35eee762269b",
          "length": 250,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "5d8400a6-d4bb-4344-8229-3ffb9d24bec2"
        },
        "item": {
          "id": "6805e9c1-e91a-46d1-94da-1e908fd7c965",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "c8fbe2b8-5245-4ef8-bf14-e674074b890c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 92
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:38)"
            }
          }
        ]
      },
      {
        "id": "dae648aa-feb2-4640-9f91-a04326e1d7d3",
        "cursor": {
          "ref": "3bc27375-cd87-440b-a343-94dd8c764eac",
          "length": 250,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "302620cb-34c4-42fb-b3f4-0017b8843a0c"
        },
        "item": {
          "id": "dae648aa-feb2-4640-9f91-a04326e1d7d3",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "c09382dd-c874-484c-b28d-21a20e4200a5",
          "status": "Created",
          "code": 201,
          "responseTime": 762,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "051667d9-084c-487d-9462-839076f94e12",
        "cursor": {
          "ref": "a8ad61fe-3fd8-40f9-ba83-12b117e2823a",
          "length": 250,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "8a29532c-b3d5-4353-9d3e-9e9e1a03d7ed"
        },
        "item": {
          "id": "051667d9-084c-487d-9462-839076f94e12",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "5f6cf33d-db7b-4bb7-8260-446ba2394716",
          "status": "Created",
          "code": 201,
          "responseTime": 340,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "c26cd917-92ac-4fac-adf6-3efe06b536f2",
        "cursor": {
          "ref": "4898e584-799e-472a-83c3-62bb5ed2597f",
          "length": 250,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "a4bd8f9a-8c6a-47ff-9199-b76028466f95"
        },
        "item": {
          "id": "c26cd917-92ac-4fac-adf6-3efe06b536f2",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "f1e8f21b-9d2e-4617-a9ac-f2a2f1fe7821",
          "status": "Created",
          "code": 201,
          "responseTime": 331,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "f793fbfa-95e4-4bf3-8afd-0599c9e05059",
        "cursor": {
          "ref": "774ab218-8dd6-4833-906f-cb8bc2eb7cb0",
          "length": 250,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "c6fab458-7954-410b-88b0-032abf00c7fa"
        },
        "item": {
          "id": "f793fbfa-95e4-4bf3-8afd-0599c9e05059",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "9712ef89-c6c8-45e2-acfd-1170357e93bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 92
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:42)"
            }
          }
        ]
      },
      {
        "id": "3b5937ac-b1ce-43a7-84a6-220921c99a54",
        "cursor": {
          "ref": "3f62f398-a9c3-4a45-81bf-db49da22f98a",
          "length": 250,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "8cc18299-be31-413e-a6a3-0e886eaf2420"
        },
        "item": {
          "id": "3b5937ac-b1ce-43a7-84a6-220921c99a54",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "a18804e8-2571-4a39-ab70-144cec460a0b",
          "status": "Created",
          "code": 201,
          "responseTime": 314,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "cafc2372-0a78-4bc0-9c53-1fd23f14b661",
        "cursor": {
          "ref": "f9135ec1-2ab1-4fbb-8eb4-926349402fcc",
          "length": 250,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "e286046a-e58a-49e7-afc7-bd19ba180b6f"
        },
        "item": {
          "id": "cafc2372-0a78-4bc0-9c53-1fd23f14b661",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "59d9dfc4-5f68-4127-8843-30a55e992130",
          "status": "Created",
          "code": 201,
          "responseTime": 307,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "05f7eeaa-f8d1-4c16-ae7f-cb7f22d23169",
        "cursor": {
          "ref": "b593b2d1-859c-4a6c-ac5d-01aac80d56a8",
          "length": 250,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "894dcb7b-bcd2-4c27-8378-ab341e883226"
        },
        "item": {
          "id": "05f7eeaa-f8d1-4c16-ae7f-cb7f22d23169",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "a368c51b-0dfa-4e66-8770-b4c6925fd76f",
          "status": "Created",
          "code": 201,
          "responseTime": 344,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "37d32804-0ac5-46e8-b59a-634bf550d97d",
        "cursor": {
          "ref": "ac413a73-bcee-4af0-a209-a4b1db9ed843",
          "length": 250,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "7b4454e3-5c1c-4ff8-b1b0-191925af64a4"
        },
        "item": {
          "id": "37d32804-0ac5-46e8-b59a-634bf550d97d",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "fc91294a-0a28-447e-92ac-63dc238c35d2",
          "status": "Created",
          "code": 201,
          "responseTime": 312,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "ff4af42c-6743-41bd-8082-8b938a4f4be7",
        "cursor": {
          "ref": "87c76df1-0678-45c3-afa3-0f261bceba35",
          "length": 250,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "3f20f1ec-1480-416e-a814-c2f3e75c3e0c"
        },
        "item": {
          "id": "ff4af42c-6743-41bd-8082-8b938a4f4be7",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "9ac52d03-e1ba-4c7e-8585-78c5bbc54cc4",
          "status": "Created",
          "code": 201,
          "responseTime": 305,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "b0af49cf-636c-4cc6-b898-8c843fdac626",
        "cursor": {
          "ref": "c431d008-1af3-449b-ad4b-251755eb0b2b",
          "length": 250,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "258715ad-d327-4b06-be86-bdf6fa00aeec"
        },
        "item": {
          "id": "b0af49cf-636c-4cc6-b898-8c843fdac626",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "07c8d1a2-02b4-428f-ac2b-ae869c2a22f2",
          "status": "Created",
          "code": 201,
          "responseTime": 314,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "baa95a59-f262-4d7b-b731-5060e0c048c6",
        "cursor": {
          "ref": "02a2a241-4df9-4435-ab7a-f6550747e027",
          "length": 250,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "1041d6a6-676d-482a-80a5-89155cdad941"
        },
        "item": {
          "id": "baa95a59-f262-4d7b-b731-5060e0c048c6",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "124c25ca-f1a3-48d4-a44a-f27d39f770c5",
          "status": "Created",
          "code": 201,
          "responseTime": 369,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "7010922b-973e-4d19-8f05-395a8ba51e81",
        "cursor": {
          "ref": "953f44e8-f536-4d50-9341-2ec7f7f62737",
          "length": 250,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "b35cf14e-02f6-4914-a81f-1bbc80219371"
        },
        "item": {
          "id": "7010922b-973e-4d19-8f05-395a8ba51e81",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "fd7ce103-a7a7-4f04-8ac4-7b126bc4923f",
          "status": "Created",
          "code": 201,
          "responseTime": 323,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "ac9869e2-2068-4e82-99c1-1c98971d5aca",
        "cursor": {
          "ref": "8fd2f38b-0c1a-4021-9702-548dd2a5a948",
          "length": 250,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "5479a629-5394-4363-af0b-88d420925d99"
        },
        "item": {
          "id": "ac9869e2-2068-4e82-99c1-1c98971d5aca",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "a84a52cf-aab5-479d-8b14-c85e376ce95b",
          "status": "Created",
          "code": 201,
          "responseTime": 346,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "98664c1e-ce97-4297-b61b-865fe059191d",
        "cursor": {
          "ref": "5dfd77c6-0467-4302-acff-851ce20f9e4b",
          "length": 250,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "5019f82b-ec54-40aa-a400-ae109077d375"
        },
        "item": {
          "id": "98664c1e-ce97-4297-b61b-865fe059191d",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "819def87-6893-473d-807f-ca2a89f2f3ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 161
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "01bcbf94-2f93-4f3b-bb09-3aaa36740a36",
        "cursor": {
          "ref": "582124d7-b715-4a96-bedb-c9bb965fab1e",
          "length": 250,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "0456e9c9-6209-495a-8834-b5e8cde8bb03"
        },
        "item": {
          "id": "01bcbf94-2f93-4f3b-bb09-3aaa36740a36",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "86dbd392-7c49-4362-ba85-c97f4a9e3b8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "0f2906b8-8708-4b31-9b1d-310918ed1d62",
        "cursor": {
          "ref": "bd066dbc-9cc1-4e1b-babf-01aac4d5e678",
          "length": 250,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "72463119-79f5-4012-a54a-800b821297e1"
        },
        "item": {
          "id": "0f2906b8-8708-4b31-9b1d-310918ed1d62",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "40721618-02c6-408e-afe2-1f247d194673",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "26ceeebc-cd87-44df-a8d7-abc35ed17464",
        "cursor": {
          "ref": "e2a4c593-1803-4db8-ac70-3695fca4c6e8",
          "length": 250,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "30d98e6d-3b65-4dc6-9e41-0bf3f98015f9"
        },
        "item": {
          "id": "26ceeebc-cd87-44df-a8d7-abc35ed17464",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "b65f0b91-2ad5-4dfa-9473-5819e28b96fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:55)"
            }
          }
        ]
      },
      {
        "id": "173a72bb-33de-4f46-b0f2-0bd3ea56e321",
        "cursor": {
          "ref": "a2cb0085-263f-44c3-99d8-2d841e60b577",
          "length": 250,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "9cedaa62-ded9-42d5-b5c0-818f033e9864"
        },
        "item": {
          "id": "173a72bb-33de-4f46-b0f2-0bd3ea56e321",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "e5959c08-0c4b-47bd-864b-95178d9a4dff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 161
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:56)"
            }
          }
        ]
      },
      {
        "id": "c75a37c1-c51f-4795-8a91-fa4d86dcc640",
        "cursor": {
          "ref": "549dc414-320a-4293-afb9-01eb7eb6aac0",
          "length": 250,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "69362f48-b437-4ce7-ad9b-0333902a034a"
        },
        "item": {
          "id": "c75a37c1-c51f-4795-8a91-fa4d86dcc640",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "f3083b1e-6a20-4678-b31e-ebf3917d9942",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:57)"
            }
          }
        ]
      },
      {
        "id": "0bfc9898-fc96-439c-9521-9c967603121b",
        "cursor": {
          "ref": "7c98adce-1cd8-4205-9858-dc877b01bd0c",
          "length": 250,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "057a3817-167c-42f3-8a36-b39d778a75d9"
        },
        "item": {
          "id": "0bfc9898-fc96-439c-9521-9c967603121b",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "9464c37d-1d40-4f9a-a9b3-6248cea44a1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:58)"
            }
          }
        ]
      },
      {
        "id": "cb89c3a4-45d2-4ec2-9ac3-5dddac677d80",
        "cursor": {
          "ref": "06c0938e-33b9-4eb7-9d8b-e35e0a3cede3",
          "length": 250,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "6f7d1603-0dc7-4248-8037-970a8664c81f"
        },
        "item": {
          "id": "cb89c3a4-45d2-4ec2-9ac3-5dddac677d80",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "c4163006-64f1-4d3a-937f-56e461a96db8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:59)"
            }
          }
        ]
      },
      {
        "id": "5acb3d69-70e0-4767-9a8f-5074abf02e18",
        "cursor": {
          "ref": "8f42ebdd-5afb-4cfa-9574-66f46ee205b3",
          "length": 250,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "d7527cf7-2d6a-4189-a77a-4f1872d68c85"
        },
        "item": {
          "id": "5acb3d69-70e0-4767-9a8f-5074abf02e18",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "bf671e80-f6ed-4954-87e4-f884e6e3cfc4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 197
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:60)"
            }
          }
        ]
      },
      {
        "id": "877b8265-a7d1-460a-91fe-3c4b0e4879cf",
        "cursor": {
          "ref": "65c5b89c-561a-4692-a457-712dda924017",
          "length": 250,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "5e939ef3-1690-4926-a702-917bbdb37f5c"
        },
        "item": {
          "id": "877b8265-a7d1-460a-91fe-3c4b0e4879cf",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "078c4436-2dae-4064-95c1-2df5abf6515e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:61)"
            }
          }
        ]
      },
      {
        "id": "03c3cfc6-1df8-4872-a2b2-e325648a6eeb",
        "cursor": {
          "ref": "c2352770-0653-4739-b1f0-44ea47f140b1",
          "length": 250,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "607d9a0d-6dfc-4801-b72f-05dbfca072fe"
        },
        "item": {
          "id": "03c3cfc6-1df8-4872-a2b2-e325648a6eeb",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "25f1fcab-b1cc-42ac-bf6c-da31eecb07ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 150,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:62)"
            }
          }
        ]
      },
      {
        "id": "cec52340-9db1-4b16-b62b-aa0ca795aaca",
        "cursor": {
          "ref": "06753fad-87c0-4c90-86fc-71fffb4eb3bb",
          "length": 250,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "47cc56e0-a9ec-4b32-af86-dc420618737a"
        },
        "item": {
          "id": "cec52340-9db1-4b16-b62b-aa0ca795aaca",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "159f23b0-2e8f-4e04-a443-5364742187db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:63)"
            }
          }
        ]
      },
      {
        "id": "c7e46faf-eeb7-4391-a3f5-eba49a5520c4",
        "cursor": {
          "ref": "9722a03a-2e00-40f1-ad7b-8d306c7eb768",
          "length": 250,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "364f3e39-aeee-4a7f-b8d7-968be9d9a58d"
        },
        "item": {
          "id": "c7e46faf-eeb7-4391-a3f5-eba49a5520c4",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "92a11e59-bc06-4107-b18b-f49e63fef2f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:64)"
            }
          }
        ]
      },
      {
        "id": "db240dcc-f74a-4b61-94fb-4264d2de7698",
        "cursor": {
          "ref": "65baeedf-1f3d-4763-9ec2-97f90bb8bcd6",
          "length": 250,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "e1c9c274-bf47-47a3-bb02-8b06db854ee2"
        },
        "item": {
          "id": "db240dcc-f74a-4b61-94fb-4264d2de7698",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "783a1bfd-bfd6-406b-b152-1e2b8a85a448",
          "status": "Created",
          "code": 201,
          "responseTime": 342,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "b06e8e6a-e951-4b19-8729-35f306cb55f0",
        "cursor": {
          "ref": "4b99e292-1d42-4704-b0fa-87d04f48d6cd",
          "length": 250,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "34e122f5-ad8b-4a1f-a470-c2d5feb32f65"
        },
        "item": {
          "id": "b06e8e6a-e951-4b19-8729-35f306cb55f0",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "b537c0c2-3ee2-4584-895d-e30df6839131",
          "status": "Created",
          "code": 201,
          "responseTime": 328,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "c95346cc-cf01-4071-aa03-a6ec127480a7",
        "cursor": {
          "ref": "be5e5029-1331-4795-ab21-c52480009dde",
          "length": 250,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "d51416fb-e5ef-4df4-ad89-10d3280c1f63"
        },
        "item": {
          "id": "c95346cc-cf01-4071-aa03-a6ec127480a7",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "5d003ae6-af55-4ff7-a50c-02429d58740c",
          "status": "Created",
          "code": 201,
          "responseTime": 320,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "b6cc870e-bb55-484f-9b11-113c662a4624",
        "cursor": {
          "ref": "56212bd4-4243-4313-9987-b18e936af914",
          "length": 250,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "6b1332be-a10b-452d-b7b4-87104c5305e2"
        },
        "item": {
          "id": "b6cc870e-bb55-484f-9b11-113c662a4624",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "8c80d3be-ca5d-4d55-9d3d-293decd0d8cd",
          "status": "Created",
          "code": 201,
          "responseTime": 320,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "46c304aa-cd79-4fc5-8d3c-f6ab0c5957d3",
        "cursor": {
          "ref": "32f2d766-99b8-497a-a183-4724261fa9c0",
          "length": 250,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "a374a2c6-aa38-4604-980a-97131e161b69"
        },
        "item": {
          "id": "46c304aa-cd79-4fc5-8d3c-f6ab0c5957d3",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "57506bc9-d97b-40a1-a2b4-b250f02ec070",
          "status": "Created",
          "code": 201,
          "responseTime": 335,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "4f074c5f-8f0e-4eab-b1c5-22ac0246bd30",
        "cursor": {
          "ref": "be9ba17f-d678-4df8-93f4-285c13c1047c",
          "length": 250,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "6561d39b-2ba2-43be-a67f-e576a6d4f4b5"
        },
        "item": {
          "id": "4f074c5f-8f0e-4eab-b1c5-22ac0246bd30",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "82a8ac0a-3ed3-4f22-9791-9097d88538fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:70)"
            }
          }
        ]
      },
      {
        "id": "7929f2a8-bf20-4931-9320-54efc66794ad",
        "cursor": {
          "ref": "71e7ce05-318f-4200-a47b-7484d56766a8",
          "length": 250,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "7b45ac26-6879-434e-9340-493c98b3f0ae"
        },
        "item": {
          "id": "7929f2a8-bf20-4931-9320-54efc66794ad",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "26633a21-4494-4725-ac68-d89038982d73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 80
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "7d8409fb-124d-40c7-8f7d-8c88c11cdc7a",
        "cursor": {
          "ref": "9f3db476-dcc4-40a6-9f30-6b8f9745c822",
          "length": 250,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "e9090670-107e-4644-bdbc-6c482ce73aca"
        },
        "item": {
          "id": "7d8409fb-124d-40c7-8f7d-8c88c11cdc7a",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "75bc3f0f-7e38-41de-8814-a7b13146af01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:72)"
            }
          }
        ]
      },
      {
        "id": "994c2ffb-8817-400b-be6f-d0178b8ce4e4",
        "cursor": {
          "ref": "f951308c-1e2f-4b5b-8d7c-fe7d5f93c62e",
          "length": 250,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "19bff5b4-61b6-4240-863a-4cbaa9760b11"
        },
        "item": {
          "id": "994c2ffb-8817-400b-be6f-d0178b8ce4e4",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "b7642c1a-43c0-43f5-92d7-29af65e7d353",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:73)"
            }
          }
        ]
      },
      {
        "id": "e569a4f3-2e6f-4611-b55c-673428117bdb",
        "cursor": {
          "ref": "f917e39f-9bed-45d9-8b16-f491c45b326f",
          "length": 250,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "9cf34894-5eb3-446b-bbc2-abcc511918be"
        },
        "item": {
          "id": "e569a4f3-2e6f-4611-b55c-673428117bdb",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "99cb0335-299e-48b0-bf83-3afa300691ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 181
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:74)"
            }
          }
        ]
      },
      {
        "id": "39baca55-efd0-44c5-b4ad-92905483dc9c",
        "cursor": {
          "ref": "4890ccdd-7536-4791-a7db-a5a33729566f",
          "length": 250,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "f7078110-4004-4a47-887d-e00dda7c61b9"
        },
        "item": {
          "id": "39baca55-efd0-44c5-b4ad-92905483dc9c",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "2c480977-42ef-4b33-9804-f22e42f4771f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 181
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:75)"
            }
          }
        ]
      },
      {
        "id": "e38eaf66-ea2d-4d8f-92ad-7e09a2d000e9",
        "cursor": {
          "ref": "14d67e34-158c-4be4-8893-9da14f94d25f",
          "length": 250,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "c9c0c1f8-ae9b-4397-ad51-25c59fd3fd94"
        },
        "item": {
          "id": "e38eaf66-ea2d-4d8f-92ad-7e09a2d000e9",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "a7a07913-ab66-46f8-93e6-bcfd06797006",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 270
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:76)"
            }
          }
        ]
      },
      {
        "id": "54f55d5d-d74a-4a47-bc09-5612d01ad845",
        "cursor": {
          "ref": "20fb9c62-63ad-4f3d-8aed-2ae888a045d5",
          "length": 250,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "17c260f9-009b-46ee-9825-2e5d729748de"
        },
        "item": {
          "id": "54f55d5d-d74a-4a47-bc09-5612d01ad845",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "a01bfc89-2abe-4a80-b3d1-29d2130bbb42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 235
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:77)"
            }
          }
        ]
      },
      {
        "id": "47bb082a-c129-4cbb-8719-2e06b348f92b",
        "cursor": {
          "ref": "8671f6c9-3bf0-4da4-8011-2b9334f12822",
          "length": 250,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "c192ebd1-0500-4b3f-b369-6bf12da25893"
        },
        "item": {
          "id": "47bb082a-c129-4cbb-8719-2e06b348f92b",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "04b02803-93fc-4c2f-b7bf-8b56ba33bd7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 235
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:78)"
            }
          }
        ]
      },
      {
        "id": "a7717c31-ce05-41e8-b58b-4963334f6574",
        "cursor": {
          "ref": "93f42b94-0962-4c43-a164-d708d1a68a52",
          "length": 250,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "1ac4d019-5b78-46af-9177-dc908b31fd6b"
        },
        "item": {
          "id": "a7717c31-ce05-41e8-b58b-4963334f6574",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "e01de96c-eeef-426c-8192-086c0da8f6fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 235
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:79)"
            }
          }
        ]
      },
      {
        "id": "13a3c30a-a9d9-4c31-bb23-1609282c9401",
        "cursor": {
          "ref": "8f3c5318-cedf-432e-91db-c3b60032d89d",
          "length": 250,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "d5ff56e0-bbf2-4198-bbe2-a85b76b9b3be"
        },
        "item": {
          "id": "13a3c30a-a9d9-4c31-bb23-1609282c9401",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "c8843476-eeb1-4b2a-a32a-c88867b3c35e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 270
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:80)"
            }
          }
        ]
      },
      {
        "id": "2bd1f292-54cb-4e6b-beb1-85a6ddfa682d",
        "cursor": {
          "ref": "d01e813b-a19c-4b41-a997-39908f9d2dcb",
          "length": 250,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "902c5cf0-b49b-41e8-8f3a-9e40f7b25d53"
        },
        "item": {
          "id": "2bd1f292-54cb-4e6b-beb1-85a6ddfa682d",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "f410e9ac-6514-4617-8cdc-cba07ed0864a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 235
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:81)"
            }
          }
        ]
      },
      {
        "id": "3ce55581-79bb-4472-a027-26788b729d10",
        "cursor": {
          "ref": "1c9c2fb4-fa1b-4a84-9b72-1b12a93a3b50",
          "length": 250,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "2995239e-eaa2-4e09-be62-58aed8ed3e78"
        },
        "item": {
          "id": "3ce55581-79bb-4472-a027-26788b729d10",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "fdbd5ade-51ee-40f9-a7b4-78337b397f6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:82)"
            }
          }
        ]
      },
      {
        "id": "98652c53-e030-4af6-8aba-cfde3befa4f4",
        "cursor": {
          "ref": "2cf5402d-bbcd-4775-8b71-071b864e360c",
          "length": 250,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "2c619fed-5f4b-442f-99b3-c8a8542a0d70"
        },
        "item": {
          "id": "98652c53-e030-4af6-8aba-cfde3befa4f4",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "8a79f819-a320-4619-bc53-caed0ec36728",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:83)"
            }
          }
        ]
      },
      {
        "id": "0ce3dbf8-f6e7-40b1-820c-4acfb795f1ed",
        "cursor": {
          "ref": "c81cffa8-267d-4fcf-a03a-59eb3e150f01",
          "length": 250,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "b9229084-ce61-49a9-8b50-33647c7e8c43"
        },
        "item": {
          "id": "0ce3dbf8-f6e7-40b1-820c-4acfb795f1ed",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "fb6b6bae-2e16-46f3-b07d-241b8b52a63f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:84)"
            }
          }
        ]
      },
      {
        "id": "fbc53cf9-85ae-4bb8-912e-33cb518c56d0",
        "cursor": {
          "ref": "78745e72-9bf9-4904-abbf-aaf5ac3e66fb",
          "length": 250,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "231e5004-3213-40eb-85da-0f2f62532f2a"
        },
        "item": {
          "id": "fbc53cf9-85ae-4bb8-912e-33cb518c56d0",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "813afc3a-1bdc-4986-8c48-55fe10942662",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:85)"
            }
          }
        ]
      },
      {
        "id": "cb5cb54b-3072-4104-83f1-4a78a4f65280",
        "cursor": {
          "ref": "1e99de7b-dfa3-4a72-bb0c-baf4a4f72ee7",
          "length": 250,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "7c5dee8d-78fe-4f75-9a9f-255c45da15b6"
        },
        "item": {
          "id": "cb5cb54b-3072-4104-83f1-4a78a4f65280",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "69a59322-c75d-4d6a-91fe-4cb211b354fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:86)"
            }
          }
        ]
      },
      {
        "id": "c13d9920-880d-42c6-a4eb-5a5fa56d4b69",
        "cursor": {
          "ref": "ef925c2a-b078-4936-9b59-d421b275f0ad",
          "length": 250,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "d5deada1-5953-4f58-b37d-3443adbcf132"
        },
        "item": {
          "id": "c13d9920-880d-42c6-a4eb-5a5fa56d4b69",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "1326fbc9-4f68-4b62-a09a-fe4a6964245c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:87)"
            }
          }
        ]
      },
      {
        "id": "c00a176e-4008-4303-bdb9-882930688490",
        "cursor": {
          "ref": "5e1910f8-6d39-4562-9ab8-40eae8ed8a73",
          "length": 250,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "e557b729-295b-4469-8e65-ca0c0926c307"
        },
        "item": {
          "id": "c00a176e-4008-4303-bdb9-882930688490",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "8462af58-b3d6-48f1-85b0-1facb2126fb9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:88)"
            }
          }
        ]
      },
      {
        "id": "2a20166b-1572-4d6e-9db6-e74276a9e74c",
        "cursor": {
          "ref": "a083deb4-078c-4e18-8e90-ebaafd803aa1",
          "length": 250,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "7ef506ab-da12-4e12-8c35-aafee62f1993"
        },
        "item": {
          "id": "2a20166b-1572-4d6e-9db6-e74276a9e74c",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "f2efd805-4154-484e-a4fc-e7bb9a66efb0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 143
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:89)"
            }
          }
        ]
      },
      {
        "id": "978e04a5-0c61-4edf-ba76-dc02d9b51b09",
        "cursor": {
          "ref": "28521f81-70d4-4203-b085-974c131bcf73",
          "length": 250,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "02e21c4b-131b-49ec-8b88-d678e3466406"
        },
        "item": {
          "id": "978e04a5-0c61-4edf-ba76-dc02d9b51b09",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "da996a71-dde8-42cf-86b1-edf1f5ffa088",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:90)"
            }
          }
        ]
      },
      {
        "id": "df47e4ce-a993-41d9-aec2-62062a64c25e",
        "cursor": {
          "ref": "395c902d-7017-41ca-ab7f-e61fd4bc5ec3",
          "length": 250,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "04af96a6-2954-4aa0-a692-854960140389"
        },
        "item": {
          "id": "df47e4ce-a993-41d9-aec2-62062a64c25e",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "99129657-6838-452a-a7b5-acabd44c70b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:91)"
            }
          }
        ]
      },
      {
        "id": "610ad4a9-a43f-4847-96f7-2e17f4bb4b31",
        "cursor": {
          "ref": "b6460297-30ae-4229-9818-e8d9ef81ba28",
          "length": 250,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "34174416-20d8-472b-a801-93dca866e19c"
        },
        "item": {
          "id": "610ad4a9-a43f-4847-96f7-2e17f4bb4b31",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "74ecc916-3acf-4d13-a34d-821f69125362",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:92)"
            }
          }
        ]
      },
      {
        "id": "d3a94fc6-6ef8-4a66-aefe-3ec14c872e7e",
        "cursor": {
          "ref": "75bfd68a-84df-4acb-8d23-50127430a1af",
          "length": 250,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "f01e7639-aae7-4a22-b774-a6bfce35dad8"
        },
        "item": {
          "id": "d3a94fc6-6ef8-4a66-aefe-3ec14c872e7e",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "33cd9232-e762-46f9-bd68-5b939faa9880",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:93)"
            }
          }
        ]
      },
      {
        "id": "fae26988-5f05-40f1-a974-a5958ab933f0",
        "cursor": {
          "ref": "3b46ef62-aa69-4eb6-acf4-1589018af0ad",
          "length": 250,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "807a640c-1459-47a4-8977-b6478b44b6af"
        },
        "item": {
          "id": "fae26988-5f05-40f1-a974-a5958ab933f0",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "64c26f13-cf5a-4e95-ab13-930980add9cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 530
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:94)"
            }
          }
        ]
      },
      {
        "id": "f6567ffa-fe03-41e3-9e40-e1b1e3e57dc2",
        "cursor": {
          "ref": "dad6c0c9-ab35-470d-8510-7b0b8a53bb7c",
          "length": 250,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "9c703f70-8ca6-4f2f-b9c8-646300364925"
        },
        "item": {
          "id": "f6567ffa-fe03-41e3-9e40-e1b1e3e57dc2",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "ce99e388-7c60-4930-9976-2f106bf676db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 530
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:95)"
            }
          }
        ]
      },
      {
        "id": "7d90d2d2-455a-41c2-9b37-80cce8056d9e",
        "cursor": {
          "ref": "7fd6a303-f8f6-4b36-a58f-cd8915dc8581",
          "length": 250,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "0df32079-0250-4f25-91c5-b155dc81e1d3"
        },
        "item": {
          "id": "7d90d2d2-455a-41c2-9b37-80cce8056d9e",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "f4b6a5d6-e861-4d18-b5b9-4e20da9044a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 530
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:96)"
            }
          }
        ]
      },
      {
        "id": "3e92c65f-1688-4057-85b7-67ff4b14b21a",
        "cursor": {
          "ref": "2a6fd394-7a7c-4cca-9b13-c25f1382ab50",
          "length": 250,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "de5bd9bc-598c-4ccd-97ca-ea97b68ce8af"
        },
        "item": {
          "id": "3e92c65f-1688-4057-85b7-67ff4b14b21a",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "b0974bea-418c-4eb5-811d-307fc23963d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 530
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:97)"
            }
          }
        ]
      },
      {
        "id": "b0f5cb33-55e1-4d10-8029-4b7828d68a42",
        "cursor": {
          "ref": "138bea51-e170-4779-8a41-4e0a0b63f52d",
          "length": 250,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "0fd4f23f-2a14-4a3a-9758-e0a5ece2fb2c"
        },
        "item": {
          "id": "b0f5cb33-55e1-4d10-8029-4b7828d68a42",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "d6ee1807-eabb-409e-8b35-bb1dedb41198",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 530
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:98)"
            }
          }
        ]
      },
      {
        "id": "8e18d5da-cdd0-40eb-86ba-569376ea6961",
        "cursor": {
          "ref": "61acaa46-f9c4-4f6f-8560-a2b6142d69f1",
          "length": 250,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "6507b354-35a6-4e50-8194-59bd7cb16f10"
        },
        "item": {
          "id": "8e18d5da-cdd0-40eb-86ba-569376ea6961",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "61fceba0-01c3-4212-91c4-49d9ef11b425",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 530
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:99)"
            }
          }
        ]
      },
      {
        "id": "f8d7e258-9098-465c-a147-10d2c8201b1b",
        "cursor": {
          "ref": "7cdc4549-d0ba-4fd7-b4f8-eba17844eb16",
          "length": 250,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "196f0680-6452-4840-b495-dabf9514a204"
        },
        "item": {
          "id": "f8d7e258-9098-465c-a147-10d2c8201b1b",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "797329d6-81f8-425c-b5b0-8271b798ec1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 530
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:100)"
            }
          }
        ]
      },
      {
        "id": "ada79106-c306-40c7-b40f-ad577e48a496",
        "cursor": {
          "ref": "969c773a-1ecf-48c1-a668-63c2bad59ad6",
          "length": 250,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "b8171505-d7eb-40ab-9915-f6bef1042c3c"
        },
        "item": {
          "id": "ada79106-c306-40c7-b40f-ad577e48a496",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "a7a2832d-9ce6-4174-8280-4fd57b32becf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 36,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39ea393a-51a1-4972-b58d-f0e1b549f5d5",
        "cursor": {
          "ref": "84796367-b11e-4cfc-9278-4d968e426087",
          "length": 250,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "870eee5a-9d3d-429f-a6fa-acb78614afc5"
        },
        "item": {
          "id": "39ea393a-51a1-4972-b58d-f0e1b549f5d5",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "eeddc1bd-fdb4-4234-96ba-4b8d0836b667",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 143
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "f0c27ec6-d796-4ae0-b3ac-41a707e394e3",
        "cursor": {
          "ref": "fe8b98e2-4466-43f0-967a-5574f005cbcb",
          "length": 250,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "f0ad4c40-bbac-4c50-97b1-87a782559e96"
        },
        "item": {
          "id": "f0c27ec6-d796-4ae0-b3ac-41a707e394e3",
          "name": "credentials_issue"
        },
        "response": {
          "id": "c7b190c7-4b37-4961-9a18-3e46fee73885",
          "status": "Created",
          "code": 201,
          "responseTime": 373,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed1f7df7-b2fb-4a2f-ad2a-506ec96894f6",
        "cursor": {
          "ref": "bb053466-52d5-43d8-9cc0-ee4319314ac7",
          "length": 250,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "756a3bd7-7085-427c-bcf6-4ad74628e0aa"
        },
        "item": {
          "id": "ed1f7df7-b2fb-4a2f-ad2a-506ec96894f6",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "1be52938-20f6-4068-9340-616d72afdee3",
          "status": "Created",
          "code": 201,
          "responseTime": 319,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d024fcf-9dc2-4d20-8b3b-5913459f524b",
        "cursor": {
          "ref": "86443e7a-4974-4a70-b23a-94e99d477a1a",
          "length": 250,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "05901cf0-1d1c-42a3-86eb-66eb06bea83d"
        },
        "item": {
          "id": "9d024fcf-9dc2-4d20-8b3b-5913459f524b",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "5d2c32b6-4c1e-437b-b464-c2559b0f0aa4",
          "status": "Created",
          "code": 201,
          "responseTime": 316,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "fabaf2d3-037d-4c13-9e38-3519c43a7190",
        "cursor": {
          "ref": "57be0fab-da78-4dca-b1cc-e25616accdc5",
          "length": 250,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "5a55a4ef-d5d2-4d66-9dd8-32f94c8b6b32"
        },
        "item": {
          "id": "fabaf2d3-037d-4c13-9e38-3519c43a7190",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "d3d2518f-b63f-4b9e-bb99-fd0b7a65b65c",
          "status": "Created",
          "code": 201,
          "responseTime": 350,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "f468c318-379b-4013-9c7a-f9027f7f19a6",
        "cursor": {
          "ref": "e778655a-18fc-4582-ad5d-a3facbb8a8c7",
          "length": 250,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "c3efb4cd-7c0e-4573-b1aa-0b18a8d516ec"
        },
        "item": {
          "id": "f468c318-379b-4013-9c7a-f9027f7f19a6",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "e9d8d74c-f098-45d8-a677-19687489d5c1",
          "status": "Created",
          "code": 201,
          "responseTime": 330,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-09-16T00:46:46.977Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-09-16T00:46:46.977Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "9a2d5448-0616-4f6b-a540-16905f1f7437",
        "cursor": {
          "ref": "2fc26277-5138-4cca-94a1-64650eb5f655",
          "length": 250,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "c7197c8e-9147-43e1-9077-366c4b16ca6d"
        },
        "item": {
          "id": "9a2d5448-0616-4f6b-a540-16905f1f7437",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "6e10602c-c2c6-4688-8947-3f45d0487599",
          "status": "Created",
          "code": 201,
          "responseTime": 399,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa18232f-f8a1-4eeb-b022-afc806b39dd9",
        "cursor": {
          "ref": "40e1c858-eb63-4ab3-9490-f0b0d56f2509",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "4f905f4d-12b6-421e-a8cc-4f279dc6e120"
        },
        "item": {
          "id": "aa18232f-f8a1-4eeb-b022-afc806b39dd9",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "8d3f5ba1-e4fd-4079-b8d9-840b645e8693",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:109)"
            }
          }
        ]
      },
      {
        "id": "9d8fa275-e1f8-4009-9fdb-6568ec97efd6",
        "cursor": {
          "ref": "a32d31ca-2a4d-4292-a2ca-8e2f8ca0768c",
          "length": 250,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "7adcfa15-0790-4001-9605-62f98a51f1c6"
        },
        "item": {
          "id": "9d8fa275-e1f8-4009-9fdb-6568ec97efd6",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "9c9ee478-99ea-4fc1-81c0-c2c677c63db7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "9f96ac90-eba3-40d0-9bc5-1727c2f851aa",
        "cursor": {
          "ref": "67153c92-485f-449d-a225-bf4af3abbf31",
          "length": 250,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "63281d96-57d5-4245-a3c5-df350649a17a"
        },
        "item": {
          "id": "9f96ac90-eba3-40d0-9bc5-1727c2f851aa",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "677063bb-db21-435a-b077-03cc57327db6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "ee234ad4-79fa-4549-bf80-ebf86c83c695",
        "cursor": {
          "ref": "6013f8d2-91fd-44b3-b2d1-2ba1e678e660",
          "length": 250,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "5c9c311a-6d25-4dd0-a4b4-35752b795777"
        },
        "item": {
          "id": "ee234ad4-79fa-4549-bf80-ebf86c83c695",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "092ca08c-daff-46b7-886f-7e4a6d1ede7d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "abff6368-a31c-4b4d-995a-28a60967eab8",
        "cursor": {
          "ref": "d0f5e9d3-39ff-44f9-a4eb-66ee558b322b",
          "length": 250,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "1992fbfc-976f-4325-b546-7da3da774093"
        },
        "item": {
          "id": "abff6368-a31c-4b4d-995a-28a60967eab8",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "e2147bad-9836-4f3b-b0a3-6f650f0cc1cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "8157ede4-f992-4261-aaba-e9f309f6c294",
        "cursor": {
          "ref": "7f3bc620-c0b8-427e-bffa-9195a1592f10",
          "length": 250,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "0692bf28-0ef9-4417-acfe-e957031642a8"
        },
        "item": {
          "id": "8157ede4-f992-4261-aaba-e9f309f6c294",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "9147384d-199f-4f5e-bada-830144f8baa0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "2fe3a3aa-9d97-4205-b295-34643f825a51",
        "cursor": {
          "ref": "aec10941-a4bd-4756-9128-d4a7e5640b1c",
          "length": 250,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "6316bc50-9f74-4603-afaa-9509470683b9"
        },
        "item": {
          "id": "2fe3a3aa-9d97-4205-b295-34643f825a51",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "7ee13700-7390-489f-af6c-0c9d533f3432",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 140
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "f56ba793-2ca7-4fc3-8498-acbda5fd50ec",
        "cursor": {
          "ref": "8c6001b0-0c4c-46fe-b4c7-45e148c7664c",
          "length": 250,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "c4a41c60-012f-4202-90eb-66dd4e104d1a"
        },
        "item": {
          "id": "f56ba793-2ca7-4fc3-8498-acbda5fd50ec",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "cd281f7f-21f7-420e-9f2a-5467ef7977ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 220
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "2c609102-4973-463d-b59b-1c1464758daf",
        "cursor": {
          "ref": "f34f364a-8596-4253-9d60-440e9d5c1add",
          "length": 250,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "668b7b9f-2ab5-4559-9103-954cd173d3f0"
        },
        "item": {
          "id": "2c609102-4973-463d-b59b-1c1464758daf",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "c51f76d8-01cc-4ed1-ab68-f20c9e45c7bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 220
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "e2d06dcd-f107-4d15-8144-f3dc2554563a",
        "cursor": {
          "ref": "5a1f073a-f8b6-47ad-bbad-697e74f70760",
          "length": 250,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "4548c274-a037-48be-bd6e-efc1bbc91f29"
        },
        "item": {
          "id": "e2d06dcd-f107-4d15-8144-f3dc2554563a",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "5785e4d5-39f0-4fa8-9edd-04efb6d22a20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 220
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "c7c03789-6a7b-4a65-a5ea-fa3c0b0e23fc",
        "cursor": {
          "ref": "fff2136f-e9af-402e-abc2-e9ffeadd8e46",
          "length": 250,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "766ef706-2800-485b-9f39-9a7bbfdd3ebd"
        },
        "item": {
          "id": "c7c03789-6a7b-4a65-a5ea-fa3c0b0e23fc",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "db03e347-ce0a-4038-baf5-c57f0526c3af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 118
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "12d88c5c-ad79-45dd-97af-d9816265f761",
        "cursor": {
          "ref": "776b9d36-ec04-47d4-a67c-da9c563cda56",
          "length": 250,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "c16a6abc-b3d3-42f1-bd58-e1708ead7c1f"
        },
        "item": {
          "id": "12d88c5c-ad79-45dd-97af-d9816265f761",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "bf3ea97e-e1c7-4f8f-926d-6f87c8936869",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 220
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "c248c9b3-798a-47cc-b524-b4051b678f34",
        "cursor": {
          "ref": "6daae707-a6e5-4e80-a999-4267c42fbd7b",
          "length": 250,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "a21fa619-6311-4399-a85d-a74a1ea24ae3"
        },
        "item": {
          "id": "c248c9b3-798a-47cc-b524-b4051b678f34",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "540a77f2-24ad-46a5-bb33-8ba5dc6c0d5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 188
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "95dddca8-a586-4bdc-af22-5abfdb3e4a49",
        "cursor": {
          "ref": "6ba3b735-e99c-4a4d-9bbb-a9553639a59a",
          "length": 250,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "6a455460-f76c-4a82-b231-42c62a5396f3"
        },
        "item": {
          "id": "95dddca8-a586-4bdc-af22-5abfdb3e4a49",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "5b1640e6-4d0e-4ea6-83cf-3e1f0dd049de",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 75,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "34d50a03-0274-47e6-ba83-e0e92e062171",
        "cursor": {
          "ref": "4ee2d254-4a38-4275-bb99-d55c5791ea6e",
          "length": 250,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "b0fe11ea-76fb-45a2-a56b-dcb660fbd457"
        },
        "item": {
          "id": "34d50a03-0274-47e6-ba83-e0e92e062171",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "f7c96c57-3411-4519-ac18-74210ebbbdbf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 149
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "de39fcc0-6a34-4e75-929b-31d3152a63f9",
        "cursor": {
          "ref": "378123e6-f3b7-44d0-9ab2-5c365cc8694e",
          "length": 250,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "117c67a7-8aec-4acf-96ae-e88a21f14e19"
        },
        "item": {
          "id": "de39fcc0-6a34-4e75-929b-31d3152a63f9",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "bbd60fda-b1c6-41d0-a997-b60cd0b0e8bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 149
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "56969371-4ca6-4b5c-a6c4-7a7ae1d35238",
        "cursor": {
          "ref": "2241264f-520a-4ae6-bb2e-886d041664ac",
          "length": 250,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "982bdecb-eed3-4995-ab4c-4edc067a97cb"
        },
        "item": {
          "id": "56969371-4ca6-4b5c-a6c4-7a7ae1d35238",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "6fed3078-cc61-47af-b7cf-a1086d95336f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 149
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "b979b9b6-4bfb-44cc-8b09-7ac72b9d22d5",
        "cursor": {
          "ref": "cab9e0a4-6905-4243-8221-8fc26bdb0296",
          "length": 250,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "f82d122e-9fd1-4603-84b6-f20a5d900be1"
        },
        "item": {
          "id": "b979b9b6-4bfb-44cc-8b09-7ac72b9d22d5",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "6bf4db28-f634-4352-a39b-ccf5a98529ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 149
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "f1973d59-84d7-469c-8da2-584f96d4e5c0",
        "cursor": {
          "ref": "81efc88d-a41a-48dc-9aa6-16ca00668711",
          "length": 250,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "34dcd3de-e7b8-4c47-8e83-8a8257c91477"
        },
        "item": {
          "id": "f1973d59-84d7-469c-8da2-584f96d4e5c0",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "fa0ac75d-e922-4081-94e0-e22d6a259dbd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "e79b6bb5-a0b3-4041-9469-262bcbb6da69",
        "cursor": {
          "ref": "4293cde1-bf2c-4798-a026-5568c64f7ac8",
          "length": 250,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "7f3e22af-e028-40fd-ab40-8a4665f24333"
        },
        "item": {
          "id": "e79b6bb5-a0b3-4041-9469-262bcbb6da69",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "c2cbde5b-31ec-419b-b71c-0b3cb8bf88e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "5c8fdffb-05b2-4439-9243-7aea82ff1c03",
        "cursor": {
          "ref": "364bcb8e-a84b-48c2-9106-0a42fb9776ec",
          "length": 250,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "73a94556-a12a-48a8-9ed1-8fa5326c1f10"
        },
        "item": {
          "id": "5c8fdffb-05b2-4439-9243-7aea82ff1c03",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "4045c0fd-1892-49d3-a5c6-3a8c6827051c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "451f5121-cb77-4d43-8468-78f04dff8b21",
        "cursor": {
          "ref": "03293af2-22cf-49d5-9ec4-b0b89fc5b2d7",
          "length": 250,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "b21dd989-c0b1-4377-8416-55b7ff63c51e"
        },
        "item": {
          "id": "451f5121-cb77-4d43-8468-78f04dff8b21",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "ea9bc69c-721c-4872-935a-ee0fc10bb506",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "ab4950a6-e1e7-45f4-a2f3-4a7aa2448726",
        "cursor": {
          "ref": "c8d73a37-d5bf-47c4-b03a-b3c21e39675d",
          "length": 250,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "12f510ee-d74d-47c5-bd98-20b63193d4a3"
        },
        "item": {
          "id": "ab4950a6-e1e7-45f4-a2f3-4a7aa2448726",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "c81d99ac-78b2-48de-9c88-c349a71b4865",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "6b28b977-4b3b-477d-9253-c2e12c62a102",
        "cursor": {
          "ref": "be02fdaa-3e4d-4c25-b84c-4db8cf561f3d",
          "length": 250,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "e44b74c6-0c59-4eab-86e0-9f6cf4d0c6e6"
        },
        "item": {
          "id": "6b28b977-4b3b-477d-9253-c2e12c62a102",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "af7b0628-81ec-484b-9708-78a64b67847b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "df4f1b4e-869a-44d8-a4b6-0ba3acf67f8a",
        "cursor": {
          "ref": "ca8b6ff8-812e-47ef-8c79-780b4bcfe2b2",
          "length": 250,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "c4b4fb7d-6768-4b3d-9322-0d94e0b22abf"
        },
        "item": {
          "id": "df4f1b4e-869a-44d8-a4b6-0ba3acf67f8a",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "d6c634ba-81af-4595-a7b4-808124299098",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "c30ea636-2eca-45e3-bff7-d84abd8b23f0",
        "cursor": {
          "ref": "1ee11e04-de56-4172-b2a5-77baa1c29881",
          "length": 250,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "27a07cb7-ff70-458b-8d63-b5f703e1b8ec"
        },
        "item": {
          "id": "c30ea636-2eca-45e3-bff7-d84abd8b23f0",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "85d2c3e5-adc7-4a36-a4ca-9b3a70113a1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "29933c1c-2b73-48c5-88ec-33fdedcb42e4",
        "cursor": {
          "ref": "c378a522-475a-4fe5-9c1c-2b4fe1c626fb",
          "length": 250,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "10529fbf-ca73-4a7a-9162-54ec9783e9bc"
        },
        "item": {
          "id": "29933c1c-2b73-48c5-88ec-33fdedcb42e4",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "ad3be41c-7042-4b0a-b45d-c2467680738b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "b2c47f69-7f99-425d-98ae-50052418ae8b",
        "cursor": {
          "ref": "29e63833-87a5-4463-b2d0-5445b5692610",
          "length": 250,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "be516388-1db4-4765-9742-b7f791959ad6"
        },
        "item": {
          "id": "b2c47f69-7f99-425d-98ae-50052418ae8b",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "b61a922d-d7f2-4487-a8d2-c16075feb4fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "3dd4ea5d-ab90-43f8-8976-c53ddd43295b",
        "cursor": {
          "ref": "44e39081-7f7d-41e0-8b9e-9a3cf8eda5c0",
          "length": 250,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "70221c64-debf-4bc6-9b64-e95926e27066"
        },
        "item": {
          "id": "3dd4ea5d-ab90-43f8-8976-c53ddd43295b",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "259c1501-66de-4c0e-bad6-aab1ca829b7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "8cb63ff4-b5d2-48d1-ab46-068096470a27",
        "cursor": {
          "ref": "bf382931-c331-4ead-95bf-bb5f88e28128",
          "length": 250,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "4d0bc45f-c4bd-44a9-be38-6ca63652cfee"
        },
        "item": {
          "id": "8cb63ff4-b5d2-48d1-ab46-068096470a27",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "7b297568-c45b-430b-aedd-e24f0c61154d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "c2c32a4e-695f-4ac0-8178-60db32557bdf",
        "cursor": {
          "ref": "bd0c711d-325a-4348-9d2b-97565aec4677",
          "length": 250,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "6d5b014b-6486-4dcc-9a02-bb20c914a29e"
        },
        "item": {
          "id": "c2c32a4e-695f-4ac0-8178-60db32557bdf",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "16c9e05e-a023-446a-8e43-6d4ff3c72496",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "defab66b-aa32-4632-b6d5-bac9a9cb6b28",
        "cursor": {
          "ref": "e1f6319e-15f2-40c5-ace4-af63ddbd20ca",
          "length": 250,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "2ad8db21-4311-4b8d-892b-f10a8d06aa35"
        },
        "item": {
          "id": "defab66b-aa32-4632-b6d5-bac9a9cb6b28",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "f5339d20-f0e9-4cd7-95dc-2f0b10a09309",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "432d3ed4-37e6-4c97-802e-b20d80d66152",
        "cursor": {
          "ref": "c1a62a6b-c6d3-4a13-a8b9-ee478c5698db",
          "length": 250,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "c56a9d93-1e10-4a53-82ce-777304d5fd1b"
        },
        "item": {
          "id": "432d3ed4-37e6-4c97-802e-b20d80d66152",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "0647a9e2-369e-475a-a982-993b8a5425e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "aa26f3cb-aeda-452e-b5ce-55a7a1a024a0",
        "cursor": {
          "ref": "6ec5951f-1cff-46d4-8cd5-30f171b81516",
          "length": 250,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "adc8d21b-3d87-4e62-b1e8-c011e51ba86b"
        },
        "item": {
          "id": "aa26f3cb-aeda-452e-b5ce-55a7a1a024a0",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "775ab482-0d44-46b5-93b1-771884fccd68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "597afbf8-8be1-4463-811b-6fcad5dd38c6",
        "cursor": {
          "ref": "a027f58c-31a0-405b-b870-e966fd0db556",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "4df4486c-56c1-4af7-8a64-2ced70f2485b"
        },
        "item": {
          "id": "597afbf8-8be1-4463-811b-6fcad5dd38c6",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "c9c3c436-5565-4b3e-b2d7-95ec7fafce3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "7daf005c-8ca4-4349-9323-badbe4b73b86",
        "cursor": {
          "ref": "827e3cf0-63bc-493c-992e-c07fc70f633c",
          "length": 250,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "195b1a38-8c90-403d-9268-d53fb89d0943"
        },
        "item": {
          "id": "7daf005c-8ca4-4349-9323-badbe4b73b86",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "5faa2c88-d1a4-470e-99dd-d66fcd92128f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:144)"
            }
          }
        ]
      },
      {
        "id": "a8807ad7-e352-4552-9921-bc2797444d6a",
        "cursor": {
          "ref": "14f26fce-c36c-4044-a4d0-5bc1e629b3aa",
          "length": 250,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "479f90ce-a31e-4ab1-8020-455960fe1298"
        },
        "item": {
          "id": "a8807ad7-e352-4552-9921-bc2797444d6a",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "8e1269a6-89ce-4c01-be8c-e3cb1fdc4010",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:145)"
            }
          }
        ]
      },
      {
        "id": "9fe15b34-4e3a-41c5-9da5-50115cae5c1d",
        "cursor": {
          "ref": "377fef4a-a207-4be4-9d5c-5215e1200d45",
          "length": 250,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "03521b7f-6aed-4abe-a7de-cc9e64e08c84"
        },
        "item": {
          "id": "9fe15b34-4e3a-41c5-9da5-50115cae5c1d",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "185359b7-e786-42b4-bfc9-2984df7b567e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 34,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "801fa8c1-522b-40fa-943a-98fccfd6be7c",
        "cursor": {
          "ref": "d5f1b486-f40b-4dd4-9bad-5d91a707e3d0",
          "length": 250,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "ceb95cfd-b05a-401c-bfae-86bbc9585697"
        },
        "item": {
          "id": "801fa8c1-522b-40fa-943a-98fccfd6be7c",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "c8666713-3d1e-4265-8c7d-3be0b28997c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:147)"
            }
          }
        ]
      },
      {
        "id": "e64d0871-1d6b-4536-97dc-baa5104df7db",
        "cursor": {
          "ref": "9b94de94-9af9-4dff-8b33-efb1e4aec2d8",
          "length": 250,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "d85386d7-f046-41c9-b64c-ef619bc96d90"
        },
        "item": {
          "id": "e64d0871-1d6b-4536-97dc-baa5104df7db",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "65d7e17f-5f70-48e9-b7b3-71f373e5ca69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:148)"
            }
          }
        ]
      },
      {
        "id": "9343a1f7-8d7f-462e-9d27-5c469bd4979d",
        "cursor": {
          "ref": "aa495fa6-626e-4d9b-bc01-4ffc4b6e9065",
          "length": 250,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "cfc470e8-3786-4fad-aa42-95eed1990ee4"
        },
        "item": {
          "id": "9343a1f7-8d7f-462e-9d27-5c469bd4979d",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "f6865546-ebc1-4b12-adcf-fbcb8a9cd3c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:149)"
            }
          }
        ]
      },
      {
        "id": "80f87915-8176-4606-93ca-b6d7e470e536",
        "cursor": {
          "ref": "ec2dc911-1272-4b0a-91f6-aea524eed7dc",
          "length": 250,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "cef69666-1cd1-4b9d-8cc1-b52cadf40db6"
        },
        "item": {
          "id": "80f87915-8176-4606-93ca-b6d7e470e536",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "89d51d66-28e0-4a17-8430-e34a8bc4bd98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:150)"
            }
          }
        ]
      },
      {
        "id": "193d36f1-67d1-496b-a075-f7ff8e9f07a1",
        "cursor": {
          "ref": "c2f8c01b-0aca-4c12-94c2-ac6f68a485a1",
          "length": 250,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "bbda0f2f-9779-4aa2-927a-ce5f0cb91f91"
        },
        "item": {
          "id": "193d36f1-67d1-496b-a075-f7ff8e9f07a1",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "4981bda6-07c8-4e01-b40f-40cf51852143",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:151)"
            }
          }
        ]
      },
      {
        "id": "7735c745-411f-4a7c-9911-0b62bbb1ef76",
        "cursor": {
          "ref": "1dba4c75-edc7-4ee1-8265-71919a752524",
          "length": 250,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "f32cbe3e-9527-4ed7-8b4f-f3b2934d666a"
        },
        "item": {
          "id": "7735c745-411f-4a7c-9911-0b62bbb1ef76",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "f17f771b-4bba-409d-80d9-68e543e4f138",
          "status": "OK",
          "code": 200,
          "responseTime": 115,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "6cdee3db-cddc-47e5-8905-5eea9e2886b8",
        "cursor": {
          "ref": "df759b46-1528-42e5-8523-c40474fa53d7",
          "length": 250,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "7a4e4474-517f-4a4b-9343-44f5c04395c3"
        },
        "item": {
          "id": "6cdee3db-cddc-47e5-8905-5eea9e2886b8",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "3fcfaa29-fb1c-4c7d-8bae-82ba88e6b17d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 234
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:153)"
            }
          }
        ]
      },
      {
        "id": "6d1274c4-fdc5-4d39-ab15-4c171a762a9d",
        "cursor": {
          "ref": "b428b9aa-8d84-47c3-9930-64e73e907bf9",
          "length": 250,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "ddaf9938-7649-4699-bcbe-c9e6e9c92444"
        },
        "item": {
          "id": "6d1274c4-fdc5-4d39-ab15-4c171a762a9d",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "fa96e5bf-4274-4be4-8c2b-4620b09b344a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:154)"
            }
          }
        ]
      },
      {
        "id": "e2e8bdcc-3dfb-4d9e-bdff-9d664c1915f3",
        "cursor": {
          "ref": "78aeb8a2-0c3d-4e46-900b-7b1f510f57dd",
          "length": 250,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "93a5bd9c-5e42-44be-945d-93a9d9944cd1"
        },
        "item": {
          "id": "e2e8bdcc-3dfb-4d9e-bdff-9d664c1915f3",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "9193a12f-d1fc-44ac-b863-3eb97d844835",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:155)"
            }
          }
        ]
      },
      {
        "id": "bb811d41-0a5b-4a8e-9bb7-9527be5e65b8",
        "cursor": {
          "ref": "25e27237-ed27-4006-b4f3-6825bf894020",
          "length": 250,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "60422c24-91e3-4757-b01e-43928a8e9b4c"
        },
        "item": {
          "id": "bb811d41-0a5b-4a8e-9bb7-9527be5e65b8",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "32786223-9b42-4277-b52b-514a69776e66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:156)"
            }
          }
        ]
      },
      {
        "id": "88b2d569-730d-47fc-b9fa-0368d7bebea6",
        "cursor": {
          "ref": "ecfc897c-001a-426d-8968-654b2966c2fe",
          "length": 250,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "0c92af05-e928-4869-80ee-3687362cff17"
        },
        "item": {
          "id": "88b2d569-730d-47fc-b9fa-0368d7bebea6",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "16ae2f11-cba0-4b00-98e4-93d3fa976770",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 234
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:157)"
            }
          }
        ]
      },
      {
        "id": "baf2c8e1-ca5e-4ef6-9f1f-964460bf6b1c",
        "cursor": {
          "ref": "31d1f154-30f4-41e5-bb96-5cded3ca00e3",
          "length": 250,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "dedd2644-818b-4f37-896f-f92d666e31eb"
        },
        "item": {
          "id": "baf2c8e1-ca5e-4ef6-9f1f-964460bf6b1c",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "1f682258-8653-44d0-adca-935112e9aae8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:158)"
            }
          }
        ]
      },
      {
        "id": "62bd6cb1-2986-4ac2-896c-986bee6e32c5",
        "cursor": {
          "ref": "58c755d9-c5f2-4723-b6b8-5b1ae9ad2e75",
          "length": 250,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "d9413836-2b99-4b3e-a03a-6a1d63e59f44"
        },
        "item": {
          "id": "62bd6cb1-2986-4ac2-896c-986bee6e32c5",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "9e2a508f-0644-4589-973f-9bee3ad1430a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 181
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:159)"
            }
          }
        ]
      },
      {
        "id": "27b88776-ded8-48a5-971e-b9355e6d11a4",
        "cursor": {
          "ref": "5ae6220c-e155-4e16-b498-fedcbe305b60",
          "length": 250,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "c05be6b7-609a-4998-b59a-5f9d8f3068cd"
        },
        "item": {
          "id": "27b88776-ded8-48a5-971e-b9355e6d11a4",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "837111d1-2ca4-4a7c-b7b9-fa14576cb609",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 181
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:160)"
            }
          }
        ]
      },
      {
        "id": "eb8865f0-15c5-4942-aca9-00421623c4a7",
        "cursor": {
          "ref": "3fbc2d8a-53f7-4e8e-b27a-1cb2666aa353",
          "length": 250,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "c8019001-c69f-424d-8a82-e2ddd6b57ffd"
        },
        "item": {
          "id": "eb8865f0-15c5-4942-aca9-00421623c4a7",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "b0a15394-f595-4e7c-ad5e-77ccd31a306b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 181
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:161)"
            }
          }
        ]
      },
      {
        "id": "195cf060-a995-4e10-a9a7-3cab60bba506",
        "cursor": {
          "ref": "b032c344-407d-44b5-8999-74b360bf317c",
          "length": 250,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "1abd2fda-1fe6-4a65-a069-59fde18f88c7"
        },
        "item": {
          "id": "195cf060-a995-4e10-a9a7-3cab60bba506",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "21ace6b2-84f2-431e-bff4-4121dc67733e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 181
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:162)"
            }
          }
        ]
      },
      {
        "id": "fe061bd6-3b03-4759-818e-4b6c6da9a899",
        "cursor": {
          "ref": "f494670c-758e-4316-87df-5cb417cc4e51",
          "length": 250,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "75222011-7208-4a0a-ae24-877f9bee9502"
        },
        "item": {
          "id": "fe061bd6-3b03-4759-818e-4b6c6da9a899",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "abd6f1d3-8ba5-435d-bc19-cffd15d9c81b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:163)"
            }
          }
        ]
      },
      {
        "id": "15f02989-86da-44ad-8e09-d94ece9970da",
        "cursor": {
          "ref": "bf8b0178-bef1-41e7-bf94-168bbc788392",
          "length": 250,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "82f2ca3b-0f09-4028-a234-40886e8b2ca1"
        },
        "item": {
          "id": "15f02989-86da-44ad-8e09-d94ece9970da",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "14a969b8-e677-4c43-855e-76e6e41e2ef8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:164)"
            }
          }
        ]
      },
      {
        "id": "99948ddf-4d03-43e9-804d-a77dc0e4b3d3",
        "cursor": {
          "ref": "7c0473db-e02e-4da0-a05a-37e620e07cae",
          "length": 250,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "8b5528fa-eff7-4177-86f8-33d0821bb9a6"
        },
        "item": {
          "id": "99948ddf-4d03-43e9-804d-a77dc0e4b3d3",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "f73f92dc-66ef-4c58-a463-9ba8fb2befef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:165)"
            }
          }
        ]
      },
      {
        "id": "e4a8fb9d-7304-4e8b-a092-1d9ecebc1c2d",
        "cursor": {
          "ref": "9b6a4007-e27f-4d6f-8ba5-56451d7a4c6f",
          "length": 250,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "dd59d3c5-cfae-4f77-be28-830c3a9eeb31"
        },
        "item": {
          "id": "e4a8fb9d-7304-4e8b-a092-1d9ecebc1c2d",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "7f209f3e-34d0-4294-a82d-3855cdc3944e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:166)"
            }
          }
        ]
      },
      {
        "id": "0bcfa9ee-7893-4a98-933e-1f2e7e1d43e2",
        "cursor": {
          "ref": "0e6456df-f089-40ed-b0c2-23dafb0f5a01",
          "length": 250,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "190e9675-5385-45dc-a933-a0a5f5ec50b9"
        },
        "item": {
          "id": "0bcfa9ee-7893-4a98-933e-1f2e7e1d43e2",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "a4358d64-9fe1-4d12-919b-6aadd8bed57c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:167)"
            }
          }
        ]
      },
      {
        "id": "97c40895-63f3-40ff-8a2b-591825a057e2",
        "cursor": {
          "ref": "d4381cd3-4d32-4b62-8915-cb0e3ea776bd",
          "length": 250,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "e5caef67-3ea4-4eec-9dd4-335e9ceaee2f"
        },
        "item": {
          "id": "97c40895-63f3-40ff-8a2b-591825a057e2",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "f7e0d734-ca2d-4984-99a0-d99fd2b18d49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:168)"
            }
          }
        ]
      },
      {
        "id": "dee7e075-e364-4ddc-b936-cdb1e6544138",
        "cursor": {
          "ref": "19fd0dc3-cadd-4fb9-9514-bf0254d5d87d",
          "length": 250,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "afa78d1a-d5b1-4cfe-b2df-9982524175ef"
        },
        "item": {
          "id": "dee7e075-e364-4ddc-b936-cdb1e6544138",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "cd5d74e3-67f8-42af-8361-af0728da9a9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:169)"
            }
          }
        ]
      },
      {
        "id": "e3e1f5fa-1d72-4cfb-b1c6-6d7c85b4d932",
        "cursor": {
          "ref": "85f108bb-3988-4814-ae11-b15e079de134",
          "length": 250,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "06c82793-5af0-4733-82c0-b51ba754f189"
        },
        "item": {
          "id": "e3e1f5fa-1d72-4cfb-b1c6-6d7c85b4d932",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "68e9512f-c69e-4586-bd18-517bbcc03e0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:170)"
            }
          }
        ]
      },
      {
        "id": "90a7790d-ac70-46ac-869d-b98f86b2e04e",
        "cursor": {
          "ref": "6152f615-9249-4c32-b9eb-5720ccf9a7fa",
          "length": 250,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "4c54bb3a-4fbb-4963-a3ab-185a48a5ea5a"
        },
        "item": {
          "id": "90a7790d-ac70-46ac-869d-b98f86b2e04e",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "f0a3505b-f043-46ce-84d8-a927089d027c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:171)"
            }
          }
        ]
      },
      {
        "id": "2699e8a9-54c6-4053-b87d-c1e0924a44cd",
        "cursor": {
          "ref": "682b43cc-d15a-4c50-8bb2-102e579b58b6",
          "length": 250,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "9da0810b-1306-4a38-bcb7-b7f008adbda3"
        },
        "item": {
          "id": "2699e8a9-54c6-4053-b87d-c1e0924a44cd",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "45605046-95c2-4412-8b03-88f9ec179d75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:172)"
            }
          }
        ]
      },
      {
        "id": "9b3f99f9-b54e-4744-ab04-9a9d0fac6bf5",
        "cursor": {
          "ref": "58e475ce-1915-456a-a6a8-841a99a842ea",
          "length": 250,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "68d3ec42-7441-4356-8fee-450ec86f9a68"
        },
        "item": {
          "id": "9b3f99f9-b54e-4744-ab04-9a9d0fac6bf5",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "28915fe0-9320-479e-8388-dd9605dcdf57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:173)"
            }
          }
        ]
      },
      {
        "id": "e4c00612-d594-44a8-b59d-b607d87fdcd3",
        "cursor": {
          "ref": "87ef69e0-2934-468a-87be-9115d6ba94cd",
          "length": 250,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "e96e7d30-e0a7-4064-a10f-4624ebeb14ff"
        },
        "item": {
          "id": "e4c00612-d594-44a8-b59d-b607d87fdcd3",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "6e5364f6-b72f-4005-b287-f1e7f5a0c416",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 113
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:174)"
            }
          }
        ]
      },
      {
        "id": "b5e310aa-b45d-47e0-8be1-2fa2e1158dca",
        "cursor": {
          "ref": "315bc31c-4363-42b8-9425-fb27fbd9fb37",
          "length": 250,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "468f54bc-0df9-463b-b628-3cb22f0a96bb"
        },
        "item": {
          "id": "b5e310aa-b45d-47e0-8be1-2fa2e1158dca",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "4f2457df-d320-47c0-b619-7963b89ec275",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 113
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:175)"
            }
          }
        ]
      },
      {
        "id": "42ac0861-bf81-456d-97a0-30d721404c9c",
        "cursor": {
          "ref": "c904772b-ce5d-444c-9c52-dca1267058c2",
          "length": 250,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "24cb5098-dc98-4963-9fbd-655006551e33"
        },
        "item": {
          "id": "42ac0861-bf81-456d-97a0-30d721404c9c",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "8bcb2934-a901-403c-86b7-cd8d9777f0e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:176)"
            }
          }
        ]
      },
      {
        "id": "8f7d3f74-04e7-47ef-ad4c-b868d077b8cf",
        "cursor": {
          "ref": "2a9f12b3-18df-4604-94bb-508aa06d34ef",
          "length": 250,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "4669ab1a-f772-4b15-be3f-9637ab3272c9"
        },
        "item": {
          "id": "8f7d3f74-04e7-47ef-ad4c-b868d077b8cf",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "fe77089c-622d-4435-9700-8baaf75424bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:177)"
            }
          }
        ]
      },
      {
        "id": "136c7c12-7fc2-4bea-8146-754968d39048",
        "cursor": {
          "ref": "bcee8bce-bca0-4207-8cab-dbfabdb30b1c",
          "length": 250,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "a2fc5fc3-021e-4d72-81ae-f143c4f69460"
        },
        "item": {
          "id": "136c7c12-7fc2-4bea-8146-754968d39048",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "c0ced0c9-b57a-49b9-afdd-83b9fb340d50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:178)"
            }
          }
        ]
      },
      {
        "id": "505373c9-938a-411f-995d-26b656b3e5ce",
        "cursor": {
          "ref": "c0a84041-5a79-41b1-86a1-0242d4603823",
          "length": 250,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "6c3cd54d-03bb-4844-b76d-5595967e4bb1"
        },
        "item": {
          "id": "505373c9-938a-411f-995d-26b656b3e5ce",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "6fe27f8c-795b-4593-8360-dad4d857ca26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:179)"
            }
          }
        ]
      },
      {
        "id": "ffc528a4-a63a-4933-89e8-bec6a0170a17",
        "cursor": {
          "ref": "2087c0ac-8bbc-45fe-ba94-7bfb09a87122",
          "length": 250,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "62ea87b2-c402-4a33-a3d6-dd4aef42bff2"
        },
        "item": {
          "id": "ffc528a4-a63a-4933-89e8-bec6a0170a17",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "84e0c0fd-aab7-4640-8270-5368b0bbc4fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:180)"
            }
          }
        ]
      },
      {
        "id": "aec4488c-f31b-4a5b-b654-6d786c014dee",
        "cursor": {
          "ref": "9c83713a-3429-454d-955a-74b77144e26a",
          "length": 250,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "0b1fe4ab-f93a-492c-9fbf-466518f40269"
        },
        "item": {
          "id": "aec4488c-f31b-4a5b-b654-6d786c014dee",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "ad1ecb50-9c44-4248-bd5d-8c1c1bd83531",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 102
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:181)"
            }
          }
        ]
      },
      {
        "id": "6503787b-64eb-4915-a33a-9950b8af09ae",
        "cursor": {
          "ref": "06036fa2-11a6-4bf7-bcd6-bf747b53093d",
          "length": 250,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "9da1516d-2781-4521-a695-9eada001f30f"
        },
        "item": {
          "id": "6503787b-64eb-4915-a33a-9950b8af09ae",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "273940c2-6c25-41d1-804e-3b9b028d6e0a",
          "status": "OK",
          "code": 200,
          "responseTime": 121,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "5c13b9de-39aa-4d3d-8aa9-fb2ad0506ce7",
        "cursor": {
          "ref": "9526b12a-ab38-4caa-93ab-d92cd89f5cf9",
          "length": 250,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "b1dd3a4c-56d3-461d-9bd2-f6a53010b421"
        },
        "item": {
          "id": "5c13b9de-39aa-4d3d-8aa9-fb2ad0506ce7",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "22bd9ebd-4a99-4c3c-a164-007ca1b26e08",
          "status": "OK",
          "code": 200,
          "responseTime": 113,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "bf4bad2f-5e97-4465-b00a-0de109238843",
        "cursor": {
          "ref": "0d288aab-3546-45c6-a46b-9d62855fdb5c",
          "length": 250,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "f64dc158-6b41-4e54-b9b4-38773be2137e"
        },
        "item": {
          "id": "bf4bad2f-5e97-4465-b00a-0de109238843",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "2cfa39e9-df78-41cd-b796-ffff6ee56770",
          "status": "OK",
          "code": 200,
          "responseTime": 111,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "03bdb95b-a993-4922-9b40-e1c1e66a06a8",
        "cursor": {
          "ref": "dc9b3dba-ab0c-4bf8-ac29-6175c87f9287",
          "length": 250,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "971f9a0d-51df-441c-8b02-c5a2195d367a"
        },
        "item": {
          "id": "03bdb95b-a993-4922-9b40-e1c1e66a06a8",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "af42fd88-72ea-498a-9f45-79ca6826b2be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 102
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "f6256269-bd13-47ce-85b7-fe8b1144b8f9",
        "cursor": {
          "ref": "e2252243-4a09-4089-ad18-1612d61c1c5c",
          "length": 250,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "d9d47c23-6664-41e2-8b8a-c1c65341ce94"
        },
        "item": {
          "id": "f6256269-bd13-47ce-85b7-fe8b1144b8f9",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "6387b78d-df3a-4f2a-b69e-9bf07111e074",
          "status": "OK",
          "code": 200,
          "responseTime": 116,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "7f15774e-3e7c-4713-bfbf-96bc518d0682",
        "cursor": {
          "ref": "7f24d85c-129c-4a7d-92ba-1d1adb3807db",
          "length": 250,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "f90ac5ba-c1cb-420f-9a59-147208538f2e"
        },
        "item": {
          "id": "7f15774e-3e7c-4713-bfbf-96bc518d0682",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "bbf66608-2628-4d14-8764-ba1a9121a5ae",
          "status": "OK",
          "code": 200,
          "responseTime": 111,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "60001613-f815-463b-948b-e7c510179a56",
        "cursor": {
          "ref": "86a8a409-5b59-4056-aace-bd9a78411eda",
          "length": 250,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "0464850f-e30d-4fdd-8546-413d28f5b3ea"
        },
        "item": {
          "id": "60001613-f815-463b-948b-e7c510179a56",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "b3254e64-b569-4ed0-a380-ac33960c920e",
          "status": "OK",
          "code": 200,
          "responseTime": 112,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "5b6fa9ae-703a-4583-8bab-4ced46af0c55",
        "cursor": {
          "ref": "8b995b61-3235-42a2-9486-569c3e57dd6c",
          "length": 250,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "4b1edf98-5e22-4859-9452-10f8caab9b6f"
        },
        "item": {
          "id": "5b6fa9ae-703a-4583-8bab-4ced46af0c55",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "4e16d34e-f37d-4fe7-b185-a9544128a0bd",
          "status": "OK",
          "code": 200,
          "responseTime": 111,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "f6b187fe-cb8f-4de2-a132-64c8f12a6668",
        "cursor": {
          "ref": "83a1ae07-1193-4fe3-91c2-f6720b1834ea",
          "length": 250,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "de73d0db-58be-451f-bf0c-1bc468eb8860"
        },
        "item": {
          "id": "f6b187fe-cb8f-4de2-a132-64c8f12a6668",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "518f744c-a692-4118-9bd9-956f2d9702be",
          "status": "OK",
          "code": 200,
          "responseTime": 113,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "4a62138e-5646-4d67-9503-f8dc3427b377",
        "cursor": {
          "ref": "00bbe91d-4ce2-483a-bfb5-7767c74a62e6",
          "length": 250,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "4302602c-fbb0-4021-b4f0-0cf0498b1f9f"
        },
        "item": {
          "id": "4a62138e-5646-4d67-9503-f8dc3427b377",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "ddf2e929-f09a-471f-a245-0fe5857943ae",
          "status": "OK",
          "code": 200,
          "responseTime": 111,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "d3f33bff-d6d5-4f27-b860-4a8e6dfdbd6a",
        "cursor": {
          "ref": "5e69d39c-4ca9-476b-b814-e309c2036474",
          "length": 250,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "5af9675e-87ad-44a8-961a-eb83e8e52f79"
        },
        "item": {
          "id": "d3f33bff-d6d5-4f27-b860-4a8e6dfdbd6a",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "b91cb13d-d086-4264-a7dd-a40b751f9497",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 181
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:192)"
            }
          }
        ]
      },
      {
        "id": "b9553cb6-8d18-473c-8a5b-44d10d9c0b46",
        "cursor": {
          "ref": "57466080-f017-4b25-8205-15a68365ec44",
          "length": 250,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "f97f8532-ca4d-4a94-bfd4-0c4b25f6fd7c"
        },
        "item": {
          "id": "b9553cb6-8d18-473c-8a5b-44d10d9c0b46",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "df6704be-7cb7-4867-b081-085922e287a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 125
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:193)"
            }
          }
        ]
      },
      {
        "id": "c8e676c5-840f-4404-84ee-990682df95e2",
        "cursor": {
          "ref": "e3817154-a767-4673-aeeb-41fecb9d1d8d",
          "length": 250,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "6dd8b4da-1925-4f24-815e-189b8f3ee812"
        },
        "item": {
          "id": "c8e676c5-840f-4404-84ee-990682df95e2",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "5d9723fd-d709-41d6-8293-b3a8ae945597",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 125
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:194)"
            }
          }
        ]
      },
      {
        "id": "4bfd8161-8580-4ab8-9ae9-0dd18499d40c",
        "cursor": {
          "ref": "1ea49fc4-681d-46e1-a274-ea87cf39fa92",
          "length": 250,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "b6c3b614-aefa-4ebc-a747-cd208191fe8a"
        },
        "item": {
          "id": "4bfd8161-8580-4ab8-9ae9-0dd18499d40c",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "33cdbf66-9e26-47ee-9f07-1b29f62daee4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 125
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:195)"
            }
          }
        ]
      },
      {
        "id": "0f8a73a3-526d-4183-b5d4-0a26f42cae91",
        "cursor": {
          "ref": "ebf63b59-5bf0-4911-967c-11e308a35ece",
          "length": 250,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "b1eed9f2-0ee2-4a54-ba72-77d8ec3368e2"
        },
        "item": {
          "id": "0f8a73a3-526d-4183-b5d4-0a26f42cae91",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "908205c1-895d-465d-936f-5d8e7a62b564",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 181
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:196)"
            }
          }
        ]
      },
      {
        "id": "1e560fbb-f72b-4a0d-b8ca-100ca0d5cfa2",
        "cursor": {
          "ref": "9b218c62-2c33-414d-91ce-07fe0f660774",
          "length": 250,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "50de6961-351f-4f3b-a1e0-82494a4ccd00"
        },
        "item": {
          "id": "1e560fbb-f72b-4a0d-b8ca-100ca0d5cfa2",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "b4507bc5-4d32-4c78-8007-eada64dffc09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 125
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:197)"
            }
          }
        ]
      },
      {
        "id": "4235379e-35f6-4dd8-8484-f675a11a9761",
        "cursor": {
          "ref": "6e34225c-82ef-46a2-bc0b-c6520fd2f46e",
          "length": 250,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "ae7e5ec4-94c9-4e4c-9648-064a44a2c19e"
        },
        "item": {
          "id": "4235379e-35f6-4dd8-8484-f675a11a9761",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "86a685e1-c204-4ae9-9798-6deb2e32a968",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 125
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:198)"
            }
          }
        ]
      },
      {
        "id": "cb68ee96-8072-477f-9a78-b92cf7ae3c0c",
        "cursor": {
          "ref": "05499baf-a02b-4f2b-9eac-d834ec00f437",
          "length": 250,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "64718780-2a39-4709-892a-a956f8b4e4dd"
        },
        "item": {
          "id": "cb68ee96-8072-477f-9a78-b92cf7ae3c0c",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "5bda851c-c10b-4eaa-82c1-abc250378669",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:199)"
            }
          }
        ]
      },
      {
        "id": "4e9f5bae-da3a-4914-9744-c3f4700a3d58",
        "cursor": {
          "ref": "f5b25cd6-fc06-458f-8569-d0df34a6ffbc",
          "length": 250,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "d8e2b90c-cb39-4f47-acbb-be811caece9c"
        },
        "item": {
          "id": "4e9f5bae-da3a-4914-9744-c3f4700a3d58",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "a0fc62ae-b991-4ef1-8384-a11842d16f6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:200)"
            }
          }
        ]
      },
      {
        "id": "4f6f14c0-0aeb-47f4-822d-051530d1b29c",
        "cursor": {
          "ref": "257259bb-c987-41ae-bf65-5abb47c292b8",
          "length": 250,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "d33f0520-bc16-4a89-acc6-c7c7bac49f8f"
        },
        "item": {
          "id": "4f6f14c0-0aeb-47f4-822d-051530d1b29c",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "d1bc171a-ced3-4cf2-ace8-3448e65a86e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 199
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:201)"
            }
          }
        ]
      },
      {
        "id": "41f0bca3-af33-4918-8efb-7edb707f5daf",
        "cursor": {
          "ref": "18d43291-22c5-41c6-8338-5743a2dbc52d",
          "length": 250,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "caa08bdb-4ed3-4d46-9f00-50782812fb36"
        },
        "item": {
          "id": "41f0bca3-af33-4918-8efb-7edb707f5daf",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "0cc8ce92-cefe-463e-b2ca-2add34b913be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 199
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:202)"
            }
          }
        ]
      },
      {
        "id": "9788ee78-54e0-4748-b3d0-21c49bc78ee7",
        "cursor": {
          "ref": "f65fead4-6f7f-4128-8a07-10daaeb628e6",
          "length": 250,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "891f0e41-0e96-4153-97b0-05f3434ea46a"
        },
        "item": {
          "id": "9788ee78-54e0-4748-b3d0-21c49bc78ee7",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "a2644dd2-3ec1-4254-8636-3d443f92884d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 260
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:203)"
            }
          }
        ]
      },
      {
        "id": "2e78bc61-57d5-4b4a-afe4-7152eed15c12",
        "cursor": {
          "ref": "706d1bff-a4f3-4750-ba0f-9b7a8298f963",
          "length": 250,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "31688663-be1e-4f57-96dc-2a7f30146189"
        },
        "item": {
          "id": "2e78bc61-57d5-4b4a-afe4-7152eed15c12",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "b9c65662-062c-4538-ae1f-aa5535324dcf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 199
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:204)"
            }
          }
        ]
      },
      {
        "id": "3870e457-79cd-487d-92d3-30577f51523a",
        "cursor": {
          "ref": "c47a923a-1acb-4feb-884e-c09c75b3c787",
          "length": 250,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "60f90184-5a41-4b28-9e46-28470fd56030"
        },
        "item": {
          "id": "3870e457-79cd-487d-92d3-30577f51523a",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "3dc4e6f6-7d12-4dbe-97d0-21ea591218c2",
          "status": "OK",
          "code": 200,
          "responseTime": 111,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "4ca827da-58e6-43a4-b12c-b8c33eec3168",
        "cursor": {
          "ref": "f993be22-fa0b-4833-8305-d319969cfdf3",
          "length": 250,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "c433eca6-01e3-4e3d-90c8-7fb117c054d7"
        },
        "item": {
          "id": "4ca827da-58e6-43a4-b12c-b8c33eec3168",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "a8070b93-0123-4e37-860a-6801876bf5a8",
          "status": "OK",
          "code": 200,
          "responseTime": 150,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "44c95fe3-c87b-44eb-a98d-16ad18cef2d0",
        "cursor": {
          "ref": "0a9c974b-0e00-404b-85ce-8c28cfaf7b52",
          "length": 250,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "8606d0a9-ce74-4958-967d-6a68652a56d2"
        },
        "item": {
          "id": "44c95fe3-c87b-44eb-a98d-16ad18cef2d0",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "2d2eeab0-f6d7-4f9d-b6a8-d0ec5a1ff978",
          "status": "OK",
          "code": 200,
          "responseTime": 112,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "25326816-4bce-45a1-baef-8d734b557d23",
        "cursor": {
          "ref": "79d5ce2d-5134-47a8-a7e3-61bcba590fd6",
          "length": 250,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "252de0bf-2068-48d0-a179-ca8160e1e1a3"
        },
        "item": {
          "id": "25326816-4bce-45a1-baef-8d734b557d23",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "ab8c1e2c-2298-438c-aedc-bf21ec971191",
          "status": "OK",
          "code": 200,
          "responseTime": 116,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "805cc2e9-fdc1-4d8e-be91-67328c267322",
        "cursor": {
          "ref": "40413fa7-5342-4b02-8fd6-8b0577793ca7",
          "length": 250,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "ad191286-ba5e-4931-9cc9-afe75a8c7ce5"
        },
        "item": {
          "id": "805cc2e9-fdc1-4d8e-be91-67328c267322",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "2f08bc16-26c8-4f9c-ae2d-40ebbf145f54",
          "status": "OK",
          "code": 200,
          "responseTime": 115,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "666e0f47-02d9-4edf-b3bf-d2affa9ecbe6",
        "cursor": {
          "ref": "f981308f-bc33-4e4b-9040-d5d37a2368e8",
          "length": 250,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "1da1d842-725b-49ef-9cf9-156743a6c3de"
        },
        "item": {
          "id": "666e0f47-02d9-4edf-b3bf-d2affa9ecbe6",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "04a7dd72-7816-420b-a291-73aec9e29815",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:210)"
            }
          }
        ]
      },
      {
        "id": "d59a2656-5c20-4867-b982-28e49212d73e",
        "cursor": {
          "ref": "c5e8690a-37c6-4ccb-a55b-89d55fe1be6c",
          "length": 250,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "3b84ec9e-15f3-4608-836d-91d3a4ba3916"
        },
        "item": {
          "id": "d59a2656-5c20-4867-b982-28e49212d73e",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "27c845a9-a709-402c-bdb6-d5583651f383",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:211)"
            }
          }
        ]
      },
      {
        "id": "579989a1-a824-4a10-be5f-b6bd9f811189",
        "cursor": {
          "ref": "f616d396-da0b-480d-bc67-371c0ed04aa7",
          "length": 250,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "2c63d74f-1167-4b7b-a3a8-a9ea8647da2e"
        },
        "item": {
          "id": "579989a1-a824-4a10-be5f-b6bd9f811189",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "d5755829-45ab-4a10-ac90-d209abfc5ea9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 236
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:212)"
            }
          }
        ]
      },
      {
        "id": "45d8be41-fe1d-4f66-b1f4-db7f111aa760",
        "cursor": {
          "ref": "cac0adcd-c496-44e8-8c1a-b74955f77a16",
          "length": 250,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "e2c0196a-43ff-4f2f-9a25-704ef6908412"
        },
        "item": {
          "id": "45d8be41-fe1d-4f66-b1f4-db7f111aa760",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "ea2dbd54-cd80-422b-b335-169324a6e6b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 236
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:213)"
            }
          }
        ]
      },
      {
        "id": "b558ce16-b1a5-45e6-9cd6-1785023d9bca",
        "cursor": {
          "ref": "a4f984e1-79dd-4796-a486-b159fd396b06",
          "length": 250,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "721c134a-3663-4f37-890b-efd86dad7335"
        },
        "item": {
          "id": "b558ce16-b1a5-45e6-9cd6-1785023d9bca",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "cbeed0e2-2ad7-435b-90da-232fbd355dd2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:214)"
            }
          }
        ]
      },
      {
        "id": "41ebf359-9c26-4fab-a4c1-3f0853554e01",
        "cursor": {
          "ref": "712b54ee-8dc1-4f2c-8ffb-b39ec79a1c8b",
          "length": 250,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "35b02625-ade5-42c0-a605-8e866cdbab6e"
        },
        "item": {
          "id": "41ebf359-9c26-4fab-a4c1-3f0853554e01",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "4be22699-f269-44ba-8705-7fc7be0c1938",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 236
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "216b4bcb-6438-4b73-93bc-8884be7819ff",
        "cursor": {
          "ref": "f31325dc-fbeb-4d2a-ae7b-5c9c711ee4f6",
          "length": 250,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "2ec9c960-527d-4196-af03-0c15115151ea"
        },
        "item": {
          "id": "216b4bcb-6438-4b73-93bc-8884be7819ff",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "3e66e0f1-68ff-45a5-a0ea-94f38ca22586",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 337
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "68f54558-951c-4d48-a816-3ed203c21de2",
        "cursor": {
          "ref": "6f53339b-58e5-48d1-befc-c689f0c75f1e",
          "length": 250,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "b33e13b8-9fa6-42a6-9370-c980445ad3af"
        },
        "item": {
          "id": "68f54558-951c-4d48-a816-3ed203c21de2",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "0f2e2e03-003d-45d7-81d6-bcc87fdd1ca8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "6668421f-44ae-4523-9e59-6a82056b2342",
        "cursor": {
          "ref": "dc7f941d-31fe-47a6-a59d-aa2beaf0af8f",
          "length": 250,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "9924291c-dcaa-4483-87f0-84e102d3a252"
        },
        "item": {
          "id": "6668421f-44ae-4523-9e59-6a82056b2342",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "331a421f-20c0-471c-badd-b6e72655f759",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:218)"
            }
          }
        ]
      },
      {
        "id": "2e822d1f-829c-46a7-8ada-75bb660b6503",
        "cursor": {
          "ref": "f6014084-b15e-4cfe-b0c0-0ac34ca8dc90",
          "length": 250,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "978949a3-68ae-4afe-a825-e60e0a4bf1e4"
        },
        "item": {
          "id": "2e822d1f-829c-46a7-8ada-75bb660b6503",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "6ab8842d-f0ce-4d6f-8f5e-e5f79a9e08ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "77dfc210-c2dc-4bf2-80fa-4638b62f0c5a",
        "cursor": {
          "ref": "aca880c3-ee9e-4554-ad37-87ddd54d68c7",
          "length": 250,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "ef30b8e8-18fb-4c02-8ef0-7533c06006c6"
        },
        "item": {
          "id": "77dfc210-c2dc-4bf2-80fa-4638b62f0c5a",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "58ed767d-3b48-43be-b3fa-e22946d34a4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 337
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "1e2fd92b-e73b-463a-930c-929c9fa91455",
        "cursor": {
          "ref": "99aa5576-b25e-4e0e-9099-8c1aa676d78c",
          "length": 250,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "6732e99f-439f-4c21-8471-ffc15e144c71"
        },
        "item": {
          "id": "1e2fd92b-e73b-463a-930c-929c9fa91455",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "4e270318-a2a4-4872-a5b0-0f8aa41318cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "4873bbf8-a4a8-4595-8bbc-dda69f3a2b26",
        "cursor": {
          "ref": "3ea92524-dc48-49b0-87b3-585f6e72941c",
          "length": 250,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "0b5d33eb-665d-4f3d-881a-f80f9a2d422b"
        },
        "item": {
          "id": "4873bbf8-a4a8-4595-8bbc-dda69f3a2b26",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "c7269afa-0f6c-47fc-82ac-2cb614c82098",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "a0889522-224f-4b0d-848e-d69d0c04bcb4",
        "cursor": {
          "ref": "3742ea57-7cfb-4bd0-be29-a6246b1c709a",
          "length": 250,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "4ea990b4-0b9f-4175-a398-6631af588b58"
        },
        "item": {
          "id": "a0889522-224f-4b0d-848e-d69d0c04bcb4",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "afb986c4-84cb-4837-8540-2dd46ac7c78d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "af9784e9-c45a-498d-a03e-67763153a3fe",
        "cursor": {
          "ref": "ffcd0015-cebb-4983-9fe3-994c13cf058a",
          "length": 250,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "d9435814-d044-4e8b-a37c-161c325aec13"
        },
        "item": {
          "id": "af9784e9-c45a-498d-a03e-67763153a3fe",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "b2d97efd-ef6f-4656-a125-44f982c141f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "0c6425a7-9209-41cf-998b-9cd9d088daaf",
        "cursor": {
          "ref": "3aad0e95-6f04-4b6a-a18c-394ef7f48024",
          "length": 250,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "872c6cfe-bbff-4c01-92b2-60e257021511"
        },
        "item": {
          "id": "0c6425a7-9209-41cf-998b-9cd9d088daaf",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "b8e32f1b-d16d-49db-9579-89553109ab4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:225)"
            }
          }
        ]
      },
      {
        "id": "c1cb0194-759b-4469-bfb2-f2b2c31de687",
        "cursor": {
          "ref": "d26ef0ed-94e6-48ba-b5dc-1b41f5f63297",
          "length": 250,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "6c384d43-da66-4000-b407-055c800c8b02"
        },
        "item": {
          "id": "c1cb0194-759b-4469-bfb2-f2b2c31de687",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "84c713dd-a4ce-4ef0-92c7-a77d3952ad1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:226)"
            }
          }
        ]
      },
      {
        "id": "b99ce94b-9d7f-4325-97a4-d3d6020243d7",
        "cursor": {
          "ref": "7cfd8eb1-5053-4d6c-baf7-252682b19fa4",
          "length": 250,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "5e6c2c4e-52c1-4300-92b0-217c5026c4fd"
        },
        "item": {
          "id": "b99ce94b-9d7f-4325-97a4-d3d6020243d7",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "9f5464d4-24b6-4775-a0d5-e7d417f27bdb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:227)"
            }
          }
        ]
      },
      {
        "id": "f0b43fb3-4edf-4c80-a8fb-c5cfa999d938",
        "cursor": {
          "ref": "09a8579d-2cdf-41b4-92bc-a05db2561411",
          "length": 250,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "3dbd0874-74c6-4948-b711-d4941bf8dbf2"
        },
        "item": {
          "id": "f0b43fb3-4edf-4c80-a8fb-c5cfa999d938",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "36a7b811-6709-4507-8959-6f9c82fe4605",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:228)"
            }
          }
        ]
      },
      {
        "id": "ee171e3a-7c0e-4081-81c4-fceab7d2dfd7",
        "cursor": {
          "ref": "55bd081a-399c-456d-bbf7-527ddeb4c5f3",
          "length": 250,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "b3ba4558-ccee-40c9-8b5b-ad3d9978f4e1"
        },
        "item": {
          "id": "ee171e3a-7c0e-4081-81c4-fceab7d2dfd7",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "463d895f-14b7-48f5-a1a0-cbcc6186ea00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:229)"
            }
          }
        ]
      },
      {
        "id": "a7816426-b7a9-4ff4-8769-52c5f99c1e6d",
        "cursor": {
          "ref": "3b208dce-bfa4-47e6-9ccb-da38977e8dc5",
          "length": 250,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "f6e12ca1-72f3-455e-a951-8dacaf6fb43c"
        },
        "item": {
          "id": "a7816426-b7a9-4ff4-8769-52c5f99c1e6d",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "46a10d3a-3393-4fc5-b313-599b69fb8563",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:230)"
            }
          }
        ]
      },
      {
        "id": "2535e08d-300c-4b87-8d0d-bf0e2f99fe6d",
        "cursor": {
          "ref": "fbf1d423-8d94-4ec7-b037-6b1ccd0ab01e",
          "length": 250,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "bc00b815-a7ad-4429-9b16-91c9471d11fe"
        },
        "item": {
          "id": "2535e08d-300c-4b87-8d0d-bf0e2f99fe6d",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "45467109-9438-42f2-a853-658197550390",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 113
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:231)"
            }
          }
        ]
      },
      {
        "id": "b68b499f-18dd-4049-8493-39810b3ccc6b",
        "cursor": {
          "ref": "5f6c688a-f45d-4024-8735-03ee4fa7bcd4",
          "length": 250,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "b578878b-b942-4310-a994-76f6603c88ca"
        },
        "item": {
          "id": "b68b499f-18dd-4049-8493-39810b3ccc6b",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "81a5ef97-53a5-4667-b89b-b915e2cbb6c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:232)"
            }
          }
        ]
      },
      {
        "id": "522ec801-b95a-4f50-a439-5e6a0818ff8d",
        "cursor": {
          "ref": "79e49128-c538-471b-bc49-9f0e0abf4416",
          "length": 250,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "cdd5b54b-44cf-452e-9b56-a4f8dd4ed926"
        },
        "item": {
          "id": "522ec801-b95a-4f50-a439-5e6a0818ff8d",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "8eb07eae-8703-48fc-84d5-effdb9ca8d7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 113
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:233)"
            }
          }
        ]
      },
      {
        "id": "933fe9f0-5a5c-4990-8fb8-3c5a8954a796",
        "cursor": {
          "ref": "b37ec39f-b839-4c6e-9b89-b9aca5d85e90",
          "length": 250,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "7da954d8-e29c-46d7-888f-b4ad81319a25"
        },
        "item": {
          "id": "933fe9f0-5a5c-4990-8fb8-3c5a8954a796",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "aa7e9c78-67e7-4a9b-9ba2-2716cdbecc95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 113
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:234)"
            }
          }
        ]
      },
      {
        "id": "60442d3f-8d32-4369-823a-4252185dc3e0",
        "cursor": {
          "ref": "29788aab-3832-4fb0-bc67-f07d962c16fb",
          "length": 250,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "be247d6d-d27f-45be-bddd-40bcc7acf587"
        },
        "item": {
          "id": "60442d3f-8d32-4369-823a-4252185dc3e0",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "10dcfdf7-8611-49df-a590-4bc0e6f52ffb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 113
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:235)"
            }
          }
        ]
      },
      {
        "id": "95393146-c468-4d5d-b108-be30eb41d3ad",
        "cursor": {
          "ref": "558d4264-b84e-4ea5-8088-703a6c546653",
          "length": 250,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "0f1d4760-f812-43b5-8882-e8c1ff0daa42"
        },
        "item": {
          "id": "95393146-c468-4d5d-b108-be30eb41d3ad",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "7fce22ee-bb9a-48c9-bcfb-a0573eeea6b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:236)"
            }
          }
        ]
      },
      {
        "id": "3d0093c7-1191-4579-aa5b-60bbac29b776",
        "cursor": {
          "ref": "1858d911-0bf3-42b4-a817-adc598bd9d09",
          "length": 250,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "add25240-5c5a-4082-b01c-5aed73645084"
        },
        "item": {
          "id": "3d0093c7-1191-4579-aa5b-60bbac29b776",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "6d5d5776-278c-4b1f-a7cf-d6bdeb6d46d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 113
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:237)"
            }
          }
        ]
      },
      {
        "id": "aaa1ce15-f0fe-4442-93cc-909538e64252",
        "cursor": {
          "ref": "2334de7e-6276-4e1a-a270-8ad5f1aab439",
          "length": 250,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "ecda5e5b-6599-42b0-b5ad-c5cc315829a0"
        },
        "item": {
          "id": "aaa1ce15-f0fe-4442-93cc-909538e64252",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "2412370f-cf33-4162-831a-8b7769487631",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "6486e988-6894-44fc-a4fb-edfc4f7ad67f",
        "cursor": {
          "ref": "4b04e44a-288d-41fb-9aca-dbc148523fc6",
          "length": 250,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "21978a54-de10-4a03-98e0-4c38c9cca8f3"
        },
        "item": {
          "id": "6486e988-6894-44fc-a4fb-edfc4f7ad67f",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "130fdd4a-55bd-4146-b101-0fbb0a374401",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "728440a4-053a-438a-b24f-41d903817a6f",
        "cursor": {
          "ref": "dcba9ce1-f4fa-4866-9164-6586829240c0",
          "length": 250,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "77c8a9b1-8170-497e-a8a4-52f588cba596"
        },
        "item": {
          "id": "728440a4-053a-438a-b24f-41d903817a6f",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "87e4baec-fdce-45cb-b512-916e0e33de9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "5a1c6ae8-30bc-4c8c-8aac-ac041f232d6c",
        "cursor": {
          "ref": "11c4b51e-43f4-4847-9917-74ac1099ee81",
          "length": 250,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "d6ed3fd6-db5d-46d2-b47a-28fcd323da7f"
        },
        "item": {
          "id": "5a1c6ae8-30bc-4c8c-8aac-ac041f232d6c",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "24e7e272-8bbe-40a2-b32e-0a6ca71f74bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "f3ec4273-838f-4530-bac2-3ce9280c75c4",
        "cursor": {
          "ref": "e9cf012f-8d72-4749-a054-a630265a3aee",
          "length": 250,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "24890b6e-5627-4b4b-9733-4619e5f2f38c"
        },
        "item": {
          "id": "f3ec4273-838f-4530-bac2-3ce9280c75c4",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "2f5df307-929a-494c-8655-c33da2de26f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "70beb96a-2b3e-4884-b9f8-2c040dfdb560",
        "cursor": {
          "ref": "cee993e9-5cfc-434c-8e34-b5385e0100e7",
          "length": 250,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "9aefc33f-5931-451a-8076-3e42d0d745d0"
        },
        "item": {
          "id": "70beb96a-2b3e-4884-b9f8-2c040dfdb560",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "859c8049-1aef-43c1-b423-ae817b6abe33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:243)"
            }
          }
        ]
      },
      {
        "id": "fac30de1-e16e-4eec-bd85-63560c8a8e2c",
        "cursor": {
          "ref": "ad553915-9895-4473-8931-33aaaf3dd9b6",
          "length": 250,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "ff004751-cbe5-46ee-8fc8-7ad34c126662"
        },
        "item": {
          "id": "fac30de1-e16e-4eec-bd85-63560c8a8e2c",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "21a6a482-66c1-44a4-824a-c63787091067",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 34,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a1ebcbc-c2d3-42aa-b0d7-edbf1d3bfe1e",
        "cursor": {
          "ref": "b398aeaa-26eb-4a15-b711-c1d8c347dda2",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "c79dafba-e70f-4cb7-a7fe-6de8a27b8606"
        },
        "item": {
          "id": "3a1ebcbc-c2d3-42aa-b0d7-edbf1d3bfe1e",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "6c7f21c4-befb-4c92-9e15-4dfddeca1433",
          "status": "OK",
          "code": 200,
          "responseTime": 107,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "25370ee9-2322-44f9-ae33-1fc5d748583f",
        "cursor": {
          "ref": "77832668-9072-41a7-9fc1-2534cdd9821f",
          "length": 250,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "40e1593b-553c-4bc7-bce7-2394fc95cb3b"
        },
        "item": {
          "id": "25370ee9-2322-44f9-ae33-1fc5d748583f",
          "name": "credentials_verify"
        },
        "response": {
          "id": "c03e4e0f-64f3-4e2e-8f47-4dd4c097f607",
          "status": "OK",
          "code": 200,
          "responseTime": 116,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "f79000d5-f722-4349-9b07-5bc8385b3e9c",
        "cursor": {
          "ref": "5cbc2fad-a097-4548-a78f-3c007c1b1eef",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "1cfc355a-5dc9-483d-91b7-ba948f0c44ed"
        },
        "item": {
          "id": "f79000d5-f722-4349-9b07-5bc8385b3e9c",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "32211583-ef70-4546-b157-68a6b0fc31cb",
          "status": "OK",
          "code": 200,
          "responseTime": 152,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "7732d3cc-8a84-46d8-bfc0-71171ee99a0c",
        "cursor": {
          "ref": "e612cfc5-b402-4f56-835b-e1e6a782c94d",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "ce11f40f-caae-488e-b972-63b5fe8a4d2d"
        },
        "item": {
          "id": "7732d3cc-8a84-46d8-bfc0-71171ee99a0c",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "d40d285b-7977-455d-9639-39f27b73afcd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 33,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7732d3cc-8a84-46d8-bfc0-71171ee99a0c",
        "cursor": {
          "ref": "e612cfc5-b402-4f56-835b-e1e6a782c94d",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "ce11f40f-caae-488e-b972-63b5fe8a4d2d"
        },
        "item": {
          "id": "7732d3cc-8a84-46d8-bfc0-71171ee99a0c",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "d40d285b-7977-455d-9639-39f27b73afcd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 33,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f35e62bd-ba67-4746-a227-7a8c4fd64f96",
        "cursor": {
          "ref": "a5925593-e9b2-41ff-92db-a58314fd6656",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "ce038d80-9141-423b-973c-4612f7fdcd34"
        },
        "item": {
          "id": "f35e62bd-ba67-4746-a227-7a8c4fd64f96",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "cc8c9f5b-e300-4e04-a2a9-1529861eafa4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 34,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0958c7ee-df4c-4589-abd8-0120f68ec53d",
        "cursor": {
          "ref": "2f9f5a36-b280-4da7-8ad8-671b9585b5c6",
          "length": 250,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "60b901c9-cf21-46e9-a544-65952bf34ed1"
        },
        "item": {
          "id": "0958c7ee-df4c-4589-abd8-0120f68ec53d",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "4a320bf6-d50a-4202-9e2a-d02986a3f5a9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 34,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}