{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "ea0eceaf-c996-40d3-baa6-8bec106d2a45",
        "name": "Clear Cache",
        "item": [
          {
            "id": "cb7d0b65-f5bd-4e96-8b7a-a2f1160e9308",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "01816029-bd41-40cf-b1d3-d7e875ed0788",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "d9f65326-7c25-4ee9-9d20-9d4c69dc7d89"
                }
              }
            ]
          },
          {
            "id": "74628464-2d2f-44a5-8cf3-3f637b153429",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "41b325ca-7f48-476c-afd3-4ae4b9a0fc1f",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "6f6807db-ea69-4a84-a011-1b050bfaeaa5"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "55b80b85-83ca-447f-841d-5b0178b6988f",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "670441e8-e3f9-4517-9ec2-f9da3375b681",
            "name": "Positive Testing",
            "item": [
              {
                "id": "49c933dc-86d0-4418-8055-d0edcbdf8b5c",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "14aed0b0-8849-4f60-8d62-37e7ec18ccdc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "50531ec7-75b8-45f9-a5c7-fe9a5794cf7a"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "0929a239-a0b3-4403-9d8a-d248bef78113",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "3dfa60d0-2d4e-4e1b-baee-96208c704441"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "06b602e1-1401-4018-bf59-d2fa86006ed4",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "75e2a5fd-caca-4a30-a6f9-8f808195f768"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a312c348-0f9f-4ee3-8bb3-f341ae2f1f6c",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "050350d6-0306-465a-96bc-610a267a466b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b4b31951-c037-4ab3-bba9-54fe08bb81e5",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6d2e1f8d-104e-4f7a-b7f4-80f061506464"
            }
          }
        ]
      },
      {
        "id": "a27ee26c-6ea2-4ec0-85dd-2251884487d7",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "b5154980-f365-46d1-bbdd-1e9a237ebc29",
            "name": "Negative Testing",
            "item": [
              {
                "id": "6979c9aa-cece-4b5e-9cb8-8cfe0cc35136",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "d8501eb3-cd76-47c6-8b55-95468afb8d83",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8712361-f8f2-4d95-b4ac-f2bb986dbf66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7e693ca5-1614-4109-be8e-adcd478b3163"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aaca2b44-5a8f-4f76-9e3d-ef526d108373",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2fd7fc6-fa73-4b93-9991-70167250155a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1602d519-a62d-43bd-b31c-b355397da76e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78e510fb-b1f6-483e-89fd-d3dfb8c24311",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa0c5dd3-f8be-4980-bc9a-1f5d88ba1d03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "232926aa-d3d8-4a7a-8e61-ceae16915bce"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "a50cd299-3fa7-4ccd-bb29-338fe07e7790",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "79581beb-a1b8-4504-8010-27d990bebc15",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0bf63f8-cdf6-4bfa-acde-ff9d1ad10e35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "31208899-9b64-4fbb-86bc-b36d48baac8f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afc5649f-5744-4a17-aa37-eea8e99dd642",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d139eb2f-bcda-43ab-8892-58b84d189f44"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "5156349d-901f-437c-8c29-ede432e90fb1",
            "name": "Positive Testing",
            "item": [
              {
                "id": "50a90388-0e9f-4851-a165-d5fe8e6a34a8",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f87be271-6c07-441f-a633-fbfdd475e0e5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "348cc44c-a28e-4d35-a4f7-36048b750205"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "22d77998-3fcf-42fd-bc80-cdab88bbdb23",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "42a1c4e3-8ede-4ce4-967f-0cfe024e8cc9"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "55ce8bbd-82f0-462e-b676-a807f461475f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "cb468223-9ff8-4eb1-a743-999ed627c533"
            }
          }
        ]
      },
      {
        "id": "45ba8279-4339-4570-96d7-c3301765bef1",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "61bbcdfa-5096-466a-bd31-f74505964092",
            "name": "Negative Testing",
            "item": [
              {
                "id": "03dea13f-1428-4c3f-b557-8a393bb4e0a7",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "a72b1cc3-2b28-47fd-a1a3-11844a45a0da",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "110d09c8-eb44-4a5a-9285-ae7ba5efc831",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cac8361a-4d32-4f50-a601-17740810747b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f36528d0-dc2c-450e-8ced-517f7b40bb68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0c7fa2e9-ecc8-4492-8993-3da9812fcb27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05b95e97-0bce-4e39-bf7b-8a3fd2bc8f9b",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f49fced6-e2c2-45f9-805d-dd15cbfd8822",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01089a3f-f0ea-47a4-b7e5-ddae4a417cae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa64c1b4-514f-4a4b-9604-1f3d6a2cd99a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4e49adce-ca46-4ee4-b340-2bc7bf527b13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6e2fdc7-2f0d-42a3-8cd4-fb6223c9bd9e",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21bc314c-acb0-4bad-878d-a236708fd0d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7094ed27-4500-490c-8178-98aee26d9111"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5050e37f-cc0b-49fb-9b59-3e77cf98fbd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "adb57416-7e44-4261-a574-ea73844c8f5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "598db608-ef84-41cb-adea-8307a15ef055",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73f16554-7169-4aab-b138-39b8f689afd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "adc29758-cbb9-4802-9c6e-1c166184ceee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21e46b62-c0ea-4561-bdcb-949809282745",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "dec99b0b-2bce-4ec8-9804-b50d9f873947"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b47bcb65-ee99-45d1-823e-581e3070c95d",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1ce343b-3636-4465-9d58-0deceb98ceb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d802a7a6-43a5-4b3f-ba90-2429f707f928"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da2c9844-692d-4599-bf63-e577e90fa8ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "39598da1-a677-4e03-897b-4089c64bcb47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5615c0b1-b9c3-4fb1-aae8-fdf47b629ff5",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c61199d-fe74-40da-a4c5-7d0ad281ab5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27f30d73-65ff-45b7-a4cf-88f471c76bdb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8aa3515-eaf4-4c05-9313-b328abce10ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a814c8ed-b35f-4fe0-9dd5-3c74ddda78b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5336d3c-9c5d-4575-a513-5e5d20638a6d",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1f72afb-4cbe-4a6d-9d4e-e92afb187892",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28c94336-24f8-41c6-816b-536e2bf82bcc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87b3665b-49fd-477a-a6c5-247fcb62fdbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "02a458ea-22f2-4cd1-9895-8cdc34f3cd72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3519c53d-050f-4258-8584-aafdd98fb1fe",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8416076c-c150-417d-80d8-4e9eb68ca5f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bcd7f49b-6187-4452-ac25-e89b238f5e90"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c03b328-4aa0-4fac-b503-5cb6a8cd292b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9987c88b-52a1-4e7c-9341-f6cd76312417"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e0c9974-c53d-4eda-a404-dcae1efa60bb",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7165dd5-4b46-40fa-af39-167a3dce42aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a869c08-6042-4859-b357-9deae1c246f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "656f0eda-a216-4f92-8a72-57bd7029faef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "02d087a0-21e2-4eb3-8f77-f93e5bfd4c9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db99e939-0aa5-4474-bbdb-4fd936cd27aa",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca020622-1e3c-4597-923e-10ab678282b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df751d27-d5db-4821-89e6-508bef83bcf5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92565507-16f9-4e77-b0f3-4daa8938f214",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7ea58236-9c92-4503-907d-ef8904f80809"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3893231-739c-4d0a-a1c5-0a0943016e52",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82fa497b-9b12-4d34-91f1-89a4f51bdcb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a989cef-067e-4613-b655-b0e7e873d18b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9862484c-c10e-480c-a34f-9dfa11399a0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "710f7d06-aba2-4910-9fe8-ea8416ec4fae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5311c3a4-6902-4719-9a84-e1a5871d694b",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07e03c7c-4f87-45a4-904e-b40d1992525a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a18c0585-3f6d-4b8a-b5e2-8c263aaa5921"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cf5b398-c368-4685-9d5d-961901b5f127",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "39bd5ceb-4f14-4ddd-b7f4-d316a4c34099"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e75441ca-dfc5-49af-afba-b0bcef35acd6",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3ba853a-0047-43e9-81a6-7d5d841d5c90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5a7abc1-f120-47e7-b792-9e153c424ff7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7977ec6b-6b0b-4456-9a95-4ff8519ae17d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cb32a281-c158-4239-a262-7ce60833f72c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf9ff92c-9d7c-40b6-851c-64a3630d26d0",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02704d21-35ec-4e79-8ea0-211bd23a38e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1fb596f0-4155-4315-8d7b-9edab4765b6f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f895b197-fd2a-4db2-a0c3-45f92b5bb835",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9cfabefd-47a7-4b0a-a783-64dd6e95a3a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69887efa-7d26-497e-b934-81bdd1adedaa",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68329fce-dbb6-4769-a25d-11d2089cb605",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d096a04a-0a13-428b-a80e-7dea0a52dea8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dea2dc05-55e3-44e9-80b3-e2588ac66c64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d7270f7a-34ee-43ec-acd2-1feac6e1a589"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f474be37-7659-4bd6-a536-b859208006dd",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "388e30cf-2632-4a29-a374-4cf9f564d672",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78f224c3-09e0-45c1-86fd-28695b03bee3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a8fc48e-b880-4f3a-a010-3763ab134f39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b108ca9a-25e7-4c62-9e0a-c4dc0beb4980"
                        }
                      }
                    ]
                  },
                  {
                    "id": "088fb12d-f984-409b-b7bf-86fc6e47ef55",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5382a408-067c-4c05-bb08-b96878d212ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "687d9e0a-edb2-48c6-a4a4-ea38ecc7afa3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a2a9733-a07a-4a0e-917a-d2331d10f3d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b63971a1-5efd-4df3-bee7-7f0cbfa9e127"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4879a1d5-d5ac-4616-bb1b-226175f580bf",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "adbe0861-4bf6-4379-a845-1f506db60b7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "916898c2-e6b0-49dd-8b3c-f04c3e1e585f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "894f17b3-7ab3-4fa5-820e-a61c1491d6f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "f5663eba-0f9e-43b5-afcf-914cbb9931a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e9992f3-1a54-423d-bb96-7ddc7c024cc6",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5014153-8d4a-4635-af67-7dec0dfe80f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f22f22ec-6a81-415a-abe7-70ce727061d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8701fb9-51c3-4040-ae4f-7f2b25c9a9ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0a0e7258-b82f-4ce9-b9a7-09f8688bf52d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02f40080-f86b-42e9-aaef-55c719ed41ea",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76ed527b-20f5-46a2-b31a-275126e49a18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05c25a8e-92e1-4bb9-9624-919780e2da33"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bd45736-e649-4bcb-ab5a-4408c267adc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "db1d464d-37cc-4d2a-a49b-cec8c7870f81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37dbdd87-1255-4ac4-a028-58a83617e4aa",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fed30968-7c36-4543-b40c-ef66ee11f1d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69310de9-b78c-40ff-967b-2ed7f2852418"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6acad13e-f45c-4637-9bf7-94557574b49f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8d2c09cc-7b66-4e89-a9b0-51863e71bb0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f48b5973-ce28-4081-9f6b-655b8263999f",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6a861d7-3adb-4ffc-bf14-bb62cfff22bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff0328e3-5afd-476c-8118-c3dad8681352"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcb25816-34a9-43e2-85bb-a69b19f1ced8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "85385c1e-4f38-429a-90b1-9e5fdd1c1331"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42d6e831-5edb-46a6-97bf-836836c80543",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93df3846-9c21-44b1-894f-f5dd79793c14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3ed0638-0d06-4efa-a952-553a9af00eb6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bfeac14-07ac-4f33-8b96-46c44d8af3a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f8ada6c2-1a35-462b-8c9e-f65575500178"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0910eb25-e13e-4889-9cd1-9adfdc9923e2",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e2610e5-bcbc-4139-8dd9-e50f37ed250d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad40829b-c39c-4878-97ca-94e902d2f285"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36af5ab4-feaa-4441-b7b7-d3f5a2a3595a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "555cbbf4-6657-40d9-99c8-5d43020275b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "509b0bf2-4af4-41b4-98dd-96b710f85d84",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9543b136-f2ba-4eac-8566-683212ac23da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6f49c4f-5c88-4bd0-98ae-51590949e836"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82947c7e-5945-4f16-b171-3c402f0153e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "d724d21e-a9f3-431f-b606-d96fddef2d68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37e77e7c-7b16-4c40-b295-1ffad22cf2a8",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08584ea6-d676-4ceb-8c4f-15395c6590c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea9cff62-19d3-42ae-afe5-500a738f82ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e7de9a1-f478-467c-a6ee-ec3d48766157",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "adae86df-da26-4ac3-9a3b-c51979d92165"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3204de26-63ca-48a1-82a9-61a33f885a0d",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "933d3f81-c931-4610-8ece-da6cf4719c1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3af19d2-f056-4168-af5b-9db8c745c572"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4dc2f5b6-b97b-4629-9c3a-7cfb832d091f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "9acd280d-4337-42fd-8433-e0b21bb45f28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2712b03d-e504-42fd-a2f7-b9f054ab1de2",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f9e3f32-72c0-4066-b707-8fb4dc263dad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ab0938b-6dfd-4939-9da9-06c0ee5cfd75"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13bdbba5-66da-476c-8a93-4e7e0b102f18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "06fc4fe9-dbcb-4f0a-8687-9bb9600628dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64057db7-0846-4cc4-8576-1360cfcff680",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "271eee3b-6d09-4d93-a4c3-a4d5d9b9e163",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cbfbba42-060b-4a64-abd7-df23a20e898a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35ac5d21-e4c8-4154-8dff-e09b1d4c9fa6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "e5e6b531-2fe9-4452-b3d6-f8b27fb8db80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18d9c695-d36f-4d30-ae55-c2c029cd4bc9",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f97d5a1f-fa84-4b56-a0ff-500e98dccec6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0c6022e-5494-4a6a-bbb4-267764f4ee1d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ef3ca53-ff6f-40a0-b3d8-171de80a4216",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "33d45b81-086a-41ae-b2a5-7e16ac7310ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "853bbc72-6e43-4170-b751-e69d43f1197a",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52254fa6-1a66-4d04-83a1-243b960d7093",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c81ec3b-b070-43f7-9b08-511521840a54"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ec0acb0-b98b-4472-b82c-0dac79025984",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "d622b6ce-232d-4dc7-bc98-cf794d63f2a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb28bc5a-991d-48d9-b74e-80c8a18629ca",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8aa88194-d872-473e-be6c-d113c13104a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4dc077ee-dbe9-4227-a02a-1064c54d5081"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a11588af-2fe6-4364-9fc3-96f921e9d028",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8f4d7634-2986-4a4b-b21d-a8861954d189"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8929054f-a721-4dbd-aeff-77b2f8bdff8f",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6cb7d07-aac0-42ef-af2a-7b89d9be67e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0aecd4c-8eed-40ca-b88f-a47f98d352f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c9abc81-3d41-4c62-b410-0413c1c493b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e2495087-afa7-4a8b-beac-9ba7009918a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70ecd16b-519b-4a87-a446-92265265a90e",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3887cdab-d4ce-407a-81a0-de1880f017d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3b6cca5-8b23-4949-a1b6-6e23cfae41b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00742aee-1108-46e0-8213-37f44f7354f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ff9ea086-daed-48af-a6b8-5f4a9a2be620"
                        }
                      }
                    ]
                  },
                  {
                    "id": "392c708a-0cd5-4964-be80-06c03e4a6771",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "129b1304-0f52-4cd2-a56a-4fc1d9d79702",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7426fbc-839c-4ea6-b481-d3e2b2c7467e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9110cb84-ebf7-4826-b9f4-8732dc3643d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "2097c398-20f9-4f0d-b344-b742528358de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "159a636a-7a5e-400e-b189-5b0840cd51d0",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57504063-b020-4bb2-8f78-b83287a187c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5b54fed5-f881-4083-a01c-1c8e6fb743fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36bd5759-2022-4e5c-9ac5-ae511182261d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "3b552855-692d-477b-99fc-50e8d55d8c70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ae1e419-bb96-40f4-afe6-2d4fbc38ea70",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e74e972-633d-432e-9c0a-28073dc7fc73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "729f7763-0bc9-4489-9fbc-dcb4efaa81b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89ede4aa-77fc-49d3-bbb7-737e7347b2c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "3a848942-3b3e-41b4-b101-6557cb4c3d0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebec92c8-94f0-4bdf-bac3-a7c52bf12a57",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0016269b-9a5b-4dda-884b-66ffd440c0e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a0ddbcc-c064-4f68-9c7f-6d070933173b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55881352-4ab0-47dc-a156-d4bf9fcaa662",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "9d438b2a-e431-4e65-a7d3-0d91914453f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "716be740-6c40-4510-86b1-2ff8cf94994c",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bafc85c-5826-48d1-86d2-84dd4ee58228",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ff210b9-268e-4939-b469-7ca0a1f0d552"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08687360-1454-488b-8ec9-0fbc28c3937b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "927649b2-5c66-4158-8ee9-14004fa7fb5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74f4b24e-5733-4e81-84fc-a4667adf0bcc",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20e92d32-8794-485c-9b0d-6f15a0c32bb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "378e52f1-6a49-47d1-8da2-78d9be9184c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1268ddb9-8537-4ce1-9f01-568bd5ae3df2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "6766efbd-3c45-48df-89a8-9981df54670d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09f9e686-b2da-41ba-926f-0d3961adbcc8",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3436e6d1-7c80-4e0a-bb1a-49166f7f8f1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "961dafd1-91f0-4943-8df6-199bf51c95b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72dcb06b-f641-4a4f-9359-c0e1f9a582ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "5df0636b-d6ec-4777-915d-83a4525ec906"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7d0a2f3-2430-4487-8330-e7a1aeec781f",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "451c21a0-81a9-4ef9-96a3-84233d06f2ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "365932e8-3280-4f19-a7d4-bc5ebe8ac321"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58d34bf6-75e2-465b-9c6f-954bd495054b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "7ba6f668-5310-4213-a8b4-96b121dff33d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84712b3f-fb8f-47f8-be99-901ad447a20d",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0908956b-3f9f-4c5d-9e76-f5a92f08482c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37d71e8a-5c4f-4843-912a-b32362ea7f59"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "071f6b6e-3947-4bdb-9415-e46644327517",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "d97e543b-6a69-44c6-b128-12998a4e6f58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "126f3933-28a2-4cf6-af7c-d13225456585",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e040ceb-1dbb-4916-a97d-40c266bee63e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27b3baef-cd1b-41d9-988a-2001d1c3dc19"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f96c91e5-24c2-4e1f-a6d6-c0f98f91412e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "7d792372-b667-44be-83c0-e1e77d1e63a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc3a1a9f-7c7c-4154-941a-49c732c75248",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4e568bd-d29c-46f5-a3b5-972b69e1ccfe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1aadda3c-2c0c-409c-92f0-809b13cfdf59"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f35d842-33d1-49ea-9091-f593609d3e21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "00db441a-5583-4504-9cb0-b712bac81feb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c72532f-9537-46b3-8a03-9eaccd29a484",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70a2f029-6491-417a-8b1a-3d27364c4da5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f72ce48-e4f3-49da-b97a-65c5ef5430c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6078221-d59f-4ee4-bdce-d9b0e248a3e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2d9f29b4-9214-49bf-9898-0103b4833ac6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "134d1ce7-3cac-4f79-a4a9-bae80e4f5795",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2380b317-4825-48ec-86a8-b03522cc1ae5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca86fe49-d3f0-4e82-8f79-7d4a3d8b4a31"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3700abdd-34eb-4d0d-a15d-20fcf621f8c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "94e13baf-0975-49d2-ac2c-11964621050e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57b66b8a-3685-421c-82eb-a4c4431b0294",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c9f9fa6-2850-4ee0-87ed-08004fc15e15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7627f598-7c2a-4732-ad54-e2c201e211ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "648b9953-070a-4f7d-a2cf-ac75908407cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3e28ba5d-367b-465e-bf70-a35cc046f2ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29c5791f-cf54-474e-82c7-8140fe4b98fc",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7cf55c7-5988-41cd-80a6-0b5985421232",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2947054e-f13d-4cad-86d7-2d74b9254c14"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "448b80ec-e27e-49c6-a1a3-1f2fa792229d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "187d0490-8324-4fbd-8139-87e51d00d4ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7841f2c2-4107-4db6-b4b9-8282df0b0f9a",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cff3fb5-1bfb-4705-a462-015b5489d170",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b58e2409-2a69-4127-9ae0-074e0efbb321"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d71adcc3-d4ea-44f4-b1a4-23ef3b5fbb85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "35dab9ba-b92a-43cb-bd10-28156f019e02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7bce120-1d0e-4bb2-87e1-da91baedafce",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e5b2a40-88b5-406a-a435-038732e2f17a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "440ab328-3bd6-41d9-b451-3f10d1cf80cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6cdda27e-a821-436b-b9e9-478ff57d5481",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "c2e44f2c-079b-4c11-be9b-776fc991253c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82303cf1-af66-4889-aa45-60ceb61f8e9b",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f96ae3b3-f6c6-4508-8e6e-d9455de9fbf0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68bcf0c0-0434-4dbe-a0e6-ba5814f7565b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2d6bc5b-c577-4478-b585-bed7929e933d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "d4608339-2079-4262-b777-5d1fa95bee58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94111534-1638-42e6-8970-98ea131eee9f",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "536b0ede-f3a4-4b39-80a9-60575628a277",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b566e2e-afe3-41bd-af32-929e99920ed6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d71c58b1-43a9-4ba8-8bed-5414443dcae8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ba563298-3a38-49a8-8b13-2c8c24db87d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "077bb19d-365d-4c87-9be7-14a2f104545b",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c8f6397-e38b-4fca-8d1e-55fc8a1769f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c2aaa7a-96f7-402d-a2e1-eec6251878d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89c14a6b-db95-4f6f-bc17-4cfa3df16bea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4d79d75d-83c7-45e3-a45b-9e03bee13bcb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5542fd30-a9ee-4c14-8962-9a1b6eed7153",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95f14c5e-b209-49f2-a125-db6556b40a87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "067fbc64-c182-44b4-ac3a-50fa06eb09f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9c1d7be-f2da-4575-ad5e-b3cd687a3780",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2a2ffc4b-adf1-4833-b52d-1336d209ca29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0db71817-f1c9-41d0-ad05-9a77f8a5633b",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8dee6473-c25e-4ba6-9dca-fdec2af72a38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4951052-d6d8-4343-a739-95864cea4eea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34b1bae2-321e-4912-8309-a05d4c71061e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "ab76238f-5a76-488f-be07-5954c15dff41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c603551-b68f-4007-9126-3345470dfad2",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26478b57-6b72-48e0-b92d-02698aa92eb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d0fb563-8e2f-42ac-ab93-f0bacb1dcc30"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba51f0f8-1c44-4616-9842-454fa7a6fe6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "fa0c0bd4-4223-49c3-b25b-1c78f7de7bb0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70ab6a69-fac0-4bb3-a152-8f0d6c75767e",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d915922-d195-4b62-a235-605f49ed37b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18859dd3-2959-491d-b643-94a6d482fd48"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da5bac91-b191-4043-8e53-3ec68cea911f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "45793ce5-650c-4cb1-9c76-748bf8b6c3bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59cf2aed-208d-4d0e-9f20-f4d1e7c0e895",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30a0812a-3203-48c8-87ee-b19d8ef72343",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d070b039-c1b9-4f41-b9b9-cca15e0e29d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ae9b039-3568-4c0d-b414-6af3a0176675",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "f4e3ead1-9ffa-4462-af3f-f444fa539050"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2683420e-4090-433b-9e7a-607621f1c848",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9835f1de-2e41-450b-84e6-51333982a169",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae3a0dbd-6d3a-4e59-ad9d-4fb70563cb53"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3e2527c-9453-4da3-8035-9ec5d338cb73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "e29edd39-58e6-4585-b8f0-a58bbf100400"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d89a4b4e-aa7f-488e-8498-1e5f1640d98a",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40c6734b-a4aa-4aad-a834-e7fa0dc4f35f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2430f7f0-f024-4c18-b46e-293734aee421"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12e58b17-f558-41e9-acd6-f4bf4bef81ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "3107110f-e94f-47d4-a248-7c84c9c28b0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "054168a0-02a6-4805-80b0-a00945d2004a",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a1e6a77-f2f2-4625-902f-7f8a028906ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5090320a-a987-494b-9afa-650d476fe48d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b04f4a1-1837-4d9a-9711-60b2fdd70e73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "2bfe418f-adab-498e-a8a3-324f6be7853b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0661978-528f-48e7-9821-2f6b552040a8",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fed2a883-59ac-42e7-aa5a-41c77453d23f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26e70fb8-f3ba-4d45-b958-2f13a8c03eb0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f72ce060-48fc-4887-9600-61da82553acd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "243759c6-c633-463d-9161-f18760a084f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a888c73-82bc-47ac-ac4b-ad8b3e6d8ba4",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96dd7ac8-6a1d-4aa3-833a-27b3af066c5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a07ec0e-eec0-4fe9-86de-feb3581cba9f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e51479e-3b12-436d-8805-fae6050ea507",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3b3cc5ab-75c4-4a86-b08e-0755613a2649"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4d2db5b-c5b9-4b4f-bef4-98670988c79a",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b82ffe1d-9eef-4b2a-bd52-dce0864e8ab9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67aa7c59-7ec4-4029-9974-7ab56fe0862a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5bf8541-bff8-4062-82c2-b805da554538",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "980e06b2-1c97-4ba2-b7a7-1366cca5885b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91da89e9-0e98-46b2-8187-03138569f4c0",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ee8bdfb-0798-4aa4-8758-3d3c2a4fc767",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e5facf1-f7a9-4461-a97d-c8908fc2d212"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf8be807-30ce-4d9c-9ea0-9eeef5122dc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "07efae9c-cc89-4dc5-adf6-6da6dcf7a026"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83105c00-bd3e-4712-b189-c3e494138515",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2dffb35c-171b-4312-b3fd-3fcd5323d76e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33826be8-4c08-4067-ab12-c9c30b83334a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1530bcdb-915f-41ec-ac14-2fae288990b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1b85c38a-bd71-47b9-88df-aa89b72b8b78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9658e5a-d190-439e-ad01-dbc1d06c67db",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f5c6f77-817c-4ed0-bf31-f199636f459e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f94bbaf7-92e8-4268-b451-594f6824019e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1a44a7f-79d4-4ba9-ad04-803edd642ee3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "1e2c7b6f-6826-498b-816c-e201a4140787"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f03456a-683a-4e1b-bd89-634f0992ebd7",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f387310a-f65e-4a6b-a4bb-043b920324ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c01943c7-6d8a-4c62-b4bf-d342f8a2fa88"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4450269-35ab-4262-a0eb-3363e667ec57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "bf92c9ff-1f84-490a-b015-d10869188ff1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ac88264-6b58-4ddf-879b-72fa7e96648e",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02656f58-9427-4c55-89b5-5587983ec57d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ebe086e4-54c5-4c89-9d29-ecc3feb55edc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2383c193-977c-4174-8d70-1863147e2bca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "490df896-e9c5-45d4-b3c4-a384de7b64ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd33c8c0-6b59-4cde-b78b-e95d2035223c",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3feb8e8-a2a8-4f8b-8758-8483d0b223ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87c883a4-bc47-4c08-b57a-6a4bbeccdea1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96d34875-10f0-4e62-adcd-727350583b62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "41d444e7-c8d1-4f81-aac8-9c764b39c148"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c3024a0-2afa-43ee-90c0-678129665ab0",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83d41250-c871-4e28-b947-f052391819a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c9f10b9-a0fa-4c23-af14-b3056a48cf17"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f9e7664-2801-4a7a-8940-2c409f43813e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ce0d0f19-ac36-4787-a4cf-71655437e3e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9dbc92c0-210e-474d-8530-7f7746c0fe94",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b48b5513-b597-4e49-9669-073f8bc08bdc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4e0f352-ddec-4a49-bd71-aa2569584cf0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1b924de-4342-42ad-b940-2e713b47ad75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "2be7072d-d614-4c4a-9841-219cd67bb8a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "289c0cec-274c-4ebf-ba1b-301fe9d01553",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b683e39d-e3d5-4369-abb5-8fe360785e60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e4f7678-8c2a-4d9e-8293-a97930327b29"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8ae875c-c7a7-4708-bb76-c2a35df028f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "45890a05-0e6a-407f-a5fa-41a20c06dfd2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "341dccb5-178e-4d4e-94d7-3b3da9d40ddd",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a332296-1a8b-482f-a628-0466907622ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08dd534e-cd60-412d-bda4-14b6182a1f24"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30ec2506-6572-4f8b-8844-d25496e8c071",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "1508f4ac-7d26-423e-a756-c10783e774e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc7ceb47-d04d-4e2f-b2ee-c4f3ce2688c1",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5fd28d4-8f71-4edf-91ea-c2a77fe8d4d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "757513c7-6083-481b-957f-f8ca28ee678c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f58b1a3-df3e-4b0c-a58f-0a1aec0935b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f05f6ab2-5a41-42ee-95af-3c2cd5e216c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e75566db-7947-4f4b-a5c4-0147f8d6e4e4",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ee1f750-26a6-44e7-9bb8-4b56a653fb2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50ee21a1-7071-4fe2-848e-9ff34626d9f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "190ae007-c293-4681-8b8c-211108093d74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "867891a9-3b1d-4532-88d2-6ec0767958e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec88a99e-2565-4b0c-bc0d-3d0d42fb04f4",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44b33dce-2ddc-497e-9797-d3e563afa3de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a998916-f6c9-406f-b1a2-ccc8956496e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b0f061d-6ef6-44ab-8a5e-7adc950cc698",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9ece98b4-7b68-4eea-96d0-dd9d4a570f44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aff64c9b-13a9-463b-aee8-80a400ce9bfe",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdff8a34-16f8-4562-b65a-e8f757cb3999",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2247ebcc-9ab8-4d00-94e5-0cfdde94a3a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06607615-739f-4c8d-bbab-3991ece109e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "68fb26c1-6107-42e6-b034-5e542bcab02c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "261ee583-efd1-45e4-8c46-4181fc8cb4a0",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f437d3c-ca12-4729-ba3a-c8f3ec4c31fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9632b6f9-c0a1-4c93-975a-08116bcebc0c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ac99853-3733-4d33-90a2-660e040097eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "bf47ae33-f4e8-4c63-a2f8-42529ecfb16f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3b43d29-2884-4d42-bfcf-60953e1de687",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86d63751-454e-4b35-b38b-74adfb6f28c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5894f124-b334-4758-91fa-fb1bdbd7e2da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "810aa063-f3c5-4c6c-8ce5-159be87b3c0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "18a2e337-0ae5-48bf-bfe1-dab07fdd84b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "531b1a47-2b75-4602-9c66-5ca0c211a605",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "106598e3-dcba-4f05-9387-b9af6d93b8e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bac58cb8-25b9-486f-9033-f15c41d35ee4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ae089f5-fe15-4657-bba8-ba7f99f78528",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c5ede1d2-889d-4b76-afc5-0848f18ad149"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7aae993-b90a-48cb-955d-c6230378e915",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61dc8c12-ebda-4596-9462-f92a4385c933",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8e75bdb-1272-4d05-ab2a-b636334f47e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abda8c7a-fbbd-4fd4-aada-77e7d30b4827",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "72c86deb-d84b-444c-a44f-d5c05b19809e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4d92576-ae6e-4d44-b438-efa2d2f7cca9",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc7289d1-7281-4f1d-83f9-34fd1c0a1312",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c82d2c42-9e02-4eb4-b0c4-5ef0b146e428"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66c16346-dfc5-423f-98b8-509172bfed9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "382411f1-456b-49ac-a504-99e4ba2928ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b781296-5247-4a28-bdcc-16751f92b0f5",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bf176dc-f508-4a8f-bc03-88b647c9bd53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d0011aa-163c-46ec-875f-6357ddfa6e26"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e9d0f81-4a62-4de6-870a-4305dce9a3cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "9e0cd98d-6f96-43b9-9512-71a4cb57bf24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3923b8d5-b233-43b7-9d5d-47c311209b79",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93c42462-fc49-4782-9eb3-c1fffefe570f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05f7c364-1f55-4e37-9d0a-f394b23b7cb1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2484966a-ddff-4aba-a257-e80b1f6e6934",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a9cf022f-ef1b-4a99-b1a0-f70f949974c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35d58cc1-5c89-4d7d-ae90-58c6201e3b72",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3958335b-c344-4f7c-9840-a15bf1d40c5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41b42060-9cbb-4020-81a1-c377e7d4a749"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d095307f-83d9-46b9-a4f8-c796e12f026f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "2640303e-bf75-4ac6-b97b-eec29d993f16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d174fd9a-e68e-4981-8223-aa6a01aa7950",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5498481-43fd-42b8-abde-f2212a2bd72c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "753cdcc8-cdd8-4df9-ab03-131400159ea1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75ad87ad-edf7-4937-9d2e-16c5d4ab8892",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "9e1c5392-7e12-4b8d-a6d6-7acb3349ad57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a3e6df0-65cd-4952-be57-568b6e2e46d4",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3e4d357-3260-4336-839c-c74f1140d92e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6514789-e839-4140-b5f1-8cb39c13dc85"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88997a7e-7b68-4ee3-83fc-1bea3f51bd33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "11b84b3a-1d7d-4348-b796-1c8da682bddd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "731d812d-1ece-4d2f-a1e3-965e066f20da",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "deb79d08-7019-4948-a5d1-d872253410ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8626f654-3e27-4149-92f1-15ae672520e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc2fa23d-cd13-4cff-8cbd-1f4119ad8d64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "5d6276c5-e6db-4c9c-85f8-5ad11a20d3d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f06ad8cd-088c-4082-9de5-f3f93871fdd6",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "210155e9-384a-4782-9c82-586053ee2af6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d25be48-90f3-4707-ad41-11e819108d9b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0792316e-781b-427c-9b21-3bc60ea08226",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "834ca4d6-de9f-40ed-a640-84b49970f439"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c17117e-fbf6-4b2e-bd65-f6dc6ceaf9c6",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "064b2a60-75b8-4cde-9557-a4680b94397f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "39c7428f-777a-413b-800a-5fd950ea9c7d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ce8c1a8-e060-4f11-850f-e44082ed0c74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "9cfcb27e-ea4c-4a9d-9f22-ebd19f1ea882"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "fbead896-c530-4538-a0b4-13bd610427a7",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ac71d15d-e74e-41a7-a738-317374afbbf2",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d76ea7c-d684-4d2d-bb86-b18c9edd4f2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fe546a48-05f0-430f-9fe7-5bd60f6f28ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a0acf2d-2972-405e-b102-bb556725e335",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1612b9f6-cc7c-4370-b5d0-00c172626584"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "03eab501-25eb-4112-b025-0e3bcf273ccb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "90deb02d-9f45-420a-aec5-9fa330fcee32"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "75152f53-a087-49dc-8741-f9c40aaa339b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c3919870-9042-42ed-897b-e2d3ac80387e"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "a58f99b6-d628-4560-914d-b0d152510de0",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "08b04131-49bf-4d0f-801e-984b6f10d8fc"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "df8d2f35-f900-4879-bc66-012e4d956d8a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "65277e99-4906-4bc8-b5c6-afac078caa41"
                }
              }
            ]
          },
          {
            "id": "b49cda3d-cf17-46ab-a69d-fced143c4dab",
            "name": "Positive Testing",
            "item": [
              {
                "id": "db63fdb8-d73c-4a52-88fb-5de9bac6751c",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0c1c2b20-fdf0-4965-a520-56f4f82b5207",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "95bc02a9-31a1-436f-8865-4324fac35a4e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d3fc242c-9d37-4e6a-b4ce-0d0e844553f8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "e3525854-d522-4a54-878f-f08eb516c88c"
                    }
                  }
                ]
              },
              {
                "id": "8383a5fa-0f5b-4852-85e0-73ec26850f06",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5f17a5b8-104c-42c4-8efa-21c9b3c81ae0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e248eaea-4693-48f7-83c5-fdc479c3cd34"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "057d3d53-e1fa-4c13-8d35-69a49ee7148d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "7c33d036-708c-4e21-a840-f2fdf41bf634"
                    }
                  }
                ]
              },
              {
                "id": "8b84abbe-ead8-4341-a4f6-a996180e6a65",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1d769d08-0f2d-46bc-9028-4b6dda07c1b0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4bb47db9-1e65-4183-8e73-653c58c7df8e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6674eba0-6a91-488f-be99-581f7d4dffdf",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "f3f5713c-3925-4ef7-90f4-3b944eca84eb"
                    }
                  }
                ]
              },
              {
                "id": "2c5d1673-1601-4fd7-be2d-a2d898cf726d",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e50e8d46-d81e-4775-909e-32920aa0154d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "53ac45b5-bd5c-400f-ae29-023f35bb5199"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f723bf88-78ca-474b-824c-3080f192d448",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "e418e7b8-c349-4781-9b21-ba66e5240f8a"
                    }
                  }
                ]
              },
              {
                "id": "8d93d7d1-3409-4f29-b4d0-68cbac8fafcd",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "492a9342-3351-40a5-b6d4-77a933263511",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "356b11e5-f42e-40f1-a2ff-4992a13f6d52"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e67dc7b3-2eab-4714-bcc7-6828692da241",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "436055ce-c9e9-49e0-9f1d-5ab3bc9e98f5"
                    }
                  }
                ]
              },
              {
                "id": "58a42bc7-88d0-4afa-8b6f-bc344c00c3df",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a56fbf91-4ef1-46f1-b333-bcbc36af8215",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "02ce3cc1-dc5f-4b2f-8ada-26fe8d8e48c2"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ee598036-0c2f-46e2-8e3c-ff85e27ba994",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "6d2651ee-95f9-4c13-a67c-786df6b8bfa2"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "98121d9c-431b-4029-8eca-16197de14155",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "b99e91dd-c9c1-4492-9d4e-c6a495a12b1a"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "c738cd55-80b5-4e73-bb1d-1a027d31eba1",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "cfc4adc4-a5c8-4e6b-92a1-0de1248a35f6"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9bc74936-f6d8-4cc9-ad67-7f569170f7eb",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "c0c6577f-c1ca-4e97-bd6b-76df98ed2c00"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "afd81a8f-bca3-4f3e-b668-72004941fcb8",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9a2dc1d8-42fa-4365-b300-1046ca6b7ccb"
            }
          }
        ]
      },
      {
        "id": "3fbe3993-85c9-4b36-bb2a-b985a0221d81",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "18f0e44c-6b8f-495d-addb-a9e9a8c471d7",
            "name": "Negative Testing",
            "item": [
              {
                "id": "8382b510-76cb-4926-ac3f-a9aec46e7198",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "6a6213b0-c200-4f8c-aa34-62874c781c1e",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5db859d0-abe7-4ec3-9bda-31c797b3335b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ce99490-d240-4cd2-a8f6-c8622957a1c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d74c309a-d35c-4712-8f8a-e85ccb486cd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "b1b22864-3fa8-413c-940a-92956c81ad7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85cc38ad-5afc-4754-87a7-81c8302d3bbf",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d3b4e7b-56bf-4b71-8fac-1f0abf6ab5b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11a7c5dc-d1b0-4560-8f01-15bb19b7a3a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc26e718-05c2-4dee-ba6c-51f9e149f060",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "34a3e2ad-bde3-4ae6-9501-863b0ee3ffa4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc9170dd-a5ca-40cc-aa9b-fec356557285",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6d054d8-3fa5-4087-8b7e-d7d01e732ae9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9fa0bc48-ffeb-4b97-ac9f-b7c95e8470e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d2c4fb6-90c0-4fef-8e89-9be4e1b1a750",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "adc84fb0-821c-4b24-bd8e-cdcc6be0c61b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b49a2e3-5650-4102-a2b0-99b6976dcd95",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1ff55ae-f6f0-4cc7-81c0-87ac7e7437ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0a79236-f2f7-47b0-a0bf-3c6bc7ba570b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fa7e45e-c0e8-45d0-adce-b6fcae0ec1f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "51b0f46f-3492-4818-a51e-11d213bed780"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8479f5cd-6677-4fa3-9495-4f7f6f1b50b4",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c2ad255-5367-4816-8d8d-19c8a187932f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b02ea52-fd84-4306-888e-e2d0894fc00f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2948dcaa-efbc-47b2-8f80-dff7ad11c6ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9375b1f0-73d3-4e38-8085-dcef103797f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24271a01-3f09-49a0-a019-be5aed8e863a",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "009adb4f-a7c2-44ad-9848-72b2f7b98ffa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "139d9f41-5b2c-4bcd-abc3-cc322a72a4db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e84fe0c4-c7b4-4b26-835d-b014260979f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "72b942a9-1e7d-460e-9324-f27f0740c133"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2c975a9-6304-48e3-b655-85ef9e7b2883",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39954c5c-ae74-4b10-9ac5-b16928b02b1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3349dce5-8de6-497f-831f-4e898e40e6e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5733b529-bc39-48e7-bccd-7094c2ef2afe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "6b6c4675-ad3e-4798-a429-6ba73e357c94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85dea16d-98a2-4e02-af49-ee9a73569270",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81df877b-7e3b-4c82-8509-be65885d6467",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6213a8d-cb61-4556-8d43-2937911c9ff5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0947ff3e-5132-4755-a561-0c94b685923b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "867352f7-8a8c-473f-afb8-f6e37426da60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d71fbde-e9ba-419f-a500-425686bf24db",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "286c025c-92ad-4d32-b36e-73bd6543abb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf288d94-5d5a-4991-b11e-094f5bd43a17"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6ca8071-08e9-4ef1-89bb-19f30bb1afea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "564e56f5-283d-4439-8e96-8a85702e6798"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8d4d612-f053-4285-934a-cddb369b6774",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9745ef74-d8e0-4391-b375-0a1a71f001ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3bbba63-2275-404a-93e0-3493802c532d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42005b6c-4cfa-4c03-a681-061e6c94087a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "02224f1a-6e92-4d45-a932-4661f0447d55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1659a7bf-6e69-42f0-8fef-772ab7996579",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba4bb834-2e7b-4c4d-92bf-083545d28a68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b522329e-df52-4f7c-8b3f-a255b451bfa0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcfa3850-cc57-42c1-85f6-8370cde8ea98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "176cdac6-2751-414c-8b99-f1f69a13546e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "086ce689-d108-4276-bc8a-3a081d27fff4",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f309c16f-e874-4e05-8b98-529315a1cc3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10b6cebe-ff76-464f-9831-26f20680cf4c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5540f9cf-50f9-4946-a900-c5910b4e3c0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ea353866-7173-4298-945c-86e2f0f61a3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfb21ff7-d337-4449-899f-a4752d7ff27f",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b939d67c-c9ef-405a-ae61-87771eb8294b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eac61c3f-38a4-4a8e-a2c5-4238983a0881"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bfd72ef-26b2-4963-93da-a5c39cb2dc7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "32aebefb-ef0b-4f53-b4a1-3177aadca975"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5692a86f-3b04-4011-aedb-f8f9237e0a44",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a6bca94-b567-45fe-9107-1e4538e069df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e689cb33-d1d9-4a43-8ff4-d544bf3fad37"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f678794c-b88b-4fb9-b5a6-169ac8d23b5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "37fc295d-f860-4b5b-8498-466912063abe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec041ccb-4a5e-41dc-b27e-8a6377b12a81",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2be121c3-607e-4dbf-bdf5-58b814f2eecc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e5cd038-ad1d-4640-8a57-32a97c8524e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "096475c1-ec5f-4413-a318-a9aea85e9f23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "d16e4885-f6f7-4fac-8153-f1e546d36d60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f8128f7-99cc-47ba-ba1d-f7cc253cc5f6",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f670d9ad-1805-40f8-be3d-3cad12929e45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff22436b-e591-4abb-8a4f-7731aff4e13d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "081a2f70-556a-4aea-9835-f14a236261e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "5d4b4e99-eb8d-4793-a38b-67e0492f266d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68464100-2765-4644-ac7a-92ec98302ac7",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd4034bd-a1bc-4db2-9f38-0cb16fe7fccb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "234e9d62-98cf-4909-b304-35f80f9a7e94"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "829924d7-00f1-4351-b53c-98b1990f27f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "a3f2b2c2-4380-4dde-b619-3bb8693422f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "568161d0-f847-4ea5-ba84-c30cb106424a",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "565697be-6ba8-4f57-81d6-ff27e6a95904",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e55513a0-d074-433c-aab2-08a6b3feba57"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a39039c0-4aba-47e8-a526-b1010a12b91c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "c8e76ddc-d81d-41f6-8223-70824d10928a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d9a5239-cd0a-4700-adf5-e98d3d77ad2e",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a50e116e-6b4f-425c-9389-2f3d13c4635e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "983cc1e8-98ec-4a12-9a4b-f03e0bd6cb97"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff851f51-0856-490e-a11e-da0f692395da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "714e5e76-77bb-46c2-bae3-990cf53619aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9202c1f4-d6ca-4813-9d54-11df6b6e82d6",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54622c36-f416-49a6-8827-f6a5d3ff4684",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca7b9208-0714-44f3-9d38-614aaffffab5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a36df3c-6bca-432b-9c7a-66a92a21dc68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a8c34d71-9314-45f3-b88f-5c77d86492b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "832e8770-ad48-496f-9637-9bebbf6c27b9",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19857a74-8760-4d5c-bf29-2122c52d29fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4abc806b-27a8-4227-8c48-be30e03a3064"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05cf8e12-4aa7-40cc-b8da-e8ba01d7f9ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "72be1878-c988-4c2a-83b0-e9bdfbef43ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e34d1359-8a62-4c1e-87bf-04675f5300af",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00f80b30-9b24-4cd6-8ef8-4aecdae447ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39dbb64b-184d-43e8-a2cf-4daad6064b97"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09fdadc2-d7e0-4486-961b-39e72250d1de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ed6f86cc-29a2-4528-ba2c-420970fe3980"
                        }
                      }
                    ]
                  },
                  {
                    "id": "715f329f-9743-4386-bc04-d964b32e23f1",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e66964f-6ba5-4940-8131-95b8c48ea090",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c799b44-40c9-476e-8996-80bf891b9a01"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5567d4c0-6ca3-4502-a948-4320c1cc8239",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "14f8c0a0-2216-4b8a-874e-7b765e33cc07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51afb203-8373-4df5-a73d-1eedaf30c16f",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97e49ca9-57e0-46e6-a039-1ff8b872664f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df1ec8f7-4bf7-4672-8e19-c1f6f845e42c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b273dc7d-9515-43d4-96cc-50ab9393dbe7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4ed4eace-3eea-460d-80d2-2d5e15865b92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5923552c-eac8-4023-a964-c92654d3db3d",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4626598-fd0c-4995-a1c0-ba6496dd1713",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd947083-ecc9-4506-a1c0-14d2b20de545"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5e02fdb-0e39-4e08-b1fb-ebc18a65075b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "88dea190-0a63-497c-ac72-317191ce2197"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7068c8a3-cc5d-462c-8516-83cde56112ae",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bda9735f-2fce-4f00-867e-fa7d9483aaea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9defeb74-6fae-4546-8771-68c058f00d0f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33760209-7a6c-415f-b7f2-71746886b599",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c8449084-15dc-4ecc-bf51-2e557d47e691"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08c68031-b9dd-4439-8a32-433715d6de12",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "409f941f-7640-4094-94ca-55eb301a4467",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0dfbd812-5af1-44eb-ba04-9928977acc04"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "236fe8ba-e1d3-4de2-93d7-287a9c3d0734",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3c53d8fe-ac9b-45ad-8e14-fb4aa86a44af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4002d739-70d4-4dac-b10d-17e2caca2e45",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8aca0bdf-f4cf-41c6-8615-63a2b0a5997a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17ec659a-dbfd-4d6e-a419-76a96422ad15"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0172b1d8-08ed-4c1b-8ce2-124dbf3db78a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "363a9ae2-e7e5-4919-80f3-2b0bc50d9f53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fc1bb5a-0b74-48cb-a1eb-f59afa1b65d0",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18d63d7b-7b29-43cd-9a88-1294f21f0c05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4ddec24-7841-4ee2-8bb9-6acf5725b2a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d11da1ae-e862-49ff-b592-e982af3eadf3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "59040046-98ff-4eee-8f0b-6b30c474bc66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a5f50ee-7b78-427b-998b-e30f2e7869fc",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e260001-2816-4b67-9369-84ec0d7e887c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9fcc5df8-35fa-4a8d-906d-6296cc85bc3a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19473365-408f-4da0-b2d7-f72d7a7fb0b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a4087626-d22e-49fd-8fca-d58286c75daf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e655d590-0d4f-43d2-bfcb-b401bf54e7b6",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6a0e458-2002-4a36-9276-c33accc180fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca1fcd2b-bca4-495f-8e6e-de4627c55840"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bcb0926-f3f7-4578-b909-165aca4d4884",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6887f6be-e778-433b-992e-e7b7ec062dc7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c99e4322-beaa-4daa-a162-07e6e663f8d8",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "469fde27-59fa-4f32-a830-4389cbdf11a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1de8f668-420a-41f2-a2de-7cd87c9b47af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc77fdb1-1970-4789-9b72-7f8908ac0345",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2d4ce3d8-4335-4c92-b081-2c68a233b32f"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "5dcd4ee4-a955-490d-a5af-35686b97b58b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "cecfdb5d-997c-43b6-a869-f587887e5214",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f384ee6d-8e2b-4e4c-b8a3-3f88ecddd83b",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "146f0913-9821-4ef5-ab19-19ea1c6aa811"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "74c83096-5ab9-4591-90ee-2c1c306e218d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "40816e0e-11ce-4148-b5f8-e48e5c8b7ff1"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0b4d64c7-612f-4e50-b7b1-4f23b47d228f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7c31a4ae-ffa5-4c81-8224-a22f7ef73756"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "3c62e9a3-b10f-4dc5-842f-126ac43f5cda",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0411b9f4-2688-4c98-8e5e-52f6d31f06c7"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "597cb226-0c20-4b82-b44b-9a738a40b315",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "e50137fb-a9c9-4dad-a69c-01fe2311394a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b0ce668a-8b0c-4873-85c4-84ace708cb87",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "5699c339-8d60-4d54-979b-cfd17cba8871"
            }
          }
        ]
      },
      {
        "id": "f38c6902-ad37-48b3-adf3-e1483755373d",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "56ac8a0f-4e21-4dcd-b2e8-03f17e852388",
            "name": "Negative Testing",
            "item": [
              {
                "id": "4fa92cd2-7ee9-4464-b298-a8d3bc3e2bc5",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "c5e0536b-6b18-4e71-9dc2-aa0b4be64d2d",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c00fe360-752b-47bf-a64d-8f383b8baae1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65e0ff6e-ca0d-4b68-95ef-883f48c984b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95a90794-d9b0-4139-baa2-b4d9db5a4765",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "023b2268-ed19-4d45-b8f3-4d165cef63f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "281f4acc-adf2-4568-98f5-c60bbc8b1ff7",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a35b442-7bcc-47c6-b6c1-49a25991f96e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21fdfb38-7f2d-4e57-9a8f-3fee6aa0b66d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63c0175c-cc2d-47f6-9dc9-5ebca6f573f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "83140b86-6d6f-4d89-a1d3-3019de9f3057"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4679fc90-9b29-4154-a006-68928edb784e",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ba7801c-8085-4f82-b7c6-3cececdea833",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81b67bd9-6fda-4446-b702-41acd9f8175e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ac7a44e-c0de-45b2-983a-d311ee22ed69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b61f6131-6a09-4863-92ec-60c288b9ad9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "507681fc-6643-47b0-8867-87108d006372",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c13c2b93-5867-4903-9871-f409bf7e738d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d16dafe-ad27-4bb0-895a-f25a0b981ed3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6b2b630-4821-4102-bcfc-05d60dd50a4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "68598814-a1b6-4231-9026-3d378a0a061c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3adcb6d8-3849-46d8-bd72-87587679bb46",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4de94352-2291-4bae-bf16-d7d3af1b94ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de3cb129-eca8-4348-96c5-c0ebf838c071"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21fd83ec-324c-463b-9bb2-3cd45e97e459",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c1d5481c-77bc-4d0f-94d1-497771522f81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b43085fe-80c0-4f4e-8f35-233603c453b9",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6cb56bc-d8cc-4b97-b4ca-8fbf05e627dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "344bdcda-19f9-4c1c-b0da-fdef0c2f084f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd6adbe7-3d10-49d1-8f0d-36d93166f80c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "9188f16e-aee1-48d6-9af4-5f7f737fe987"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3f29d7d-7a00-4bac-84af-946f9925cc8a",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2db23c39-d987-4fba-9090-626a3ba9fb04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e273b24-c746-47f9-b574-19bf25651289"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c588b25a-053e-48e9-9112-2636d57bf271",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "5997870b-6e13-4f21-bef1-616601c9b954"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cad4f856-1b0e-4384-9c62-b23934c0ebba",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8434a70e-f16f-4375-912f-d841972800ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e015a07-f739-40a2-9ca2-bacbbf47164b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a765035b-db6f-4709-add9-c515c9af290c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "524864c3-72e7-4fc0-99b3-de8c7039dbdb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7731dc3f-a3d1-491f-a16c-cfa9d9b8ee20",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a1c97cd-551a-4a0d-a03c-34d32334ca48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6037bcb-e4e7-4779-b42e-74ff145a792d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc7c51f0-974f-4599-9d5b-fc5a61e9f371",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6b0b36f7-b472-44c3-b987-9c9974b550f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2584bdae-9106-4cb6-aa7b-840534c7651e",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bff9c1a-9f6c-4d86-bc27-5f033a31828b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b73e4a96-33d5-47a7-bb02-f422a002bb6d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2bf986ea-8ef5-41e3-9ad9-c4494062a0f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2064d1a3-e669-4ef2-a58b-f1739bb3b457"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85ca82c0-81a7-4703-945f-1675038dd6ae",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b82e80fc-2238-48c3-a30c-f2e38cd19d10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ab53d26-9deb-441a-993d-0c4b3a9b0bf8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c448a82c-ca26-4405-a0f8-38dbb5edf72f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "7d212e8c-bef2-4c10-9a1f-5770fcf26f85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88445fae-d622-4ad7-88b8-c9a1d151237e",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8140e5b4-8a40-4c1a-a819-83cd859ebf75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "794ac6c0-5d1d-42c4-b85d-b6c3bb07dc5c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8a2578a-c68d-42df-b052-2e9217034f3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "45751b1c-3a8d-4448-802d-f600b33a2b1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9d6a598-fe1a-4321-bf30-f789cd40f032",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc292fae-45f9-4f5a-8ad9-f7935b236600",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c37a3c9e-9cb3-4dab-9c72-18143f3e3df5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99e15a29-c009-4b36-ab7a-4437154feea8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "94fa0978-2a86-441c-93d1-8cc043db5f59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fcd411b-c46c-4881-bcc3-79a16c6951d8",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "850d4c6c-5d3d-4510-9f3f-02dd60b953cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7acc71f2-a7a6-4e2c-931c-aa42d4e11e48"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f731c425-bad5-4725-a0f3-41d2b7e203df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "afb78b4c-63f2-4115-90d5-3e9d416f3d3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c540d90-3e85-4a82-8110-bdbb621bc895",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fe708aa-eb7e-44be-9b2b-aeb8da3d0e4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7bd1c448-f081-46ae-9af8-a63d96d7160a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc300ef6-a3d4-47dd-a308-2014477e1b3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "632b0e25-d754-4dcc-bbae-84c4036c5e0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "945c0ef5-98ca-4c35-8be4-eafaf00c7d17",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f88c0d1-121f-45ee-af49-b99cd7d585b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4192da5-027f-4f41-bb87-55ebb95c3aa3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd961933-985c-408d-83d2-b613afd5aec7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "04d5c2fb-d0e4-4d26-a94f-aad1ab6c399a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d8ca931-7481-4982-89cc-8fa0f29e4c6b",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49d1c434-315c-4b56-862d-46a07df4c4ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45cb0f64-bec8-49b1-a60a-3ade281c8aab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f295b6d-9d74-4a4d-aee5-bdcf881a3d10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "7ce230db-613d-4d0a-951a-eda47a062b6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b253bba8-9917-4796-b18e-9f6dab577e61",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17316e91-cebe-4d96-bdf9-6d510002d4b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52ba2395-1781-4980-90e8-2c7ce7097629"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7aa34b65-d60d-4aaf-9983-24cdaa017e33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "7c1682c5-4fb8-40b3-b588-172ed6ab57a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3dcbe3bd-89be-4d64-9aff-2ab6c6aa2699",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "659d0b00-9423-4171-8aa1-c480525ece65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb90194d-86d5-48ab-90ab-4e3ef7e62406"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4952a82e-e558-41c0-ab1d-ec672628485b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1ec314d9-6e48-4144-aaab-7e467f2c26de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ef7610b-3a61-40eb-b25a-ce5b8c90a01b",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6311e0e-a4a7-465b-b446-5b70993c87da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e938c25e-1cb1-4b33-97bb-945bac16fac6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2e3b1de-a81f-4e0f-95e1-ba00dd70097e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "423dfb3d-ae36-4129-bd3b-0f6fab684b90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "397d5f4b-4d4f-424d-abfd-ef6e8da1dafb",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a75215d7-bf4c-454c-8dae-b7635b1e1a51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "743fed11-44ed-4a9b-953a-40d13990d9cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4ce2330-917b-4773-b34c-fc8c1126db29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "931939be-4a20-4d94-bc92-91ac7d23c826"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9a7ca08-6351-4276-9896-bad1f7d8d035",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddf245ae-3e6a-4a6c-a529-129bf1ff522d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aeb18069-129c-4cae-a70a-15cea9ad26fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bed69a7-f0b2-46e2-9a47-a03f3176548e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "324358eb-943f-45ee-85b7-71a5a5136224"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ddc65345-73fb-4702-9115-76d7ca268f26",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f00ab670-afca-4b2d-8fb3-427fcff773bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58166671-867c-4b11-a319-55e60709c32b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbc79b03-25dc-40bc-9ad0-412c2566406c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fb2a9801-bd18-475e-abac-8f44af207950"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d08de4e9-858c-4724-8147-d2b6d38c0eea",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29d4464b-e70d-4db2-8038-35b31d69c179",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d80f6aee-e55b-496a-9ec0-760433fd009e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74daee95-a480-4360-bc5e-8b3e84bdde62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5cc7a4df-3e0d-4d04-8921-b99dd2ffa9e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8d2b12e-acac-4600-aea9-0884338c0659",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "104cecca-1a7f-4908-88df-6faeff6bf4ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7cbc84e6-83fb-4f33-b682-3f5511db8aa9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a34af97f-be32-43aa-bec7-fc70f420fc8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0e8ec886-7355-4499-bdc2-70faaac7e967"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e197815-461f-4893-9f9f-f5ffc950c8ae",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f362270-592d-41fb-a3b5-666857a91e11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "378d0bdc-94a1-491a-873d-b4fa609713af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc2f2623-aab5-4234-9cb2-e12bf51036ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "599e98e7-7aae-43e8-bc5a-f4544e0e3dca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd01d8ad-5793-43f5-ab7e-25d27a1e7c54",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24b8469c-4246-479f-a2af-9e8a7f8d9999",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "932d8e20-28a8-4e8f-9fbf-b4d242e4ba7f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71d61d51-fde7-4bca-84d0-9940f4e082c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c1a9eb69-2475-463b-9fee-dd537570fe3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39dce2cb-d368-4236-8c6a-fe6314a1f4cd",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac5ad75b-08eb-4793-9f04-51a50ffb7b21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62e1894a-224c-427d-a026-a2aea6b84d9a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b38cbe43-9297-4f6a-9684-da57935e0500",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d7a23c18-d7e9-44c4-8368-a13c9351c7c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe4c97ae-c564-4efa-8b08-0a46c30c200e",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7617be70-5bab-4b2c-8ea6-0a1fc211bf9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46a01e54-e775-4d86-adca-2238cdc323d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94d445d9-8739-4522-b757-f9ec3ecb70ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f381c270-15ce-420d-ac36-b30c29b3b009"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73a3cdba-cb61-4a75-9eae-505952f50402",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2816b0b9-4f20-4c3b-a83c-7926c4f2d862",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7bf34a28-6123-4aa5-a25a-61af96f65a87"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ef1852e-65ae-43f8-934d-1f5bfe47eed3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9af904e5-cbaf-4955-a416-ace6c2f1c066"
                        }
                      }
                    ]
                  },
                  {
                    "id": "823a7202-78eb-4cba-8b41-2daf36477c88",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f051b456-5566-4c46-b4a0-3ed93554897e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20902c77-3818-4d37-b0aa-61344f22343a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdac8118-7f23-495c-8d36-7185c78b617f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9c57a637-3d89-402c-8277-fef2d8e95718"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfcdfc73-c0b8-4dfb-98c4-ddd248d91561",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e2e43e5-5c88-4898-b1ab-e77f985f7a32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5baa415-8c51-43e5-912f-d9ca238c1d99"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26f5c9c4-798a-4aae-8fed-3b15e66912ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "52e1c755-45d7-4499-bf84-b9cce48fc48f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2caa1a2d-b28a-446a-9fc4-2d42868b4f1d",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd695582-1fbc-4e3d-bcf3-019bc89d16d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b0f36f6-268c-4103-a8f4-7da82a9b28a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6685c4d4-3c55-428a-b508-590c438215eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b1109b2c-c760-4a61-9b16-30d039affda4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "607c78b5-f6ef-4b0e-a5cf-38394418b69f",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebbae626-5b9e-4695-b39b-2eb1fee5af4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41d14fb0-5615-4f80-944e-a87c55bde39d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba552ce7-9eb6-449c-bfe6-e60a35292e5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b5bf9c81-84ba-4df4-bda4-22705b69a526"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d5fe2f1-b691-4ea1-964c-8feaf925bed8",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "639a8f74-cc81-406a-98ad-2daadb26a047",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd7a14df-f71b-495c-b83f-0293f208c93a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec89a834-4470-497c-a078-2e2996095222",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "99ba9bce-5b86-44fe-82c2-cc1231644dfe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87f25cdf-78f6-43e8-a221-95d47d7dd417",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87ad12f9-6988-447f-9519-cf66e4f33d1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4719c91-4768-4436-8537-0496bad366b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f825099f-1e2d-4d25-b65c-2cd0c4d8daad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "efce3096-e106-422e-8594-aca4056f7115"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fc4eb95-aaa5-499b-bdc9-bcbc0b2c8074",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4830eaf4-5853-4c03-8fcb-c05dee948d23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29af6644-ba3e-4fea-abf7-c7a52735e58d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a9e9f5b-d087-46b8-a4ce-6fcb8bb42938",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d06a92c4-c12c-48fb-bd75-86f8f83e1487"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "fcfcde25-8dfb-4bbd-9bca-34f9c4e7ab99",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "62dca007-d375-4f01-99f9-1839a4292952",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c00d05df-a635-438a-8091-91738e3e24ae",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "c49363a4-97af-4155-8c3a-0841a896e044"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfe1f6ab-4ec1-4225-9778-d1526e61d8d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8fe719f2-8212-4f1c-b98d-a8512cdbb5dd"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "22af2d49-117c-4820-b9b8-cf75b3855191",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5a4ebc9c-c5bb-456e-8f98-8f5e5a3d0ac2"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "78745c28-0039-467b-ae9c-236cf30e5f9f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "568c1233-e62f-42bc-beb2-39b915923d59"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e2633bc8-d1ee-4f65-93b0-1086c147844e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "443fbc37-7a84-4c3e-8188-c4b1b93a05d5"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e7d32c6b-a192-4fb1-a854-c88d38486597",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3de74627-7221-4f3c-9366-b12332f647c7"
            }
          }
        ]
      },
      {
        "id": "a8c0cd45-b593-49c8-8622-dfefa4c4b21c",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "24f0f380-8d2b-4aa7-8700-1b363b43f32d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "cd42db39-7d35-4652-b306-2e21c5860826",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "f41ed89b-d606-4bac-9330-f2528d1f070c",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f73b56e-8627-4017-a9ae-1fca5106049e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f756780f-51c6-4b0b-a9ee-13f3911cf4ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee5800d9-f9c3-4001-ad4f-78586e08628e",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61c8e1b4-c2c1-472a-8132-a4aa8553d66a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "878fa771-cb18-4f16-a85f-57d4e957790d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b0739d7-e3af-47c6-b749-80573679a4b4",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb0114e7-99de-4fc6-b92f-2922ac084e55",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "23683511-82a7-4659-ad18-b8f1b558febc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1d62886-f757-4e13-bd31-7ce0123bfd1d",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5baac489-34bc-49e2-a522-5682d1a141f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b951534d-b944-407e-82a7-199f570dad2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "470bea2e-5649-4ead-a951-ab01464d0695",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8befd403-dc29-4d62-b5b1-6eaea761896d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9a8e391-f623-4910-adc0-515327c99f84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd527b74-dbbe-4a09-8329-1003e8d9889c",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94747eb4-8683-45d7-8607-5df781eb87ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5926f8b-9bd1-49c4-baa7-d58d4bcf421f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e59ef072-3481-493c-ada2-ea7bcb4b6ed3",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a7ee646-4697-4059-80b6-39126c19b438",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e42e186-3e5a-4fe4-94c6-963c6ac150f3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7061c7f6-d4c0-4c67-9129-5c398f8a99a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc822a74-0686-47cc-b766-b6af2cf3623a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "154c50cf-1970-42d6-939a-790edbdb56e7",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bdb45af-86aa-41cf-b50c-562e7c529fe7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "af55e4f9-dae7-42ff-80ed-c439b3da7a5c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1555e46f-4256-4524-9240-4c907f10537c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b697b4c2-c92b-48ff-aa4c-ac46465656e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a4da710-7312-4d4c-afd2-54c34a434589",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3910ece3-a389-4c18-b823-c07cb62db1c0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0296f4e7-af2f-474b-8bd6-2f06bba7877d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3c284fe-f242-4b0a-9927-b1f174ad8be9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80f64cc2-3f77-49b3-a7f0-7c9419075974"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d35cf255-2acf-48df-adf3-73c947dcc00a",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7229d68-510a-417f-a8b3-b73699afdd43",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ebdebeb5-5cda-421a-a389-ec098baaca8a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c3caf67-f6ee-429e-a0d6-1cb334077e4d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b215daf3-4f81-43a6-98a1-5ba500e87810"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b70c407-6839-4117-bd9f-bfc3e51ec4d8",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41cd1e04-d786-478f-88f9-27e780519023",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d609812-2856-4b1a-ba4e-85e633fee594"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b97dc58f-fd47-412a-a341-f6f262f33186",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4cc88cd4-a51f-4fcc-8efe-fe970129ef73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a352c9d7-a60a-4c2b-ab15-7eb70cf3172a",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6738f388-4717-461c-8b89-f895847307bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c263be20-32a8-461e-b3e4-a5297a44228a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9457182e-6d70-4b70-93ee-b48f15d55595",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "652c216d-b2ec-4ee6-bbe7-c735ecf91415"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d921df5-05e7-4601-a9f9-f81d00b047f4",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20d68c6b-ff52-4255-9426-10191341d2c2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5b57b1e8-f89d-420b-8924-8e2cb02bec89"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dac446eb-7456-4191-bcac-81217e7cbbdb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "62f56b86-1be9-457d-9261-65e6913e4fab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68b6e0fe-c0a2-44d1-bd2a-f75df1f1638d",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffb9e5fc-beff-474a-996a-9e98d451660f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b8712163-41e5-4a69-bb60-c64c99982af9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "53712757-2ca5-4174-a324-bece50d8973e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "299455d5-1e62-4d8f-a1c8-f5a2e81efee4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68056124-2eb8-440e-99d3-74bea1421283",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c45eb5b1-5a36-46c8-a1c6-8b828137c906",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f86ebccf-a02d-44b4-b918-c77d641b7b7a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "67537aeb-70ca-49d5-8df9-1c3a5101332e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7db1b2e4-9be7-424f-8dc7-fa54da00889a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9cd8e67-06d0-4ae3-b7be-8e0014e73ff9",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1327cd9e-d732-4325-b4d0-174e1bfce7fc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "70af8baa-23da-4d33-bc3b-02f76c38857e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "08f6c3ba-263d-4b02-88c1-631af0db6c2d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c72f5099-bae3-478c-84d5-543e9a87d31f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ac6fe3f-2323-48a7-94a4-663f6be51888",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "605d220a-5105-4c34-8486-4d432ef09738",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd6d4a55-dcc5-4e07-bd23-c0529e9d8be7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d339485-964c-4a92-8761-1204556f3a96",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31e99974-3bc3-49f6-b80e-45a23ea9834c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f6e7c4f-800c-4b02-88f7-56be3d55ed69",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f22fdef5-fbf1-4b69-b533-0b751bc70b15",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c937e372-5905-44ce-8975-9ac52937121d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bd3cec3-f9ec-400c-8581-db2dc09c3ff4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2fdef0ab-85d5-4f0b-8297-a014afd5ed11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3dbb499f-30e5-437e-8277-76e288389087",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1ebd031-45c8-48c6-8ad0-160902c3dfb0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80853f41-f5e8-4611-a826-3963992af3d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "99b97813-7c88-4d60-a93c-a89103b704fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7513b410-9698-468f-96f8-e901082ae780"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30cd5a43-33eb-4000-ac55-c50691e5823c",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "625a70c2-d7ff-4a3a-bf9f-565a79356562",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cdf964a1-915c-476b-9686-7e12ed4b416c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0314cd09-de20-4ebb-8b56-2479ea34da79",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c95343ad-e3f0-4896-9b3f-fea149067d9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1aa716f9-da54-4d80-b0b5-3a26619cb31c",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77d7c96c-5528-4ebe-b014-d2bccdb1723b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9629324-af4f-4615-8ec4-e9dd51788ccb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4dc94a70-a83a-4a0f-ba1c-f5b4eca15b77",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6688b846-76b0-491b-9ee2-000e9d688669"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67d8c485-7f05-4614-982a-5e0cd390f09c",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60ad90a6-9869-48d8-b815-e2b0de91e065",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7031f25-4163-4638-99fe-341f20ee7dc3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec3ec231-ed3c-45c5-891d-fd049c88db1a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf7161d2-0561-4245-8ea9-43104181d347"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43696cbd-9ce2-4a03-aa5a-ead02bc853f9",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2a21b06-c10e-4df3-8fa1-bce37e4614c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f98ab2bd-cd90-4366-be10-d26ef227e6f5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "313c7613-5246-4dc9-b6f3-7b085625aedb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a129ce1-1c79-40c0-a0b5-e7ee9aff71c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9bf94c8-a047-4653-b563-6ec24bee19f8",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dba02744-2dbf-4ce4-aece-3f26d219c0b4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "21aa7b31-8a86-43ae-b9e0-243875ad2b5f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d1cbc65-c3a4-4cdd-848c-e9595429ce48",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3fa6dbd2-f572-42a8-bbed-8b8c0f324aaf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84992525-4273-4cd1-a0b4-1ee4df289e5b",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42bc33c7-8971-403b-a82b-3b280c4d902b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "92c3439a-9464-4cb0-93db-d320cd4f0074"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a1ded4f-caac-4b0e-b460-f16e5cfc7205",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3467402c-5542-4a41-8be2-74a180b2740a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd352bad-18b0-4bcf-ab0a-adc36969b01d",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "016cd3b3-cd98-4453-bf43-07bbf5371358",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7ba821e6-ab73-4762-914a-7cf4c89aa82c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c7fc4b9-0fe3-4bfb-b0d3-c4c285511daa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c2810e3-dcc8-4359-8d93-05958ccdcce9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9793049-1e10-40cc-af88-6e2bc6de2559",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a320a0f3-07c2-4ded-b4a1-1397794d06e9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d4c65d3c-11b5-4c67-934e-ea19f362f25c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "268f053b-685d-4922-af34-e1b19e0a2097",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9651616-b0ff-4569-b040-84ec6f537efc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f929869a-c3a4-4214-9e3f-e2411dca2f93",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "448f25ca-1c7a-49bc-9605-b978478f1d09",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "084a8eb6-0087-4eef-9fb6-06e75b97c068"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f58073da-f1e0-412c-b1a2-399683c105cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38c01b00-05a8-4113-9fbe-b7d185960af8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b977fec-3e3c-4724-beb2-b5cd3837ab95",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "857245ca-0595-4d02-97f8-c378f28dde84",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1b671b40-be48-4ef9-b2d3-1f45722182d6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9dbdb7ca-873b-4b66-b866-b5f92d79253f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3dfb47d8-44e5-44df-adb9-730460e2174d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70470f26-cfe0-4831-b37b-d69ccaa8f067",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b003c7c-de30-4914-970c-4d0df77eb633",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "855944f6-81cd-4297-8bb5-c70115de1035"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9816afd1-972a-4518-9a49-8558fd3515f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e81c200-7ed6-42ed-99cf-18907982a912"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c2800ef-2038-4513-88ee-4a4e3a818b4d",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a9d05bb-bd3f-49d8-a4aa-05a22b119406",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "273ef28d-54ba-492d-b6ee-7757c9b877b6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a159e02-1916-46e4-9748-db4e59b10b6c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "911ae0eb-3566-4289-a983-5c3d63fd4a5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5824545-1027-4db2-b820-d4b327c96791",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39cbe974-bb3c-4533-95fa-5b00a207d0c2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7c4bad69-f210-4f99-a0ef-86a866191b16"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a089f2c-4a43-410f-bb29-164d34b66dc0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bfc273f8-ac90-4cf7-a1d4-175c236958c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0332e7c-b228-43e1-b68e-8e3964ccbf73",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9d7117f-cf85-4d7b-865f-2682b61f9bab",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "62b33473-7e60-4c00-916b-683da0b3d731"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f86a3d0-f2fe-41f8-ae8b-c27e9d1a23fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93f4f7b0-8fb5-4946-ae8d-3c26032c2e30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "171de940-db8e-455b-bf47-203a17b21441",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87cdf169-86e9-41dd-bb51-13dfd41cb715",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "09ea5ef9-20df-4017-95db-cc39d57551db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1f64bb0-2df3-4366-aec5-d76035048b07",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "326bc0dc-efca-4f78-9f20-5762a9047ab7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abf28989-a747-4d02-bc79-4b41d73f07d9",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dadb76e7-187a-4855-af62-4956e9f2df20",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5e07de4-f8a0-4765-8e16-75f72e53189e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "63a66c00-793c-457e-8219-7ab11ea528d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01970b18-371d-4123-b864-873c8185b08a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d12803e7-181b-4371-bd8d-bbc8a6603152",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbd85604-b0d1-4022-a6ce-5cce72472770",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d558413e-744b-4cde-a301-d39d372ceae7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b76f1f2-f83d-48f5-82d4-4f604dd719ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f30523d6-6b46-4000-9c73-4c7d8174baf2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c33bcbeb-eb17-462f-881d-f7048793a506",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e91db76b-a970-47dc-b4b8-fd8ff0ae8dfd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f23091a0-6dff-4aae-bef8-d940247b343a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cdfe1b6-9cf1-4aef-b243-290a29b44e67",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8abc25a-4004-49b8-b4bd-c62f3f41eecc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9af6e879-a295-4ffc-89c9-623664a19f84",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91f59cb7-1dc9-422f-9049-8df7767dbab3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f351e645-ce65-45b4-ad4a-0fd8f1bbf9c7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfffda41-4e35-430f-b139-74daae460789",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f71b6a2f-8af7-4db0-97ce-6e7c77431bfc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "397cdf9e-2699-4920-9d22-f5750a28c749",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00e8d07b-95cb-477f-811f-1e827f40a9e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91cc5ca4-2449-4a43-93b2-279c09927160"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "97e6ee1f-5ae1-4ab3-ac5c-40160658517c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4a80e16-a12a-49e0-a804-fd4ce28470b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e4861f1-3d76-4adf-a173-d9ea4fc14e0a",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5e9f67d-0c73-417d-b565-8b35e2bad029",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17e63c1c-3c14-4aa8-8a85-196c86407902"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a34ddcc5-15d1-4e84-aef9-e9b1392bd0aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79c105fa-6d57-4f93-9792-5cd014166276"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85ca9ae3-bc16-4bda-af40-ed8d0ed19c1b",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eca13ddb-7a4b-45c7-86c2-e426dd9532de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e030d46-daf7-4877-a60d-866295465483"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dec3e7e9-a588-4f28-ae0a-223bfe50c774",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8075d5c-1108-428a-8466-31a84c30803e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83c48d27-9fab-4ea6-a3ab-b83788b82fdd",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a6ea531-494c-4e4c-88f7-087dc6e1603d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53d537e7-c590-4dad-8db5-4a8aa270063b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "01c0dacf-d630-4ea5-a7e5-34e2bcfc235b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8bc6ae4a-77e0-4b73-b3eb-f4ed2ba01938"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd352ce6-955e-4ea3-8892-39493dd78020",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc2c710c-647e-403d-afa7-7cdfc8ca84b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ae53caf-21a8-4114-a5cd-31f5c70d7d32"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b107310-aa98-4180-95c5-2c0375516f5a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f53b6fc6-0ef1-4bab-a509-6e2bd5b18a24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9732c719-e508-4747-bc59-9a527b029a47",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82518865-1edb-4879-863f-9eda9f1df748",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a4e756b-98c8-4ae3-bbaa-1c3391c1a539"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c299bf3-ba05-46f6-b853-4d2e9aae47b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3f41341-8302-48a1-9a90-7de5acba6957"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75183e04-c3fe-45a9-b65a-7f41b151f3ef",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0be83142-0d75-4e8d-9e3c-c6a2e5c7dabf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6ba5c7b-8a10-414f-940c-d2ec346f38a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8fbb71d-9636-4fe5-91fe-56f1fd37895f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c42ad878-3574-4d6a-bc3f-f91f64bf8ba2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f865dd1-a217-4041-ba76-b924cefefb0c",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28655c56-301b-415c-9680-109d2088a508",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7e5e5f3-58a6-4f06-b713-84a62f0eaf81"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8c9131e-4e47-4211-b398-02c3684ed938",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72ddf5f1-5d13-4f89-9599-df55f44b66ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84858b83-6723-4cf9-833c-dd80a8d0832a",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d3c1254-51ce-4e5c-a429-4d479dbdf27f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98fbc602-eb1c-4c76-8575-4016268eab15"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecc6f7db-ce74-44f3-8f3e-3c2b72e660c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df30c964-4dc8-4598-9385-327314281774"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c775ed7-af9d-4527-ae4a-aed4ecce1b67",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37aa2609-96cd-49ce-a2ca-34db31e9f40e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c15768cf-c30f-4e44-8953-dffdee6ac6f2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "32173190-35d1-4626-97de-a35810813c2e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cba8e24d-b1ef-47c8-b42a-5903006d3e2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "055a45a8-bc1a-40ba-aa2f-308053cf922c",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef9d9488-91c7-41bc-866c-486648ef9bd8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2cd1226c-ba36-4dc5-b3bf-8625724ada30"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "828ee05b-8d79-48d5-a4e7-855d7305325e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b028bd5f-7170-4128-8ed2-736cd0edc587"
                        }
                      }
                    ]
                  },
                  {
                    "id": "959c9a19-adea-42a2-add1-9320b8bb12ab",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3af91fe8-4a1d-421d-9b95-93250b6415a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "273d8bf1-ca7a-4674-b8af-50ae1e537e90"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef9b441c-3b4d-43cc-8712-7a53d7eae9c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21598644-9f29-415d-94f4-64b38065f386"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52cf452c-0936-49cd-a573-2a0ea77f9650",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "143157bb-1d4d-4bef-996f-f1a0b63b8023",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c4dc92c-dac2-4037-bf56-29eaa660803b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "170afa80-534b-406d-824a-99fad4a24ba3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47531229-01c1-4405-aef2-11baeb3eb27b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6f59828-96bc-4f7d-bf62-1f8b39e9d7f8",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a208009-a12d-4b05-bbd2-a5745b158104",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29dc53a7-54ae-42c1-ae82-a8db189af8b5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7146dbe4-1b82-40cd-befb-e5b7349af89f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f6c5964-69a4-45eb-8032-0c5799b385be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3db3f986-68a0-4e36-a8c4-a7dc24ba7b8b",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86f8ee73-6063-446f-92bd-00fa11b3b15a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a731df80-eff3-4c96-8798-18808be110e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "78363c80-4711-46ea-8e19-7f218e42f8e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2252ea36-73b0-4790-b688-10cefab31a79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2559e5db-24b7-45eb-a72d-3b697ce3eb6b",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c93cdcfa-e6e8-4f21-af81-39a631a30088",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8defab6-3335-4d2c-ba8f-a153aaac14f8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8243717-a570-49e9-ae12-f951fcd89569",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "037f2b99-d654-49de-8272-e64967803353"
                        }
                      }
                    ]
                  },
                  {
                    "id": "629f8c0a-f6d9-4b56-883f-750dea248ea8",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c928f64-fd5c-4ebe-a29d-a140a1214c54",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "061d39ab-b985-43de-b21c-fdca66da2e4d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "44ef8b54-d4ee-45f0-a792-f52b351b8099",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33992c86-eac7-4bc5-b134-2ff8884017ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af216d9b-e5fb-4a8a-8b72-27c757e27f06",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4dd44c66-0926-4464-aae0-8384289244de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "feb904fa-d29d-4b71-b953-b61f5f6ad853"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "08befd2e-956b-4c50-a0e0-53d16a60cd12",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6de4c243-6998-4f3a-be10-474d66062c76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "724c4af1-3579-4452-b52c-ca9f5d6b5cd1",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3aa68f36-df8a-4af9-b67a-834bdbab05e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e5a08be-86f4-4398-9ab2-54592268527a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7648893e-26b1-4dd3-a1f9-ac720d2e4dc9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8526dc4c-658d-4c50-b5a0-9c01a5b35fbb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7ae3901-fd53-4588-926f-8c3ab5009567",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c17acb7-c040-4f26-9899-8fe1b2778d8b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c188b4e-971d-42e8-95c1-8d7ac3fa714e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b25b2ece-ab9c-4c8c-813f-00bc5225990f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1e02d2f-58a6-4c3d-8ff6-87c183d0cf90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4956dbdd-1946-4a37-b901-237eacfba04c",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c408aeb5-2b70-44cc-9f10-d829f1bd32ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db89b4aa-1506-402c-bfc6-7d87151e0530"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa9a77c1-d72e-4055-9deb-017bda802e4c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a314072d-34de-4468-a890-2a5c9f59faa5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29e40369-b522-450d-adb2-1ae995423c58",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbebf25d-5350-4f5b-95ec-4d843f8a23fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f96fe3a-bc6a-4c5b-9a13-d429a2a9f743"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "404b8035-1e83-450e-9d11-3ef4c1cc7a4e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3c562cf-c31e-4ebb-83e8-7acd333eec67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b00795e0-27d8-4571-9421-f7f14ecc41e6",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97c9a6af-10a6-4b55-afd1-60ecd598e1fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5de72bba-88d3-4693-ba9c-0424e315d86c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e4ce95a-4d83-4d43-b13d-1f181bf08e4e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa66b093-ef29-49df-bdf7-7a1c98c86762"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c5c04e7-7307-4fcf-81ec-a4d1ca666e4f",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fb4f72a-c071-4e8e-a5be-4f27837cf5df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dace5c5a-23a9-4710-9199-f6dac80ebe1a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a72e897f-a52b-4c6d-bc18-25a638c3b063",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d71b000-dab6-4e8a-9309-78c970ff59c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f31e815-e552-4437-8c98-2d38fdea8631",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dceae33e-41b8-4079-b8f5-3c821a5223a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6671d55-a3fe-4e45-93c4-60ecc333dd92"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af301eef-00cd-463d-9da2-d65a316fb281",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44c2e1cb-9d37-48b7-8038-e4572d956696"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8af7675-65a8-4764-938e-3c9d22a27747",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89e03e2c-ee69-44bd-8ee7-0ac215ca8458",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dd096470-05a6-468d-ae41-5a02dbb13031"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe8df01e-aab1-496f-8e09-9a1b7f27c769",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "befd1f2d-91a2-4f6c-aedc-f80297fc2fb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3204f03-daaa-43e2-82ea-83a9c4e43392",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6b07fcb-0ceb-423e-bb45-706e0d637a87",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "73dd7ee7-6dab-4b10-9b98-2757dd6106da"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1618bfcd-3dd3-4368-bd0c-6b8df1518e5a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa9332f4-cca0-4927-9138-961557a59585"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbaebee8-7c8d-4b44-b400-7ac73b29475e",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "543cee51-f54a-42d7-bd23-fca38f6ae09b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "104c6488-24b4-4483-b763-bb5f6e8bc328"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ee6aaba-627a-4e85-b9b3-02557da73417",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02cc8f35-1fc7-4c73-8257-c88e7e534a74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ab00899-88f6-491d-9e86-ff87c87916aa",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79ebf7ee-48e0-46b8-a6b6-944a81530da6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "12fbbcdb-d74f-423f-b9d1-498aadf47926"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a9d2700-05c4-4025-99e6-50126d119425",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0da8a793-6870-4395-a47a-60c401a54dc4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60fb9602-8779-4e7e-92b3-df7461d212f4",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81155b47-4134-4dee-abaf-6e3a7387ce1d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fee1c8fa-ae9e-41b6-a9a3-842ea91e6bf4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "44efe0fa-10a1-44c3-8233-5c26a3844a4d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2c57276-a469-407b-a3ae-14396ac05892"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11a08847-d683-4c87-befc-2f66a2d5663a",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2288f186-024a-4876-ae12-480b72aa1d02",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dca254e1-7202-49ca-9f42-52cbbcbb94b3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d63c6dd2-326f-4137-8687-6124735a6d6b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86731f76-af97-49e1-846a-d1797bf59d06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe7cdb3a-60c6-470f-9b23-2a6dd473d4a3",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5289ce6-0ddf-48e3-ad71-d3dde8ee980e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e2d954c4-19cd-423d-bd3b-1823c8252377"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "108736fd-8489-4460-b402-1c49dfa5e6a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71c88c12-3e49-438e-8ed5-b43c34cf7e63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "245de98c-7763-4b13-a438-0886e51ff4d7",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ae8740d-a733-4f33-ae97-6fbff634bf16",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2fbebf79-efd4-4a54-bfcc-e11d14fa3951"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a65112c-086f-4e0b-a26c-f3357f3f12df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "199db187-0e03-47ce-a17d-c4097b1a1f18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0885a0c2-09d9-4d70-b42e-d2088d76236d",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f0910f1-6495-4881-b185-43843d482986",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a7ffb6e2-5c99-4f92-942b-139b985f5b5e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d33f1b75-96a6-4003-b35d-580c54c1d431",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c555e2b-54d3-4e94-ac31-f288cc6675fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5133cd72-d21b-4960-bb92-095be62d998f",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abdfb13b-9dae-4d28-9e8f-6de17175e693",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "81393690-2450-4558-ba06-82279d35ddd3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ca0022b-da2a-48ed-af25-e1d4fb034df3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bcb29e05-ff66-4ed8-9fe3-0e663a139f81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3897590-d0d2-4ff3-acb3-93640e577d72",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "031b40f4-e4a0-49cb-b3b0-b19e70a8f474",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "79ad7bc8-071a-47d7-9fdf-6a1cf8028909"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d52f6788-057f-418d-a404-ec162f4cfa6c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "efea7f64-3b44-481e-8a78-0cfebaa709c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87f88174-973e-4099-8a65-760802109fa1",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34fe0105-2fb2-4d57-bd2e-0afba21ed66d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6b696ef4-d816-4ece-bd88-175dfab155dc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffca08cc-fb05-402b-b6a3-2d59afad7357",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cded554a-d15f-4058-a729-7b6ecb82ea2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fe35184-1d39-482b-bfec-9732f84a8fe6",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3792bdff-49fe-42b3-9de5-10ab02b30b2f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6724a081-ee11-4964-9618-02152da9c546"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "83ba8326-bec3-4984-8c1c-d599aa2e75b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "996941df-1a99-4ca7-8896-c1584b0add58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8cd09f7-db5b-4b0d-835b-1236970784d6",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a48ae23f-40d4-4956-bd5b-4316ae04afb7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "afe0ce3d-a7e0-4c63-9844-e0fc73155c2f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e44b0fc-fb09-4ce0-a5b4-56e6d3be0cff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d836caf1-b3f8-4441-be97-b28796621228"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10a3bde8-37bc-45a6-9e15-8d450c9dab3c",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f8daba5-e3ba-4068-bb92-25e32ac557b5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "968f2c58-d726-430a-a59a-71b36d95c287"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1af4c8db-a0e3-4ea8-a586-09ab69393415",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba73b98a-158a-434e-8ca0-592df6be8ae1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a85fc298-9fe4-47bc-bc48-4bdc15cbfe34",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f10e9690-54c4-422a-b465-7731e1c55f40",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f78f8861-597c-4682-ab7a-861221aae09d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "26620139-215e-4866-95bc-5bd7664baf7b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1dc9862e-95f9-45b5-9165-fae0df185003"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d0fac4e-2fc1-4b0b-87fd-9cb97a5dfca6",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "536bb4bb-18ca-4bad-a9c1-6323a0fe447c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "280c9ce9-8a52-4f55-8fd9-75f71666672b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "99184e61-8309-4766-8b98-bebfca958d9c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e383aba-bb70-42bf-b404-98032e78c30d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4855f7ae-9525-4c33-a2d1-fba3e4433bc5",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07f22a13-9def-4cfe-848b-63434f608880",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f8f4ba4d-ebe4-4ba5-bbe2-856fa44a256b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "90f301bb-d3c9-4748-a3a1-ae9aa3f07126",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "806bcda9-aff2-4371-afe1-ba7c18c4f78d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "576418e2-6872-474c-a853-495bf6cee3a8",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "228c4dd3-792f-4a58-977c-ebbffbf66e7f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2d8427de-bffc-4eb4-bd6f-6a7d189672db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "244a9418-f16d-40fa-a7ee-c894d2ac41f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f916aae-0fc3-41e6-bb5e-36a51c012e19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91953a2c-1560-4f07-ad49-6253ca002bab",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "796f7601-a94f-4f02-8d5c-44394fd7b6c5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "06b60a98-6c9b-4a10-a803-3c03040c8d62"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1d3dc1c-fa6b-4494-8922-98a0a46dac58",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45ce593e-d2bc-4715-813e-8643a5b4a704"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ca90b0d-a1b0-4a50-8873-a03c812f1300",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36b99d01-4e57-45fd-8401-3bb427844900",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d1553be2-880d-4986-a516-6cc125ef9d4c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "55bfad61-ccb7-486c-9562-d62b5b382cad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99c30d90-558d-42f9-b820-7db3cd049591"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b5981a3-5bb3-4eb3-aadd-0dc86a448763",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f88f10da-f846-4ec9-877f-5e6b8c140689",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8e65b03a-e8a8-402e-800e-a2c1f2964738"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e67fc40-0539-460e-af67-c6f9ea08a48a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1dcabf4f-faab-4651-a2cf-e6e5970e919c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91cbadac-7831-47c7-b4a8-48109c815c8d",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5db81238-5fc1-4910-b018-508898d07b72",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2beab075-d449-49c1-a9f7-c4bf69cf9eb6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "68e330d3-b975-4a70-9931-b699df6e0d2f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f480acc-0cee-4887-bcc9-0ed09d2f4fbf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ad92748-976d-4e20-8f87-5d86731aa7cc",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03587041-0a90-4e5f-9bd0-c8c34db605f7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7b9c8cb4-b214-4ebb-895c-f7be6254b1e5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "22d0874b-1cf8-46f3-984e-a5ce73109151",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b950393-7d0c-43cc-9076-b637723279e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3661f3e0-ee39-42ce-946c-70fef4e0d3ef",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70fe553c-38a0-4668-a3e1-77b21f779507",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4b584538-fa1c-49d0-8b62-eae04684f128"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6cee40b-bd83-4699-9284-e07da8fc0cba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1216338e-827b-4fdd-ab65-c18f780002a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b8e5096-b5c5-49d3-b9a5-255eba19d6be",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1806c89-9f33-409a-a1f3-58a415b7c484",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8df75eb4-38c2-42d7-9380-69aa2f9769a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8ed7f4d-006d-40d2-a643-7806f4eab236",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a91938da-ef4e-45cd-acc0-e7b230b2a05e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "077021a7-833a-4201-9d19-e3604843c4eb",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbec467e-b98b-421b-b52f-55076c3d1937",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "383642c9-4123-4677-8405-37d8f9c9cee0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc40bdb5-b48f-437d-8361-44f5b2a03b1c",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc5a733f-a034-4937-859d-0308feb92626"
                        }
                      }
                    ]
                  },
                  {
                    "id": "080047f1-7743-4e91-a572-85f521370b03",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f1b1453-502f-477e-b51b-ccb6b15ffdac",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1479411f-1e29-47e6-8156-12926aa42527"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c80dad8-4da8-4481-8076-7ca7a108a053",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc53fbba-7359-464f-928d-8d9a7643f064"
                        }
                      }
                    ]
                  },
                  {
                    "id": "970e7b23-ae2d-47df-95cd-7975645635e1",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d059995-0a88-45d0-9aad-38a1dc4b42fc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0fdf3265-ca01-4af0-af11-3b26cf941f3d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0cd2431-59d3-4733-97db-3baf79ff5d53",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0466ce5-7f72-4763-863f-4a122846b9a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d0626e5-cb7c-43d7-85fb-8e6f3d502042",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c6037d2-b08b-4af6-92d7-e85ea523f3c7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b5d83807-c42a-4ad2-9218-fe3cfd98119a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6bfab65-72f4-4c83-8652-eb83e413c761",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c626ed98-edb9-4ea4-9694-4f9ad9312fa0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4197ed4b-f1a4-4699-9aba-4151502e9c85",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "387fdae9-44c2-46bb-a4d3-83633511a88d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "217d7a84-f214-4786-88b1-d116d9d4e588"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb3d3da2-14c7-4868-b002-1515035f3c5b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25db41a9-78ba-46dd-b91e-2dcde65ce3ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eea6489b-04cf-4dcd-a2c9-30439048e32a",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1db09aa6-b51c-4d9f-acbb-6b18c47a8f26",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "142d121e-8bab-4bcd-85a7-bce3c509df5f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7179a3f9-5465-4d62-91b5-256a8694df70",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "597400ac-9542-4f60-8173-1a5eebfaf2c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e03f5e9c-4bb2-4d70-93f0-299c48f7be2a",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8222688-f4ff-488d-8051-730de9110f39",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ea9bc6fb-6ad5-408c-b04c-1fcc7ec85dba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "587ab9b2-20c3-4211-aa4c-12e289d53459",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0eb37d8-ebd0-4d4a-8a88-80df0be91d2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "732fcfcd-b4b5-4140-9d94-a78e23dabd81",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a4199af-9239-44f9-9492-bfccecb7e92b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9cab0af9-2bd4-4d7e-8e4f-d8d94009362b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ab64c4d-29cd-4f1e-8ab7-31667ae70f14",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "66095821-a826-4da1-a7d1-1ef712d7e90e"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5fea5462-f23a-4250-bb76-d19deb8d9258",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ef9e2733-8c4d-4d32-99d4-18079eb2d4eb"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "bb22f6d1-678d-4ef0-b569-a507d4fa234b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "141b8556-7e24-478a-8a2a-0583e90c564b"
                    }
                  }
                ]
              },
              {
                "id": "52e5abe2-b3ce-4648-b1fe-ce8052c69176",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "4802efa3-ae86-44bc-843f-dc45b3e1382f",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e64e57e-189a-4d86-a581-2be6751c058d",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "a86a62be-b07b-4e36-8208-ddada3d0ef26"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "34fa6356-36bf-4201-ad33-eb5a17750957",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0ad026fd-f857-4394-a0e1-41d92424d29a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2c512e18-4df6-4c5c-968b-5d87566e7312",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e12e9393-90b4-4833-8e99-d480afcf5f85"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "731fc8af-0d67-48f9-af9b-d418137787a2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "55323309-281c-489d-96f8-58e1f28dbba8"
                    }
                  }
                ]
              },
              {
                "id": "d0d9938d-0034-4684-a001-8ea2abd7b6fe",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "3c527634-57a3-4692-92b1-ca19504ae579",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f842ade-af3a-474a-b637-79de625fd088",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "97d755b7-1c35-4965-85ce-127035d580c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "679f0201-6d1e-47ff-9831-4bceacf6da71",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2e4bdf3-aed1-4041-9b97-1cc4a8f64d3e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "640dadce-149b-4023-82ca-599ac055a94e",
            "name": "Positive Testing",
            "item": [
              {
                "id": "d608971f-4e80-4d35-a590-32bab3a0a6cc",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "050214fd-1106-4340-908c-b4add6294082",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "ef69e791-6c74-4958-9a15-6eae2401f2a0"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1a455db2-d68c-4dc4-b3ca-6314eac5357f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "679095ec-1825-48fe-817c-84cdc670b359"
                    }
                  }
                ]
              },
              {
                "id": "312f0476-da25-41d7-ac0a-69577faf23ec",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "014d595e-33bf-4ea8-aea0-2aed3801cc09",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "659fce46-91d5-45ab-9b18-2ae68d4e8526"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c8e9f641-cc86-4788-9872-b3b3773b7adb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d8684b4a-7daf-4681-9a83-9a60c3a83ffa"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "224079f3-9219-4e83-aa12-528630864f3e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "f3666c11-b447-4dd9-8060-fd1155716134"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "135a337a-38d1-4c7f-8dec-f7081ea71f11",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "143a367c-0197-4a5e-b2d9-dbac7f59a069"
            }
          }
        ]
      },
      {
        "id": "12741f43-99e2-4cd2-bf13-d528faf4c659",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "79e16053-49fa-4362-a8ad-21a37c4346c1",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5891ecd3-d90d-465f-b0bf-98abd98bd504",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "275b8c78-6352-42b3-a23d-ac0a4919129f",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d3bda9f-1067-4c7f-8d89-6bfbe5798dde",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "b3d320cd-36c5-4225-ba0e-9a8cbc86d095"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "884f1b6e-dcff-4794-8d07-8fe332f2623d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e3c8afcd-72bd-425c-9eee-59a411bb7587"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fea4588a-f594-4516-acb9-eef79a50378b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8539f1ea-46f7-49ef-9caa-52bbcd8dd5eb"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "1a0bc9c7-059f-43b8-9046-506789ce72b0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b13d0066-cfc2-4a37-8431-f1e5b7dd6a6d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3f0ff440-5dc9-48bf-bc4f-53adaa56095f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "fc9675d3-467a-4cf1-ad73-404d2efc9eec"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6dd1125c-1090-4b7a-99d5-81d8000614f7",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "7b397d06-642c-4c8c-9294-6eee139c9772"
            }
          }
        ]
      },
      {
        "id": "4ab39ea2-86f3-4479-969d-6b3d02b01657",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "8f6ffcd6-0782-488d-aa7a-f2aab4fd171a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5bbe40d5-b20a-4288-b055-612aa3014539",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "aefa78ef-d77a-43b6-aeb7-dd446d8942be",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db73fc35-3406-40cf-b6d7-71d220dfb683",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a8ce1fc3-b6f0-4da1-a250-9c3f57e312d1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "80dc7e40-6483-4c5e-a526-0c0b888146c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "38aa8b8a-5c25-42d8-96dc-79cb33ad9611"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "54cfed93-1d2b-4336-8938-67659cf29270",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f6ff6699-1e33-43a7-bbdc-f14fad7142cb"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "56889db5-d4ec-4e18-bba1-49d7ccc3d0dd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9b07bfd7-cb37-4162-9076-3cbad5382b32"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0f174db5-2fbe-4f0f-aca0-b5ac0f2780ee",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "c5eefd0a-19b3-4e41-8bf8-3c70c5086f4a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "dc60a730-9fe7-414f-aacd-67b1d259c63d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0c075737-2cba-499f-9197-7b535d64d042"
            }
          }
        ]
      },
      {
        "id": "c32fe3b6-fe6c-43a7-9c7d-673494165c69",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "cee051cc-f952-40c9-a8ac-3b9edb582796",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b9051ce4-06a4-46c9-b2a4-fcdfa36ac7e2",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a7a0a9d7-adf9-4d32-89cf-fb0b8224099b",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "905c39a8-4700-4642-a522-dc06550a0f06",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8a104f4f-ddc6-4a1b-9db6-28eb16352f78"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "735ce9b3-723d-4cad-9632-733adb51824f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7d5201a2-85ff-4021-a000-4ac818e6ad9a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e9f0062c-48ec-4f42-a7a3-df7cb58759ba",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6752164f-36d6-4ee1-9a1a-4c8c323e1f07"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9a624d37-eefc-4b2c-ad4b-84011b7ae7eb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a83f058c-797b-40c1-82b8-e0017550cf3b"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8c82c35f-d0c7-4693-a2b5-84074965c534",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "878a6541-7b58-4344-940d-71e9bfe32fd7"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "95bf46ea-ad2c-430e-94cf-e2c644896392",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d5842722-988d-44f3-aa85-b38c310f6f88"
            }
          }
        ]
      },
      {
        "id": "f374a001-67c1-4b41-bbd3-b1205cd406e3",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "400a2030-bb1c-493b-bedd-b4fc18ba7e5e",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f2550dc6-be26-4c11-a7e2-ee3dfb342a90",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "c67755bd-4f51-4237-90d9-c6fd4651b7cf",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "94b37496-2089-486f-baa8-7b564cd51c66",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "27319ba6-2348-4fbc-9651-1d705545dd6b",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2083,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 284,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 570,
        "pending": 0,
        "failed": 51
      },
      "testScripts": {
        "total": 1046,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1037,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 118.31690140845073,
      "responseMin": 7,
      "responseMax": 2172,
      "responseSd": 317.8409530008422,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1694565169339,
      "completed": 1694565214943
    },
    "executions": [
      {
        "id": "cb7d0b65-f5bd-4e96-8b7a-a2f1160e9308",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 282,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "6cafda63-7e7f-4a8c-8349-16682605572b",
          "httpRequestId": "3f3192bc-1503-4209-9636-c95c0438c271"
        },
        "item": {
          "id": "cb7d0b65-f5bd-4e96-8b7a-a2f1160e9308",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "764cd1d5-9eea-4981-b7e9-d2ee1d45884d",
          "status": "OK",
          "code": 200,
          "responseTime": 57,
          "responseSize": 0
        }
      },
      {
        "id": "74628464-2d2f-44a5-8cf3-3f637b153429",
        "cursor": {
          "ref": "f6f6e5c6-3a72-4834-a743-2550955676d1",
          "length": 282,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "baf029c5-6dec-4e81-b289-1eee18ce5b2e"
        },
        "item": {
          "id": "74628464-2d2f-44a5-8cf3-3f637b153429",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "72790677-2f0d-4cb9-b55e-b48610ce01d9",
          "status": "OK",
          "code": 200,
          "responseTime": 7,
          "responseSize": 0
        }
      },
      {
        "id": "49c933dc-86d0-4418-8055-d0edcbdf8b5c",
        "cursor": {
          "ref": "33461829-f92f-4e4f-804f-469c7931c2a1",
          "length": 282,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "ad9c2723-156f-4198-89dd-df53a1f006f4"
        },
        "item": {
          "id": "49c933dc-86d0-4418-8055-d0edcbdf8b5c",
          "name": "did_json"
        },
        "response": {
          "id": "42d90ce2-2c27-4e7e-a1c8-0ec020c73ad6",
          "status": "OK",
          "code": 200,
          "responseTime": 264,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8501eb3-cd76-47c6-8b55-95468afb8d83",
        "cursor": {
          "ref": "672fa401-8918-45c7-a69b-2b66f47ac3fb",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "856386f3-123f-4800-b988-de84925fcae1"
        },
        "item": {
          "id": "d8501eb3-cd76-47c6-8b55-95468afb8d83",
          "name": "did:invalid"
        },
        "response": {
          "id": "4879859d-a856-4400-8b1d-7be280a293b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8501eb3-cd76-47c6-8b55-95468afb8d83",
        "cursor": {
          "ref": "672fa401-8918-45c7-a69b-2b66f47ac3fb",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "856386f3-123f-4800-b988-de84925fcae1"
        },
        "item": {
          "id": "d8501eb3-cd76-47c6-8b55-95468afb8d83",
          "name": "did:invalid"
        },
        "response": {
          "id": "4879859d-a856-4400-8b1d-7be280a293b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aaca2b44-5a8f-4f76-9e3d-ef526d108373",
        "cursor": {
          "ref": "654165aa-a516-4d0f-ae64-1c78de40ee72",
          "length": 282,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "27fbd47e-893d-4e3a-89a3-9558539b7e5f"
        },
        "item": {
          "id": "aaca2b44-5a8f-4f76-9e3d-ef526d108373",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "a49596d7-a0c8-4340-a3f7-99741f840c47",
          "status": "Not Found",
          "code": 404,
          "responseTime": 307,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78e510fb-b1f6-483e-89fd-d3dfb8c24311",
        "cursor": {
          "ref": "356e66ee-2f70-40e1-8051-668c7a778d0d",
          "length": 282,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "fec8d506-7197-4fc7-927e-1ae657be6a4d"
        },
        "item": {
          "id": "78e510fb-b1f6-483e-89fd-d3dfb8c24311",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "0eaaf78f-c4cd-46a4-a254-a3ed1fb007af",
          "status": "Not Found",
          "code": 404,
          "responseTime": 45,
          "responseSize": 86
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79581beb-a1b8-4504-8010-27d990bebc15",
        "cursor": {
          "ref": "fb9d6f72-c21d-45e7-9389-eab4262a5f3c",
          "length": 282,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "72ce0bcb-d4f9-477c-81b4-2ef55f03e79c"
        },
        "item": {
          "id": "79581beb-a1b8-4504-8010-27d990bebc15",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "f2c0eb6e-21a5-43e4-887c-9eaca523902a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50a90388-0e9f-4851-a165-d5fe8e6a34a8",
        "cursor": {
          "ref": "5c8eb66e-c1b4-4e34-9e40-cdef04aae252",
          "length": 282,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "acc6614b-c5f7-4a0f-b59d-f365d2c65872"
        },
        "item": {
          "id": "50a90388-0e9f-4851-a165-d5fe8e6a34a8",
          "name": "identifiers"
        },
        "response": {
          "id": "4e2fd145-10f9-4c0f-8939-95ceb786c801",
          "status": "OK",
          "code": 200,
          "responseTime": 91,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a72b1cc3-2b28-47fd-a1a3-11844a45a0da",
        "cursor": {
          "ref": "f1cd7054-666a-408a-89ad-74c320aa19af",
          "length": 282,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "5eca8ae1-ebb6-4279-84a1-df32fd6aae6d"
        },
        "item": {
          "id": "a72b1cc3-2b28-47fd-a1a3-11844a45a0da",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "8074911c-585d-45d6-ba09-559f29663020",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05b95e97-0bce-4e39-bf7b-8a3fd2bc8f9b",
        "cursor": {
          "ref": "330e5f91-88b1-4264-b5ac-04c5a0e4d38e",
          "length": 282,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "279d87be-bb1e-4743-b094-a2f80a4bfe33"
        },
        "item": {
          "id": "05b95e97-0bce-4e39-bf7b-8a3fd2bc8f9b",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "07fae2f8-5963-4e0e-a0ba-760d2f587547",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6e2fdc7-2f0d-42a3-8cd4-fb6223c9bd9e",
        "cursor": {
          "ref": "f355512d-163e-4d57-a75a-abf2049ecee4",
          "length": 282,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "46c09638-cc98-46ea-b5d0-32918ab5ca2d"
        },
        "item": {
          "id": "d6e2fdc7-2f0d-42a3-8cd4-fb6223c9bd9e",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "aa295a70-9af3-4d21-ae54-920b4d983680",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "598db608-ef84-41cb-adea-8307a15ef055",
        "cursor": {
          "ref": "8e8cb7d6-d998-413c-a3b4-3d231d89bfe5",
          "length": 282,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "38799302-6841-4b43-bd77-7537852f6cd9"
        },
        "item": {
          "id": "598db608-ef84-41cb-adea-8307a15ef055",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "b6545495-cf62-4c9b-93b1-89bf54b98b6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b47bcb65-ee99-45d1-823e-581e3070c95d",
        "cursor": {
          "ref": "f4a7e099-455a-4075-81f1-cf83c0b31c77",
          "length": 282,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "8a978576-33af-4431-a53b-79679ee33497"
        },
        "item": {
          "id": "b47bcb65-ee99-45d1-823e-581e3070c95d",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "28064546-da9d-4b7b-a5ea-bff15bfb1fa3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5615c0b1-b9c3-4fb1-aae8-fdf47b629ff5",
        "cursor": {
          "ref": "e4a1d4cb-f9e8-4f81-8e27-f966cf481c7a",
          "length": 282,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "1224864c-7635-4741-b066-8cd80ceabb81"
        },
        "item": {
          "id": "5615c0b1-b9c3-4fb1-aae8-fdf47b629ff5",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "7b10a992-6861-4693-9289-0bbfcdb74994",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5336d3c-9c5d-4575-a513-5e5d20638a6d",
        "cursor": {
          "ref": "3d59837d-fce6-411f-8db1-19b8d5fc3a5e",
          "length": 282,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "a5116720-c480-4903-af7a-86e6a0d45290"
        },
        "item": {
          "id": "a5336d3c-9c5d-4575-a513-5e5d20638a6d",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "5d24816f-8d3e-40aa-a378-0a43fc8fd8d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3519c53d-050f-4258-8584-aafdd98fb1fe",
        "cursor": {
          "ref": "6e8f496f-7960-4adb-bb76-bed952d129fe",
          "length": 282,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "2f3426d5-09af-4eab-a83e-c5f28352e21f"
        },
        "item": {
          "id": "3519c53d-050f-4258-8584-aafdd98fb1fe",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "f4afeeb9-0584-4893-8cf7-91b09468f0b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e0c9974-c53d-4eda-a404-dcae1efa60bb",
        "cursor": {
          "ref": "9cd6669d-5bf3-4d62-a9d6-037b7cba770a",
          "length": 282,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "c12f6823-4fec-45cb-a118-1fc56edbfbc7"
        },
        "item": {
          "id": "6e0c9974-c53d-4eda-a404-dcae1efa60bb",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "f66868f5-bd2e-42ee-b822-d29268a4152a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db99e939-0aa5-4474-bbdb-4fd936cd27aa",
        "cursor": {
          "ref": "24756e84-10ce-4b41-b801-1923cb29901a",
          "length": 282,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "b923427c-282a-4fbe-a705-d3104d0d30cc"
        },
        "item": {
          "id": "db99e939-0aa5-4474-bbdb-4fd936cd27aa",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "661ad554-37d2-40e8-8fcb-11efe7c0a6c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3893231-739c-4d0a-a1c5-0a0943016e52",
        "cursor": {
          "ref": "dac33512-82c0-4035-9c07-937d7bb96754",
          "length": 282,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "5520e66d-333f-407f-a8c5-78af18c4ae2b"
        },
        "item": {
          "id": "e3893231-739c-4d0a-a1c5-0a0943016e52",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "76473b70-6261-4da8-9433-253643927b22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5311c3a4-6902-4719-9a84-e1a5871d694b",
        "cursor": {
          "ref": "7ee0366d-0594-47a7-a84a-bac88c65bc92",
          "length": 282,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "8e2f2ea2-19d3-4274-8289-fbff59ea9570"
        },
        "item": {
          "id": "5311c3a4-6902-4719-9a84-e1a5871d694b",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "9ba00a88-6fc8-44a8-90a3-59f893239358",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e75441ca-dfc5-49af-afba-b0bcef35acd6",
        "cursor": {
          "ref": "1ef5555b-52e5-49fa-8afa-0761e66c7671",
          "length": 282,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "69ca1315-8057-45b8-847e-54f417fd8806"
        },
        "item": {
          "id": "e75441ca-dfc5-49af-afba-b0bcef35acd6",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "e79210c7-8f5e-4e46-9669-946b44a4f536",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf9ff92c-9d7c-40b6-851c-64a3630d26d0",
        "cursor": {
          "ref": "c17902f5-2db4-4a15-bf1c-a0d9d479dc33",
          "length": 282,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "842b8912-ff0e-44b5-8b76-e92dacba31b0"
        },
        "item": {
          "id": "bf9ff92c-9d7c-40b6-851c-64a3630d26d0",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "16e79d1b-1ac4-46f6-9ed3-6a9a627d6d8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69887efa-7d26-497e-b934-81bdd1adedaa",
        "cursor": {
          "ref": "8dc432c8-25ba-44cc-8408-17d3cb9adcb7",
          "length": 282,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "08e6ab8c-a24c-49f3-b3a9-86941234a106"
        },
        "item": {
          "id": "69887efa-7d26-497e-b934-81bdd1adedaa",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "d84540e1-038e-4ecc-923b-1cdb252169e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f474be37-7659-4bd6-a536-b859208006dd",
        "cursor": {
          "ref": "402b7df9-70f0-4b1b-a01c-6710cfc9653a",
          "length": 282,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "fc6acfe9-8ee3-4f10-8faa-9bd0d9b2091f"
        },
        "item": {
          "id": "f474be37-7659-4bd6-a536-b859208006dd",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "038ee3ca-e8a8-4d95-8516-18c7e9de2538",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "088fb12d-f984-409b-b7bf-86fc6e47ef55",
        "cursor": {
          "ref": "f69cdb72-e6c2-4570-a8cf-43cd04de32b3",
          "length": 282,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "b66358a5-621f-4107-af28-e74849a3e958"
        },
        "item": {
          "id": "088fb12d-f984-409b-b7bf-86fc6e47ef55",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "f07ca3a7-72dd-40b5-9ac0-8b5894971eca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4879a1d5-d5ac-4616-bb1b-226175f580bf",
        "cursor": {
          "ref": "46292c23-1d18-4d6c-8ed6-0b7744e50181",
          "length": 282,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "99da1b9e-0843-451b-b6b4-77a02536e2b7"
        },
        "item": {
          "id": "4879a1d5-d5ac-4616-bb1b-226175f580bf",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "4a0f9906-e0c4-439b-b0c1-263a021a692b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e9992f3-1a54-423d-bb96-7ddc7c024cc6",
        "cursor": {
          "ref": "3dc5f91a-2911-4792-b522-3fa8b4ae397c",
          "length": 282,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "e0364ad1-777b-4068-8a7f-1c555453bdcd"
        },
        "item": {
          "id": "6e9992f3-1a54-423d-bb96-7ddc7c024cc6",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "75bf7518-502c-47d3-a2eb-0e9e4243028b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02f40080-f86b-42e9-aaef-55c719ed41ea",
        "cursor": {
          "ref": "2c97c54f-21c2-4777-9225-303c851ead03",
          "length": 282,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "34d9abbe-a1f9-489e-bcf5-2a7841c72635"
        },
        "item": {
          "id": "02f40080-f86b-42e9-aaef-55c719ed41ea",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "c5b9298a-17d0-49e8-a3db-f278f9d01560",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37dbdd87-1255-4ac4-a028-58a83617e4aa",
        "cursor": {
          "ref": "dc02c587-c913-4ff0-9656-75172b6ac5b7",
          "length": 282,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "07b0a286-e137-4709-820f-647819782a02"
        },
        "item": {
          "id": "37dbdd87-1255-4ac4-a028-58a83617e4aa",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "3f5b00d5-30aa-40d4-bc31-b983e9791168",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f48b5973-ce28-4081-9f6b-655b8263999f",
        "cursor": {
          "ref": "06d3b674-88b0-4795-b049-07ad119bf60b",
          "length": 282,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "889716e4-35c7-4727-8e0a-1737812c2a04"
        },
        "item": {
          "id": "f48b5973-ce28-4081-9f6b-655b8263999f",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "c0a30572-4bde-4d80-abe4-6e89c67a61df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42d6e831-5edb-46a6-97bf-836836c80543",
        "cursor": {
          "ref": "6dcbf58d-8072-42a2-ad02-788f9e176462",
          "length": 282,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "7c5622e1-2a8b-43f8-8a5f-94be5ba891b5"
        },
        "item": {
          "id": "42d6e831-5edb-46a6-97bf-836836c80543",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "60f67ae4-3e1a-432c-bf2f-b428344e7d85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0910eb25-e13e-4889-9cd1-9adfdc9923e2",
        "cursor": {
          "ref": "fbffeb1e-27c5-4bbf-a864-6f9f47a68a7b",
          "length": 282,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "9e899360-1cf9-4697-b8c0-c3f9bae670a0"
        },
        "item": {
          "id": "0910eb25-e13e-4889-9cd1-9adfdc9923e2",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "0b70268c-26be-41d3-bd66-b4cdae35dc8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "509b0bf2-4af4-41b4-98dd-96b710f85d84",
        "cursor": {
          "ref": "2a6c27c4-54a2-40cd-bc19-bca592e799b5",
          "length": 282,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "ec8ad9e2-f0ab-4884-b8d7-3052eb12fd8c"
        },
        "item": {
          "id": "509b0bf2-4af4-41b4-98dd-96b710f85d84",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "7d953263-e7f8-4a49-adc6-52cbae6f1f18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37e77e7c-7b16-4c40-b295-1ffad22cf2a8",
        "cursor": {
          "ref": "08c62163-e7a6-4784-8942-54c76b38b0c5",
          "length": 282,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "e63078ac-7269-4f9e-bc73-000f253a77f6"
        },
        "item": {
          "id": "37e77e7c-7b16-4c40-b295-1ffad22cf2a8",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "a5c43922-7f18-4437-83a2-56c139f543c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3204de26-63ca-48a1-82a9-61a33f885a0d",
        "cursor": {
          "ref": "72486487-acc0-44f4-9082-3c5346e3e8f1",
          "length": 282,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "42092153-4155-4638-aca1-7b6aa73a1eae"
        },
        "item": {
          "id": "3204de26-63ca-48a1-82a9-61a33f885a0d",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "1446c696-724d-4e7f-a9e1-ec98e894f959",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2712b03d-e504-42fd-a2f7-b9f054ab1de2",
        "cursor": {
          "ref": "824a6828-2994-4e17-8689-e4b3476ab636",
          "length": 282,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "3409e5b8-c545-4436-864b-af822a6fcd79"
        },
        "item": {
          "id": "2712b03d-e504-42fd-a2f7-b9f054ab1de2",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "b98b04f0-9616-4f56-b29b-1db72d35504b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64057db7-0846-4cc4-8576-1360cfcff680",
        "cursor": {
          "ref": "fb7b54cf-c359-48c1-9898-0240a378a3ec",
          "length": 282,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "5d9d7549-d51f-4140-b625-196844242b37"
        },
        "item": {
          "id": "64057db7-0846-4cc4-8576-1360cfcff680",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "499a5a6d-5560-484e-b753-47124ae43a82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18d9c695-d36f-4d30-ae55-c2c029cd4bc9",
        "cursor": {
          "ref": "7b6afda9-7031-4087-9190-c69b8b0a8e58",
          "length": 282,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "05f997bc-a9e7-43f1-8a90-884ea35ff582"
        },
        "item": {
          "id": "18d9c695-d36f-4d30-ae55-c2c029cd4bc9",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "d6ff4d07-f823-486d-a741-f2da9ed97e86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "853bbc72-6e43-4170-b751-e69d43f1197a",
        "cursor": {
          "ref": "fd377372-9007-4593-a87e-f806f53febd3",
          "length": 282,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "afd05e72-8489-457f-bd73-6b206ce79f7c"
        },
        "item": {
          "id": "853bbc72-6e43-4170-b751-e69d43f1197a",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "8983d448-0c0c-4fba-9594-92a494bbf12e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 33,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "fb28bc5a-991d-48d9-b74e-80c8a18629ca",
        "cursor": {
          "ref": "d32927e4-67c8-4047-9b93-1814538a8277",
          "length": 282,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "345189cb-dfe6-4af1-9699-bce6a0440be4"
        },
        "item": {
          "id": "fb28bc5a-991d-48d9-b74e-80c8a18629ca",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "ae6951dc-a311-467e-a7a9-7c558282174a",
          "status": "Created",
          "code": 201,
          "responseTime": 2172,
          "responseSize": 774
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "8929054f-a721-4dbd-aeff-77b2f8bdff8f",
        "cursor": {
          "ref": "5a48c20d-b83e-4cdf-97df-31eba1eb7ed9",
          "length": 282,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "02e98259-26ec-4af1-9e4e-b56d91d3ea9f"
        },
        "item": {
          "id": "8929054f-a721-4dbd-aeff-77b2f8bdff8f",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "126c4e9c-d056-4990-81a1-25dac23dee35",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 36,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "70ecd16b-519b-4a87-a446-92265265a90e",
        "cursor": {
          "ref": "a404e31b-c1de-488b-a6d7-0c6903fe35af",
          "length": 282,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "cf5b349b-7309-4fc0-96b0-538bb191c142"
        },
        "item": {
          "id": "70ecd16b-519b-4a87-a446-92265265a90e",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "5459da51-bf74-4fab-b3ab-44e8c2df6967",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "392c708a-0cd5-4964-be80-06c03e4a6771",
        "cursor": {
          "ref": "18d42dd7-5704-4b76-a651-4c8e6d0b5d18",
          "length": 282,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "7fb41931-cbc1-4b28-b21e-7e924e5a771d"
        },
        "item": {
          "id": "392c708a-0cd5-4964-be80-06c03e4a6771",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "1cc8efc1-502b-4200-b616-1e3b4a4357be",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 31,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "159a636a-7a5e-400e-b189-5b0840cd51d0",
        "cursor": {
          "ref": "2452a868-371a-4820-91d5-0e632bb802ac",
          "length": 282,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "8d698113-4c08-454e-83aa-6cf37958a3b9"
        },
        "item": {
          "id": "159a636a-7a5e-400e-b189-5b0840cd51d0",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "25e650d1-ac13-4f12-b18f-6b8cd4be4418",
          "status": "Created",
          "code": 201,
          "responseTime": 1396,
          "responseSize": 763
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "2ae1e419-bb96-40f4-afe6-2d4fbc38ea70",
        "cursor": {
          "ref": "96da39d7-7882-43d5-90ac-10af9655b43c",
          "length": 282,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "fe81409a-51e5-4542-b18a-c3ff08e33f3a"
        },
        "item": {
          "id": "2ae1e419-bb96-40f4-afe6-2d4fbc38ea70",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "72d8ed42-41ab-44a6-8ee7-046320d6fee6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 46,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "ebec92c8-94f0-4bdf-bac3-a7c52bf12a57",
        "cursor": {
          "ref": "793ff580-67de-4597-851a-f5e4042271aa",
          "length": 282,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "65fed631-226f-4c9d-b644-57e72b14de30"
        },
        "item": {
          "id": "ebec92c8-94f0-4bdf-bac3-a7c52bf12a57",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "87664fc7-8f52-4e24-9831-aeca84a1878a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 1255,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "716be740-6c40-4510-86b1-2ff8cf94994c",
        "cursor": {
          "ref": "f92fdbfd-d48e-447b-bbfe-f43ed240f82d",
          "length": 282,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "7be30ddf-9767-4b91-9dc8-ecafcb77dfd0"
        },
        "item": {
          "id": "716be740-6c40-4510-86b1-2ff8cf94994c",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "3df87487-9820-4948-86e8-b927ee7bd0b9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 36,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "74f4b24e-5733-4e81-84fc-a4667adf0bcc",
        "cursor": {
          "ref": "b463cf59-9734-46e4-b021-80d8912d5979",
          "length": 282,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "fea4c3df-ea99-4de6-a421-6e6790b804dc"
        },
        "item": {
          "id": "74f4b24e-5733-4e81-84fc-a4667adf0bcc",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "971b419d-409a-4fbc-a936-7cf716506f71",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 45,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "09f9e686-b2da-41ba-926f-0d3961adbcc8",
        "cursor": {
          "ref": "e5e8826c-2f08-4064-bbab-10703bca8cfd",
          "length": 282,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "2e4822f3-447c-4233-a1d3-3d522ac26dfa"
        },
        "item": {
          "id": "09f9e686-b2da-41ba-926f-0d3961adbcc8",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "a0b67079-6381-4a75-a6e8-c96042d00a46",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 33,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "f7d0a2f3-2430-4487-8330-e7a1aeec781f",
        "cursor": {
          "ref": "3a800b2b-f3b6-4a71-806d-2f61de9f8315",
          "length": 282,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "3c571132-d143-49f6-8978-a69d48727875"
        },
        "item": {
          "id": "f7d0a2f3-2430-4487-8330-e7a1aeec781f",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "515d29cd-78b7-4d4c-8797-8b2a052644a3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 32,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "84712b3f-fb8f-47f8-be99-901ad447a20d",
        "cursor": {
          "ref": "a0e64491-24da-4d19-85e7-e8a6f8b2f89e",
          "length": 282,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "e6d7488b-8c45-40b9-9199-04f97c0c9f83"
        },
        "item": {
          "id": "84712b3f-fb8f-47f8-be99-901ad447a20d",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "c3af39b0-06cb-4064-b395-eb7b53e8cc19",
          "status": "Created",
          "code": 201,
          "responseTime": 1387,
          "responseSize": 770
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "126f3933-28a2-4cf6-af7c-d13225456585",
        "cursor": {
          "ref": "d15ade1a-a661-400b-9df6-88ac579452c5",
          "length": 282,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "fa10328b-3f82-4c69-a7e2-2845b07904af"
        },
        "item": {
          "id": "126f3933-28a2-4cf6-af7c-d13225456585",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "17319f8d-a283-40d8-a063-ff76db52a396",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc3a1a9f-7c7c-4154-941a-49c732c75248",
        "cursor": {
          "ref": "275bb50f-fef1-4003-8aba-9b204eee1e1a",
          "length": 282,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "9f8b6098-9038-41ae-8d24-396426a61b7b"
        },
        "item": {
          "id": "dc3a1a9f-7c7c-4154-941a-49c732c75248",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "2014e356-f915-42f7-8336-93e827ab4eec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c72532f-9537-46b3-8a03-9eaccd29a484",
        "cursor": {
          "ref": "bf7a3969-4f3c-4d89-888f-5b1bb117edf0",
          "length": 282,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "52cca538-f8bf-49d4-9829-0c3a126ad90e"
        },
        "item": {
          "id": "6c72532f-9537-46b3-8a03-9eaccd29a484",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "a6aee566-79ca-486c-8ea2-d65495bfdbca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "134d1ce7-3cac-4f79-a4a9-bae80e4f5795",
        "cursor": {
          "ref": "24e2b0b9-a1bb-416a-92ab-ce2c0b1467aa",
          "length": 282,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "04fe0b74-104d-466f-8333-adb64b94a6e2"
        },
        "item": {
          "id": "134d1ce7-3cac-4f79-a4a9-bae80e4f5795",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "147fc1a5-f16c-4e54-8f18-bf0ef1d4d79f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57b66b8a-3685-421c-82eb-a4c4431b0294",
        "cursor": {
          "ref": "b49abd9a-f6ba-46f6-bece-e34bc4e7cfd9",
          "length": 282,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "1624ce88-afc0-453b-bcb5-4206161e7dec"
        },
        "item": {
          "id": "57b66b8a-3685-421c-82eb-a4c4431b0294",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "de4d2bf9-16e1-4772-8238-4e651acd8661",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29c5791f-cf54-474e-82c7-8140fe4b98fc",
        "cursor": {
          "ref": "d0a7cd88-f2af-47d9-be1c-446eaa058ea2",
          "length": 282,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "3e256bf6-7336-47b9-9a30-5aa84b9eec99"
        },
        "item": {
          "id": "29c5791f-cf54-474e-82c7-8140fe4b98fc",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "bb8bac69-166a-469f-9b20-37524e7d545a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7841f2c2-4107-4db6-b4b9-8282df0b0f9a",
        "cursor": {
          "ref": "9ff12906-779a-407f-bd61-e92dd84ce84b",
          "length": 282,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "b5ec1d9e-49b2-4042-aeda-75b894d17991"
        },
        "item": {
          "id": "7841f2c2-4107-4db6-b4b9-8282df0b0f9a",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "0e8a2369-4eb7-49d5-aecf-c66ddf0dc945",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7bce120-1d0e-4bb2-87e1-da91baedafce",
        "cursor": {
          "ref": "e0d52559-4b2d-4913-8706-08cb668d9ad6",
          "length": 282,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "6f234202-a53a-48c5-a66b-281b13e2b65c"
        },
        "item": {
          "id": "f7bce120-1d0e-4bb2-87e1-da91baedafce",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "8065181a-a7d8-4c41-a454-66994ee3dbe1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82303cf1-af66-4889-aa45-60ceb61f8e9b",
        "cursor": {
          "ref": "3ee7421c-3a47-4808-bcee-7fc4a2d2166d",
          "length": 282,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "2561b38d-aaba-442f-8083-864663790bf8"
        },
        "item": {
          "id": "82303cf1-af66-4889-aa45-60ceb61f8e9b",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "bbcf3a97-a5cc-47e1-8dfc-ad679f01c9cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94111534-1638-42e6-8970-98ea131eee9f",
        "cursor": {
          "ref": "0cad8341-2374-4587-81f2-b4d02b180042",
          "length": 282,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "a2025b89-c338-4730-9b8b-bd5622d3b425"
        },
        "item": {
          "id": "94111534-1638-42e6-8970-98ea131eee9f",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "47d7f97d-6d69-40f7-8a3c-ea2cbfe5ab1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "077bb19d-365d-4c87-9be7-14a2f104545b",
        "cursor": {
          "ref": "6865d4d3-e5d4-420c-bb51-4e453f740231",
          "length": 282,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "d8299d9a-79a7-4262-bd06-c8355004ba29"
        },
        "item": {
          "id": "077bb19d-365d-4c87-9be7-14a2f104545b",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "919558b4-3f4c-4c66-8ea2-4ce927f49f9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5542fd30-a9ee-4c14-8962-9a1b6eed7153",
        "cursor": {
          "ref": "b809260c-d678-474a-b6b3-a249f94924a5",
          "length": 282,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "6a12b4e5-f395-4699-a7f3-64e33d83f045"
        },
        "item": {
          "id": "5542fd30-a9ee-4c14-8962-9a1b6eed7153",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "27e83df9-c4a8-49e4-b103-1b690a12271f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0db71817-f1c9-41d0-ad05-9a77f8a5633b",
        "cursor": {
          "ref": "6f06e87e-fc6f-4315-866d-27458fb1e584",
          "length": 282,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "90ed3126-79f7-4eef-9cec-1967cfb50a22"
        },
        "item": {
          "id": "0db71817-f1c9-41d0-ad05-9a77f8a5633b",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "2a964353-551f-40da-9db2-c2e7a93669ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c603551-b68f-4007-9126-3345470dfad2",
        "cursor": {
          "ref": "df447e23-2865-4715-a403-dca17f5a2b3b",
          "length": 282,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "2fab1f53-a027-4f07-89b1-804c482aaff1"
        },
        "item": {
          "id": "5c603551-b68f-4007-9126-3345470dfad2",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "3447160e-2465-426c-aaa2-e5b6fa898643",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 1120,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "70ab6a69-fac0-4bb3-a152-8f0d6c75767e",
        "cursor": {
          "ref": "25a81c4e-b292-4b61-af77-562365bd60a0",
          "length": 282,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "3d0daa17-1bea-4f46-b223-4fa3d70c7f35"
        },
        "item": {
          "id": "70ab6a69-fac0-4bb3-a152-8f0d6c75767e",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "df9440ea-161e-40b6-9cc3-8937fa98db65",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 1111,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "59cf2aed-208d-4d0e-9f20-f4d1e7c0e895",
        "cursor": {
          "ref": "a42cb841-03f6-463f-9248-485eab123b35",
          "length": 282,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "e0b8310f-65af-4bf4-8eec-2474292a7483"
        },
        "item": {
          "id": "59cf2aed-208d-4d0e-9f20-f4d1e7c0e895",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "ef0faefd-c898-4692-84b0-bf273259787f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 33,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "2683420e-4090-433b-9e7a-607621f1c848",
        "cursor": {
          "ref": "7f6d52f4-104c-4fb0-891a-90dc07a5d0ba",
          "length": 282,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "cf6e895d-640d-4821-9af6-7e110d8acf44"
        },
        "item": {
          "id": "2683420e-4090-433b-9e7a-607621f1c848",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "b7d015d0-88a1-4b8d-b83d-3fbbc7f2c563",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 1122,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "d89a4b4e-aa7f-488e-8498-1e5f1640d98a",
        "cursor": {
          "ref": "72ee9482-b576-4f0d-a069-baff71b2577d",
          "length": 282,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "1d367dc4-78b0-4930-a465-ec4d80c4d7f1"
        },
        "item": {
          "id": "d89a4b4e-aa7f-488e-8498-1e5f1640d98a",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "7c90bb82-7c6d-45ff-9cf1-27a185e4165c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 40,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "054168a0-02a6-4805-80b0-a00945d2004a",
        "cursor": {
          "ref": "cb2c41f8-1f04-40cf-8dfb-c5822a95f858",
          "length": 282,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "cdf02198-1456-42f8-80f9-ddc26b50c3f5"
        },
        "item": {
          "id": "054168a0-02a6-4805-80b0-a00945d2004a",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "ede17efa-7952-4619-90fb-29ab13a32e9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0661978-528f-48e7-9821-2f6b552040a8",
        "cursor": {
          "ref": "544eca51-0bea-47de-90c2-9deaf9be67a5",
          "length": 282,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "d806ac7b-999b-4664-8341-d245406524cf"
        },
        "item": {
          "id": "e0661978-528f-48e7-9821-2f6b552040a8",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "2f315e71-9d6a-4c61-acb7-853c9a82563e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a888c73-82bc-47ac-ac4b-ad8b3e6d8ba4",
        "cursor": {
          "ref": "3065dea2-83c7-4597-9ba9-04b5da81f18f",
          "length": 282,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "817ffb99-fa1c-4087-831f-c80006cc71f0"
        },
        "item": {
          "id": "0a888c73-82bc-47ac-ac4b-ad8b3e6d8ba4",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "87e4fdc5-af06-44a1-814a-4530b517444f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4d2db5b-c5b9-4b4f-bef4-98670988c79a",
        "cursor": {
          "ref": "da97a8a0-2411-4ba8-a6ac-8fdc5e56e7ed",
          "length": 282,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "a38c5827-06ce-489c-9917-18d718daa06c"
        },
        "item": {
          "id": "a4d2db5b-c5b9-4b4f-bef4-98670988c79a",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "cd545eb8-a076-4550-8bd2-84fe845d8ffd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91da89e9-0e98-46b2-8187-03138569f4c0",
        "cursor": {
          "ref": "c7a7cfeb-25b6-47a3-927a-456252d25fb8",
          "length": 282,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "60436b48-0a79-4afa-a2be-f7f4810d1b6b"
        },
        "item": {
          "id": "91da89e9-0e98-46b2-8187-03138569f4c0",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "bc1b66db-081d-47a8-98ca-e63258d69e87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83105c00-bd3e-4712-b189-c3e494138515",
        "cursor": {
          "ref": "3f6baf86-9797-4959-a0f1-4561ba0da2b0",
          "length": 282,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "bcc2ac54-18bb-4b50-91d6-3d6dd222030c"
        },
        "item": {
          "id": "83105c00-bd3e-4712-b189-c3e494138515",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "62fd06fc-0fe4-4a54-abb9-a14ca31bd890",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9658e5a-d190-439e-ad01-dbc1d06c67db",
        "cursor": {
          "ref": "eea325b7-42dc-4b3d-b25b-3b10c700e7c3",
          "length": 282,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "a95a0c88-5d74-48f7-bb9e-c14adc204a3a"
        },
        "item": {
          "id": "d9658e5a-d190-439e-ad01-dbc1d06c67db",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "b181aacb-77ff-4f75-bc30-b333b00cca71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f03456a-683a-4e1b-bd89-634f0992ebd7",
        "cursor": {
          "ref": "751711df-5f12-45bb-9589-9329a1366b9b",
          "length": 282,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "c3291d0b-3485-4c13-826b-82923979611e"
        },
        "item": {
          "id": "3f03456a-683a-4e1b-bd89-634f0992ebd7",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "6550f3ab-019b-4753-a90b-6bb64ecd872e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ac88264-6b58-4ddf-879b-72fa7e96648e",
        "cursor": {
          "ref": "96576bb0-20da-4edc-89c4-4fc1d76db61d",
          "length": 282,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "804b08f9-dc23-4b2e-8d2c-1fdcf6c5910d"
        },
        "item": {
          "id": "5ac88264-6b58-4ddf-879b-72fa7e96648e",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "f8b54e83-86ea-4d09-9465-dbcb08ea4025",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd33c8c0-6b59-4cde-b78b-e95d2035223c",
        "cursor": {
          "ref": "2877fea8-106c-4fd3-89bb-4350f3bef358",
          "length": 282,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "2a6d03bc-33ad-4ff9-9fc0-ff02aa814f81"
        },
        "item": {
          "id": "dd33c8c0-6b59-4cde-b78b-e95d2035223c",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "0b61c78e-1331-46b8-a835-9e68cfb28490",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c3024a0-2afa-43ee-90c0-678129665ab0",
        "cursor": {
          "ref": "25213133-96ec-4452-9497-dfdf35d983d9",
          "length": 282,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "0189974c-e074-4225-9035-ce05b7114c56"
        },
        "item": {
          "id": "2c3024a0-2afa-43ee-90c0-678129665ab0",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "65c614aa-ef97-422d-bd9a-7712c14b18b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9dbc92c0-210e-474d-8530-7f7746c0fe94",
        "cursor": {
          "ref": "70531aa9-f0f1-4eb7-90cf-970b319a8650",
          "length": 282,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "29e9bded-faa1-4989-8a65-d8681616e309"
        },
        "item": {
          "id": "9dbc92c0-210e-474d-8530-7f7746c0fe94",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "bf7f5904-643c-47eb-950e-0e8a35f33449",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "289c0cec-274c-4ebf-ba1b-301fe9d01553",
        "cursor": {
          "ref": "d79c9c8e-2af7-4c54-8e04-7a8b95858125",
          "length": 282,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "36b31458-e278-4e00-88a5-12579596ba67"
        },
        "item": {
          "id": "289c0cec-274c-4ebf-ba1b-301fe9d01553",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "8d8e3fd3-8420-4503-938e-33feecf31253",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "341dccb5-178e-4d4e-94d7-3b3da9d40ddd",
        "cursor": {
          "ref": "f71c0119-a0a5-498a-a826-9c436618b788",
          "length": 282,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "f1733b83-2434-4c11-a07d-650649268cfb"
        },
        "item": {
          "id": "341dccb5-178e-4d4e-94d7-3b3da9d40ddd",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "7347d7fc-6718-413c-8a7d-4d981875fca2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc7ceb47-d04d-4e2f-b2ee-c4f3ce2688c1",
        "cursor": {
          "ref": "30b9e4bf-113c-4372-9d42-8137c2f20d1d",
          "length": 282,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "33763015-789d-4683-9e35-b33f37a01d41"
        },
        "item": {
          "id": "cc7ceb47-d04d-4e2f-b2ee-c4f3ce2688c1",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "9261b800-5eda-448d-9ed1-1cf55fc9387e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e75566db-7947-4f4b-a5c4-0147f8d6e4e4",
        "cursor": {
          "ref": "1539897b-19f9-4c13-ba39-b45321e008d7",
          "length": 282,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "837125b6-530b-4063-b2bf-72e5138a010d"
        },
        "item": {
          "id": "e75566db-7947-4f4b-a5c4-0147f8d6e4e4",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "7c4ce024-2b8b-44e4-a535-c05d1c43e480",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec88a99e-2565-4b0c-bc0d-3d0d42fb04f4",
        "cursor": {
          "ref": "35f67db5-9a71-48e4-a34c-df1724274eb5",
          "length": 282,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "8d9bd92c-c59b-4019-847c-9f4f558a96e2"
        },
        "item": {
          "id": "ec88a99e-2565-4b0c-bc0d-3d0d42fb04f4",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "c0e3e6aa-9331-479c-a6a3-00343849c901",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aff64c9b-13a9-463b-aee8-80a400ce9bfe",
        "cursor": {
          "ref": "59d7c5a9-0b55-4fd3-a90c-7475da67d3e2",
          "length": 282,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "5d03e751-3fb9-4e95-8ec7-6e2d42896400"
        },
        "item": {
          "id": "aff64c9b-13a9-463b-aee8-80a400ce9bfe",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "0da538b5-06ed-4348-9850-bc1f30816f2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "261ee583-efd1-45e4-8c46-4181fc8cb4a0",
        "cursor": {
          "ref": "06014728-3abc-402f-83e8-e8da315a54db",
          "length": 282,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "99832490-fd2e-4d0f-a363-575e170f5ab2"
        },
        "item": {
          "id": "261ee583-efd1-45e4-8c46-4181fc8cb4a0",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "c03c246a-f68c-476f-99ab-76422cd53ddf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3b43d29-2884-4d42-bfcf-60953e1de687",
        "cursor": {
          "ref": "87df1578-dbf2-4dda-ae92-96714935a167",
          "length": 282,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "45103d47-021c-4c4f-9f6b-aebd46f749f2"
        },
        "item": {
          "id": "f3b43d29-2884-4d42-bfcf-60953e1de687",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "023c13ce-fe91-4004-8368-778abda425ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "531b1a47-2b75-4602-9c66-5ca0c211a605",
        "cursor": {
          "ref": "4c9be22c-6f86-419a-b2d9-a5f93abad611",
          "length": 282,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "f66846e9-023e-4666-ad37-c85d2b9c4844"
        },
        "item": {
          "id": "531b1a47-2b75-4602-9c66-5ca0c211a605",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "e7791326-d03d-463f-9efd-1432089732a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7aae993-b90a-48cb-955d-c6230378e915",
        "cursor": {
          "ref": "5537a05e-5ea4-40b2-a3d8-8477f18ede4e",
          "length": 282,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "38c5b25d-f0c1-45f7-9aa9-8629c23b9d3a"
        },
        "item": {
          "id": "c7aae993-b90a-48cb-955d-c6230378e915",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "ba11ac9f-4f0f-4dbf-9942-da60cd471bd6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4d92576-ae6e-4d44-b438-efa2d2f7cca9",
        "cursor": {
          "ref": "3f941628-a411-4281-82fb-5f3a8cc1814e",
          "length": 282,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "0c9d0a42-b8d6-4438-927d-6e6dcbe73dac"
        },
        "item": {
          "id": "d4d92576-ae6e-4d44-b438-efa2d2f7cca9",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "1cbb2306-aee4-4b33-b6ac-b580cd7aebf4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b781296-5247-4a28-bdcc-16751f92b0f5",
        "cursor": {
          "ref": "5fee74e5-f9bf-4fbd-b7e7-7c25f6bc81a3",
          "length": 282,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "2d21c04d-7268-4c20-9429-7c22934f6ba8"
        },
        "item": {
          "id": "6b781296-5247-4a28-bdcc-16751f92b0f5",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "081fdb17-c625-451a-995d-769daba0f5bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3923b8d5-b233-43b7-9d5d-47c311209b79",
        "cursor": {
          "ref": "2f08cd6b-e107-4b3d-91bb-6a40a57c21d4",
          "length": 282,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "7b6f89cc-be1b-4a7c-bcc5-1b0b22420a19"
        },
        "item": {
          "id": "3923b8d5-b233-43b7-9d5d-47c311209b79",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "36d2b903-bffd-45d5-a317-677bb9819021",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35d58cc1-5c89-4d7d-ae90-58c6201e3b72",
        "cursor": {
          "ref": "83ecfcbd-b797-478d-a7ef-75b6860e4b60",
          "length": 282,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "ce72bc5a-e026-4086-9c03-5247ccd1f824"
        },
        "item": {
          "id": "35d58cc1-5c89-4d7d-ae90-58c6201e3b72",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "f027c939-dbaf-4825-a57f-3dd0c3b165b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d174fd9a-e68e-4981-8223-aa6a01aa7950",
        "cursor": {
          "ref": "937b5960-41bc-40f9-99c4-644d57731525",
          "length": 282,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "ddca07d1-fdc3-423c-8a87-760ea6f1dd71"
        },
        "item": {
          "id": "d174fd9a-e68e-4981-8223-aa6a01aa7950",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "cc27709a-ed2b-4f49-89b7-0319ed84e4ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a3e6df0-65cd-4952-be57-568b6e2e46d4",
        "cursor": {
          "ref": "1786b739-7f42-4ec6-b2a9-b7ed33cd2263",
          "length": 282,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "0bc9fa00-35cf-4910-bbc2-70fdb182fc81"
        },
        "item": {
          "id": "0a3e6df0-65cd-4952-be57-568b6e2e46d4",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "72f2c86f-22c6-4b2b-84d3-dd2856a9726d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "731d812d-1ece-4d2f-a1e3-965e066f20da",
        "cursor": {
          "ref": "c6d36595-b3d6-41c8-9019-d54aac11ca0a",
          "length": 282,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "388cbcb9-b067-44fe-84ff-2c5bb03fe0c8"
        },
        "item": {
          "id": "731d812d-1ece-4d2f-a1e3-965e066f20da",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "484785e9-38ae-4d75-885c-bc710e05e698",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f06ad8cd-088c-4082-9de5-f3f93871fdd6",
        "cursor": {
          "ref": "9eb19954-00e7-4db6-9529-7797de50adee",
          "length": 282,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "dca98811-8e8e-459d-ab44-a2e532ca5b98"
        },
        "item": {
          "id": "f06ad8cd-088c-4082-9de5-f3f93871fdd6",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "5d5ec129-f029-4ac3-8564-91775ed7552b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c17117e-fbf6-4b2e-bd65-f6dc6ceaf9c6",
        "cursor": {
          "ref": "aeb60cd9-2132-44df-b47d-6b0f2abb3568",
          "length": 282,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "e28f05e4-c27a-4d5c-b936-5e0735434466"
        },
        "item": {
          "id": "5c17117e-fbf6-4b2e-bd65-f6dc6ceaf9c6",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "68c1f0bc-46af-4492-84ba-e567ce3e695b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac71d15d-e74e-41a7-a738-317374afbbf2",
        "cursor": {
          "ref": "f355c027-de1d-42fe-8a17-f6fab0d9240c",
          "length": 282,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "e36e99d2-ede3-4178-9143-bf19602dde58"
        },
        "item": {
          "id": "ac71d15d-e74e-41a7-a738-317374afbbf2",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "460eb168-cec3-4947-a72d-b25a8566b7fa",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 18,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db63fdb8-d73c-4a52-88fb-5de9bac6751c",
        "cursor": {
          "ref": "e1b75b6d-8640-431a-a7ce-927cc4977894",
          "length": 282,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "97708b0a-6dff-416f-a0b5-332a8be68859"
        },
        "item": {
          "id": "db63fdb8-d73c-4a52-88fb-5de9bac6751c",
          "name": "credentials_issue"
        },
        "response": {
          "id": "dde5c18d-14a4-4722-afdb-515aaccd2cda",
          "status": "Created",
          "code": 201,
          "responseTime": 1444,
          "responseSize": 760
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "8383a5fa-0f5b-4852-85e0-73ec26850f06",
        "cursor": {
          "ref": "4ff25e22-df02-440c-ba10-105aaea04e73",
          "length": 282,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "627bf961-fbe1-4915-b5f3-5e2f57cc71cf"
        },
        "item": {
          "id": "8383a5fa-0f5b-4852-85e0-73ec26850f06",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "8484ee69-099d-4736-998c-674d80801659",
          "status": "Created",
          "code": 201,
          "responseTime": 1366,
          "responseSize": 714
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b84abbe-ead8-4341-a4f6-a996180e6a65",
        "cursor": {
          "ref": "5347ab90-aa3f-4c95-bcb5-108044741794",
          "length": 282,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "f0e5a2d6-0778-4e99-81df-9acec457a288"
        },
        "item": {
          "id": "8b84abbe-ead8-4341-a4f6-a996180e6a65",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "9fad9747-d425-43e8-87a4-164b3a83e672",
          "status": "Created",
          "code": 201,
          "responseTime": 1335,
          "responseSize": 767
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c5d1673-1601-4fd7-be2d-a2d898cf726d",
        "cursor": {
          "ref": "1d200e1b-2c07-4844-8be0-f748b5bd0eeb",
          "length": 282,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "6df42985-36f7-423f-9dcd-6f2c9597d729"
        },
        "item": {
          "id": "2c5d1673-1601-4fd7-be2d-a2d898cf726d",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "0db8af18-a092-413a-90f2-7224680b8653",
          "status": "Created",
          "code": 201,
          "responseTime": 1285,
          "responseSize": 771
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d93d7d1-3409-4f29-b4d0-68cbac8fafcd",
        "cursor": {
          "ref": "98205372-f09f-4c20-9f89-d86e875b9eb5",
          "length": 282,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "ccf77068-8046-4e46-8e8d-fafef70d84de"
        },
        "item": {
          "id": "8d93d7d1-3409-4f29-b4d0-68cbac8fafcd",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "9e35d8bf-0e46-4c76-aed2-47e31a77a7c2",
          "status": "Created",
          "code": 201,
          "responseTime": 1337,
          "responseSize": 760
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "58a42bc7-88d0-4afa-8b6f-bc344c00c3df",
        "cursor": {
          "ref": "e1285b8e-12d1-4b48-b885-e3c20873e754",
          "length": 282,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "09faf9e3-dd49-4d52-a21f-a90cf73b135e"
        },
        "item": {
          "id": "58a42bc7-88d0-4afa-8b6f-bc344c00c3df",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "13ff61e3-80d2-4275-a97d-a28f416506fc",
          "status": "Created",
          "code": 201,
          "responseTime": 1369,
          "responseSize": 1093
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a6213b0-c200-4f8c-aa34-62874c781c1e",
        "cursor": {
          "ref": "af71dc54-b94e-469c-bff6-817c11889d20",
          "length": 282,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "fe0182ca-13b1-4114-b8b5-1fbcba1c98ed"
        },
        "item": {
          "id": "6a6213b0-c200-4f8c-aa34-62874c781c1e",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "8b1fc94e-6242-4af3-af82-914dcdbb1aa8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85cc38ad-5afc-4754-87a7-81c8302d3bbf",
        "cursor": {
          "ref": "ddfe7178-f2be-4d1e-9d9e-89f34fc5d08c",
          "length": 282,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "0c3ada2d-7083-4b61-be71-f7059bcaf03e"
        },
        "item": {
          "id": "85cc38ad-5afc-4754-87a7-81c8302d3bbf",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "4a5bf1fb-1940-40bf-8437-ce2bc26652d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc9170dd-a5ca-40cc-aa9b-fec356557285",
        "cursor": {
          "ref": "64647df1-581b-4b92-969d-0f0707eb16b8",
          "length": 282,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "b5e0b2d6-0309-4cab-b713-d77b925f8fa2"
        },
        "item": {
          "id": "cc9170dd-a5ca-40cc-aa9b-fec356557285",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "955aae71-d1bb-4cfc-b057-2587f74baf49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b49a2e3-5650-4102-a2b0-99b6976dcd95",
        "cursor": {
          "ref": "4937fb90-9cef-4263-a364-001b191b1e5f",
          "length": 282,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "f188b724-b3ff-4e9b-855d-5fac1fc75766"
        },
        "item": {
          "id": "5b49a2e3-5650-4102-a2b0-99b6976dcd95",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "0009e016-e79f-4501-9051-a2d2980ad551",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8479f5cd-6677-4fa3-9495-4f7f6f1b50b4",
        "cursor": {
          "ref": "c3d2cd62-1048-4bbb-9616-b9712164b418",
          "length": 282,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "068bb8ab-360b-4287-a805-65343511b04f"
        },
        "item": {
          "id": "8479f5cd-6677-4fa3-9495-4f7f6f1b50b4",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "476d7364-8e71-4514-8129-2b1a5f163174",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24271a01-3f09-49a0-a019-be5aed8e863a",
        "cursor": {
          "ref": "3f077de4-734a-42c4-9afc-6b25295244d2",
          "length": 282,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "7012030b-2474-4402-b330-f87c3206c89a"
        },
        "item": {
          "id": "24271a01-3f09-49a0-a019-be5aed8e863a",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "e3bf2cbf-b5d7-4323-b447-6a7053b03f20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2c975a9-6304-48e3-b655-85ef9e7b2883",
        "cursor": {
          "ref": "e213a937-cf74-45d9-95ad-ee78ffc25912",
          "length": 282,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "c5cef176-d2f3-404c-bcf5-2b8946806fef"
        },
        "item": {
          "id": "c2c975a9-6304-48e3-b655-85ef9e7b2883",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "74cff5af-6acb-4e6f-ae56-22c79fbf807f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85dea16d-98a2-4e02-af49-ee9a73569270",
        "cursor": {
          "ref": "32ac96da-aa3c-42fb-b94a-4df8bd2ab088",
          "length": 282,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "42fe8ddc-a89c-42ad-8044-166fae9d8ede"
        },
        "item": {
          "id": "85dea16d-98a2-4e02-af49-ee9a73569270",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "767a4000-4b59-4084-b6ef-f921b5de3e96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d71fbde-e9ba-419f-a500-425686bf24db",
        "cursor": {
          "ref": "adff900b-0db5-4f33-b0c6-108b0c0015d9",
          "length": 282,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "6308dee6-5466-4036-a215-b1ea2723b351"
        },
        "item": {
          "id": "3d71fbde-e9ba-419f-a500-425686bf24db",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "6ac0bf08-a57b-4c54-8775-fb1c0bb45f52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8d4d612-f053-4285-934a-cddb369b6774",
        "cursor": {
          "ref": "8f197dae-e3e6-46de-8aef-b935a3ed26fd",
          "length": 282,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "7fd68e06-3548-4b39-b170-1ed9b063861b"
        },
        "item": {
          "id": "d8d4d612-f053-4285-934a-cddb369b6774",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "b13b29ac-fcfb-436f-9f61-ed677a5cf965",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1659a7bf-6e69-42f0-8fef-772ab7996579",
        "cursor": {
          "ref": "ff5ae7c7-03fb-4957-b7fa-c2c70ecea1b5",
          "length": 282,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "c53daa28-2ba0-4846-9aa1-b3a190a4a670"
        },
        "item": {
          "id": "1659a7bf-6e69-42f0-8fef-772ab7996579",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "2cbfc111-de90-407d-9eb0-9ff1a83dc79c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "086ce689-d108-4276-bc8a-3a081d27fff4",
        "cursor": {
          "ref": "fe1a9b96-38c3-4fee-8914-0e3c8fa7fdc0",
          "length": 282,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "9ed26d07-df02-4fa7-909e-185938f0ee35"
        },
        "item": {
          "id": "086ce689-d108-4276-bc8a-3a081d27fff4",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "10ddd720-a1f0-484d-af68-36beaeb18606",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bfb21ff7-d337-4449-899f-a4752d7ff27f",
        "cursor": {
          "ref": "0ff4d48a-db57-45ac-9325-b1095999098b",
          "length": 282,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "70709326-17fd-45cf-a8e4-d9cb3890118a"
        },
        "item": {
          "id": "bfb21ff7-d337-4449-899f-a4752d7ff27f",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "9eeaff01-c6f2-46f5-9d7f-ef65c3a9cb9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5692a86f-3b04-4011-aedb-f8f9237e0a44",
        "cursor": {
          "ref": "175be810-ab2c-4d44-99ea-da6b04fcd47a",
          "length": 282,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "b889be31-0965-41ce-b365-aa589b044e33"
        },
        "item": {
          "id": "5692a86f-3b04-4011-aedb-f8f9237e0a44",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "fe1c1e0f-317f-49b3-a530-aec8936bb545",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec041ccb-4a5e-41dc-b27e-8a6377b12a81",
        "cursor": {
          "ref": "effc34a2-8b35-4dbc-87ee-03409797e297",
          "length": 282,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "486acae1-e99c-474d-b961-f5ee55213e47"
        },
        "item": {
          "id": "ec041ccb-4a5e-41dc-b27e-8a6377b12a81",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "930c4c3a-2a8f-4e5a-8e36-02f766911647",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f8128f7-99cc-47ba-ba1d-f7cc253cc5f6",
        "cursor": {
          "ref": "2ea5a035-a754-4102-8bb1-e0a6fbc68cee",
          "length": 282,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "e1bc7045-2ac9-41f2-bdc0-498153ababb5"
        },
        "item": {
          "id": "4f8128f7-99cc-47ba-ba1d-f7cc253cc5f6",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "5b90e4af-a8c5-4e4f-8d40-cde00c8886ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68464100-2765-4644-ac7a-92ec98302ac7",
        "cursor": {
          "ref": "6763076c-2036-4386-abf7-550b5fdd2285",
          "length": 282,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "d9de98f6-2328-4149-b7f4-909b923e829a"
        },
        "item": {
          "id": "68464100-2765-4644-ac7a-92ec98302ac7",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "6b3ae4a5-e49d-4cee-b296-b9212fe6b8fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "568161d0-f847-4ea5-ba84-c30cb106424a",
        "cursor": {
          "ref": "a6e5f191-efa3-42e7-98b7-8590c9758a8b",
          "length": 282,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "fa6aaa99-a552-444b-b89a-6acad24dd410"
        },
        "item": {
          "id": "568161d0-f847-4ea5-ba84-c30cb106424a",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "34d52ff9-a148-47b5-971b-2c3fa9723500",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d9a5239-cd0a-4700-adf5-e98d3d77ad2e",
        "cursor": {
          "ref": "29b5d169-518b-4227-b4df-f63879282639",
          "length": 282,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "7c07c6c7-63cf-4360-b77c-d002a4de80ad"
        },
        "item": {
          "id": "7d9a5239-cd0a-4700-adf5-e98d3d77ad2e",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "c4aab686-1f81-467d-add4-e90b8ff3c05d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9202c1f4-d6ca-4813-9d54-11df6b6e82d6",
        "cursor": {
          "ref": "d7cbd32d-d91a-4966-aef8-f85d6b09b05f",
          "length": 282,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "13df3145-5fa7-4c08-9316-6f0c923ff308"
        },
        "item": {
          "id": "9202c1f4-d6ca-4813-9d54-11df6b6e82d6",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "b9ee7bc9-bfbe-4f0c-8d65-abbc86b4586d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "832e8770-ad48-496f-9637-9bebbf6c27b9",
        "cursor": {
          "ref": "2d3cbb98-bc3c-4d3c-9655-763f99ee66af",
          "length": 282,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "c97cb6e0-dc7c-4429-abba-11e8c6f460ba"
        },
        "item": {
          "id": "832e8770-ad48-496f-9637-9bebbf6c27b9",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "38fce96a-c8ea-4c6d-9d46-c14b5083980d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e34d1359-8a62-4c1e-87bf-04675f5300af",
        "cursor": {
          "ref": "63d83ec0-694f-47b4-b65d-bcb44f03149f",
          "length": 282,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "467125f4-a258-454d-8164-fd24c8ef80ef"
        },
        "item": {
          "id": "e34d1359-8a62-4c1e-87bf-04675f5300af",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "e4ebde59-944f-4d44-87d5-149b40e21e24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "715f329f-9743-4386-bc04-d964b32e23f1",
        "cursor": {
          "ref": "d108b4b2-bcc2-44d4-9796-3f971aea2b5f",
          "length": 282,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "caf1fbff-bc69-453d-ab1e-2cd6382058eb"
        },
        "item": {
          "id": "715f329f-9743-4386-bc04-d964b32e23f1",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "abb0e8e1-c010-4fab-ad13-3b01a35fec97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51afb203-8373-4df5-a73d-1eedaf30c16f",
        "cursor": {
          "ref": "e51940a5-fa84-40b4-8166-589e0bdc1857",
          "length": 282,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "0a165752-6778-4626-b3ca-3fd0455f1ff8"
        },
        "item": {
          "id": "51afb203-8373-4df5-a73d-1eedaf30c16f",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "154fc197-1528-4f56-94b6-5cfa242b3c44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5923552c-eac8-4023-a964-c92654d3db3d",
        "cursor": {
          "ref": "8a7f44f8-99ee-43db-906c-fa83407ee088",
          "length": 282,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "d5ed3604-617e-429f-ab29-26a55184b798"
        },
        "item": {
          "id": "5923552c-eac8-4023-a964-c92654d3db3d",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "4cd3fc89-f1e2-4b67-b566-d1a58229cd63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7068c8a3-cc5d-462c-8516-83cde56112ae",
        "cursor": {
          "ref": "974eb98c-a4ed-41b0-a409-30e8841a26f5",
          "length": 282,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "dc2f72db-1d9f-4574-a0a5-9c54781396dd"
        },
        "item": {
          "id": "7068c8a3-cc5d-462c-8516-83cde56112ae",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "3b7de753-0ff9-494a-8850-638472218c16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08c68031-b9dd-4439-8a32-433715d6de12",
        "cursor": {
          "ref": "dcc6a7aa-6c33-44e5-831d-52a183fdaf7b",
          "length": 282,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "428fc7a8-fa57-4c42-b218-8be3541af214"
        },
        "item": {
          "id": "08c68031-b9dd-4439-8a32-433715d6de12",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "f26b9aa3-8166-485b-965a-7906a6d7ba7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4002d739-70d4-4dac-b10d-17e2caca2e45",
        "cursor": {
          "ref": "d10a03e0-a316-411a-8c80-c018429aba59",
          "length": 282,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "c4fd305b-e9c8-41ca-aff2-4010d9d7366c"
        },
        "item": {
          "id": "4002d739-70d4-4dac-b10d-17e2caca2e45",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "d36d20ae-281c-4a5b-b071-e0ed55506456",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8fc1bb5a-0b74-48cb-a1eb-f59afa1b65d0",
        "cursor": {
          "ref": "747aa982-c084-4ee4-8f50-7a761996fac2",
          "length": 282,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "daf5d5e4-557c-4a92-b444-1a88358f2902"
        },
        "item": {
          "id": "8fc1bb5a-0b74-48cb-a1eb-f59afa1b65d0",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "cfde51d4-e27f-4da6-9871-c2b357f0bc17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a5f50ee-7b78-427b-998b-e30f2e7869fc",
        "cursor": {
          "ref": "db6c6ef9-985f-45c9-ad33-4e59f461db2f",
          "length": 282,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "6d651dc5-b298-4477-bd64-834f61a48b80"
        },
        "item": {
          "id": "3a5f50ee-7b78-427b-998b-e30f2e7869fc",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "3b2395bb-db97-416c-9545-6e449161aff5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e655d590-0d4f-43d2-bfcb-b401bf54e7b6",
        "cursor": {
          "ref": "43d898ce-afaf-418a-8749-198f48260beb",
          "length": 282,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "08b255ea-f7ca-403d-bc7e-84b4455a1f91"
        },
        "item": {
          "id": "e655d590-0d4f-43d2-bfcb-b401bf54e7b6",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "a7b9295e-36ab-40b3-a368-ca1cc98fce3e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c99e4322-beaa-4daa-a162-07e6e663f8d8",
        "cursor": {
          "ref": "5373ffc9-c9d4-49a3-bd52-07e862b595c2",
          "length": 282,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "6c0a3331-5d59-4ae4-9b68-5271af56f20a"
        },
        "item": {
          "id": "c99e4322-beaa-4daa-a162-07e6e663f8d8",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "2a4dd47a-7264-4642-a70c-f379e3e459c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cecfdb5d-997c-43b6-a869-f587887e5214",
        "cursor": {
          "ref": "81b6bf04-a450-4a6a-aad7-8977bea59dd9",
          "length": 282,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "324b981f-1ecd-4e3d-bcb1-1712f964a251"
        },
        "item": {
          "id": "cecfdb5d-997c-43b6-a869-f587887e5214",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "69633dac-9310-4e43-a0d7-06e44ac276ab",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 17,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5e0536b-6b18-4e71-9dc2-aa0b4be64d2d",
        "cursor": {
          "ref": "1b87c4b5-9a5d-4ab7-bcc2-0ebcc5d904bf",
          "length": 282,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "83af1a4b-f591-4063-8dc0-32fc1c55760e"
        },
        "item": {
          "id": "c5e0536b-6b18-4e71-9dc2-aa0b4be64d2d",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "f9a541a5-4503-4562-9c33-524ec4b2c8c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "281f4acc-adf2-4568-98f5-c60bbc8b1ff7",
        "cursor": {
          "ref": "067a79aa-f097-4dda-9c1f-b6dd17aad32f",
          "length": 282,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "6ec76e82-0f87-4657-8bcd-028bb809dc6e"
        },
        "item": {
          "id": "281f4acc-adf2-4568-98f5-c60bbc8b1ff7",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "668e4be4-5dce-4e23-ac09-c368353b9df2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4679fc90-9b29-4154-a006-68928edb784e",
        "cursor": {
          "ref": "6defa4d1-2c41-42d1-b683-96ca44a12406",
          "length": 282,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "2f3a789c-73bf-441e-b795-c69e884e4309"
        },
        "item": {
          "id": "4679fc90-9b29-4154-a006-68928edb784e",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "e5527921-5eaa-4881-a14b-deaa59c3c2dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "507681fc-6643-47b0-8867-87108d006372",
        "cursor": {
          "ref": "e24dd14d-fd5f-421d-93ad-7bee9819317c",
          "length": 282,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "ebe85a09-d40d-4fd2-94f6-594483dcd658"
        },
        "item": {
          "id": "507681fc-6643-47b0-8867-87108d006372",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "05c96049-6734-4594-84b6-fc82af125f96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3adcb6d8-3849-46d8-bd72-87587679bb46",
        "cursor": {
          "ref": "a228ee7a-b7bc-44b4-ab88-544bb01be0f9",
          "length": 282,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "40ea0441-c7e7-45c4-89e1-0de0c1e92638"
        },
        "item": {
          "id": "3adcb6d8-3849-46d8-bd72-87587679bb46",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "90fb443e-14bb-4b1b-8c8f-5bbb72355d1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b43085fe-80c0-4f4e-8f35-233603c453b9",
        "cursor": {
          "ref": "ec678ed7-162f-48c8-9ebf-c8ef20a8b3db",
          "length": 282,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "5bf97776-7bec-4f0a-95a5-e89bf73311a3"
        },
        "item": {
          "id": "b43085fe-80c0-4f4e-8f35-233603c453b9",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "d56a251e-19b8-4ffd-9bfe-e498b1efda35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3f29d7d-7a00-4bac-84af-946f9925cc8a",
        "cursor": {
          "ref": "794bb1d3-5b3c-47d1-b1ea-dfd360b0fa1c",
          "length": 282,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "7dc80282-91c1-41aa-abdd-69d88bb317cd"
        },
        "item": {
          "id": "c3f29d7d-7a00-4bac-84af-946f9925cc8a",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "fb7dd6ab-add9-4c39-8334-512083a68b76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cad4f856-1b0e-4384-9c62-b23934c0ebba",
        "cursor": {
          "ref": "539968af-dfc6-4270-b64e-21119a456273",
          "length": 282,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "4a20b58a-6e14-4991-ae18-b91610d97347"
        },
        "item": {
          "id": "cad4f856-1b0e-4384-9c62-b23934c0ebba",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "9384a653-03ff-4584-a129-cf83a5611cbe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7731dc3f-a3d1-491f-a16c-cfa9d9b8ee20",
        "cursor": {
          "ref": "1ae6cc3a-f9a6-4749-ada8-b5941870ed48",
          "length": 282,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "f5f033a3-1bf0-453a-a9ae-6bf9b041fca4"
        },
        "item": {
          "id": "7731dc3f-a3d1-491f-a16c-cfa9d9b8ee20",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "9e9c3a19-e432-40f5-820f-2c69aa86e83c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2584bdae-9106-4cb6-aa7b-840534c7651e",
        "cursor": {
          "ref": "1f2ce26b-a544-4898-b9e9-6c2f3e7bb778",
          "length": 282,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "b8522188-b98f-4607-878e-e9211464713b"
        },
        "item": {
          "id": "2584bdae-9106-4cb6-aa7b-840534c7651e",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "0d6f070c-6ad8-4576-8735-431720dc2017",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85ca82c0-81a7-4703-945f-1675038dd6ae",
        "cursor": {
          "ref": "b2a9eb59-81c3-48ad-acd5-941f9f02ac4e",
          "length": 282,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "46f94f1e-c433-46a9-b955-b8a772645fde"
        },
        "item": {
          "id": "85ca82c0-81a7-4703-945f-1675038dd6ae",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "b1a21ccc-99b7-4dab-86bd-39164a7019a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88445fae-d622-4ad7-88b8-c9a1d151237e",
        "cursor": {
          "ref": "f463ffe1-584b-4ab4-a54c-d5b4628e152e",
          "length": 282,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "21c47ec0-45f1-456e-b89a-257b273257f3"
        },
        "item": {
          "id": "88445fae-d622-4ad7-88b8-c9a1d151237e",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "ad7a6c3a-3fe8-4e15-9044-46c958a44132",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9d6a598-fe1a-4321-bf30-f789cd40f032",
        "cursor": {
          "ref": "87f20380-0b4c-4d72-b6f5-9f9b899d42e2",
          "length": 282,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "9a774ed0-6926-4fa7-bf51-08cac7fb0c7b"
        },
        "item": {
          "id": "a9d6a598-fe1a-4321-bf30-f789cd40f032",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "48fde4ab-cdf1-4ca4-8d1e-f6e24453f158",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fcd411b-c46c-4881-bcc3-79a16c6951d8",
        "cursor": {
          "ref": "d3603225-13fd-4926-9079-56bd176ea760",
          "length": 282,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "afe45dd4-e826-435a-abb1-c33a30909e8f"
        },
        "item": {
          "id": "3fcd411b-c46c-4881-bcc3-79a16c6951d8",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "7f5929e8-7fd6-4295-8995-af560f3d183c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c540d90-3e85-4a82-8110-bdbb621bc895",
        "cursor": {
          "ref": "c0fea801-da97-44ad-a4a1-64156b808dee",
          "length": 282,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "93f3f348-cfe3-47b7-b9d7-00acbe16914d"
        },
        "item": {
          "id": "5c540d90-3e85-4a82-8110-bdbb621bc895",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "c32cee3b-7783-47bd-970d-da98fb1423bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "945c0ef5-98ca-4c35-8be4-eafaf00c7d17",
        "cursor": {
          "ref": "eb69c105-5c9b-4d4d-99ff-9e565b955067",
          "length": 282,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "3657a505-a6f7-47c2-bdfd-c713ab4e049f"
        },
        "item": {
          "id": "945c0ef5-98ca-4c35-8be4-eafaf00c7d17",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "6ea1b3d8-b237-419c-9dba-ed7079c37a22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d8ca931-7481-4982-89cc-8fa0f29e4c6b",
        "cursor": {
          "ref": "2af66e98-de7b-45db-92d9-88318aa17a34",
          "length": 282,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "a0ded0d6-2217-41d6-83d7-7d2f082fbc96"
        },
        "item": {
          "id": "1d8ca931-7481-4982-89cc-8fa0f29e4c6b",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "a64ea64e-2127-4c73-8788-65307976d5c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b253bba8-9917-4796-b18e-9f6dab577e61",
        "cursor": {
          "ref": "d4f86f35-ee85-4b53-935f-de6fa3dd3530",
          "length": 282,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "8a5f77cd-b036-456b-927d-fe29fd54be09"
        },
        "item": {
          "id": "b253bba8-9917-4796-b18e-9f6dab577e61",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "9c54343f-2a01-492c-b885-22eac74b8298",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3dcbe3bd-89be-4d64-9aff-2ab6c6aa2699",
        "cursor": {
          "ref": "34e18547-af55-4556-9595-cc0fdacb7cf6",
          "length": 282,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "b1b5b2e4-89a4-4f01-8637-a1796b7787e4"
        },
        "item": {
          "id": "3dcbe3bd-89be-4d64-9aff-2ab6c6aa2699",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "66810b81-97a5-445c-b5ac-fc97fc5d1829",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ef7610b-3a61-40eb-b25a-ce5b8c90a01b",
        "cursor": {
          "ref": "d7ed95eb-fca5-4843-bd62-efac9cda9ddb",
          "length": 282,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "6799e9bf-42cb-42de-829a-7ca64ef8d7c6"
        },
        "item": {
          "id": "5ef7610b-3a61-40eb-b25a-ce5b8c90a01b",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "d2e4d38d-085e-4c02-8bc0-687e258500a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "397d5f4b-4d4f-424d-abfd-ef6e8da1dafb",
        "cursor": {
          "ref": "ef8b626c-ab83-4f00-a269-9799cea6c4c2",
          "length": 282,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "4ca57a32-20e5-4cea-a02f-848ac565776d"
        },
        "item": {
          "id": "397d5f4b-4d4f-424d-abfd-ef6e8da1dafb",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "6db112fe-9398-4eef-a20c-e2cdc8743a10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9a7ca08-6351-4276-9896-bad1f7d8d035",
        "cursor": {
          "ref": "ed40b96b-1b92-42e7-ba71-5fe021e7bc50",
          "length": 282,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "4ce543b3-e616-4fee-894e-1d4968cb09cb"
        },
        "item": {
          "id": "b9a7ca08-6351-4276-9896-bad1f7d8d035",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "e85e06f2-6805-42ec-93d6-b730d8ce6b01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ddc65345-73fb-4702-9115-76d7ca268f26",
        "cursor": {
          "ref": "13bac000-cc0d-439a-8ee2-70e77b67667d",
          "length": 282,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "55dc33b5-4a72-4ec6-9b41-8a7b518de242"
        },
        "item": {
          "id": "ddc65345-73fb-4702-9115-76d7ca268f26",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "b1992143-7847-4492-9001-caff4112ec85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d08de4e9-858c-4724-8147-d2b6d38c0eea",
        "cursor": {
          "ref": "b24b87fe-9872-42b7-9e55-4a50a4560a7d",
          "length": 282,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "76c7a415-359b-4169-aa52-ca01bf650e00"
        },
        "item": {
          "id": "d08de4e9-858c-4724-8147-d2b6d38c0eea",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "b7ec2dde-99e7-4432-acfc-65809938b7fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8d2b12e-acac-4600-aea9-0884338c0659",
        "cursor": {
          "ref": "3652ff15-d405-41bb-afb0-d6370d5e332c",
          "length": 282,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "e6464ff4-7c3e-40ef-bf01-7046564c1ede"
        },
        "item": {
          "id": "c8d2b12e-acac-4600-aea9-0884338c0659",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "221b48e8-27c9-4867-8866-ffbe77a48bee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e197815-461f-4893-9f9f-f5ffc950c8ae",
        "cursor": {
          "ref": "ae131aca-fb78-476a-8e95-04a693a5e19a",
          "length": 282,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "abac1672-b2c6-4ef4-9bd0-6ea5c67b20b9"
        },
        "item": {
          "id": "4e197815-461f-4893-9f9f-f5ffc950c8ae",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "00c894bb-a0ea-473a-b6c6-29a792acd2d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd01d8ad-5793-43f5-ab7e-25d27a1e7c54",
        "cursor": {
          "ref": "228c88fa-1856-47e3-8ebc-6ab2bc8864c9",
          "length": 282,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "58776fb3-320c-4377-970b-5f167630ba08"
        },
        "item": {
          "id": "bd01d8ad-5793-43f5-ab7e-25d27a1e7c54",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "19d9f667-0511-4af5-9308-05096ad2abb9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39dce2cb-d368-4236-8c6a-fe6314a1f4cd",
        "cursor": {
          "ref": "4c5edc4a-c13b-4972-9e4c-3dd1129af701",
          "length": 282,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "1e8fb7ad-a84f-49fa-a371-8653b0960e1c"
        },
        "item": {
          "id": "39dce2cb-d368-4236-8c6a-fe6314a1f4cd",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "aedec264-4547-460c-bb23-22eadef00549",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe4c97ae-c564-4efa-8b08-0a46c30c200e",
        "cursor": {
          "ref": "c86301df-8e5f-4287-95f3-7f04a85ca969",
          "length": 282,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "1f965ab3-cbdc-47d3-a72d-bfe7f485d932"
        },
        "item": {
          "id": "fe4c97ae-c564-4efa-8b08-0a46c30c200e",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "ab21a4e5-73df-4c22-83ae-2153c34e7c54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73a3cdba-cb61-4a75-9eae-505952f50402",
        "cursor": {
          "ref": "b77049ce-8a15-4990-b01d-e2ab8e49ea48",
          "length": 282,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "f62a277f-8a5e-4309-ba59-8d2b416e23b6"
        },
        "item": {
          "id": "73a3cdba-cb61-4a75-9eae-505952f50402",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "fcc84cea-c128-4372-b0bd-bc731b13977e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "823a7202-78eb-4cba-8b41-2daf36477c88",
        "cursor": {
          "ref": "2c741137-7233-4660-8e9c-3e4a56dfeb40",
          "length": 282,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "eecdcfc1-97f5-4982-b272-dfdab46183d2"
        },
        "item": {
          "id": "823a7202-78eb-4cba-8b41-2daf36477c88",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "b587a2d5-9f4e-4484-a89a-5ff5ab4be274",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bfcdfc73-c0b8-4dfb-98c4-ddd248d91561",
        "cursor": {
          "ref": "27925a3c-c106-4e03-ae6b-8596e1d8539b",
          "length": 282,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "5accd4b1-edb0-4839-8531-b44dd5acd87e"
        },
        "item": {
          "id": "bfcdfc73-c0b8-4dfb-98c4-ddd248d91561",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "ee4746fa-609f-4d51-adb7-ba7815160801",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2caa1a2d-b28a-446a-9fc4-2d42868b4f1d",
        "cursor": {
          "ref": "80bda1e3-3195-42b5-9ce0-e15a117994e7",
          "length": 282,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "92ea07be-f506-469a-8dcb-e47809c09077"
        },
        "item": {
          "id": "2caa1a2d-b28a-446a-9fc4-2d42868b4f1d",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "6912db7b-d859-4b69-92d3-c73fb4ccec5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "607c78b5-f6ef-4b0e-a5cf-38394418b69f",
        "cursor": {
          "ref": "b06f1916-b15f-442e-88db-2d403942414b",
          "length": 282,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "dd647946-3200-4fb3-9cee-611599452685"
        },
        "item": {
          "id": "607c78b5-f6ef-4b0e-a5cf-38394418b69f",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "053df804-d55a-418c-910e-27420b1b9681",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d5fe2f1-b691-4ea1-964c-8feaf925bed8",
        "cursor": {
          "ref": "9dbed821-6787-45ad-ae37-a87941c6d44d",
          "length": 282,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "2571e7f5-53fb-4919-9de3-9140728923c4"
        },
        "item": {
          "id": "5d5fe2f1-b691-4ea1-964c-8feaf925bed8",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "42c8e42d-2d49-4f64-85d3-05df50a89f76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87f25cdf-78f6-43e8-a221-95d47d7dd417",
        "cursor": {
          "ref": "686e8223-bf0c-4e19-9167-9020d36c7288",
          "length": 282,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "a47926e5-4553-42a4-9961-e9402447da1c"
        },
        "item": {
          "id": "87f25cdf-78f6-43e8-a221-95d47d7dd417",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "ce83b59c-66ef-4e33-a99b-d7079025fc05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fc4eb95-aaa5-499b-bdc9-bcbc0b2c8074",
        "cursor": {
          "ref": "38f5a083-3e03-476f-b476-733da0890e55",
          "length": 282,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "935d10ed-4ce6-4892-b67b-da26473b9205"
        },
        "item": {
          "id": "1fc4eb95-aaa5-499b-bdc9-bcbc0b2c8074",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "6bb58506-aaa2-411c-90e6-7f88c77b630d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62dca007-d375-4f01-99f9-1839a4292952",
        "cursor": {
          "ref": "507cdfc4-a97d-4910-a092-d3dab7dd528b",
          "length": 282,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "b14ca2bc-f840-4b06-8deb-eb2871ce26ee"
        },
        "item": {
          "id": "62dca007-d375-4f01-99f9-1839a4292952",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "2b3d2a46-2528-4a55-a425-a0940b917f7d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 16,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f41ed89b-d606-4bac-9330-f2528d1f070c",
        "cursor": {
          "ref": "6e6e5344-deef-4b84-9979-4482c2cc1ad2",
          "length": 282,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "f2da375d-cf3b-428a-9a5e-82a6ca35ce87"
        },
        "item": {
          "id": "f41ed89b-d606-4bac-9330-f2528d1f070c",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "e87e0a11-2ee1-430c-a660-3dc54e5f8fe1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee5800d9-f9c3-4001-ad4f-78586e08628e",
        "cursor": {
          "ref": "60d3e874-dbec-42e9-997b-7c53e0775dad",
          "length": 282,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "c5b93ead-8484-4b10-8fcf-24db23669def"
        },
        "item": {
          "id": "ee5800d9-f9c3-4001-ad4f-78586e08628e",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "9be5a01d-7a99-451a-a90a-6383eb81dae6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b0739d7-e3af-47c6-b749-80573679a4b4",
        "cursor": {
          "ref": "3494dea3-9bda-4d95-a911-b43d2c34868f",
          "length": 282,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "60cdae73-1372-4975-99dc-e877257ada6e"
        },
        "item": {
          "id": "0b0739d7-e3af-47c6-b749-80573679a4b4",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "2cc5ac74-564f-49a7-b21b-7139c6dfd860",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1d62886-f757-4e13-bd31-7ce0123bfd1d",
        "cursor": {
          "ref": "e2a69834-4b08-4241-bacf-73b06e88dac0",
          "length": 282,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "598b6892-9208-4225-a1bc-408cb11ec6be"
        },
        "item": {
          "id": "d1d62886-f757-4e13-bd31-7ce0123bfd1d",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "238a0cc5-a226-4808-84a2-7b574db5b553",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "470bea2e-5649-4ead-a951-ab01464d0695",
        "cursor": {
          "ref": "8e0d5cb0-0196-4c73-92ac-02dd0a6bab9b",
          "length": 282,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "b02b1f78-d5f1-41e3-8a05-d315041cc624"
        },
        "item": {
          "id": "470bea2e-5649-4ead-a951-ab01464d0695",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "9fbbcffe-bd10-4e19-9de3-9d72c1a15f15",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd527b74-dbbe-4a09-8329-1003e8d9889c",
        "cursor": {
          "ref": "8929ac87-d2f1-455b-8042-8eff793cf7b7",
          "length": 282,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "6a85583e-6f90-4523-8ea3-c9c090fe5341"
        },
        "item": {
          "id": "dd527b74-dbbe-4a09-8329-1003e8d9889c",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "f67a197b-711d-401c-acbd-6fa75b4cd244",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 33,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "e59ef072-3481-493c-ada2-ea7bcb4b6ed3",
        "cursor": {
          "ref": "73030fce-744b-44ad-9c04-c52d2b5b4eef",
          "length": 282,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "6f55a05b-bcba-4159-a11d-28848752ea6d"
        },
        "item": {
          "id": "e59ef072-3481-493c-ada2-ea7bcb4b6ed3",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "ded488b5-debf-4958-b171-d68c95b9b012",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "154c50cf-1970-42d6-939a-790edbdb56e7",
        "cursor": {
          "ref": "e8d2c8ff-d4d6-486f-95be-338cabc7e06d",
          "length": 282,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "fd303e57-c519-4788-bd38-7ccb02b6fe3b"
        },
        "item": {
          "id": "154c50cf-1970-42d6-939a-790edbdb56e7",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "95f1781d-e5d4-422c-8839-060688473ac9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a4da710-7312-4d4c-afd2-54c34a434589",
        "cursor": {
          "ref": "01fc043a-1d27-4f33-84f5-f57725e794b0",
          "length": 282,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "426e740b-cbe6-4703-931e-dfe761937763"
        },
        "item": {
          "id": "9a4da710-7312-4d4c-afd2-54c34a434589",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "86dd72aa-fcf0-4e3f-b0b0-02f47c405426",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d35cf255-2acf-48df-adf3-73c947dcc00a",
        "cursor": {
          "ref": "c1014ec1-ab09-451c-82fe-17539c66af8a",
          "length": 282,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "f4b019da-8ee9-4b83-ba0f-fd223177cd50"
        },
        "item": {
          "id": "d35cf255-2acf-48df-adf3-73c947dcc00a",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "88d69d2d-e424-4e28-8fcd-6241ceed845e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b70c407-6839-4117-bd9f-bfc3e51ec4d8",
        "cursor": {
          "ref": "443b7078-d408-4689-9ae9-9f507e3131ee",
          "length": 282,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "fddba0cc-986a-4cd3-997b-1c0d93b3073d"
        },
        "item": {
          "id": "8b70c407-6839-4117-bd9f-bfc3e51ec4d8",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "07bfe60a-2096-49c2-b37a-872a7b782397",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a352c9d7-a60a-4c2b-ab15-7eb70cf3172a",
        "cursor": {
          "ref": "6dae161a-6635-402b-b944-79aedaef1936",
          "length": 282,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "d24c1113-8cd3-4f79-8e67-61deaab42fcb"
        },
        "item": {
          "id": "a352c9d7-a60a-4c2b-ab15-7eb70cf3172a",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "c35737e4-2da2-4801-be49-9458713c3a1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d921df5-05e7-4601-a9f9-f81d00b047f4",
        "cursor": {
          "ref": "98b15ffc-1d11-4369-8ad3-1cd035b9b46e",
          "length": 282,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "9b9dcb83-8489-45e8-8777-db0cfe57689c"
        },
        "item": {
          "id": "5d921df5-05e7-4601-a9f9-f81d00b047f4",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "a83622ce-1877-432b-908c-6a954d8c4024",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68b6e0fe-c0a2-44d1-bd2a-f75df1f1638d",
        "cursor": {
          "ref": "57e6ed70-05ae-4a4d-9800-0fd2af720373",
          "length": 282,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "2604a787-12da-453c-b338-3152c57a7910"
        },
        "item": {
          "id": "68b6e0fe-c0a2-44d1-bd2a-f75df1f1638d",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "eca10648-1e07-42f9-ac1b-296c5a8a829c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68056124-2eb8-440e-99d3-74bea1421283",
        "cursor": {
          "ref": "1214c13f-48af-430d-aca2-cb4d1d3048ff",
          "length": 282,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "8f8ef6d5-3f16-4bfa-a41c-f06c8c68487a"
        },
        "item": {
          "id": "68056124-2eb8-440e-99d3-74bea1421283",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "6fde89da-2e90-4123-ba42-9a028f648e8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9cd8e67-06d0-4ae3-b7be-8e0014e73ff9",
        "cursor": {
          "ref": "2f11b567-c3c2-4b7c-b9a5-3d1ad2ab8302",
          "length": 282,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "b30064a9-9268-4683-8fbe-a6d7e42e9420"
        },
        "item": {
          "id": "a9cd8e67-06d0-4ae3-b7be-8e0014e73ff9",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "93a2d69c-04d5-4580-a0bb-e33e7ed9ebfc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ac6fe3f-2323-48a7-94a4-663f6be51888",
        "cursor": {
          "ref": "74ca8b01-aa43-4351-ab92-91c8db10af97",
          "length": 282,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "613c7afa-72bd-44ca-80f8-60c4ac140403"
        },
        "item": {
          "id": "5ac6fe3f-2323-48a7-94a4-663f6be51888",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "e99dbeb1-6748-44a0-ae12-364ab350aea0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f6e7c4f-800c-4b02-88f7-56be3d55ed69",
        "cursor": {
          "ref": "ea461acd-c452-43e8-b911-d19b85eb118a",
          "length": 282,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "f9fa03b1-53a8-4d1c-af0a-b17b78fc7c4f"
        },
        "item": {
          "id": "1f6e7c4f-800c-4b02-88f7-56be3d55ed69",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "5ea0dfc7-6034-4caa-bed8-a0a81bd7fddc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3dbb499f-30e5-437e-8277-76e288389087",
        "cursor": {
          "ref": "9abf701a-a927-4948-b7cb-3e30b32a4a94",
          "length": 282,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "28f75210-2be2-4d34-a97d-44d2ee314802"
        },
        "item": {
          "id": "3dbb499f-30e5-437e-8277-76e288389087",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "55eeca14-56fd-4d7e-bc6e-28ab79e87e66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30cd5a43-33eb-4000-ac55-c50691e5823c",
        "cursor": {
          "ref": "56dde903-c3d7-4dea-aa27-43c8678bc1d1",
          "length": 282,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "688ce265-69d2-4759-b55f-51ca4e5267e9"
        },
        "item": {
          "id": "30cd5a43-33eb-4000-ac55-c50691e5823c",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "26e328cd-6d6a-4afb-98e2-74fe68554b4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1aa716f9-da54-4d80-b0b5-3a26619cb31c",
        "cursor": {
          "ref": "cd82909f-9f51-44e7-9cb9-d3622ab6b2de",
          "length": 282,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "bfc7df81-736c-41b0-989a-00deee15c220"
        },
        "item": {
          "id": "1aa716f9-da54-4d80-b0b5-3a26619cb31c",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "fd4bc0b4-3d33-4fda-b746-54c9feedb179",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67d8c485-7f05-4614-982a-5e0cd390f09c",
        "cursor": {
          "ref": "b9ded1da-d85c-4bdc-9e90-e0d78dd9fed1",
          "length": 282,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "ab7649d8-c566-4dc3-9b79-a1154f2c8a01"
        },
        "item": {
          "id": "67d8c485-7f05-4614-982a-5e0cd390f09c",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "d647a8e3-33dd-45f1-acd7-25c19ac21d48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43696cbd-9ce2-4a03-aa5a-ead02bc853f9",
        "cursor": {
          "ref": "72fb91cc-79e6-4848-9b63-4088cb9a986b",
          "length": 282,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "b041ae0c-5a14-4a0f-9ba8-17975a36ad49"
        },
        "item": {
          "id": "43696cbd-9ce2-4a03-aa5a-ead02bc853f9",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "a32152b3-41ce-4c56-96ec-d3beac69d697",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9bf94c8-a047-4653-b563-6ec24bee19f8",
        "cursor": {
          "ref": "740bbdc2-a42a-4f9a-870c-54a9e8ba88ae",
          "length": 282,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "bd722008-e8fd-449c-b94c-975e16f4e25d"
        },
        "item": {
          "id": "d9bf94c8-a047-4653-b563-6ec24bee19f8",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "5452740b-8b82-4509-aba3-58835fb384e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84992525-4273-4cd1-a0b4-1ee4df289e5b",
        "cursor": {
          "ref": "635413e7-5d8f-4231-ba7f-8997f067f1a4",
          "length": 282,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "fba51526-6ad1-4b47-b51a-e5c2396ba0ba"
        },
        "item": {
          "id": "84992525-4273-4cd1-a0b4-1ee4df289e5b",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "e46db20f-89b8-4c77-8f98-0995c7a8756b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd352bad-18b0-4bcf-ab0a-adc36969b01d",
        "cursor": {
          "ref": "9d557cc0-0d22-4c94-91a9-8421f58fc7ab",
          "length": 282,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "d194f4b2-4d0e-433a-9789-fe7d91fb351f"
        },
        "item": {
          "id": "fd352bad-18b0-4bcf-ab0a-adc36969b01d",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "f833d194-ef3e-41ec-915f-223273679b38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9793049-1e10-40cc-af88-6e2bc6de2559",
        "cursor": {
          "ref": "a8c55849-3fc5-4421-9fee-31f55a3a0499",
          "length": 282,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "af0fd5f4-c58e-4a8a-8394-e53af9c8bb97"
        },
        "item": {
          "id": "d9793049-1e10-40cc-af88-6e2bc6de2559",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "27ddc638-ac7d-4b20-b09b-a52284c4cdd3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f929869a-c3a4-4214-9e3f-e2411dca2f93",
        "cursor": {
          "ref": "65279d6f-9d94-4d52-a416-4a4abfd04550",
          "length": 282,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "0addc8b2-aa9a-422a-ae09-40279b3aa7b8"
        },
        "item": {
          "id": "f929869a-c3a4-4214-9e3f-e2411dca2f93",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "465922c4-edb5-4895-8349-6897998a8bcc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b977fec-3e3c-4724-beb2-b5cd3837ab95",
        "cursor": {
          "ref": "cf10eca9-c465-4b19-ad5a-d556a1042fcc",
          "length": 282,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "61649f01-af37-43fa-9a7f-83ef8da0e685"
        },
        "item": {
          "id": "0b977fec-3e3c-4724-beb2-b5cd3837ab95",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "1b77f58b-54ca-48aa-97f4-6fb81417b028",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70470f26-cfe0-4831-b37b-d69ccaa8f067",
        "cursor": {
          "ref": "d6737a0e-bab1-4db4-9422-ef03f82f0fa6",
          "length": 282,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "35730324-40d1-4c0d-911c-ebca09fcdfff"
        },
        "item": {
          "id": "70470f26-cfe0-4831-b37b-d69ccaa8f067",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "21789737-2a45-4c25-8d92-978b81b226a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c2800ef-2038-4513-88ee-4a4e3a818b4d",
        "cursor": {
          "ref": "bc35da37-8722-4a10-b21a-52a592bc98a0",
          "length": 282,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "4a8da2a3-e261-40ef-b4e1-567c61eb8d5c"
        },
        "item": {
          "id": "4c2800ef-2038-4513-88ee-4a4e3a818b4d",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "60ffe1e1-3230-4a89-bc29-f831ca7b726c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5824545-1027-4db2-b820-d4b327c96791",
        "cursor": {
          "ref": "7e7fbc00-18b6-4f13-8bf8-19535052fd7f",
          "length": 282,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "cca385bf-33b7-43b8-a6d2-2d9c09146180"
        },
        "item": {
          "id": "d5824545-1027-4db2-b820-d4b327c96791",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "cc1c5c4a-8084-430c-9dbf-e52098e2f2d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0332e7c-b228-43e1-b68e-8e3964ccbf73",
        "cursor": {
          "ref": "268b3711-437b-486e-ab81-bc7ae7b61b36",
          "length": 282,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "28dd4714-f608-4861-9c63-9f47d29e412b"
        },
        "item": {
          "id": "e0332e7c-b228-43e1-b68e-8e3964ccbf73",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "e052b2bf-e499-478a-aab7-e1b3a3657b4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "171de940-db8e-455b-bf47-203a17b21441",
        "cursor": {
          "ref": "1fb625c6-ec44-4b8d-b180-ee6a6d2998fb",
          "length": 282,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "3c3ca939-98a2-4b60-bb84-71b375fab07e"
        },
        "item": {
          "id": "171de940-db8e-455b-bf47-203a17b21441",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "2481b728-2089-402f-8042-0062b75f27df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abf28989-a747-4d02-bc79-4b41d73f07d9",
        "cursor": {
          "ref": "6a4521bb-7ba5-4146-8ec4-22fa1dff007e",
          "length": 282,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "38e106a0-0f05-4bef-8e56-aa9da23197aa"
        },
        "item": {
          "id": "abf28989-a747-4d02-bc79-4b41d73f07d9",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "6ed2118f-643d-48e8-8f4b-9079b5bfb8e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d12803e7-181b-4371-bd8d-bbc8a6603152",
        "cursor": {
          "ref": "b9cc851b-fdc4-426a-8cd7-a8c3ee7172cb",
          "length": 282,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "b200d764-2c4d-4430-bfe9-2262ca87f26d"
        },
        "item": {
          "id": "d12803e7-181b-4371-bd8d-bbc8a6603152",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "3d5c1647-66c2-495a-a52e-a2bb56aeb9af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:214)"
            }
          }
        ]
      },
      {
        "id": "c33bcbeb-eb17-462f-881d-f7048793a506",
        "cursor": {
          "ref": "9fbb2d5f-7a7d-409e-aa8a-8c5be1e937b2",
          "length": 282,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "8f658c96-da05-4b16-b4f6-04fe6bd9592f"
        },
        "item": {
          "id": "c33bcbeb-eb17-462f-881d-f7048793a506",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "8c638e85-e8f6-4c78-8647-e86f8b3bfc3e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "9af6e879-a295-4ffc-89c9-623664a19f84",
        "cursor": {
          "ref": "1e6461fd-5a22-4e54-9d5f-006e9a745949",
          "length": 282,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "f6fb9eda-3f5f-461a-9632-b3f8437e8897"
        },
        "item": {
          "id": "9af6e879-a295-4ffc-89c9-623664a19f84",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "78f25d47-e3a5-4e85-b151-ebce1023a97e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "397cdf9e-2699-4920-9d22-f5750a28c749",
        "cursor": {
          "ref": "eb428774-54f8-471d-ac2d-2b7ac2868a98",
          "length": 282,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "c233cf39-5f7b-4acf-b02b-b252076eee15"
        },
        "item": {
          "id": "397cdf9e-2699-4920-9d22-f5750a28c749",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "4403e18f-7561-4b5b-b103-201eca5a2cb4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e4861f1-3d76-4adf-a173-d9ea4fc14e0a",
        "cursor": {
          "ref": "e53a16d3-6bed-4584-8b1a-6d65bbe2f7f6",
          "length": 282,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "2a30675e-db35-45b0-9b7e-8342578f71e1"
        },
        "item": {
          "id": "2e4861f1-3d76-4adf-a173-d9ea4fc14e0a",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "5d5335fd-bedd-43f6-ad3e-0f47f60854c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:218)"
            }
          }
        ]
      },
      {
        "id": "85ca9ae3-bc16-4bda-af40-ed8d0ed19c1b",
        "cursor": {
          "ref": "1722cf32-2ff8-4031-902a-913c21c6e224",
          "length": 282,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "400c3f64-b9d6-486e-96df-01f404aaa184"
        },
        "item": {
          "id": "85ca9ae3-bc16-4bda-af40-ed8d0ed19c1b",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "7f1f2ced-5c09-451d-8ea1-360f5d50ca28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1088,
          "responseSize": 1523
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "83c48d27-9fab-4ea6-a3ab-b83788b82fdd",
        "cursor": {
          "ref": "2ad77ba7-80a9-4203-8441-73280ed9daa1",
          "length": 282,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "c9b1f2ed-542d-4593-8497-133df2e91e04"
        },
        "item": {
          "id": "83c48d27-9fab-4ea6-a3ab-b83788b82fdd",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "8f7d5082-03ba-444d-954a-8747ca0aa2ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "dd352ce6-955e-4ea3-8892-39493dd78020",
        "cursor": {
          "ref": "821eb9d7-da16-4c59-9c60-df7851aa8ab1",
          "length": 282,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "30b3988e-cff5-4ca4-83fc-e73cf944b738"
        },
        "item": {
          "id": "dd352ce6-955e-4ea3-8892-39493dd78020",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "e688cf33-2e8a-44b8-b61a-fa49f17f53c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "9732c719-e508-4747-bc59-9a527b029a47",
        "cursor": {
          "ref": "adf33561-437f-472e-af29-709e5e845222",
          "length": 282,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "9d9c8cf3-97cf-4cf2-a58e-4881650e0fd2"
        },
        "item": {
          "id": "9732c719-e508-4747-bc59-9a527b029a47",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "6d66dfcf-3e4b-49dc-90bf-626f1a442b91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "75183e04-c3fe-45a9-b65a-7f41b151f3ef",
        "cursor": {
          "ref": "5337b98e-42aa-4b3c-9aa6-591b19fb8abf",
          "length": 282,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "5acd6b9a-5f7b-4753-b46b-df6b296f02d4"
        },
        "item": {
          "id": "75183e04-c3fe-45a9-b65a-7f41b151f3ef",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "21b6269c-9a03-4c22-bb2f-9a1647cbd997",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "2f865dd1-a217-4041-ba76-b924cefefb0c",
        "cursor": {
          "ref": "f15566f2-d099-415c-87ae-52430422dd5c",
          "length": 282,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "52ffb4bd-5b2a-4967-bb2e-5c5b88cb6fea"
        },
        "item": {
          "id": "2f865dd1-a217-4041-ba76-b924cefefb0c",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "91614366-672e-484b-8eb1-c8ba02133958",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84858b83-6723-4cf9-833c-dd80a8d0832a",
        "cursor": {
          "ref": "b4d7e8f1-830f-42f1-9438-de950415631e",
          "length": 282,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "64342c78-1331-40ea-81f3-a0b8bd634ede"
        },
        "item": {
          "id": "84858b83-6723-4cf9-833c-dd80a8d0832a",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "d3ce8eab-060f-433c-a86e-2e9db16918ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c775ed7-af9d-4527-ae4a-aed4ecce1b67",
        "cursor": {
          "ref": "63155efb-5c43-403a-a458-e7d02ced38cf",
          "length": 282,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "7fd4ee48-a8c8-4fc6-b666-5b4c816e4a91"
        },
        "item": {
          "id": "1c775ed7-af9d-4527-ae4a-aed4ecce1b67",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "bc4aa904-8386-4476-92a0-ab0bcbe312e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "055a45a8-bc1a-40ba-aa2f-308053cf922c",
        "cursor": {
          "ref": "9d3c32da-9c4a-4974-9acb-bca36e95797e",
          "length": 282,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "35187df8-2277-4836-9cff-17c8bfa1185b"
        },
        "item": {
          "id": "055a45a8-bc1a-40ba-aa2f-308053cf922c",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "70a0927d-e2af-4bed-b89b-8c82c551f389",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "959c9a19-adea-42a2-add1-9320b8bb12ab",
        "cursor": {
          "ref": "2359ec60-de0a-46de-8556-37cac7981d7b",
          "length": 282,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "d25da707-4e0b-44d9-9d31-b59690bd527a"
        },
        "item": {
          "id": "959c9a19-adea-42a2-add1-9320b8bb12ab",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "4703a96b-46eb-4cee-8129-5386d2e57880",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52cf452c-0936-49cd-a573-2a0ea77f9650",
        "cursor": {
          "ref": "b656d752-6706-4ca0-8d20-e6a992147930",
          "length": 282,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "99ae0a3d-96c9-43b0-b850-e57128c34f09"
        },
        "item": {
          "id": "52cf452c-0936-49cd-a573-2a0ea77f9650",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "31e695e6-7e30-439c-8e86-8b0085a9aa29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6f59828-96bc-4f7d-bf62-1f8b39e9d7f8",
        "cursor": {
          "ref": "36356d6c-e8b7-4e5e-bcdc-52d9dd9f1440",
          "length": 282,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "c32bf3fc-367e-4bc6-9e85-6f2c644d554f"
        },
        "item": {
          "id": "c6f59828-96bc-4f7d-bf62-1f8b39e9d7f8",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "3876c14c-9d19-421c-8509-86d4346d407f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3db3f986-68a0-4e36-a8c4-a7dc24ba7b8b",
        "cursor": {
          "ref": "22a09a9f-4c88-48bd-8fee-c763a985b7e2",
          "length": 282,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "44eea829-4d88-4b7a-81fa-f15f5bd57a4d"
        },
        "item": {
          "id": "3db3f986-68a0-4e36-a8c4-a7dc24ba7b8b",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "cb2e893c-1a7c-4c31-8916-5232c9913fc9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2559e5db-24b7-45eb-a72d-3b697ce3eb6b",
        "cursor": {
          "ref": "dffab775-72d8-4ac5-882e-898341f365fa",
          "length": 282,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "665abbb0-14e4-4b8a-aadd-ff09823b4b7c"
        },
        "item": {
          "id": "2559e5db-24b7-45eb-a72d-3b697ce3eb6b",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "ff174583-e1e4-4a58-94a0-c67c8767aa5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "629f8c0a-f6d9-4b56-883f-750dea248ea8",
        "cursor": {
          "ref": "f4ab2fd5-17cd-482f-8c22-f1f7a32fa0a8",
          "length": 282,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "6e0c9c89-53fe-4ee2-9b0a-1ef93d5244a2"
        },
        "item": {
          "id": "629f8c0a-f6d9-4b56-883f-750dea248ea8",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "247aebc3-da9e-45a8-9fad-710f88533f64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af216d9b-e5fb-4a8a-8b72-27c757e27f06",
        "cursor": {
          "ref": "7a0d0dda-6100-4c7c-8b18-8228fd42416d",
          "length": 282,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "7cd90509-f0eb-49d9-81c7-efcede5a92b1"
        },
        "item": {
          "id": "af216d9b-e5fb-4a8a-8b72-27c757e27f06",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "dcedf2bf-f848-4c8c-a8ab-797d07f30ee6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "724c4af1-3579-4452-b52c-ca9f5d6b5cd1",
        "cursor": {
          "ref": "b43841c9-a607-4252-978b-84c92231289f",
          "length": 282,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "63e84245-1c52-4536-91a6-bbca544df595"
        },
        "item": {
          "id": "724c4af1-3579-4452-b52c-ca9f5d6b5cd1",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "99c5d377-f89a-4d2c-9385-388a83b45102",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7ae3901-fd53-4588-926f-8c3ab5009567",
        "cursor": {
          "ref": "17854d48-9b79-4085-b5f5-9b0fe4951d0b",
          "length": 282,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "386a6c22-9011-4711-99f4-8df29f0a40b6"
        },
        "item": {
          "id": "e7ae3901-fd53-4588-926f-8c3ab5009567",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "11501983-dfbe-446f-81ee-b109c471028c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4956dbdd-1946-4a37-b901-237eacfba04c",
        "cursor": {
          "ref": "3f7185d4-d92f-4b1a-8176-2815eb87167f",
          "length": 282,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "b9c0f8f1-1aa5-45b0-be99-64d46a52282b"
        },
        "item": {
          "id": "4956dbdd-1946-4a37-b901-237eacfba04c",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "29a5bf65-adec-40db-859e-03aaad058d07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1076,
          "responseSize": 1517
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:237)"
            }
          }
        ]
      },
      {
        "id": "29e40369-b522-450d-adb2-1ae995423c58",
        "cursor": {
          "ref": "4d73b7be-8f35-4803-8e32-01d86f901512",
          "length": 282,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "e2bc817a-09d5-4923-828c-9066e4159144"
        },
        "item": {
          "id": "29e40369-b522-450d-adb2-1ae995423c58",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "c041793d-b3eb-4571-a794-d361da70ac00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1069,
          "responseSize": 1503
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "b00795e0-27d8-4571-9421-f7f14ecc41e6",
        "cursor": {
          "ref": "dd1ce165-6171-459f-b9fc-22219c5a428d",
          "length": 282,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "293720ec-27a8-47e8-97ca-44a086a9688d"
        },
        "item": {
          "id": "b00795e0-27d8-4571-9421-f7f14ecc41e6",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "ead833f6-7e50-48e4-b7e8-de5271a5a962",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "2c5c04e7-7307-4fcf-81ec-a4d1ca666e4f",
        "cursor": {
          "ref": "0301191d-06b2-4ec6-b42c-ae7bfd98fead",
          "length": 282,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "476e7022-60b5-4853-9935-6ba0a0d3aa23"
        },
        "item": {
          "id": "2c5c04e7-7307-4fcf-81ec-a4d1ca666e4f",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "bf3004ed-9e09-4cc1-97e9-09ba9d4adea4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1102,
          "responseSize": 1502
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "8f31e815-e552-4437-8c98-2d38fdea8631",
        "cursor": {
          "ref": "01b048f5-6364-4066-8c83-734bc4f5c170",
          "length": 282,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "54929dcf-7bec-4e99-877b-3370bba0de57"
        },
        "item": {
          "id": "8f31e815-e552-4437-8c98-2d38fdea8631",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "da1ed6f0-3261-4b6d-a24d-575df73fc9f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "d8af7675-65a8-4764-938e-3c9d22a27747",
        "cursor": {
          "ref": "5956ed97-77f9-48de-a951-a8be1773bffa",
          "length": 282,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "5e3c41de-0d12-457d-a11f-d159316a66db"
        },
        "item": {
          "id": "d8af7675-65a8-4764-938e-3c9d22a27747",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "e8becc58-3636-41e9-922f-dbf1f06bc1db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3204f03-daaa-43e2-82ea-83a9c4e43392",
        "cursor": {
          "ref": "977915db-ef1a-4db8-a953-0a02cb19c3c8",
          "length": 282,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "7e81dc92-bd15-47f8-b760-d724c26de961"
        },
        "item": {
          "id": "b3204f03-daaa-43e2-82ea-83a9c4e43392",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "836a9a06-cfc2-44a6-9576-9651d8e42e1d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbaebee8-7c8d-4b44-b400-7ac73b29475e",
        "cursor": {
          "ref": "e0a5e959-b43b-4d54-96cb-a45435f62ffc",
          "length": 282,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "dc035a25-d662-4be8-90d7-a1b9f3c5891b"
        },
        "item": {
          "id": "dbaebee8-7c8d-4b44-b400-7ac73b29475e",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "ad169712-96a7-49b1-9373-15fbfc2943c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ab00899-88f6-491d-9e86-ff87c87916aa",
        "cursor": {
          "ref": "a96f4c67-53df-45c1-8a76-5a72103a3972",
          "length": 282,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "eab07a95-8df4-4b88-85c7-27e57a8451eb"
        },
        "item": {
          "id": "4ab00899-88f6-491d-9e86-ff87c87916aa",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "05391c7a-6554-4f66-a513-02fc1edfe4ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60fb9602-8779-4e7e-92b3-df7461d212f4",
        "cursor": {
          "ref": "c7159982-71e9-45f5-9e2d-68664151153c",
          "length": 282,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "a765b09c-7806-443d-bf0b-386a10bce573"
        },
        "item": {
          "id": "60fb9602-8779-4e7e-92b3-df7461d212f4",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "3ba31f82-78df-4ea2-a0b5-a14c7cf8659a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11a08847-d683-4c87-befc-2f66a2d5663a",
        "cursor": {
          "ref": "537823c9-29c4-4bda-b39f-cfdb4ebe3d82",
          "length": 282,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "07770e1c-c7a4-4332-8cae-74e951d40b60"
        },
        "item": {
          "id": "11a08847-d683-4c87-befc-2f66a2d5663a",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "5d6c384a-a0f1-4404-9a87-7c2d4d510015",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe7cdb3a-60c6-470f-9b23-2a6dd473d4a3",
        "cursor": {
          "ref": "8a7dd3d5-64f9-48eb-bc2d-b5d2dc59ab2c",
          "length": 282,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "6998c798-e9c7-4ef3-8f6b-0e02239cd6e2"
        },
        "item": {
          "id": "fe7cdb3a-60c6-470f-9b23-2a6dd473d4a3",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "395ff081-8bc3-48c2-83b2-bc792fae8eab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "245de98c-7763-4b13-a438-0886e51ff4d7",
        "cursor": {
          "ref": "c162512c-fdfd-4761-96e0-9cb835d89962",
          "length": 282,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "f8bf7da8-8016-4ffc-a6f1-56384f83e585"
        },
        "item": {
          "id": "245de98c-7763-4b13-a438-0886e51ff4d7",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "01172dae-2829-49d9-aded-e51eff91e0bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0885a0c2-09d9-4d70-b42e-d2088d76236d",
        "cursor": {
          "ref": "cd42ef83-bd08-4505-be2a-6b6fe8369607",
          "length": 282,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "729db857-6a19-4837-ac05-0dd9e7406a6d"
        },
        "item": {
          "id": "0885a0c2-09d9-4d70-b42e-d2088d76236d",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "284843bd-5aa5-4809-90ec-cc1dda27663c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5133cd72-d21b-4960-bb92-095be62d998f",
        "cursor": {
          "ref": "a3d2bd7f-32bc-45c3-87ed-eb0e3f51c8b9",
          "length": 282,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "8f37e038-8059-431e-bf5f-b1cedd3e9fda"
        },
        "item": {
          "id": "5133cd72-d21b-4960-bb92-095be62d998f",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "1c5c20ba-33fc-46dc-9ff1-05108f43c3e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3897590-d0d2-4ff3-acb3-93640e577d72",
        "cursor": {
          "ref": "ea654d49-d684-4dff-9240-0384dfaaa062",
          "length": 282,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "5eb662db-9d8e-4363-8149-31ceee736bc9"
        },
        "item": {
          "id": "d3897590-d0d2-4ff3-acb3-93640e577d72",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "1898f714-da33-406d-a865-8d0f92a49e11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87f88174-973e-4099-8a65-760802109fa1",
        "cursor": {
          "ref": "e2f940ae-8261-4563-bad7-4443252d79b1",
          "length": 282,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "80096494-9288-4bbf-9874-cee9a46e5b3e"
        },
        "item": {
          "id": "87f88174-973e-4099-8a65-760802109fa1",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "3d4e8ef4-6910-4414-a827-f09ac592a819",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fe35184-1d39-482b-bfec-9732f84a8fe6",
        "cursor": {
          "ref": "488ec6ae-92f1-4d7a-9d61-e1d9421dc1b9",
          "length": 282,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "81529ec9-4c6d-415b-9e24-3d5b789172f8"
        },
        "item": {
          "id": "2fe35184-1d39-482b-bfec-9732f84a8fe6",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "5dd76f6c-2174-49c0-b1a4-dbbfae8783d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8cd09f7-db5b-4b0d-835b-1236970784d6",
        "cursor": {
          "ref": "07e03779-18e5-45fe-8aaf-34f9f7df5095",
          "length": 282,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "271f16d9-c16a-478c-894a-77a6b58fbf82"
        },
        "item": {
          "id": "a8cd09f7-db5b-4b0d-835b-1236970784d6",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "c2230fb1-d8be-495f-a7ab-b7fa84ff87bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10a3bde8-37bc-45a6-9e15-8d450c9dab3c",
        "cursor": {
          "ref": "00cd03bd-2294-493f-8451-16268933a70e",
          "length": 282,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "f4eefd11-9960-4860-9aae-04654d727c0b"
        },
        "item": {
          "id": "10a3bde8-37bc-45a6-9e15-8d450c9dab3c",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "23e954cd-6587-4c9f-bb7a-a46d843f9f3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a85fc298-9fe4-47bc-bc48-4bdc15cbfe34",
        "cursor": {
          "ref": "8325fd76-12e5-4b51-b43c-9f15b63e2339",
          "length": 282,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "48916655-df70-4731-9688-8f331d47f302"
        },
        "item": {
          "id": "a85fc298-9fe4-47bc-bc48-4bdc15cbfe34",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "a473565b-5eec-4f02-b23a-60c60ad3af68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d0fac4e-2fc1-4b0b-87fd-9cb97a5dfca6",
        "cursor": {
          "ref": "78f0448a-1173-4a75-b421-bf2568e889e1",
          "length": 282,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "f6b5c3c3-40ea-43df-9bf2-7eb617d8da3f"
        },
        "item": {
          "id": "2d0fac4e-2fc1-4b0b-87fd-9cb97a5dfca6",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "2d96f341-b27f-4b12-a5b1-b7c90e0add9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4855f7ae-9525-4c33-a2d1-fba3e4433bc5",
        "cursor": {
          "ref": "91912889-aec9-42b4-9115-9feb4fbced98",
          "length": 282,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "748a7d69-cfb5-4319-ace8-67963fec5987"
        },
        "item": {
          "id": "4855f7ae-9525-4c33-a2d1-fba3e4433bc5",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "665a0de0-31be-42d3-8b7d-f0deb245fc7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "576418e2-6872-474c-a853-495bf6cee3a8",
        "cursor": {
          "ref": "62228d67-790c-46fb-8319-616e52d962fd",
          "length": 282,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "9fcf7f59-ea03-47cd-b0e8-6b4f4c8990a5"
        },
        "item": {
          "id": "576418e2-6872-474c-a853-495bf6cee3a8",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "a164721c-dddb-47da-8691-6a8af6b13900",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91953a2c-1560-4f07-ad49-6253ca002bab",
        "cursor": {
          "ref": "c95ba99f-e4e7-431c-9a6c-37e7ef827966",
          "length": 282,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "a12a2b3a-4151-44d3-a44b-d9a96804e25f"
        },
        "item": {
          "id": "91953a2c-1560-4f07-ad49-6253ca002bab",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "00cf3615-c141-4ad3-8410-99cb2b0f0154",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ca90b0d-a1b0-4a50-8873-a03c812f1300",
        "cursor": {
          "ref": "b8deff39-7c98-46de-acf2-0677c31f8146",
          "length": 282,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "e7fdb249-9e59-44d9-a2b8-989211ac645b"
        },
        "item": {
          "id": "5ca90b0d-a1b0-4a50-8873-a03c812f1300",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "a93b4426-bf7b-45e5-afbb-cf3b96eb4261",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b5981a3-5bb3-4eb3-aadd-0dc86a448763",
        "cursor": {
          "ref": "e6ad8131-0775-49e7-9783-a9ebcb6e2fb9",
          "length": 282,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "cb3ee886-51e0-48d9-90f9-ebed3b883dd8"
        },
        "item": {
          "id": "5b5981a3-5bb3-4eb3-aadd-0dc86a448763",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "0b528746-5ba4-48de-87b4-9aaf8f03894e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91cbadac-7831-47c7-b4a8-48109c815c8d",
        "cursor": {
          "ref": "0b64d803-db8b-484d-9cfa-ea6147ed352e",
          "length": 282,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "e5835080-e63b-49d5-9091-749ec4615439"
        },
        "item": {
          "id": "91cbadac-7831-47c7-b4a8-48109c815c8d",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "d215236b-8463-4818-88f2-042e67d4ef42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ad92748-976d-4e20-8f87-5d86731aa7cc",
        "cursor": {
          "ref": "6254d8a2-771e-4429-a4e3-ac5ecb0154c2",
          "length": 282,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "2c6f941b-43d7-4c53-a34c-8bb97e315502"
        },
        "item": {
          "id": "8ad92748-976d-4e20-8f87-5d86731aa7cc",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "48f321d7-1a98-42da-98c2-91635ebbd2c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3661f3e0-ee39-42ce-946c-70fef4e0d3ef",
        "cursor": {
          "ref": "8d15b39a-79b3-49aa-a186-1c21b07cf5ee",
          "length": 282,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "accd8585-a496-4c89-bf9c-4aa480dce7fd"
        },
        "item": {
          "id": "3661f3e0-ee39-42ce-946c-70fef4e0d3ef",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "b1ca03d8-c3a6-46c4-bf01-e13799ed12ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b8e5096-b5c5-49d3-b9a5-255eba19d6be",
        "cursor": {
          "ref": "819a2e64-700e-4f6b-863d-d5a8c827a04e",
          "length": 282,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "99b4fa1c-a8c6-47db-8d0b-b1296b867fb3"
        },
        "item": {
          "id": "7b8e5096-b5c5-49d3-b9a5-255eba19d6be",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "f4c9228b-c0e5-4c67-9d61-3143e67bbb3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "077021a7-833a-4201-9d19-e3604843c4eb",
        "cursor": {
          "ref": "86aa5430-044a-4270-8c04-2ad87bcbb03a",
          "length": 282,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "6490ecdb-b806-4d88-9433-4f1c370f5d69"
        },
        "item": {
          "id": "077021a7-833a-4201-9d19-e3604843c4eb",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "c388835e-971a-48bc-903e-f40cc46d8231",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "080047f1-7743-4e91-a572-85f521370b03",
        "cursor": {
          "ref": "f2a3793e-2543-4046-b03e-04445ca5ad62",
          "length": 282,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "193cbe54-3ee3-4e29-bdc7-b3351e4b000f"
        },
        "item": {
          "id": "080047f1-7743-4e91-a572-85f521370b03",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "234287a7-ab1c-455d-85d2-a9fadc15955d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "970e7b23-ae2d-47df-95cd-7975645635e1",
        "cursor": {
          "ref": "9da4ce45-b03b-4ea1-a716-afc73deb21ee",
          "length": 282,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "3e2268c0-5dfb-456b-b86c-fc3664cc15a7"
        },
        "item": {
          "id": "970e7b23-ae2d-47df-95cd-7975645635e1",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "6d610040-98e0-448e-bc2a-e8746b5a218a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d0626e5-cb7c-43d7-85fb-8e6f3d502042",
        "cursor": {
          "ref": "60586620-d976-4c58-bf7a-635d79a3dfef",
          "length": 282,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "49069413-2b70-4ad0-a2d8-b39a6f386621"
        },
        "item": {
          "id": "7d0626e5-cb7c-43d7-85fb-8e6f3d502042",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "a80046db-18b2-4740-a8c9-4b139b6740d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4197ed4b-f1a4-4699-9aba-4151502e9c85",
        "cursor": {
          "ref": "c412b27f-5d34-4f1b-be2b-f9c4e98c89e4",
          "length": 282,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "e2617184-a970-400e-84b6-2732211fad8b"
        },
        "item": {
          "id": "4197ed4b-f1a4-4699-9aba-4151502e9c85",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "bb3c81fe-9497-4afa-bfaa-440d550a8e7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eea6489b-04cf-4dcd-a2c9-30439048e32a",
        "cursor": {
          "ref": "f0709b5d-5a45-4490-ad13-0160b5210712",
          "length": 282,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "f230d3a4-1a6a-4fca-913f-d48121b9a02a"
        },
        "item": {
          "id": "eea6489b-04cf-4dcd-a2c9-30439048e32a",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "0cac5fa4-ddf4-45a1-b3d3-d04c58aa461e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e03f5e9c-4bb2-4d70-93f0-299c48f7be2a",
        "cursor": {
          "ref": "1ab62b78-9d20-46a4-b867-3b4f80142e37",
          "length": 282,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "bc73e13f-728f-4cb9-bb02-f6a60462d7f5"
        },
        "item": {
          "id": "e03f5e9c-4bb2-4d70-93f0-299c48f7be2a",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "dcf02891-f111-4c3d-8a41-0f6326e7abeb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "732fcfcd-b4b5-4140-9d94-a78e23dabd81",
        "cursor": {
          "ref": "b58a8c4d-6918-4f6b-85a9-b7334cbb7150",
          "length": 282,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "df576c9b-d007-4531-bdb5-bd29242beca5"
        },
        "item": {
          "id": "732fcfcd-b4b5-4140-9d94-a78e23dabd81",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "88f74750-8fc5-453e-ac0b-1d5598ec2050",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4802efa3-ae86-44bc-843f-dc45b3e1382f",
        "cursor": {
          "ref": "ebb1e12c-b348-41cc-b32a-7d7c54923b84",
          "length": 282,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "3e39c05b-1cb3-4ff5-9d20-74dec46f23a7"
        },
        "item": {
          "id": "4802efa3-ae86-44bc-843f-dc45b3e1382f",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "32b7b989-79d9-466d-abc4-a96ee9ffc896",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 16,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c527634-57a3-4692-92b1-ca19504ae579",
        "cursor": {
          "ref": "a2442208-3227-44b9-b3cd-ac65b6e2c7ce",
          "length": 282,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "eda6d8b6-7bae-4d54-bfeb-2e73e04fbb1c"
        },
        "item": {
          "id": "3c527634-57a3-4692-92b1-ca19504ae579",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "2e3a55b2-1b94-4f7d-b907-6042736b8744",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 1083
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:277)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "d608971f-4e80-4d35-a590-32bab3a0a6cc",
        "cursor": {
          "ref": "2d29cd3d-00dd-4b9e-bee6-790211ee4eee",
          "length": 282,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "a84fc306-3215-47a5-be97-0b126c0f8d6f"
        },
        "item": {
          "id": "d608971f-4e80-4d35-a590-32bab3a0a6cc",
          "name": "credentials_verify"
        },
        "response": {
          "id": "a85b9c39-ffdc-4197-bf1f-e27e191aaee2",
          "status": "OK",
          "code": 200,
          "responseTime": 1179,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "312f0476-da25-41d7-ac0a-69577faf23ec",
        "cursor": {
          "ref": "020a4fba-1e93-47e6-8eca-571777b10ba5",
          "length": 282,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "b7468449-00f8-4783-85b3-aafe6c6f7277"
        },
        "item": {
          "id": "312f0476-da25-41d7-ac0a-69577faf23ec",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "3fda45ef-eaa7-4a78-a816-95d9a6e56b8f",
          "status": "OK",
          "code": 200,
          "responseTime": 1053,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "275b8c78-6352-42b3-a23d-ac0a4919129f",
        "cursor": {
          "ref": "57f8e355-e6a1-44fa-b9e8-cbe580d25779",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "ea910a43-10ec-44d3-ac81-2f196f05a2f9"
        },
        "item": {
          "id": "275b8c78-6352-42b3-a23d-ac0a4919129f",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "1eec57bf-e5e4-45db-84a9-ce4dc9d7580d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 17,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "275b8c78-6352-42b3-a23d-ac0a4919129f",
        "cursor": {
          "ref": "57f8e355-e6a1-44fa-b9e8-cbe580d25779",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "ea910a43-10ec-44d3-ac81-2f196f05a2f9"
        },
        "item": {
          "id": "275b8c78-6352-42b3-a23d-ac0a4919129f",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "1eec57bf-e5e4-45db-84a9-ce4dc9d7580d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 17,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aefa78ef-d77a-43b6-aeb7-dd446d8942be",
        "cursor": {
          "ref": "d2fe2ef4-6763-4dcd-b47e-e37634b131d0",
          "length": 282,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "b90d0e91-033a-4c36-9672-bf7dd1e35909"
        },
        "item": {
          "id": "aefa78ef-d77a-43b6-aeb7-dd446d8942be",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "206a4a32-e370-45b1-83fe-21dd7e88c952",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 16,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7a0a9d7-adf9-4d32-89cf-fb0b8224099b",
        "cursor": {
          "ref": "4ff7918b-649d-49a8-acc7-7b6df44a36bf",
          "length": 282,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "d09202a4-5755-4da2-9a16-377d0da705d7"
        },
        "item": {
          "id": "a7a0a9d7-adf9-4d32-89cf-fb0b8224099b",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "5771b178-c2a0-425a-bcec-67281ea47a60",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 16,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}