{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "ce7ee94b-daa5-42a5-88ac-fe095f8f2e93",
        "name": "Clear Cache",
        "item": [
          {
            "id": "d1cf778f-f3f6-4ccc-95dd-93c0305797d2",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "3667eefd-ff41-4a08-823a-e43569097e40",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "74c1674d-7c54-4563-8f02-95f565ccc9c8"
                }
              }
            ]
          },
          {
            "id": "6527b7a2-cf92-4b8f-a143-9cf2a1fef3fd",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "4c53ddcb-920b-4082-85fd-06d7fbc20dec",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "c5da5542-4bff-4ecd-9156-790e94ee7971"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "9d085b06-d9e3-4e87-9225-991c564f76a6",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "a549226a-1e28-4f9b-9260-8a3a5741b104",
            "name": "Positive Testing",
            "item": [
              {
                "id": "6696c6c2-2afd-4468-8ebe-d29b42ebd16f",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "983039a3-a756-4343-b61e-af7184730733",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "948edd3e-feb2-4c69-ac4b-1df15acfccb5"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "eb99bb80-5527-4cae-9968-4172cbf0d905",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "e3bad9fb-ba33-470e-8ada-de8414d90712"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "9c89740f-895c-4f9e-92ce-aba74017da09",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "9952f685-db5b-4eb2-b187-74705a436302"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "208db5ed-74cb-4d9c-923f-a45c2d516cb9",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "76cbd6fe-ae02-4b82-b751-d2ce8ed2f9ba"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6030c5d7-3e9c-46d7-818c-0ed00aee00f4",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a99b9536-4436-4b48-b2d0-35c0c79af05a"
            }
          }
        ]
      },
      {
        "id": "c39ce51e-dc20-4d41-a954-ccae27ed83c6",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "f1f0596d-1222-40c1-8054-76027d889442",
            "name": "Negative Testing",
            "item": [
              {
                "id": "fea43679-b2e1-4042-85bb-981a897f0ff9",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "ae6717b0-73bb-48fb-b242-372f48251e7b",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5be43a69-7281-4f43-b747-569979dc48e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "95ad6e1a-dab1-4736-b5c9-b897b5cb8da6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1661d32a-e5c4-4594-ad45-3c2fbcd97a44",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8d6a770-629b-468b-807f-349a9229e45c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a7133896-820f-4a9a-84d8-474b6b374e26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fce4e06-cd38-4aa9-a03d-40682bfeea3f",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49e26091-3541-462a-9d81-f11d9a4f7a02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ca242d03-2245-4296-9755-f143b8d07874"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "73194c43-b37d-4894-a885-a04762cbaec2",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "4bed6654-cf55-4d97-970d-ca5b92a8a17e",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e91fd81e-dac6-47c8-89cb-382411635738",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d2d5ce1d-adc6-4343-bd69-f412fce23287"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a41a0e2-23a0-4ddc-8f4b-978c0ee0fc73",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fad64a82-cd76-4127-966d-b64e799e8401"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "ac2f7a33-2467-409f-9ee1-401016ffae71",
            "name": "Positive Testing",
            "item": [
              {
                "id": "74793f09-cfd0-41cd-853e-9d8f7e1e2532",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4c353ca7-b9af-443d-9d19-4761fa3a2280",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "1fb56d7e-75d7-478e-8bbc-8632a3be45f5"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "bccf6c03-b6c1-4cbe-b27d-a51ba333bbc0",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "b37f7a60-8800-4cb0-b23b-a74e140a7063"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "467eff1a-eec4-474f-afba-5581e3c06186",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ff7d1116-66e7-49e3-8a6d-816fc5d3696f"
            }
          }
        ]
      },
      {
        "id": "98c95d8c-8a73-417f-9089-946a56e0d187",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "2ad503bb-83ae-4c78-9454-f0fba1e8ac79",
            "name": "Negative Testing",
            "item": [
              {
                "id": "dcdc9b29-fecf-4bf1-8a9c-a45c1d826459",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "8ebf4b62-db07-407c-87f3-9f545b5f7279",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35c96e4f-545b-49f3-b915-194aea1469de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc537706-5129-4cf4-84b2-b6e8cf99acd5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5117769-416a-475a-b5cf-53ed0fa7e59e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6b3b29fb-2502-4461-bb17-a8fb0f5567bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbcec9e5-fa17-4e59-bec5-ec00e64d0806",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c946982-3d6f-491a-957a-a8c5c5cab14c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b19f44c-6d6a-491e-b702-97ec1f31b206"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "125f6452-9733-4c90-a605-b19394ab480e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c3193532-6ab7-4240-8b45-10d54ef9cac8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6481d08c-5cf1-422d-b81a-52a3401f3d70",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c149543a-c068-46d0-9e4d-23226fac762b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2fa7b0b-292a-45a0-b9a5-c4b6fbe0fd25"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c62ccb6b-3ac0-451a-a829-3c75fa198caa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9337258d-d54a-452f-8424-57c3dce0bfa9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "233451b3-609f-48fa-99a0-c7d371466c46",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a13d5314-7bdc-4b91-adcb-88d7dfd1bf30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15914a48-279f-4d20-9864-018ea2396c1d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cac8db6-3aa9-4c1d-b219-7f91595ef193",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "12544f46-fb41-463f-a7c7-fde66d5dcba4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "933d177a-f5ed-4b9f-bf9a-2a99bb264aeb",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0d1daf2-80ef-4c1b-a181-6a63aba263dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2494926-0aa8-4ea5-9293-5ab1f1f199e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c23d7871-e084-4933-b70a-422ff0abcd96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8cf30149-dfaa-4275-8262-f70bb32947a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df5df09b-db71-4e03-afbe-fe8cf8b4687a",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "751c3cc3-b7c6-4779-9400-92a45a0c33d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "371e8b94-5c20-4f63-8ffe-69444b149a6c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59ae9eb4-5d87-46b6-84ba-016c282a7c7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d2f66f57-b957-40a5-8644-7e6af9521f56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d93a47ea-3a89-4807-bccd-27c40c2529ad",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d4b864d-d48b-4fde-a0cb-56e74da371ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42989c95-7bce-4923-8f2c-be0c6e33b6ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4c245e5-5686-4cee-a193-251f2e1e31aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d56f65b5-7fb2-45a5-9db4-51990a0727c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9c45d04-315e-431e-981b-81e062391a51",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09d69f65-b04c-419e-9151-bb0c4ab2fc93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e3f3431-de7e-469a-b2e7-e4efa8c10a4c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "332b4067-42fa-42de-a58a-f65cd89115d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a1cb3535-4846-4e38-82b0-3a3066c54e82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44d765cb-f1ce-46e3-ad93-8204b33a6f7d",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f6a2128-9891-48b7-99b9-28f5456f46ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "846953ae-e40f-4a40-8417-e82d4d662216"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbd888e3-4ef7-42da-be94-210d232a1e5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1e47b822-4821-4211-b1ce-f34259e56bba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb71806e-a6ec-43ad-8f67-60f85ad259ce",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cecd6dd2-0174-483a-a68c-d6b83a823de2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b389492-0046-47ff-a91c-d3d6f0e4810e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd7a00be-69db-47a8-a88f-116c5d84947e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8bfcc654-518a-44c5-b6c7-35fd896be848"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e9ccf50-cfe7-4fda-a786-9531b9a2ba82",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7aff879c-49b3-416e-b727-8a3126d63d4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "918a74a9-e7bb-4aea-9fb8-0dc4c64c342d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b2a8189-114b-43aa-b7d8-b1e49086ea39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "49bd2371-7d6a-4923-afd5-df391a932b9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13d879ce-a2a4-4833-974a-d04abc9eca35",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40aaad7c-5547-49f8-b1f8-473a81271832",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d283f42-371b-4f21-8e73-1aae8a9c2b21"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cb5da42-0f0b-47c4-811d-334612f646cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ced1def1-d6a6-40c8-ae46-eafedffe30d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a623c038-dad7-494f-ae83-e4a1c5b1dc1c",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28826253-6c46-4633-b747-22072cfa2e3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8b4ea9b-9b24-4620-9180-669fe7b96999"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3c2429e-9e35-48aa-929c-6f8fbb91ecdf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b60d78e5-f9e1-4792-87ba-e00c71918104"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d722a0bf-219d-4261-8516-f7d9ba3f964d",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86952058-c6a6-4e82-b7d0-edf352e1e8e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d3b0c54-7fa8-4a99-a9f8-94bb679718fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cecd85eb-d7e6-49dd-9c71-87993ba572f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b61406bd-90e4-4d60-be2e-c19ad3e4af2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54a6e9e6-784f-4926-b609-b1cdc18a2a41",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68cc0af0-e1e1-4ea6-a871-49f60d2daee5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77cdf0a5-ddb4-4514-8887-95c0f647c91d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9fae33e-4f7c-48be-9ad5-485429b7b9ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "828c3f39-cd51-462b-a0ac-8d3f55c92960"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c5a8b95-4d5f-4190-93e2-b8036e10f98a",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ca3388c-978d-4d06-a799-35c457c92a15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0bed2650-5c53-4283-a3b1-d37e93af587e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "226a1dfe-316f-43a8-bfe5-847693175a1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "331b1f23-f1b3-4d4b-a02d-d17b1b250589"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1cfc9dea-eba5-42dc-a418-1c3f9a15caac",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e76fbc0a-998e-4466-b688-0880b751fd43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "acce0ec4-9f3d-4475-8fe2-e769a6385c0a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de48f1c0-f9ce-4f0a-a932-2e5471593cf0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b65b4435-3ee1-4edd-b2eb-52e784a026cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1459c8b8-a8c6-43b1-a31f-59ee729ef87e",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e9fffae-33ba-48a8-a159-82121c23904e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f06b8db2-4009-4b63-816e-fb143c1e566f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2369003-95ce-4250-b845-3e2b6350874b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "9626562c-1537-4300-8a84-19744991db25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37c58b7a-ad44-493b-9048-0ad432463a0b",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc9edb52-ff73-42c4-9add-eedb922feab1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55c36aa5-da14-4fa3-8ce3-73abff8db318"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6515eddb-0612-4960-bb13-32b0e9f5e799",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "966915ec-81ee-4baf-8ad1-0e27eaf54362"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7bc32a8f-fd70-43cd-aa81-518699e41bea",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58a594dd-a597-471f-ad1c-d946d7b0f14c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "681aa00e-e0ce-4be1-9131-bcd2914a1292"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afe504d4-bbe5-4882-afb6-07bdf8718d9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "eb5f92da-6bea-4d4b-a398-ecf69ee5bfe0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eabc25d0-2b36-436b-a82e-4672e7aca25c",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb4a7432-04f2-4943-867b-e693b4508344",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57c03955-9690-4ca2-8837-d34822db79a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce3ee9d3-6d1d-4fca-b654-8ed114927708",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f4ca40c6-1ad9-4faa-b8e4-f82444e91a91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63f4627c-be8a-4832-9c39-9f5e81a16807",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "808d5373-25c4-4733-9ce1-c41931b962ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9408c754-39e3-48ec-900c-03b550721e64"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c18596d-823a-4c11-aa6f-9a6448efa17c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b565901c-0b7a-4881-b04a-6a5e6a6d63f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abc63c3d-0df7-4fdd-9d64-090eb65cddf5",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3951c8a3-8570-4dac-844f-20ae79bacf8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2dba446c-9dc3-4113-9b89-c953b505c2fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe7c04b4-1761-422a-8ea6-d3b5c0b955b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "87d0b0d6-dfbb-4ce1-99fc-73fa5268cb13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23eaf93d-7064-4b04-9033-8de4f8dfd741",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "beddb70d-9415-4b40-b0df-80ee7429a2b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba9deb8c-a1ca-4d5e-b72e-66b9f1a4bb76"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edf1f8e8-0287-478a-86be-e9b94845652d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "b8e33fa3-9606-4f7f-b801-f0735067e137"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4dbec87d-4d39-4a4e-97af-91575dba58d6",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6da48d33-3e4f-4822-b20d-8a4426b0195f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "addf770e-64ad-4a4e-8289-28fe5f2013e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8e2c5e8-c1af-4c4f-a032-3b6b5dad26ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "4b9b14a9-d6a0-442a-b11a-5b154cf2605e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "191f4e5c-da9e-4434-a66e-a140df9b0e7c",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b07763b-6d74-40db-8f90-e3fae1b3e4f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93fba9f8-edcc-4a87-8c0f-af28a7787a65"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a45d5df-84f1-48fe-b54a-96b7e4f41ad1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "64d766ac-40b3-408a-aec9-49dd2d019b51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed260074-3f46-4092-bc6e-8b13a7b29352",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccbe4fbf-8d81-46ae-9fd7-1e7df058724f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "507016f7-feda-4a97-af13-de84f0de1332"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d42c033-cf45-41aa-950c-56065e527be9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "1caac9a8-2340-4e9f-92a9-6b828f891066"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29a6a7cb-89bf-46cf-bae9-e5f4cec1017c",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75a5ed3f-e9fb-41b0-97cc-b45d92ea5dee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d99319b-2cca-4c3a-8783-6c17b926e70a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd737631-b548-4d7e-960c-7ef566b02629",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "6a50962a-a425-4c92-8724-4694b6ad79b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1bcf25f7-3426-4e17-bddc-a77110094a89",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d109d6f2-103e-44e7-b97f-8905d8c221b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2da7dd0a-a8dc-4621-aadf-c2a8a6af7168"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95363855-e493-499c-b1c0-4506f0a34789",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "e82728a1-9a5d-4be4-8d82-08d1d3332279"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c92913f5-e6d3-41c9-8851-aa57d0c37203",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cb2cfb0-1aae-4d80-b69a-6b2adf525ca0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9fa8a63d-cc7f-4463-8688-0a2ed1caa888"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2f266d7-afa9-49da-a926-710353a10498",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "57c0d067-d6ca-4e9e-8995-abd53602327a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7843f834-72fd-46b4-949f-6cf5d72604ed",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8664c878-a61a-4113-b932-0c318a851846",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab9ab5da-d8dc-4675-99d4-e4c9edcb98f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a2dbf76-e6f7-48c2-87d5-90d228a55269",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "a467c5d1-1965-4f79-954b-15815c59726b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c91239b7-06d9-48f3-8934-0bbd462de3b2",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f817e679-dcb9-41d2-81de-d0f3eb182f9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "394038ac-4d7d-47a0-a759-329e03aac162"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d08fd66-9a40-4c3f-a3ca-a6ac0f3e81ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "77638a92-bc8d-4375-960e-478d30b56efb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53e71d04-99b0-4c6c-8d86-a3eefcc97559",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3569c78-574b-476a-ad52-9c76bd8f1b45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c965cd6e-9456-4ceb-9513-9363eebaab73"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62b74f47-1811-4408-a261-01793dc25a49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "67c99935-9ceb-4031-a102-90283e75a8e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96a830fb-fd35-4c6f-a25c-a8fd26d1ad5b",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef8fbe93-0c0a-4444-9032-950d51d3778c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a486f65-41ef-4a39-8315-65663e5fde26"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8f4eb03-a5a3-4fab-9b43-f307e566b188",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "501da7b3-3ebf-49b7-8489-4987128dd347"
                        }
                      }
                    ]
                  },
                  {
                    "id": "726d3203-bc67-47ea-b7a4-dbf9513f42a1",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b8b3757-5eee-4237-bd58-c04747b08694",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64e37070-cfb4-465a-803c-79bdabc5fbcd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e9d237f-0ba8-4378-a802-9dda48089b90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "ee634d23-2cec-47a8-8242-c669b390da11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3be25aa8-b9aa-4267-a6e4-1b69ae9e4551",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "afacf220-777a-4cb3-81e3-e41c6656dff6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5d561bbe-57e9-4b3c-ba75-be145605c86c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2cfdddcf-c845-4d46-9223-29f569694cd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "70378497-3cf8-45d1-afdc-1abc27bdd0b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eec8f9f7-ac83-4061-a495-299502a551ea",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbf9ba16-10ec-47f2-9e8c-8e80bc45a31e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3de75092-bd9b-4460-aef1-268398317fe1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "826aae6e-03f8-438f-ae9d-bfa56f9d3431",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "4397292a-c4f7-4ea9-84e0-c8c162f15a33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6dd93a94-88e6-4af1-9f1f-b752a84af783",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5de4eea-1038-4cb8-a282-f779dc78862d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06e933a5-a474-42bc-a7d0-e934731a5ae5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1dea7351-3ad0-4391-9249-a27985533c83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "956003f6-0ff1-4730-b08a-68f06bcd3549"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77310add-6638-48b3-a080-e314ceaa0486",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b39830b0-f946-4581-a05b-062bd7c1d4ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d599b9ca-a904-4018-9e0a-c87fc1a49919"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f1c8e3d-5f3b-4d9c-98de-7725dcf6ae7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "dd28f06f-0d94-44e2-9914-74a2f362340c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "687cae73-ea29-45d1-9579-b9e56f4004ca",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21c4e39b-3dd2-41d8-85fa-46a476cae4f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f219a89a-f8e3-4024-b158-30a8504d51e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39283f91-c4f0-423c-b7c5-6fba5ba821a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "efac89b6-bfab-4971-ad01-1e51323e0567"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8da727c8-c565-45e1-a016-812fec58c1ba",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8eb2cfa6-cef6-4748-ac4c-33cd33d7187f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d9a14af-6d17-4717-b810-1df4af2f7ebd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c6df1e1-3742-4f8a-950c-d6e8dd3c620a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "7a138227-ed03-469d-9ee3-badb771a016c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba299632-71a7-49cd-992c-8dab54c9f1a6",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d81aea4-bdab-419c-ac9f-b909e9b92b92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60b17daa-69da-4f1c-939e-4782ba0ef443"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f1993e2-eb65-4b92-ba04-c2cacb506300",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "8f8cd859-8b1b-48c3-b32c-17f74dc83f20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "065eeac4-38b6-4c97-ad61-0fce1bacb705",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cbc8e5f-4946-4472-8ed4-5bfd87f2018f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6363d24-81af-4e9a-a1f0-4b98c6424a71"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "167e3db6-6442-4fec-9094-46004ca55062",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "eb6b5a48-e791-43dd-8ad5-8d2e3f5877c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2187f593-0173-4dd8-9121-15ffbc057b73",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1711e47c-6cd6-4929-b125-1391d9c7bdb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b11077a-87e9-494c-b7f9-f06ebb4849b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "735cd0eb-6a18-4ca1-a116-6fae4b8db2f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "00d040e7-27d9-4cea-9733-6a7cff91df4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8597e1d9-b754-4435-ad1c-e81e8e0166e8",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24140a90-455d-4392-b7c2-d965e0368e80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3853015b-df4b-4845-85de-a6784d9f9361"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce8937b2-5b49-4136-a873-b54bf61196b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "310e0602-bb06-4b1e-87da-dfbc02cb3016"
                        }
                      }
                    ]
                  },
                  {
                    "id": "259a192f-2199-4f0a-b569-ee6e59ad8c74",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f826f63-76a2-4c7c-99c2-ba4985a90a81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79367074-f4cb-49b0-89c7-e2fb158ecdaf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05392529-fe9e-4c21-b80a-2f5a41b0ee80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "eb3c428b-6c7f-4e9e-b550-9c09c6bba6bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f16f7750-bcac-4925-b99f-ce2c4a087ae9",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6333467f-e2c8-44d4-aa7a-7ac1a006386f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a4a4159-2392-456e-8b0f-501c8909397e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a901668-c9b0-4772-bc61-30737c5c6361",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "abfc07a6-410f-4e59-94c0-b6ac7ff111be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ca13974-9328-49cb-9a0f-f2eea3552ffd",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3aecfd89-f327-4bc7-97f2-f042551965d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6eafc8fa-03d9-4329-b409-7f4f83589812"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22882f2d-fa46-406a-873f-80d98ed2a5ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9d8eb119-e80e-4240-8c49-d09cddb08b70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fde93e4b-6ca9-49cf-a987-bf7355d219ab",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "948714b3-d318-4219-972a-fba3e4661550",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c37fec59-777e-4512-b024-8012a94c76ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23110458-899b-440f-9960-2448183de423",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "bf6bbaed-b61b-4706-ae72-7fea6ce1cd83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a8c4e8b-6f10-41c0-9c32-27d845670467",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "396897f1-f839-4710-9f7b-2b2e535d32f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "505aed0a-5da5-45ef-b970-b5b3b81d0363"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "246d0990-0077-4078-8469-97982fc18a3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "bd165553-aa1d-4f7f-89b5-6e12cf98fb77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd7e9f83-756b-462e-bf4d-3d8f1c64062e",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93e53bf8-e97f-4069-ad53-0c2f12af187d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea6ee228-c4bc-4a51-bd37-3ec566e79378"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c703a28a-daf4-4d57-8438-b5861967ce89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "416df843-9179-457f-a792-69c37d075cbd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a24a1121-722e-4c5d-ae3e-3adc35ef65cf",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7dbfb9a6-748c-48a0-a9ce-40d4ae0cd67a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e973f9dc-0327-449d-9561-f3c4e0730ad9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0fab3cc-f1d2-477b-bbb0-09e62da0b4bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "024cf83a-b991-40af-917b-02f43512111a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f1ae1ed-5b5f-41c7-bfca-afe92c519603",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f2fc793-78c2-4851-91e3-a706e9f22559",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6812ea2-6a74-4b48-9bf3-e12abf404eb0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a2dab2a-e11f-4894-8790-0fbd72ed985e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "96541fb4-bd83-4590-b2ff-050592fbcb06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4799aca6-f469-4b99-b913-cc205accb470",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8104e5f2-be1d-4ab0-b720-257a18490f58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52830403-eb13-4c1f-8f56-0f4d3efc63f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c8f0146-fc80-4533-b744-a7a8815ea8ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "dae57881-2117-4e81-a369-bd7e6f4f4f6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3aac04e-e4a0-4b18-9e7a-461e2eb11a9a",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "564de8b7-0662-41a9-9cd4-fdc1534106de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75f697cc-f85c-4d96-9aec-bf53a82070a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6b137b8-630a-4d2b-aa8c-d168c79e087f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ab5adfb4-3e0a-4515-b901-4db6295de5b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e77a15f7-a23e-4c2b-805c-484c49970bfe",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "971372a1-9efa-4365-a1fb-9182c8203553",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39bd6e8d-86a9-43a8-a8b5-ba022239bae1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1079fc68-fd86-4649-a6ff-84cf5819c061",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "a153c56b-cb0b-4184-8c43-37d3b7ff78b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aee4fe12-542a-454f-be2f-c583071b35ea",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ef1eeea-c0ec-4046-b52e-a3865c077aa5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9eb8e160-a659-4fac-b018-5c9a5fb29c25"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29bb8097-76a1-4c4c-9e8d-0e2294fd4912",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "dca9c554-a372-46bf-8c98-9f68ec2899ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "497848bc-4fff-4403-bca4-b225d2fa56ed",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8094ce6-b477-4afa-9c13-10f10afedd9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "946ca365-8b01-4c1b-a9e2-e87a6fa15f4d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20c04c76-c902-46b0-949f-1802bd9f9794",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "4c809c4e-ac32-4353-a849-5ceabae76e81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7f153e2-5712-4f4c-898f-a3b4d1e3736f",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "708bfadc-ed27-4495-ac47-c026957ed802",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96c905f2-655e-4e8d-a93a-04e023462fbc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11dee33d-6bde-455b-9d50-e1f908c90763",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "b1bc0101-687f-4ffc-8ea5-486559c36b46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8672a86-8418-4597-b8bb-ffe7dc2d10c4",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3a56949-cdf7-4f90-b041-b94332c2ef2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc148b3e-cc21-4022-8960-3f563388b3d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91fb44ad-29d3-4857-bdf5-1c451342a0cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "3c83819b-e4fc-4629-b065-8acf51295286"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2024e832-1858-495d-987d-32dad59f69c1",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f2288e1-691a-4aaa-8616-6ef020fcd308",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "816dec08-44fb-447b-a041-d790f30cceea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c33d7c6-8e3e-4b7b-82dc-5e2688c0f162",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "e884e350-bc11-41d8-b182-92247ec029dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5119c24a-a6e7-4fa5-904c-96c4696932d5",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7ec1839-52ae-48aa-9738-8e45e46cdc56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ecf1e43-5d83-4933-88a8-ba46cbb2c96d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d464921-e7b2-497c-bbd0-3ff7794b914c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "91cac765-27d3-426a-be2c-133d0898f0a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bef6cad-3e7d-4f8f-91ae-bf44f8d20d54",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96a950aa-0d9b-4f1f-8659-5c627f5f5985",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "129fdc22-8cf0-4fc0-8e03-74ee71d58a5e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18a82670-fa2c-4858-a14a-c5fa2fa4cda6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "238b596b-4258-4615-bccc-240bd9ce9aad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89f7209a-1990-4d8c-9745-343634c40ba4",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ffc1f6f-7ce1-453d-9480-495c82af7a6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f2c659e-d189-4b30-9c33-e540601dfc2b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6369a4e-9605-4dc0-9c98-df8e6af6d29e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8032287c-c1b2-4d5a-a7f0-c1844b58d9c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bc8f1b9-f51d-4486-b121-a8179d91ca8d",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "846d3b34-581f-4044-836d-4c9456929252",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa16b712-5d49-4ede-a7a3-edd70015b70d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ece0bb4-2b29-4d72-bd44-0a91cf71a246",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "92ee6c52-723e-4c16-b0f2-05ba95308443"
                        }
                      }
                    ]
                  },
                  {
                    "id": "463c4cdc-25e5-435c-b605-fcf3e8982a1c",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38456ac8-03d7-46f3-aeba-774c408fe532",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7cfd9b58-ef30-448c-b97c-d99cb6118fcd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "784e95ab-7507-4dfa-bf01-0ccd42f4d890",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2401ffcb-fe08-4724-9903-b8ccf82d60af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1746367-db20-4f0c-b73f-9f45a613ff70",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7be6337c-893f-4288-a6f5-3d2634e8212b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5c29ebf-df76-434b-81c2-afabef2fbdc9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d49e7d30-a931-4ffa-9df7-7e66ba511dd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c2e84353-5a3c-4dd4-b711-86f131beeb6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7db57270-8029-4708-aaa3-bd6ec2e2b920",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bdb27ae-4280-4b01-be18-efde38e87003",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3fe32807-c24d-4bf4-8258-54c71d312ca6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aceb2785-9de4-4ac5-b904-b13eb5f7953a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "44a9ac84-78ff-4a37-a376-1e5f615e53dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca059f47-67b6-4dfd-a63a-3403a770899a",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b08d8670-d453-4676-9404-a3c82b1c7dab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7ead583-f3fb-4405-909f-6f228804509e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26ac6dfe-b4fb-4841-906a-4d46a8fcbfe4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "5278b032-3c6c-4b2a-84d2-aae27caac110"
                        }
                      }
                    ]
                  },
                  {
                    "id": "385e4af7-9d3c-49f8-a43b-a3de09578045",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fae2f4cd-d7da-470f-b11e-e176ae2f6198",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46b8c379-f4d5-4718-a5b4-068b92de7133"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "035837cd-69c4-4678-9791-aaf1f4ae9559",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4d0558d1-4cbe-4d83-9de7-22b0971e919a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b80be909-4bd2-434b-a5d3-7f903f504f00",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99bdff70-9ec0-45da-86d3-39c23131b598",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9bff852f-5d4b-4cc7-af4e-03be546fefb3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3579ae53-62f9-49b7-ba2e-c3dabb8d4bff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b0d10f51-5a16-4a2a-8c7f-0b67c5ed1a5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09d37827-01e8-4755-8be0-ba04bbc8dab9",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbbd948e-6cf1-438d-ab1b-dadf95e9dcb6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2c81fdb-8d86-4ca3-92df-0b776fc5ce51"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ed1d14f-b7f8-45a8-a498-e5ab2d279ceb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e447fbf8-7bd9-4551-8db9-00b6ef1d2ea7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a67ec0e6-854e-4eb3-b7c0-79ec06f0d131",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e386b81f-7df2-4116-869b-82d57e70e571",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fbdba021-7ced-41cc-b4df-735796034b69"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbb3ae17-f553-4d91-8d70-d918d82489d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a08afbd6-cf5a-48d4-bc8b-b9f4300f4ad7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcba68d6-f78a-46f7-b1d0-40911189cd35",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c95dadb-c527-4060-a738-d131be513f10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a366b082-3de4-4cfd-9613-6fcaae054b76"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c884e402-0ed4-45fa-9d58-9422567cab12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "6b7af7c0-d6e0-49c8-855c-8c87e9082a6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d024186b-36c4-4587-b96d-e3f26ef7d813",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "752f44db-9ed7-4bd4-a007-119f2be21ab7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a92c0c45-bc72-418f-a2ad-22cc8db4c4e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "755d94e9-1245-4e42-9394-129beb0a19d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "fa25c564-90d4-4474-9733-0cae6e2c810d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d4399f6-7b91-4bb3-8d99-03cc65f14c05",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9cfc868-cbed-4367-ad6a-a3e529e3e434",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "459a04bb-5ecb-4bb2-837c-0e8a84c76867"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1deb605-cbf9-46e4-8c7c-d280b50721e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "86631323-b63c-4674-80cf-c0b2354efedb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d0e767c-ad0c-4375-9c63-b270ea2f695e",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc3b4073-dbec-4ffa-9480-f73c136e56a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67ea0c60-e97d-4988-8740-8af1309f6e6e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96943813-96e9-43c5-b2a6-60bfd474f594",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3d77cc9f-d5c4-40b2-a0a5-14edb247fdd2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2711836-7082-4b4c-ae42-a0fe6e1b6421",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec07cd26-e4b1-4fd1-965c-862cae4c0b97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc6c9aa9-6f0f-4dc0-9895-8b849dfaecab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15feec74-da9d-4cb1-a692-b4bb1b0016a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b360f97c-f21b-4c5c-b1e6-4149eaefe251"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ccd5eced-83ee-4995-8370-6fd74e4de28d",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6ad7daa-ac06-415b-ae94-fc53d488da1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b87ef77a-c6e3-42f5-9099-be5f770b461b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ff6df91-0f05-40ad-98b1-dc1c48acca1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "86ebdb24-7bd8-48b4-a89c-b161e9468b0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33f77ec3-c7f2-44fa-b3a1-732d863c8a6e",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ede7375b-7ff2-4e8f-b5d9-7c514c999e81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12b29f86-bc16-42d9-8798-278e33750e4f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f97f38d9-a47d-40ee-baa2-e75b2209178c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "72f0fcde-baa5-49d7-80a4-7a58da829597"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30d178f2-c3e8-4481-a869-78ef0edc02a7",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e9c5ec9-c556-457a-964a-2b09c1eb12f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a15fa571-a60e-4e03-8478-26052385bef7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f70cb727-de31-4f71-b79d-27aa38b23bba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "3b513323-8627-4d3e-9acc-3d4d19ef31ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b730abf0-9aec-44a0-98d4-a9132919fa98",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0552167c-591f-45e5-ba00-23d4a2c631ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2bf722d5-9cf2-495e-8176-888057d90450"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1cc634e6-835d-4dd1-b6d6-d44d1442b47f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ab76060e-e70e-420b-9129-72e087395636"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d7d1b09-2f33-4e47-86a2-5cb88e82b5d3",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b347082-7a19-49ac-a70a-10d57e4252a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6ba737d-7287-42ff-95da-7543265f556c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8067fc74-8f61-4e71-96d7-0d30417a10b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0ce7ef4c-f630-42de-8493-219f0c38a3a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e151a151-0896-4341-b817-d4784c6192e0",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f16d7b9c-cfc5-4d2a-933f-c6b0520e3c70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28f17f05-f21f-4566-a9bd-e1369b155e5b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a14d5fdb-65a5-44ac-a7be-1a7a08b2f265",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "31f090e6-798f-494c-b286-eb28285b3cce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc16fc5f-b4af-486c-ae01-b59fae1eed30",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5ace930-cb28-4688-8b04-9f5c1f35f228",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e735697-c792-4d61-827a-73f88c0660a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6a4412f-e1b4-46f8-989f-293c5cac482b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "170a331e-fe22-40df-8b51-aa4bf903f93b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4747deda-304c-409e-b37b-f799a15b9cff",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68fcc9ee-4bd8-4cbe-be1f-f008df6fceec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e052dc8-332b-463d-8e75-439dbf737e68"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08dd46b2-b172-4ffa-93dc-61099a9704a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "fe4b7d32-9754-4d5e-bfaa-c3d18975a297"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b366d24a-aa30-43fe-8636-f8980d233449",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a6be0ff-9a7f-478b-980b-dd7193cc94e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "880b0217-5ea8-4478-9962-9ee1566bb172"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe0651eb-8b6b-4ff7-bbd3-f94fccac7cee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "cfc55a77-d69f-42a4-bf6b-ee9a5cedce4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f77e32d4-1435-46f0-9b3a-84ea1aad489f",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25420a25-dda8-40c5-abab-ca30b4a7aa36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d9fa437-274e-4c95-94c9-db3dca32901a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad479673-b309-4bc4-8f6a-9edc9cf947df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "4cb30cdb-8bfb-4bba-9874-2b3db7dcc1ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0dd678d5-a502-4781-b769-19e2c06865d3",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72e0c38b-6eef-40ee-ba5d-41e57019990f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6a052e4-ad5e-40f7-a48c-68e3b9a0d73c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4172c45-25b7-4c1b-8be3-be5f3f219dfb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "95fa4d21-9fd4-4c57-9af4-1588429f612e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ede1f1ae-db9a-4282-9c31-624b8152b9cd",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fdb31e0-4e14-4cdb-a554-8b3b37ddf128",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "753f6648-efcb-48ce-b7d6-049035dff2fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e123d336-e993-48ac-9d96-2d95bef37464",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "80e4bae4-714e-40e7-a6fb-da2c2f4b188e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76027e27-1a5a-4825-847c-9f1f8c88bdb7",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "818ea618-920f-4955-99df-527e6477b278",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3540da3-5d79-404d-af74-3b1630e3778f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1cf55c62-fe5a-4dd2-98e2-c4928be94143",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "8316bd3e-55b6-4951-8404-0ec6ff548302"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e37fbc35-c189-4f7d-a15a-4fbc753bc43b",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8749a43-0a75-4280-8c98-8d85c634efe9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "ded8a037-8992-411b-bde4-c48448ee3593"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "566fcc1b-51ad-4126-9a1b-6a6146fd9bfb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "6a86633b-0f8c-4c05-85cf-7db0d901f6f9"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "90e5840a-6a43-49be-a20b-a2f7b84760a3",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2a73fa02-d9a6-4a20-8e5d-1e00fdbf01ee",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "567527ff-b57c-4dd4-875b-dc84cd444fb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ab7cb427-8623-4757-b67f-6a861ab78694"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd709e71-88cf-473d-903f-8a5efafab5e2",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6d67b14e-be5e-4ed9-84c1-24a368b47a39"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ec6a3e07-9153-4b7c-9b6d-c1c556ac6d64",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7577e66b-8032-4b95-988d-707b87255f7b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "35c64705-87d8-44e2-b9e1-6d3050e98e27",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8de8402f-71ab-4839-bdf8-e0bfa9130a22"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "7f6926cb-55dc-4213-ab5e-772c87fe7475",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "8b034bf8-3b34-408a-ad50-62c8e6181930"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "18736501-0051-4461-b874-aca552a0f014",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "e57324a5-dcf8-4228-bf2a-7c5178233d1f"
                }
              }
            ]
          },
          {
            "id": "b7b3e9a6-dc82-4c30-becd-0947ab602802",
            "name": "Positive Testing",
            "item": [
              {
                "id": "c649f7e4-e312-493c-977c-67f053186b42",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "695c0d03-cb90-41cf-8e74-3e22847ecb1e",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccfbbc5b-01cc-4f11-ad12-8dedaef27700",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "f691d1e3-53cb-4f5a-9522-f2f57097ab20"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "060a263f-7eaa-45e2-af42-ef31bc5af6d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a92b241-bbcf-46ad-98f2-651e6631ff57"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "56645472-712a-4572-ab5d-4f184b0883d1",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "df025eb3-5bf8-4e2f-b40c-7bcc3e516cf2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "3f05bcbb-96bd-4317-8fa2-ae07b7ef2d63"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e7c8c261-2eab-4261-94dc-4d1c19130617",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "deb7144f-0874-468f-a6e4-ad9fbd233599"
                    }
                  }
                ]
              },
              {
                "id": "b47c31d5-9571-4828-b66d-f7e626ce2016",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "627dd8f7-9af3-4ea4-bf1e-bc42f2cf92ca",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e092ed0d-9051-4ca7-b18c-82b89749daa0"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5aad7dae-5bfb-443c-a9ce-d97c6e5cdacf",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "1d0a3b99-f549-444a-a430-847552a5f195"
                    }
                  }
                ]
              },
              {
                "id": "2a2e582f-58f8-4313-b6c9-0dd23686c2d6",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9e5db3d6-1adc-410a-b447-59e0d632d9e5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1ec17a79-0f07-4ccf-8faa-eaaccf64b44f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "59ff5fbb-7779-480f-a4ad-e0770e0a3475",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "b74ba274-7a62-4753-849b-3902cb37c013"
                    }
                  }
                ]
              },
              {
                "id": "45624e7d-8d76-49d7-b99c-9eb5847dad60",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8963f2bc-b1db-464b-9d5d-25a9a18be5bd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a42f1d8b-4cf1-4fc9-827a-c73acd3e987b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2862e50e-face-4555-86f4-91d938df8b10",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "89af6a53-af6a-4423-88da-beba8d648652"
                    }
                  }
                ]
              },
              {
                "id": "b92f34d0-b893-4d4a-882d-f74a0727a744",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3b461b84-5fbd-417b-841e-32efd4119109",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ba9840da-ecbf-460a-8d2d-d57c1d8225d9"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f89e6f14-31f8-438d-85ce-630f3bd68b8a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "e3253f59-a455-41c7-bcbe-3ba3632a8dfa"
                    }
                  }
                ]
              },
              {
                "id": "1840f7cd-619c-4718-b76e-260014243ac0",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "49a3d221-c7b7-4808-94e2-24e0d43e6eb3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "80491e78-5227-460c-bd03-2dfdd0bff740"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3a7a7f3d-ac98-4724-8f32-a4971ca3bc34",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "8d427512-83b6-4eeb-87e9-dda19ed15df7"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "76cb862c-bad0-44c8-83fa-9c49381b9d66",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a719c8e2-a322-448c-a970-64616868f6c7"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "c62c2d07-e048-499e-96ed-deea8bfdae89",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "eca0a50e-754c-4c21-9350-569cae1d4220"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d1d87f85-42ec-4b58-9b07-ff562c0d296d",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "314a25d1-1e3c-419e-897b-2a8bc4e7f533"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "fd644551-936d-42b7-b4bc-4ca26e98d0c3",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "93920c82-5fe6-41ba-83cb-1758f11de788"
            }
          }
        ]
      },
      {
        "id": "5e9048b8-00fb-4fd0-b577-c1aa84857c1f",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "44f0a198-24a2-4c3b-8aab-89d50eefb6fb",
            "name": "Negative Testing",
            "item": [
              {
                "id": "2d9d6adf-20f5-4430-b05d-abe5a611f839",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "4f88d3d5-691c-4463-a75a-baa97b40031f",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "558eef61-fbc0-47c5-ab6c-4bc1b4428839",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b74b182a-7ac5-4deb-8c89-454e5016e051"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49f1b1a7-fb8e-4417-ad30-79d9812ff810",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "a092412d-db0c-40f1-9b56-7725abda6386"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36a33dca-8f2c-4bb4-85ff-9b8267f010d6",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "305579cb-156b-412f-b63c-f3aed69d3701",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7d467eb-016c-4c7e-9883-a28f0496bada"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "582d9420-0541-4608-9068-3a2726a943fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "c2119943-77be-407e-93e7-af69b10415c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e069c8d6-8df9-4547-817e-17e3c0013293",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38423d29-bc2f-4ad2-bd11-6d7b4731d4e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a455e77e-3b7b-48b5-bbd6-6f985334398d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d65966f-2f9a-42ba-82be-16e69e92bdf0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d625dfdf-0650-4bc5-b85d-59027d4fec02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3d89917-67ae-4b68-9fa5-02ab299d2a7b",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0f6c7d9-32fd-44d0-9d6d-b032cf183ed8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15f13e4f-77e2-43e2-a757-459594872a99"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9098a139-aac9-43ad-ba79-6b715e182565",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6223cd73-58a9-48fb-b2ce-69372bdc204a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75a3b029-d447-4eee-84a5-dbff91151350",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83b7fbbd-9361-453e-a732-a8c6890989fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aef79289-372e-411b-873e-93110861e922"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91cf1f87-9029-4e42-bdbf-7e4c5f430a6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "69e7dc54-ce7b-4942-af9c-75dd3292b284"
                        }
                      }
                    ]
                  },
                  {
                    "id": "286301e9-7ffb-4c31-b9e3-45e19b0ad1e6",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e57c8829-8c64-4e59-9342-c9a461159197",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99aa02ca-2003-48af-af12-1cefd420f66e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a7e9581-e594-41f3-b9f5-fe57b6d87b98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b8245f53-2c9d-4f21-9b37-d417b37371b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08b108c8-4bbd-4823-87f2-563859bf147f",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37df9c42-0c5c-4165-9eea-9142327a82d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42c84fd1-8b64-4a97-bb98-ac2be6e72247"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2a676da-e279-4bd3-8f2c-37c7f5bdad82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "a640adb7-4319-4081-bd74-364b7ffb4fa4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09063cbc-1df0-4231-b4f0-8bb446c407e9",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca60b8bd-ce6a-4029-94a0-d7f379dc3ecb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a53893b-933d-4bca-8c3f-9c9b7e00e2b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30ef7fdd-b4d7-4e25-97cd-ba7c8cd58aea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d7570234-7f27-4a0d-a112-ffc36001db78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c709afb1-dad8-4c96-8ed3-e7d99489db97",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91d1f24c-49e1-48b1-8cf8-1ae6f39d0f1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a72e1db8-a904-45d7-b00e-2d527addfe1d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4151cf5-832a-40c4-bcf9-c953073543db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b8399b69-3735-483a-a3ec-080829508cd8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72ef64ac-e5fd-4159-a3be-bb6d466af567",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "666fa555-77ed-4a2d-a2c7-e4faed4b9b74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe092890-10c9-4b16-99da-0f1396dff8a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab8f991e-0286-40f4-be44-0b3780fc4c32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "56dab992-4d68-4e63-8eb6-d7ba897dc2a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bb36846-04fa-48c9-ab08-69b0f57b1432",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e309dc90-b2eb-4705-84f8-df47db84ef77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0236c948-684e-443f-b58e-b21844c5b1f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56cd377a-d27d-4c9b-aa5d-77d3db851c29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "738dff34-4440-462b-8dbe-f9f9a9bf3499"
                        }
                      }
                    ]
                  },
                  {
                    "id": "838e9089-a962-407d-a7dc-080c005351bc",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f3d4cee-e74d-4053-affa-27967070c37d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a652540-d2a8-47a4-becb-6bf94f819759"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06f9f546-5af8-4c0b-8f24-425a8b9c4098",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "fb19066d-5286-4834-b618-0fb103fc1d7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6533691f-fa24-4cb2-8c1e-d610119dadd0",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "881cac67-a460-4ba6-b69c-d88161cc0254",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "582bf131-3374-4efc-b446-63f77dff38a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a09318b7-178c-4b49-92eb-9c97ce40580e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "5f775dac-929c-4dbe-b79f-f4afc36fc422"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e2169c0-66b4-4c90-9549-aaaec0d2d98c",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c901a8c-5fcf-42aa-a5a6-7a28f480873a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2db1f84c-c542-4656-9993-16862df4c203"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "951c43b3-3a3b-4705-9ce7-6fe368f3538c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "9428ca47-93e6-460e-b73a-16088f5e4e67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ff63899-a60e-4eb8-863c-9f579d94a895",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "edf4347f-ee6f-407a-bd0c-52945bc426fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef60c6b5-d905-4be7-8f34-6da705bba51f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "585ec6a2-091f-49bc-bba7-7054a5d78b6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "a75066ce-37ba-4b33-aa55-ae9743a4729d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f46246f-e8b8-4a8c-8c67-93f070141762",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d286f38d-80b4-4de7-8141-43b13b2fc255",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ffb88a8c-8cad-4b70-be50-dc5162b89df5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a231420-cf56-41c4-ab32-3bab96ca5288",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "8dfdc40c-6065-429b-b1ed-380d44232a4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c3a72a1-1fb8-4e01-9756-50723b815f51",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "658e54d4-9fd6-4514-ba9f-db4e5568ad81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6be774c-517a-4d1f-b23b-fe4ca8e89b1c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6d0c1fd-8ed5-4624-b46e-0006697105c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "19184659-f13c-4313-9aa2-20477fb2267f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "784e9217-cc06-4ca0-9c53-d4651e3a5c4c",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbc7e119-d3bf-4ebd-a1d0-071c552e314b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "457ad805-c4aa-48c2-a0bb-b4bd14792b5c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31938829-4d3e-4fb2-9afa-b5131df94202",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "58838fcb-821d-45d8-b244-3a11617d7347"
                        }
                      }
                    ]
                  },
                  {
                    "id": "106b7f79-528e-4c4f-96a5-0f7a5d47a9df",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7238d50-2c3e-4df4-8e34-6fdc8464c0a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f41dcf7-7946-4248-af4d-7e134efb45ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c9a840c-33f4-4a95-8bbe-7f345eb762f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4329872f-3cf0-4e26-8713-cd9d258329ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cc7f808-bcd7-4316-aa2b-2225fe9e4770",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be7f8ed5-c25f-4e33-967d-c01fab1535e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d26e06d-44a1-45d9-a1e6-57d7f0e37441"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74aad158-08eb-49d1-9cda-491d6d07dd62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3890438a-d124-4105-a0b5-4a095ff4cb86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e3a84b9-492c-4399-9d21-26d772d544a6",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c60bdb2-c18b-4065-a55d-ddca481fea28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "916dc8db-a033-4d2b-86db-17cba1ab7215"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "858dd93d-7dff-4d00-86de-aa9cb9920a62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "57790654-5dd9-422a-98d3-3c73eac70f1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a25188c8-ed06-49f5-bbbd-c9032d3b868a",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "783eee9f-55dc-499d-bd43-92f7eaf08a03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fcc272cd-57f9-425a-af60-a18e19150efc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c7e76db-0f5b-427d-9c29-18e6853d83be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b36e9794-399c-4261-9ccd-00918e832ea6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4645b186-753e-4502-b5ea-a206d65b3aca",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c643c90-259b-4a71-9f3e-cb100e4adc45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97f5a6e3-e5c3-464b-b88c-474350fc8146"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c296ce4-bad7-47b7-945f-afb9fe2ecfc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8808312c-c327-4560-9070-05941d990483"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f54dd81-911b-43c4-a6e5-15dec310f3e9",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c86d26f-32d9-4a52-a66a-e1160a668384",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37dfaf9f-0c05-4488-9c4c-cf23a1907374"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "972eb5af-cb80-43a0-b6c6-61f189740094",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b5a9f7c1-8ecd-4b05-84c3-8f1c28a83bbc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2db7ea4a-9f8e-401d-981b-ec68d0422c6d",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbb21c1f-b9e8-4c53-848b-52696d7cf50b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5869d6cc-a6ed-43de-b176-c998bc150648"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48133d59-8f30-4dc3-a6d8-8de4d02fe968",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "936f8184-eb12-4d5c-bb4d-7519282b195b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d65d8047-cd2d-4ee1-92db-fb8630fd517d",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6597d66-3518-4bbf-9b42-57720d5e5469",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea8d52a9-ce9b-46d7-bb47-05729f736e56"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37604cec-f1b6-41e0-9d61-d1fc820fefb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "aa673f2d-abeb-4644-9c97-f716fa907a39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9a05ea3-de12-453e-9c13-0489f02ea251",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66c5cbe9-3a9e-40ae-a400-868285d012c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5561f24-09ef-4c8c-a6d7-924a271ee68a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0db823cb-8403-45df-baaa-b96dcfcf10e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ec4834f0-b799-4721-bd5f-2e5fee362117"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8944da7-5c05-4677-9e34-568fb728c7e2",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9800f8a-903c-44cf-8076-b05fd86ac638",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aeca33c8-e1a1-41c3-9462-259b9cdb9518"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f214ae61-fce4-45e5-b16c-8f5eed211f9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "92bfd5df-bb03-434e-9626-b57bfd1ed405"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f913937-8a7f-4ffc-927c-0bc721003c35",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d6f7ec4-3b33-4080-8ae9-d2028ed9398c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31391d6f-5b9e-4acb-a65e-a2cb747ddd1e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73e8ef27-1cc4-4fcd-a5c6-4a653178e676",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c918f80e-443c-4a01-ab25-7e236cb707df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06b12303-9e71-4b7f-b536-87f3c2d8d167",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0df01dd0-44bc-4e58-a09d-2087c8ed8352",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6dfa662-97e4-46f2-a785-45ee6024bb84"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61e76b9e-6bb6-4799-bfde-f2d9fe044cf7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "41b9ff18-5002-492c-9eda-d61df5efd02e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72a88592-da15-476f-8989-aa06eb27f9c8",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74e67bf4-e3d5-48af-9d76-99d17036d7cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80216d15-19df-4829-a5d9-75a9a343f78e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24e65eb7-724d-4e1b-bfe0-a8f7d66b0b01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1b0fbc0e-d10a-4bf6-80cd-7cc3e30eaa76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e39215e-0813-49c9-8cbd-0747b27f9916",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1431812a-a8c8-4223-a72e-43f5ea69adee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0224c7cb-63ff-4c26-b7fd-c0f6c98d5593"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ec0d1ea-332d-4f6a-8b00-623f43c74f80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fb492be2-f400-45cd-b998-e60b7a10ecd7"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "99f018f7-004f-4ed6-8827-a23dd4850efb",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "0aa2366c-fb13-4b6c-898e-26407db7b945",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb54ed63-bef4-486a-af93-5b3387470bf2",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "1a37d22d-18f8-4295-9f25-d1ce6d7f5377"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe999426-6f90-4aa3-840a-7f65edda5006",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "42d42e2a-40b2-402a-a01f-4892e6d2425a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "16e3b192-3f8e-407f-a94f-6e6b7109b4e1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7d7b6a39-23ea-4905-bcfe-b2419f078596"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c301d509-f681-4d34-ae8c-73e86fff3967",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "745c7bc7-a115-4555-a2cc-0035c5122c27"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "047aa8be-80c9-47ef-8a71-f07305697aa2",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "65649065-8ac0-43d3-a72d-cff5e7b32438"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e8879645-5bb5-4cc3-acec-602d1ae99e75",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ae8b8705-8c8f-4cb3-9d77-36042ce519c2"
            }
          }
        ]
      },
      {
        "id": "dc1aefeb-a4d6-4e39-a975-e8fad43e8593",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "125f344d-eb14-418e-8ff3-8752fa90c8ba",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d0bdb1af-0730-425a-b86e-81950d7deee9",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "38320763-b45d-4121-a830-7fbe0671ae39",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a544644-4b5a-4e5c-aaa6-c5c48c5df0f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bffac2b2-5583-4706-bbb9-222f076a62fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3e55cf2-b08e-44b9-a857-dfa48d909942",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "c973f54e-8770-43ac-847a-ba9d7e5b7ac2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cc54a11-d7ce-4a7a-a5c5-95a7e6da1e98",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "201826aa-c947-40a1-9f96-a103430a1063",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1faaf047-91e5-4ee5-be1f-325a71ae1a9d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "398de1ff-a537-4948-b353-d4239dd222cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "6e1f16c4-9f78-4cc0-a369-13620c7bce0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07d2a3df-4b5f-4a56-832e-f248996f92cb",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c17843c-887c-4c8c-9d21-d57e8c51fae0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee068bb5-af7b-4093-b644-66ad138c7a86"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e797ca0-6822-4d56-984c-292779aef2e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a621d913-ea1e-46c3-95e6-4388513926fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "118abdc3-35fb-4573-be16-f6f962224d6c",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58c454a6-57e9-4023-a428-c19ed0fb9b6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1e91900-0732-47ef-b5c5-91ac8fa3da5c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94c01594-74cb-4443-9c34-ade98e4fff89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b611b391-ce9d-480f-8ee7-2197fafb7b11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b3dd371-b065-42df-a313-aeff3224bd54",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df96f5da-b17a-40e7-be71-3f25700cf542",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d3b9b8c-ff88-4027-8b11-e508f6ca12fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad663acd-8715-421f-802f-a2817fdc2770",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4bfd4caa-40c0-4737-98fc-c781c38e4a62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcb8e27a-0e91-4b46-9307-43f74b3502f3",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94b07f15-a091-4c81-8534-c08336c36562",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8c57230-3f4a-4ba0-9fc6-c6c52e9a9948"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9f5d39f-1cc1-4a84-89ac-7c9f0e4b081a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "93c49864-9072-4ce1-8c6c-08bd65a1a35e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "feba663b-3352-4126-869b-9792f585a296",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e3ee219-eb70-4efc-a666-1fec6f011ebe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c125678-22ef-409f-875d-b72d5d228ec1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c08000f-1424-40f2-9608-80443ebddec8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "4c04356f-b7dd-4292-80cc-0741f2d3da43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c660132b-7d77-465c-8f4a-0adfe32668bc",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6840efa-ce38-4973-97f0-451d527a61da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b39cebae-3da0-4e88-979a-fb6a4378a132"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25d7ae77-4fff-40b0-ac0a-c64cbcdc0aac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "17163814-25ef-49f2-877c-e1098bb28461"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5d2d7a6-5ca5-4c1b-bc82-f75808f24c69",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f2b96e5-f1a3-43a4-9e2f-60a14b7fdf57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "344a3a1f-9217-4813-a3bf-e8010e55d9b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ed9cb90-c804-4154-823a-81e5fa2be73b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "35d70850-231c-48df-92c8-5337efa2e322"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aaeeb419-c8f7-4e42-bdb2-b15a86a79166",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71475adc-76c6-4c26-8daf-00512fc05e30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2f14428-3dcd-495c-804f-dfccc55e759e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25ae6ef9-ae30-4797-9a59-107821b164de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "45ad6f94-3f85-47d8-8eb3-dac4205a698b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db1fae54-1f3a-4c65-88b0-61cf8e70b8b8",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26dc5a4a-321e-4fe3-9cf8-b5e8a2c8e0b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dbf10030-7dd2-4505-8d47-5d483ed550d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "293dce10-8118-4cde-a486-ac285b6b86fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "8c2fb6fa-698a-4f3a-909c-45033ce3e867"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d696441-f083-494e-b61c-a8899f49c438",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c90516da-c9c5-4e5a-9ad5-3fd284e112a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ccf68738-8471-4a3a-80d9-79c414876e01"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2dc86240-6387-403f-a9b8-9ea29df6f3d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "841a67d4-1fc2-437f-b96b-f7a1ec547e15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aac43628-94d4-46db-a2f2-e1821ab34d1a",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d279c4ab-e493-4715-b9eb-fecef2520663",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4caf7442-cdb7-4226-976a-0f2de2e42841"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "587dfa61-41cc-4ed9-af26-64b23dcad426",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "5957f499-c008-4528-8acd-e2f6ff873e88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f073e42-ac65-47b8-8e13-24a2b0a0672e",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6112103b-1e12-47c8-9bec-861f85af90f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5450494-2735-4442-bb9a-ef044a78ae3d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfcae2b2-525b-440c-8dbe-38f20efc3e90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "f94ee483-110c-4c73-898b-1db3bb23b853"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e481ebd2-80eb-4292-a4f1-de6cbc1e95a0",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b204a515-6dc0-485d-8577-d2fa8d2e7b2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81edf63f-82ee-45fa-ab97-74bff0c0f465"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "271970fa-8248-4a4e-9d3e-ee6dad470d30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "1c18f491-a09f-4ce9-a0dc-8204662db7b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46dbb8c9-1e1a-402e-a4cf-8c99a61535b9",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "574a4722-24bb-4246-8536-a039980bab16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d36ce590-7868-4ddc-a0a5-7fde95ea9c32"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7429dab-0572-4154-a1d9-3151d360ac9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "5a673b55-4147-425a-ab36-bd9d8d64059a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a486dc24-251c-4769-b072-bb6494b15f64",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a956bdde-d90b-471b-a067-4272630461b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03c7b25f-b6d8-40b3-b660-9d2fc09e3204"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3e46147-8f58-4e4b-ae3d-36db010d005a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "d791bc5f-73d9-4825-b68d-8c33bf599cb3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12ad509f-49ae-407f-9241-11f3995c4795",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06d3cdb8-2050-422d-ac59-0cdff9a6fa3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe1754e4-d54a-48fa-ac71-f7ebbb59b926"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23a8e8ab-5acf-44ba-8607-6c08cca60a4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "341fa7a7-2302-48ce-b1b9-399d0ab16821"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8e79974-f740-4d12-9d99-838e3d641e52",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99b60c1d-a939-48b7-8274-42420989f43f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "374531cf-aa7d-4bdc-aa4e-40582cddb180"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea6b264b-3be1-4d23-9549-8ef846d3d094",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d9ee6487-e132-42dc-9ecc-c13b2f92dabf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ce8f944-104e-4e9b-be43-4486fbf68e40",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee01c0d1-5cea-417a-a476-b112b0b4ae01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7fcd4956-5975-41c4-82c8-4220b3a55f6c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa5d3f98-c489-435e-96ad-cc4130a627c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7208b8ff-53d3-4d22-8ef1-cfa39aa5b2d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ef10dba-42c1-42ec-bc30-0e919243a58e",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b458e96-370f-4b14-a44c-ed6b9880dc03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a70c38ac-f9e8-4b19-add1-3e724d1af7ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76d2919d-b386-407e-be3c-a400c1f0bf84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a631a3de-3edf-45ee-acf4-0dc28e7764c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c2cebba-e1a1-45ed-8e59-5f2453dc44a8",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "138398fb-bce7-4a18-82bb-37b6c7932b5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d68a0ef8-ed87-4c1d-b6a9-74e3edae5294"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "789cac24-10b7-4e97-9692-2b2159aa1781",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b0135b3d-e0c0-4dd6-99ae-b15b0c7a8e45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af17b8c3-b8ae-4de3-9428-0f63e863246c",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a16811dc-cc71-43f8-a826-240008e1e425",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3114be16-b75a-461e-ad30-389da303064a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb3e336c-2f94-4080-b91e-3183982b4d7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "40dbdc35-46c2-4ea2-a40f-752a7118842d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "496d3068-b2c5-4668-8a75-8e45dd69907e",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5810615a-1d77-4fb9-af3f-c67e521f736c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95e271a4-623d-4421-936e-6b1296daec88"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2833e2f7-7634-4493-939f-bf748365cde5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "26682890-41a5-4530-8567-ca46b44f3cd1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85a39e48-1d6a-4d00-9b92-7712a6db210f",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62e2d3d7-78e8-47e7-96bf-aae75f206e99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8f6c3b6-0dde-43c7-a318-d59587e10b8e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d044d8d-aff1-46a7-9004-8fc411b02996",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c63009e6-8bea-4a3a-969a-4d965205fa3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28889672-7e83-4126-aee3-5bae1e541728",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4a1d2ad-2c49-4d2e-9139-53c71d4e6f67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a3bbc2e-c087-4902-8ff9-f1a7807c3637"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81d0df2b-dfee-44b2-8790-a6edbd8ead08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d7c42949-79af-4b72-9b22-bedc41f7d315"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6210f896-b5fa-49e0-81bc-801f0cc04726",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ecc769f-81e1-4077-911a-0c9d574185a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1600488-7dc0-4783-a76b-99300004fb08"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e064b574-8c78-4b30-98f6-226e6d102927",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1fece585-87be-4d58-a6ad-e915f718fdc7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45ddf632-1509-4f2f-b784-7ae8e0443743",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "150c9cf5-417f-437e-84fb-523cb7e57e7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72d8629d-3c19-4509-a0bc-b28a21d28c0e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50302198-796f-42f1-b9d3-4d780651c9ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1f0996c4-2b6c-432f-81cc-8c7e0b7fa183"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7dcad70-391e-4245-8bf6-6832a6d63f44",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "744905e9-5c0c-408f-a786-ffef55abf10f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d013995-9782-40c9-99f2-d20abd1a683a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c590e360-6e70-491e-861a-68fbe850fb03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ce8beca0-22c1-4ade-9cc8-8dec706b332b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a57a89ea-8196-4f1b-9e96-accdc7de9c3b",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97aca34a-cde9-4599-81b9-7e604a603897",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb3d1c30-0eda-445f-9f39-7e8acfafb77f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "879636e4-df7d-41b9-805b-e90171c20838",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3d7a4931-7d8b-4627-a9ff-862074c4e11d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92d8d35c-0a7d-4b96-9bf7-e1a42d9bd123",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa3e3bb2-3bc6-434a-9767-90fae966f9bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86b30f43-61a5-4edc-bad4-026cad72bd28"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a47a86fc-ac06-42c7-89a1-bb36e4dc447d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e8784641-811d-4f64-ac29-92e053e373a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18dbc8e4-28e7-409e-b5bf-46939b04641b",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b58fb2d2-655f-4e7a-bc2c-d9a6b5acf879",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f32a902-9d22-4431-9433-cbcf3d5ebc70"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b03e201-63dd-4711-8b7f-982b71577123",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4b3be11b-6f16-4572-994c-562936010a29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89b6672f-d176-415e-851e-0b4e26ce4bb6",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d72b6bd-e7a0-4b3d-b129-af031454a33a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9df9e106-8c96-4067-8b88-078c9f22ba7d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef39af12-97f0-414f-98b3-a84bf4552135",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "737eab93-e446-40c2-bd3c-ceef6a3682ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1c71203-14fc-4b6c-a980-8e3e86cce34b",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3a8a012-7b85-43c8-8d2a-b8fc7db181ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f81bbcf-aaf3-4b55-b1e7-74d351078ec3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6286d111-c681-4132-8f43-635cf2e62f28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "02081d9d-c386-47a3-ae90-6463f0cd7443"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ba66e69-a7cc-4190-b249-8ebf0d4ef753",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "756eaee0-0c28-4746-8fd0-66b154b5c1f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c3b5426-c4ed-45a4-a27b-abf05cd6ba03"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb7bd3e4-a0e4-469a-8836-6b6b477a90de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "709c64da-72aa-4822-b6cd-07d9780daacf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35cbc24f-d285-42d3-a475-d57e70e64f16",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "316f7a02-93f4-454f-9a3a-695fe9bef911",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15ac8c93-042b-48f8-8d62-d48a368f3f56"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b92c4f6-f573-47aa-ae1f-7d3d0ba4ef4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "66507785-8c35-4ae5-9f6b-c673215a4781"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78328cdb-5e97-4e37-a686-10c61746861f",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89491855-3784-4f12-8387-d5e9938f3df9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1757067f-9a8a-45e0-9a00-cc12748ccffa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab6fa0c3-27f9-4448-87dd-657b5cf11019",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ef3c50f7-ebf6-4fc4-a9c7-574c6677fb41"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "aea2c5bd-eb1b-45b4-974a-5e2c599a00ac",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c49d2e21-ea77-4b33-8335-9c8f3e40eea9",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "167e6aab-fcbd-4dde-841a-24e718f155df",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "72310270-2af8-439a-965e-cf40676cf195"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e726c8dd-58cb-4652-9d78-6c0880fb0c78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e7569860-7af8-4f18-9fd2-8f78eb347c73"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2fd0fb3a-47fe-432a-a05f-df7621767249",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f474fd8d-38bc-4c32-8e59-458ae2a89088"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f18864a0-4098-4af4-8d60-aae99feaa484",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "68d861c1-dc11-4a66-a592-1c201ca18e4f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9706b586-e5dc-492e-8a90-9a670039b124",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "cf2b5674-a686-44bd-8e07-ea734b315818"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "fa9c7ee4-cc53-4d6c-90cd-5539ecc761de",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "aadf0850-b9f2-4729-a5d7-60d345ab31ae"
            }
          }
        ]
      },
      {
        "id": "612ea174-ac32-47fc-87f3-24a0aac4a933",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "697e8e81-67b2-4dda-9cad-2b415aee6d92",
            "name": "Negative Testing",
            "item": [
              {
                "id": "8e65e685-debd-47dd-8d86-820cfe8c2d2d",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "d5a6cc3c-ad82-42c5-8ab8-ab182adc59c5",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41787b30-9e0b-49a4-875f-b0651efa797e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f796990-3eca-45f3-9ac0-0ab98e591911"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b677a44d-ed29-436f-9105-c3887b0bd4a2",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca72c605-db21-4ab9-a42e-8af12db63ccf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a41f960-fbad-43a6-aa43-7c28e7f14a07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "beaac37c-3f70-4f69-9a26-355a4b8d9fc1",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "477c3c61-d644-44e1-bc4b-135e00461b3c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b20c44dd-75b2-4877-8d12-14aead3d409b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8135a23c-2529-4e2b-9799-0b715a0c6177",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14f475a1-0c74-4bcf-90a2-d8a943eabad0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54c187f7-973e-4c28-af99-34ca9397ff2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "738a4b6c-1bba-4f02-a968-5759ccfda166",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8c56c0c-ef3b-45cf-8301-55a81f2f3b34",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf48bd17-3754-475d-b7f4-30c38779db0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d80c0d7-05eb-423c-a5e1-72502d51ed28",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f7710d2-3353-4f07-a365-d1b05e915788",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2683c18-4533-40ad-9659-d60bfdb5660f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd17eddc-3479-48b6-8c60-c9531e4a18a0",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f543cfa-1354-44c5-bdae-df17b23405e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f15cc51-9d00-474a-8feb-b52238b38555"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc541e40-57d1-44fd-8890-c0bab4b8eaf5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2258c03e-4e79-4ead-9dfc-464e959eab0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e77b18a5-c83a-4791-bec7-1fd05d094289",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46c7631e-8e67-43ea-aee3-6fec3fcc787f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8b5ca2a8-ca5e-42c7-ab33-18b1e8ed6c15"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e08b9aa2-af3e-4d02-bc46-e015d85933dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca20cb10-0b3e-4150-9816-fcb7e40b00a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e51031e-6eb4-4fa8-a7c8-403682c65da6",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2717ec6f-afde-4ffa-8945-a90d15fa777f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cd10af8a-90f5-4c09-8339-f70b7a9e6a39"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4721c96-3c06-41e4-a1d4-eea7048449e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20b7870d-ed54-4076-9bcf-5284c31b4354"
                        }
                      }
                    ]
                  },
                  {
                    "id": "368c509f-b6b7-4ba3-a26c-59c43ce5ddbb",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea3849be-df77-4d35-aa6f-34b2de178d1d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1ebdf859-a53e-44cb-90eb-56260eb6012d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "973008ba-0b0c-4649-a0ad-799e6fa5c8bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ef5f71d-72b2-4548-9d00-dc9a3e65ba86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1463460-0de4-4baa-a173-51fcece78c46",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b82ec03-9a38-49cf-a4a9-e426c3b64c8c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64d9a9ad-429c-4c4c-a58f-781e8e5d6e4d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aff15c50-88fd-4375-8bab-db7c2903f535",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ad689bf-ce65-4869-bb66-354cbf66b2d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4eaf92d0-1d9d-4eb9-891d-5bf01554d4e5",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43ebfed2-96b8-4637-92be-51dd40aaf52b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5729655-46c1-4418-82f5-daa89ba56df0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "94dbbd66-4f21-4c04-9fc0-1313fd39cbe7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3808bda7-1124-4cab-bb33-671f30228e35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c47dde0e-6603-49ff-ad44-d7c7539a15e6",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56e489d0-cfbf-416e-811b-70cda04014dc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3acc22f8-f144-4031-bc11-4dbd26b8740e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6455180e-746d-4bb2-a063-0671d178789c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9cc6659-5bb9-4250-8683-f88b35825052"
                        }
                      }
                    ]
                  },
                  {
                    "id": "968337de-acdd-424b-a61b-28d01d8ea25b",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3c3af0b-af3b-4175-9a77-7e253f5c007a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "590d92d9-fc24-4e08-9db8-0f135804c4ed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4aabe42-4144-4687-a8ea-54e67b6b5c64",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5dce1ae-0544-40c1-a238-67a8a00bb24f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ba30f8a-5a43-46af-b7cc-5292ecf22809",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6c12e0b-66d0-42d3-9ee4-127b4b3eedc3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4e63f22d-4054-461c-8949-5813bbeeb3b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a5a4d53-825a-49cb-ba1a-555d13e442f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9352fb6c-b46a-47f6-a748-751a0f63c2c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b36b849-ff36-4c9b-b62f-5497804970d4",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "830e141e-b125-4785-8218-7dfa3e839ae0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2f75d897-dfdc-4493-bc70-d755dcb1fba0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d7e2d02-fe9c-4b81-9b18-1c6fa76d8984",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "079d48ce-ac5a-44f1-ae2e-075bb68f9c0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7250c943-3866-47d5-9a60-d563196b6880",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90aae21f-d1ef-4ae8-ab6f-b961fde0503d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2cdd2e3f-9b37-4e8f-96d3-491245c56194"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "53be1450-f82e-476d-8a30-aac77fa58da2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52fe052d-304d-4fe9-8925-b4a0dfeb2b7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b906207-fbe2-4f1f-9d81-82a59463c605",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7be3b9f6-44e1-454d-9fd5-e5e0120e0814",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80ed2c4f-5a0f-49b7-a813-4f7f04c8528b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5855e5f-2d05-4db9-9850-c4dc32219aa5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "860d8aca-b835-4901-ab75-b60e820b902f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31974068-b279-4bca-974e-d13dd41ef0f0",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17e0b8c2-e95b-43fa-b945-c67af02a970f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c134abc1-7bf9-4011-908e-78a33c3e818d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d718cc7f-d194-418c-883e-98305e2ce76d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88515aea-51f3-48dd-9f98-07b5463cfaea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d173bbae-6674-489b-9b42-268c23066be2",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "398ae8cf-0be4-4ee2-967a-8effd0df09df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08017dea-d55c-4380-aec4-d29ed5199141"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "62b88d86-af9b-4cd6-84c9-ae4b6a9aea82",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aee26b3a-0cc9-45ad-ba69-c9e62db2ce7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2db41d37-d34d-44d6-97b3-d53d3545a3f2",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe74e3d8-b645-4623-9c34-f4f1090a39b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06d35403-61ab-40af-a1bf-89765b6c20f4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a1ee5b9-3d55-4b2f-888e-31fa06ce918f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a9b5863-9b2e-46e5-a6f1-fc8a56ec10d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "706b0449-220a-49b5-9115-660b27ee834d",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "158543a3-baa8-4d89-a2f5-9d6116d86600",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d202310-8632-45b1-8600-0b866f8125df"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "737f898b-f479-429d-8977-1b3415f53c84",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "495fdb7a-4f82-4ef2-8ec6-c0c5c40a9529"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa5b0a0b-fe05-4de6-a666-6965429a3ecb",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed459aa0-f58d-4e72-8772-fc1edf6e191d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2e8be84-4c45-4b4b-87e8-af0144b55b9b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aba7cd1b-37c9-460c-9169-e5372378cb73",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "242f5bd2-f836-4568-8ed0-e5c6b0f15241"
                        }
                      }
                    ]
                  },
                  {
                    "id": "942bf146-1ece-4a4e-af32-b1c25c542b7f",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf5e84b4-a6a4-4812-9ae2-64b7fea773cd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f62c9b90-c001-451e-b4b1-55339b777155"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3fcf472-b990-4615-a5e3-3b26ac3c2037",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "622b6ea7-6dec-4133-ba27-b10669590970"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77a32203-5550-4fbd-825e-b2552c9943d3",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ac2fd9e-4ac3-418b-8770-750569656b6e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "930f107a-a8bd-43d4-999a-f0f47d09cd20"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "53a8a7ef-96f7-4a90-85c3-d0a12455fb53",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "909a9be6-fcc7-4e06-b8da-1ec7870ab324"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8d34bf5-8531-4cd3-be65-f50807f07e76",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "361e733a-07b1-491a-974f-22d48a4c4797",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f8644953-3717-44ca-a6f1-c0544ecdee62"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6c7c8f1-24f4-4b1f-82f0-faf25f7b0578",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "193547f9-ae44-417c-b28c-9809cf29726a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "192be1bc-30b4-4e1b-a560-cf180fce8125",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab0111e3-c95a-421c-95c7-f7e9bff6297b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "56e96fb5-105c-40ae-892e-3e3ea021fe9b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "45ab5f4f-c844-49a6-a839-bfd1f9200331",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d88f3ce8-66f3-4ec1-9d73-0d6c1925985f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad240a68-86da-4d23-baf9-d58809646f0c",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf08a371-37d2-4850-b70c-5a0e53fb0635",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8eb7fcf4-8c1b-4cea-a349-538b85a0e248"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbe5f40b-1797-462b-ab18-c506c2b7d5ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2764625-0d04-4e57-91ed-0e0e06e2afba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1f09589-f635-4257-a439-88cf584bea0b",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f81438a-8b34-4c89-b35e-73cefae877c3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5539fd93-bb10-431c-841b-61ebb9096739"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e7bb123-5868-4fb6-a28e-1288291715f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9251704-cc93-4e5c-a799-c600b0f96824"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d69d234-ff65-4768-90ab-e47d1ca27945",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e05440ef-9dd5-4cac-87e1-44730252ebf9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bc4e86c6-9f80-4309-86eb-445a61006a9c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "899dba5b-2d78-4337-a1c7-641a2e5c7978",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5dbc0bfa-42f3-4cad-a32c-775258ed9497"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8d27167-c3a4-4200-96a1-33f90e5768dc",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2596977b-d51b-4a94-b483-45abda68ea5c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0ac5dd3f-8d7d-41bf-a45f-9443aca3fd8f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1f52d1b-9a6d-47dc-a11a-20df6440a8c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21e861d8-b445-45c5-9c4c-b3391b037f2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c322c4a9-1bfc-4da1-8af0-ec4a03837315",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57a514ef-f5fd-4241-b6f5-f0da74f38947",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c6effdb9-7d0c-461d-8a03-acd596e70a04"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a941d5b6-30c2-419b-a041-a16faa3c8d50",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e08f267-e2a9-47c4-a81e-94fdd37767eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0ba87e2-4a91-46df-b2c5-9a8736aec4f7",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9229793c-7c49-4112-9585-016310b5ee82",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e002bac3-51c6-4d48-94c5-3c2076c6f9d1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5696cac3-d65d-4858-9da0-b295a0577698",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2c903db-d00d-4e34-8ed9-dbca74151a01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c332c1df-1456-4449-b54b-3934b4f73480",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c60e83d6-993c-42a2-92c6-8871012a5df0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f06c92f7-f194-4192-9af9-30e27c025b07"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "558b065a-3830-4f17-9c35-6c14c48db1c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4609b1a-3cbc-4016-a066-a26b7716231c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d7ce485-dec4-47e2-8e32-7d8c9a059df7",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2e67651-468e-4202-8537-afc4fdb23617",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40566c11-ea3e-4853-9550-2d154d4ddf50"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "84f05bd9-bcfb-4d34-8cf7-edca4d669617",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "431e7ae8-46e3-44ad-b0bc-48bb55e8d96e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "647f8711-56c6-4d13-aa22-93b16f47a04d",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf725001-1763-49d0-966c-dd4823582c6c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d45e44a-0f40-45cc-a68a-0a8eeef85b52"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c2fdcae-c7ec-4afc-ae4c-73772543cf42",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa4db56a-8767-43e3-9335-c62292be4cb3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c8bc5ea-7fcd-49b9-8f51-a8357d918c80",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "969fd761-ba50-4ba9-8c68-94b1fb3d6367",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca4f3562-c8b9-461a-9ed0-1936cc4a4d6c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbbb32b9-d98e-41b3-8163-ada9183643ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c1172dc-5b8e-4d7f-943a-8fa2cf310b91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab93aedc-d40f-4e4f-9fd0-ce2808054db6",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db62bdab-e1a9-4b58-b6b1-94208b194617",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1c364f6-9c82-4053-a95c-24772d37b72d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b8d1e74-5f6b-4028-8a75-d44a5ad33140",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b5c0cec-57d5-449a-89c4-b31e96bde171"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5ff855b-3541-4f0c-9760-e7f2f5b4926e",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09265ef7-60c3-4491-944a-e4c5cf802c54",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e8a9872-c78f-436f-b1a8-66a9e538459c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af50d53a-c4d3-4f18-b106-670783f2b383",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7f48016-ad8b-41b9-8735-253d3495a3ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e55995a-7234-40ad-b177-039ab57ae26b",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b27cc2d5-45a1-47aa-9de8-b5f63040a251",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a2106b8-a243-484a-8de2-603e278bce3e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "28551706-4de1-477e-a19d-e7e093b02025",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a5401b3b-267b-4a27-bbce-fa942f0dadd3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8e26062-31d1-4655-8d59-8bc0b7314d9a",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba3a1e3c-afae-48f8-9da4-eca325ade81e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d668c1b-85dc-4eb9-b984-b251a1d65167"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d622deaa-75c6-4c19-abdf-7ab558e19df9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd4a29a7-2f1a-4ff5-aa49-4b9b61196b8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0297a85e-5bc7-4b50-8fcf-e97f2eac5092",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f776d014-3aed-4c8c-8971-fca4a155e4ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fbb73895-823b-49d1-891e-749ce26f21da"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4278d86-edaf-4068-bed3-3243257551ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3751e8cb-e544-46c8-bd6b-b8c283046e03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "683cc1c1-9d3c-4bea-b60f-1f28edd2ee21",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a863e031-6b39-409a-88c6-1fda53f41620",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ce7664f-78ba-4b3a-9ca0-b6c0c861a56c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4938766-4753-43ab-9c60-468a1133f205",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e882851-ca5e-442c-aa1f-d8430952ea17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef9fcbcf-895a-40bb-9ba5-ef814d24b623",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9cee1f2-bb01-486a-ab59-6994ebd1609e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "edb71790-e832-4f51-9a76-dafab3ab48b7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2eca066c-ec79-4314-81a6-870ba1e26513",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d72c2db-6b65-474a-a2ca-c1d5c40b70e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a52daedb-73ea-48dc-87ed-8090bc2ec6b4",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb80f3fd-09af-4af1-89c2-a8ada522bdca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a62deb0-89bd-49e0-a765-6f40eb6f0261"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "476b7e72-7c4c-422f-977d-6061e9a6a5b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28ce91a0-76c9-4947-b8a8-6d461009b78f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9233c3ff-5162-4c8d-8e7e-801b8c01024d",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a1833c8-5436-4f12-a73c-62292202d361",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5564968-43b1-4668-9b4d-d47ed34d27f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dae451be-79e7-4ecd-a2f2-eef851532e26",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "effe6ffd-53c3-4007-ac2e-c45ada16bdb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67d8c8e2-6b63-4fd1-957f-a3ffb46f1e6b",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0267a57e-3b40-498a-9fa1-75d2cb1ae1af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e53152e-78cd-49ec-9fd5-28659bfeb300"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d729ea9-29f8-466a-8b97-5928289e23a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "363c3e16-1679-4cbb-80d7-8fa4c0dc8b6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5dbcab09-e399-415c-8956-21d1d61c9a4a",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebd7057a-75a0-4784-95cd-a43b9b748d8f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c68136be-1d96-4dcd-b4ef-97e89ea2c71b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "db5062a4-27b2-42b7-add9-472ebdb888b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a49f2704-0b39-4c40-91c5-3d43f38268e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee0d70d3-29f1-4316-8f94-1a2ea01f6607",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5b96b66-653c-4000-bc84-fa9283d4527c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "425e5287-0d18-4241-8cf1-8de032dde200"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d229022-adf4-41c9-8c1f-9700442ec5d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e414f00-83bd-4dc6-862c-d86a98ae1bd0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96a865f8-7ff9-480f-8e76-544d2fbf892f",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08322e2a-7061-4a6b-b1da-78dc6c1e5bee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2727966b-7159-4c98-bab1-7b41b9f3b039"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "999f0ea8-927d-42a5-87ea-00e0507e436d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ef274a6-2aa0-48ea-bbfa-31baa4ed013a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55033add-85c3-4fe1-9778-49d56ad8f09e",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97bc66b6-1eea-4297-a415-fbf15034ab25",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cbad0aa1-4df3-4749-896d-f275ff2b412e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "de4875f1-88bd-4e66-85f3-dc1054da679d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab076ba5-a5a4-4e20-b5bf-0006adeb168f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "947c0f95-4289-4029-b3cc-461e3af86b90",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10da79e2-ccf5-47c6-9fdf-b64bc1efb82e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26f9a5d0-8fcb-47a3-9787-6e8482399fd9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c48160d-e5ba-4e5c-8207-75950ee2c7bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6612df8d-0130-46ee-a473-1aa1d62acd3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a491d8cc-eba2-46f0-91a7-4da3f4b099e0",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf4ccb60-e5b7-4f3b-a428-a1c3f14c63c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45c8d496-dc2c-42c4-b0ee-8970f49019f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "23083166-fc10-4e81-be16-94946bb973d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f8b2a48-3fd6-4a61-988f-75f69bfcb7f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5b6e566-0031-4bef-a3bb-072dd0b08441",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03eca4b8-9a35-432e-8620-754856ab43c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c2d22c1-3e23-4ced-99e4-251f70efbd44"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e9db1c6-7830-42cb-bc54-839a82e8212a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1444643c-43e6-48da-87de-c81aee092e69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91d5c804-5426-4a47-b983-0ee67ad987b4",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "585f32fc-5825-492d-8bfb-085895bdd62c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f965185c-0743-4414-8b7f-44a092ee829d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "298a0dfb-54f4-49e9-b5e4-d7dfc63c6e5e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94d65fea-a822-4152-90e1-3d3b883b3b50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f429bb5-f54d-445f-bb52-0ff275958166",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02b4aad1-6760-4e3d-9c69-75ec56de6e29",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f77c18dd-bb89-4e1b-95cb-df3f0710831a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ca0f870-e8cd-4db7-b425-aa6ebf2ae838",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0027d445-f59e-4a86-b1cc-c1d4f8662d99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2f29faf-f8c9-48e5-96d0-923171f3f2ec",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5ec950d-9076-496e-8d27-358e1d4fe635",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a720537d-6713-4a5b-bafe-04b22ddc41f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2709809a-5f60-4148-90e3-8cb569e27188",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9798fe2-bb5f-49c0-9b06-47a4055b6556"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6e91608-bcc6-44ce-af22-15b7d8409655",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b47c9e9-d8f9-4c8c-a8f1-c6cb88fe42bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b5abbe0-0a92-4dbc-abb8-fb32ff383516"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0d29e52-f3e9-4007-90e5-02c19fb64d39",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b4910be-48f0-45bd-81de-0acc0abfd7a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30a0e280-c6ec-43a0-a509-6adaba216a91",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b16aea59-b4e5-45a9-8266-b1093f91292c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a64fa5a6-d168-495c-8556-bc553028b57f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "26e7a952-6e48-4685-98f9-6b4fda587f69",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ff6cf52-2b14-46ee-ab6b-dff0d0a1c753"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fee90617-e50c-4461-ad80-38ddee694528",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6fe0f00-056e-477c-9dae-8e65144be5a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d0939f1-e7f1-4508-9c76-dcfc783d3b4f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bafa229-204a-412b-8fb7-76312d3a1db4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "828f982a-3bfa-4e80-80ec-d3c6e21f4a40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6eacf39-8c25-466f-8708-09324fa1bab8",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "042c208c-9bc4-43ca-be34-4abd8410d8fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c821d246-fa89-460a-a043-336396bd16a9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "db90a4ec-3c2d-42c6-bd24-3f98af707ec6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59d74aae-4215-46ec-8908-75ffb5295c30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a345c392-2753-4089-9202-e4c357d1b8c6",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06256c51-dc76-4f91-a90f-0229f9913002",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d248f5a-272a-4651-8f2a-00157df3fac2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4e1d4ff-24f6-43b3-8cc1-2a7b61430402",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0dbb7683-044b-42ca-ad20-59151375cbb8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d539994-cf02-4377-83b8-b5f46d1fcdba",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f264cf5-a52d-4ec6-904b-caa1f009cf80",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1042303e-8a72-4832-8bae-2f59f7ef6df5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa5578b0-68cf-44a2-8139-b391aa36c8e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dda01aee-99bb-49f4-b594-1266bbc8990a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76b02789-459e-4a2f-b119-839a492eb722",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23f9b7a9-902f-4e69-839c-7fd204920327",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "99cf0515-b5e5-445e-875b-45588b319484"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "50d0cbce-f309-4a57-aba8-c3fd6df080d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c43dc199-a7fe-440f-b502-d47a849f01e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32af2586-6742-47e1-b98b-9292c23a3e70",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb2a1c7d-2460-4e4a-8bf7-48eea539ff42",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fd236090-ac18-4a43-8e45-d04e1aa881e0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "099ba1fb-c93f-4127-8874-25d605ca053b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf668b41-0396-4e69-883d-c3d2a2c55727"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c56962dc-307e-437c-8408-184bfafcb629",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1b74c70-bcd5-4ef4-ba92-288a14377348",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0c11a08b-0dc1-4a85-ba01-1e3fb8e4c4ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "57ff2886-5b40-4967-bf83-e133c76e779a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27f1596d-a7d1-4953-b431-3593f2c37663"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfd08b28-ee37-4a36-8c7f-802f75eb3852",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d71c775-d6a5-4592-a547-5727c930b258",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "94bddb7a-bcdd-41db-b411-1f932b98e91c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d649ce65-b6ca-4037-b578-8fa2887410b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9887f967-f184-440d-b8bb-0f3f0294d76c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b36ad5c4-6945-415c-ae77-4e9c842a7609",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37ceb2be-dcc2-4ec4-886d-7792fc818d4b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "562ae163-ac57-4b0a-9b37-fbfdc4a2b455"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d5b94e3-29d8-430c-9636-383e4b1c2c40",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd1d4692-f784-499c-a69e-67911732d1e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8b18e57-936e-4ef3-aa57-b08643f860f9",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17d4929c-74d1-4803-a83a-f21b824c57f1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7c660f5a-a6d4-4c9b-bf1d-2b01adc97610"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f667fe04-adc1-4a9f-bda8-32c35df13e3b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e5635bd-1a75-44de-8c45-1feaf80451fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb4e9959-22b4-436c-bb95-da7c7c93f4d4",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ac35764-a289-4241-9385-ec83b3726d23",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f030f418-3343-4412-92fa-3f9db4f600ac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b16a0fe8-716d-4298-8767-78a35dcc96dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bfb23d45-dcd4-4ad9-b06c-b920784a5e51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d632ee1-16ef-46c5-b57f-b5edd95699ec",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ede78fa0-7e88-4f64-924f-9064a6f12503",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1ab9395f-1c99-4058-847b-03caeec51758"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecaa8d38-33ec-430e-9d34-2daa43d1e07b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d685d2a7-a40e-4812-9eff-8197f65c8c5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c97a36d-16f7-45cf-98c1-8c65f721e979",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "509909ba-1d3c-41be-85ec-f07b6cf42383",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "36e12b9e-92d6-4349-ad7e-917b32fc118e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "75aa760f-7123-4eb9-bcd5-44c0a6cf26e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb263d4c-c4bf-4949-bb6b-4b1a7a0b17e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd1c8b2e-7928-46ac-9bec-6ecd4e4b49cb",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5cc2d93f-651e-4a7a-b344-f37fc7a1b6d7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ba49518e-966f-47cb-87a9-276022a00ba4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ded918cd-2452-488f-8b25-3d97da46f72f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bca8726c-16fc-4402-9b42-a64a8d07cdcc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eed1433d-4d47-41d2-9359-f3d523d7015e",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8397f66-bd4f-4072-b06c-c213fc0db5e5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "34f00c29-2540-4ecd-ae1b-b5175b63ca4e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e05dfa21-d802-4edd-ba2b-176e1df1f197",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54101017-9d87-4d96-83ef-cfae2da43a39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42ab8cb7-be0a-4945-aa71-3b2713bb64f7",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2c74d4a-04cc-408f-b990-355cbf7f502a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f8382466-209a-49b8-82a9-7301d26935f6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0dcbda2a-7151-4c0a-956f-8d42d3b4a150",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8a8e73c-b47d-49d3-a57a-1e9041522380"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b75f91f3-7575-4524-87e4-f2af6b8ee6ba",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8350b10e-5619-41ad-af20-453d1698245d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6565c490-6b34-419e-b8ff-ab469db01ea4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccbbbbd1-3ba6-444e-b0ec-fc1314c4889d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14585401-c361-4cae-a40a-93fef4ab0511"
                        }
                      }
                    ]
                  },
                  {
                    "id": "904804e1-a9d4-41f9-a118-49d69854b516",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "176ff2a5-e68d-4402-821f-558964620fb3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f239f325-a099-4f38-9ae1-dd169632aba0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "57e80f27-08b3-432a-8f69-e49177c3d30f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7bafeb1-2380-4b2b-9e3d-b8ef1bed0b79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e318feac-2abe-4b68-aa08-0d52c4b7e4b6",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31a2c3ee-efee-40ae-91e9-e0643b868538",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "30b22ecb-64b0-4b7b-a199-e22d2ac42cfd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f02f25b-3cc4-4fe6-95f4-2168382ededf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8bcfb43-e357-42f1-9aaa-d33a13b2d17a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "186771a9-6d3d-4e37-8661-556191c0fab2",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3522700-846b-4177-9354-11bdbdb547e4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "27165327-19a6-4fc2-b4ea-b230ab453dec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e3d25c6-63af-4056-adc6-22021efc8fe0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63f5021d-5fd0-4652-96b4-afc0273b5375"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e93c7f2a-7f32-402a-83eb-c372864fc9ef",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9738c79-b69b-4ce2-87b1-3bcaafbc2359",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2fe4e14a-1c12-4dfb-8763-f45857d0ff3a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a08d4b3f-fc14-4330-a12d-d663b679b36d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9cc21681-1202-4b5e-95b3-c49b80a663ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f2043f1-d21b-4e25-a337-cca627d94e65",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5f6912f-2e3e-4cf2-b3a6-ba11e887a1eb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "680628b0-2fc0-4ff3-9d10-ca2da44bcef5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ee586b9-1d25-407d-a885-7ec9834f6164",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8b841f0-da40-4eb7-afbf-bb2cb9980e9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a734223e-9bc9-40ba-a17d-2718711068b7",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16e2fef7-0d27-4481-961b-aca927e3ebea",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6e366732-bf17-46bd-ba29-6081b7908785"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d2b8ebf-f638-4409-beae-494953b12b5e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e099c6d-146b-4296-b295-4db649f78513"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ef379e2-e06c-47a9-81fa-59a43c9e309e",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1108c2ab-d544-4dfe-8906-b8106364da19",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5aa4f5bb-9178-4bda-a31b-7096a78442f5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "70a9d06e-000a-491f-83f9-8d1017749b25",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "679619ee-b6c4-48a8-a72a-c3c99cd61a3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31b43efd-0291-4142-b041-d5e5bd272939",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a031252-d4f1-43da-9675-66bffe4e75f3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1aaec330-2eba-4e22-9786-109a8a5cb112"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2784aae-cb12-4ce0-bca2-de5c83c74847",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "553d15af-9942-4013-bca4-777d302eba14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4664cbca-af4a-4a18-9b83-ac6208196118",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "849a30c9-3fd8-4871-971f-9a7cf2f259d5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9f00e398-f775-4a70-8b0b-c908f62fa76d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8505fc68-abc8-4534-aeb8-98ebd0105e54",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "676372df-32fc-482f-afe1-70aeef6cd4cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56378fd1-16cf-4567-9f39-9e81bb7db4bd",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96b9041a-0023-49a0-ba4e-be38ec8afc8f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "92377bea-ef3c-48d0-a059-e6005a2c89d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf3bbc1d-8049-41a4-897c-2a5b92278853",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c98da30d-fac4-45c5-8987-e38cb0455019"
                        }
                      }
                    ]
                  },
                  {
                    "id": "338f072f-c176-491d-be08-5a92287640a7",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd7b8024-dfc2-494e-b955-9e8c13a0ec3d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0732ee46-86b0-4185-827d-d668faf0a7b9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a13a752f-be63-46a8-bbed-86abdfcc6727",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c00896d4-f036-4179-b8de-b7be119fcb7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "988d54da-29fd-4ce7-8cb8-06559a98f283",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1fb81d4-018c-47d2-ae9d-ef604c6ee0b4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f2c5b47f-84aa-41d6-a7ee-512aeffccddf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5d91fe4-1dd2-41b1-b145-f364dcad8f78",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae90cd9f-c996-4dc8-b7ae-652d10c889a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "369fe6df-63f4-499e-bbc3-a12799a5b181",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1db751a-044b-4fbb-b719-8cb8302f6be4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7346aea3-d3f5-44ef-92c3-f77ea40396fe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "835e76ee-35ea-4467-97c5-762157f7c3bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae44ccb1-f843-4fb8-942e-e02b19c34ece"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a58f83c6-4d80-4f04-a472-7a1b14a61dbe",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9daa0648-918c-4865-8d71-eb170c02425f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "08887990-5208-4997-b42f-deb343072de1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a8d8211-7bf7-4bf3-814d-6c82735ca378",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "820dd2df-55b1-41e7-a38c-d52521c45a8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "387baecd-d4ff-46ee-be15-b5df59e29d70",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64ebdbaa-9644-4f0e-9c30-b13f130c9294",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9821492f-5d99-4242-93f2-38ee98be3738"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bed8272-dacc-4e4b-9ef6-64352825d03a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6dfefc26-8058-4007-b87b-7ce637751fcb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1ebc3d2-cc9a-4cc6-a0b8-524c9372beee",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abb2f425-2858-4078-b5b1-7ce55dcfac33",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c106c84f-78de-4f91-8130-7e4140d49dfd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "be88a32c-08fc-4bb2-9618-4675a7785965",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01f5066d-7d46-4030-b058-4e96f2201a27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73d6b110-9711-42d7-8215-575eefe639ad",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bba64c49-682c-4431-8fa6-93a2d33f4a05",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "893506f5-dada-41b6-a2b4-b2c94735ad72"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0998c53b-1c9b-4305-859d-faf8236ee752",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6df5e78-38da-4ec0-8839-0560bdf01e9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb5a3ea5-6466-406a-afbc-e30928e103f0",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd428e83-803c-46ac-a4fa-cdaed3f804e6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d729813d-2da3-4b2e-be55-ec496747f3bb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffb4377a-0bd9-41e7-93c4-1e12bab4d917",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75bbb0fc-4ce0-4b3d-b1e8-240f40ce2d94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41e4f99b-6c95-4ed5-8e9a-97fd6651dfd1",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "978bb8b0-7a52-4561-b7c8-c8da7f71dadf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "45a4ea68-9c55-47b1-8726-fd7ac41a4062"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d556f3d-f150-499b-9472-30cfb6e7686b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9421959-a618-424c-814a-9111663fd893"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db8a5afa-9b39-48fa-8bb4-ac4e715c3bab",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75c46b2b-56a5-4ec6-91c8-426e4b07c09b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "692d35ec-6e30-4ebc-82b4-f17a3f3a49b9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ae51b8d-a757-45a7-b9e9-7867e7498f7f",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78e6448e-179e-4516-8999-9c75c3e2dbaf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf12c038-750b-4315-9442-8656e19a395c",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0620ef3-4cce-4df1-a7f6-43a7202811c5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "026b252e-1a72-4ffa-955b-340998247c91"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "42c5dcf6-08f2-4ea1-9676-9f8e0402f61b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e88826cb-ed9d-4ae6-beb0-d12bce63e055"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2f8e8ad3-fd4c-4a9e-8cef-bdd4727b6429",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "721d1c3f-231e-4455-b376-efd1d70a1697"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "fd55a15a-6dc1-438a-af2d-129c76dd8bc6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "122cc607-b32e-4d9c-8933-fd07402ed6b8"
                    }
                  }
                ]
              },
              {
                "id": "534726dc-2390-438e-bfbe-c952d3797bfb",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e390bc2b-59ac-4358-b5e4-dee51fc879da",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c70cad66-0ed5-4cb4-9e42-09980c51464e",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "9a87954a-27a3-4c86-8e93-1b3f1837d062"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c92f504c-a1e2-4240-bfbe-7d242cce48ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3baf30a6-99ed-4e53-b1cf-6d7d4f176513"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "26adff8c-beec-4393-bd00-728d4e0be62d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0f41a432-4a00-426a-aaec-f386b4e60e8d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "49afa429-660d-4cea-88a8-bc55bb6f722b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "808fba86-bb38-401b-8f4e-1c9a43b8c876"
                    }
                  }
                ]
              },
              {
                "id": "08a99e31-7a8a-40e5-8aa8-62e06869b25d",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "4e9f4e7b-bfe2-4809-891d-b1e99247c6ea",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca8062d1-6c16-4e50-b9b6-b7df4b897b68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "bd5d6240-cb24-4aba-b25c-1fca07f7aafe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00b3883c-c7e1-439b-9019-a27775959b8c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed4642aa-df97-416c-8f60-5e684c6f62c4"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "130c7283-4251-4c0f-85bb-8c841afae1ee",
            "name": "Positive Testing",
            "item": [
              {
                "id": "966adc42-14c5-4b09-b773-e448fd185c3b",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1bba09b9-d1cc-4de5-91c1-1b89c40a3d89",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "f028bedc-8546-443c-9f84-0425fc5be345"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "44c2fb02-522a-484a-8252-c51a28af0ee9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9d9c9bc1-f341-4555-988a-05f74405e20d"
                    }
                  }
                ]
              },
              {
                "id": "d872c16e-101d-49df-8fdd-389a3b778713",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "40d21173-4c83-4ba2-90be-7cfdce3d6dc1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "b06be1f8-736f-4cd6-a4ed-385299a2226d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0cc7cf0c-bb1e-46eb-bcda-9b0d989dac18",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e098c0dd-486b-4ab9-9fcf-c4272a8c7837"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9e878956-82e3-4364-87a9-00f390e18512",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "a05cff6e-a003-458f-977e-d979ace324fc"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "55aec184-05a4-48ca-90b8-afa2277ab6b6",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8c748f5d-e6a0-427a-acf2-499a1b79fd2c"
            }
          }
        ]
      },
      {
        "id": "eb0cb043-8b2a-48dc-8d72-a5c187ae721f",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "7dd0265b-bc8a-4bfa-b31d-515ae6b038f2",
            "name": "Negative Testing",
            "item": [
              {
                "id": "029284af-bc65-4bb0-9d38-73b4507ea855",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "090df034-95d8-4ef2-88a9-5d22b6cf3463",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e921469-3bc9-49c6-939f-b360cf8459b1",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "0a54e5e0-2597-4bfc-95d2-b7983f859267"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fc365d8-b611-4c40-9640-220003608eda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "adc5abab-b55b-4009-8588-2f74203409d4"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0a957450-69b0-495f-9778-01eb4c7d8b6e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "11986fed-b1ee-466c-a421-124d13bf50f2"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e36de35f-d896-4a34-86da-f08d4c5c0b5a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "efa1302b-ebf0-489a-874a-9942efa975ee"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "28ac8bf4-6c21-4735-9c59-8fed23a44d10",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "cf1fab40-a13a-4719-9d58-fbdad6ae5c2c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3e1d7dba-3c50-410e-8212-2cb759d90e27",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a31828f8-9ce8-4bce-a912-637e1addf0f3"
            }
          }
        ]
      },
      {
        "id": "3439c7f6-9fe9-4471-a76c-ec529d67daea",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "523a9edc-7c8f-4dc6-97ea-fb25314a80af",
            "name": "Negative Testing",
            "item": [
              {
                "id": "7c0cd04e-7285-431b-ab73-6a6804bc5d26",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1ef7041e-6fc9-426c-9f35-74c9908a2544",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb8edb16-a770-45d6-bccd-7b06195af5a2",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5d352fd2-4006-4269-9bca-0c2aad199526"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c41b300-1ded-456a-807f-9e5a572552ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7a3efdda-97e7-4be4-83fa-2598fb5c6f06"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "942f68a8-ea14-4139-bfe8-b4794805de0b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "dfcc7d41-8e03-4908-bbe6-0722229e83ee"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "cb2c3676-b95a-46ba-b520-03563fd9a866",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "73f8b79d-de40-4362-a5b6-7e9ea0891316"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "078d868b-0490-4439-b6e5-44d68cb4d2b1",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "02ba3d20-bc7a-48cc-9b87-bd98e4b5aa11"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c91684de-c327-4d7d-b3b0-81d640ba7afa",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3cf896e2-4cda-418f-be4d-f16702fb1a64"
            }
          }
        ]
      },
      {
        "id": "3f9f722a-8358-4823-ad5b-268e12b3dfa0",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "897b7910-6fc0-4182-8e11-82e6da4e3586",
            "name": "Negative Testing",
            "item": [
              {
                "id": "93e6d8fe-fc36-405e-829c-1ba2e050f932",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "444659d8-aa4f-4c2e-bfbc-30725d4a8d31",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e8216f1-2a06-4d3e-810d-52a47991567c",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9b11ffe1-805e-4c8a-8355-c1507f1068fb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4ea7d66-37ca-4af7-a841-e49e1c1b2f8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "dda9881c-a7b3-44e2-9e0e-8dd1c9f3f216"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "adbd174f-79fd-4f6a-a7ff-f82ffa553f25",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5182ea0f-9435-4ad1-9c7c-03fb0da2c5b4"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a710ec9b-5b68-49cb-95ff-fb720ac7aec6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2c27d23b-64a9-45df-9733-de1247abb360"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "77e0c4d3-84c7-4bb7-97bd-1c505b3be5a2",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "3c329a7e-7115-48b0-84b5-91133c3daadf"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8d38ede8-a832-4ddc-8391-0bd08192b77c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6637af07-b7eb-423f-9954-1f111d42f17d"
            }
          }
        ]
      },
      {
        "id": "d6fdb187-c163-42ae-a1b5-ae69ac75d58e",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1eefe9e5-723c-4244-baa5-d19090615f19",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2d6be83f-72c7-4427-9650-e6c917dc4f58",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "a6303228-5712-4131-ae53-48c4bf3a6bce",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b265b6f5-d6be-4cdf-9ed8-082309765c5c",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "11aacb03-9124-4441-86ab-e461f2e9c772",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2091,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 285,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 573,
        "pending": 0,
        "failed": 77
      },
      "testScripts": {
        "total": 1050,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1041,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 72.31228070175437,
      "responseMin": 5,
      "responseMax": 731,
      "responseSd": 76.20740874370405,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1711326951888,
      "completed": 1711326981699
    },
    "executions": [
      {
        "id": "d1cf778f-f3f6-4ccc-95dd-93c0305797d2",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 283,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "c764aa73-04b1-432b-9ea5-2443eb697bf8",
          "httpRequestId": "8b31efc1-0787-4885-99d3-588ee5492642"
        },
        "item": {
          "id": "d1cf778f-f3f6-4ccc-95dd-93c0305797d2",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "0a722ac6-09c2-458f-99e0-b64bf00c2a80",
          "status": "OK",
          "code": 200,
          "responseTime": 70,
          "responseSize": 0
        }
      },
      {
        "id": "6527b7a2-cf92-4b8f-a143-9cf2a1fef3fd",
        "cursor": {
          "ref": "652e101e-0b1d-4794-8167-be7c2bc9d4f6",
          "length": 283,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "72df3d1d-4b00-4b49-98b7-0b135b554828"
        },
        "item": {
          "id": "6527b7a2-cf92-4b8f-a143-9cf2a1fef3fd",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "74b026a7-24c9-4d3b-9c58-7096f273e637",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 0
        }
      },
      {
        "id": "6696c6c2-2afd-4468-8ebe-d29b42ebd16f",
        "cursor": {
          "ref": "56b91c17-dc93-46cb-9082-1d067601b29a",
          "length": 283,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "4493d354-c2ec-4670-bfa4-301ca50caea1"
        },
        "item": {
          "id": "6696c6c2-2afd-4468-8ebe-d29b42ebd16f",
          "name": "did_json"
        },
        "response": {
          "id": "281fb0c6-0535-4506-9e2c-09badd7be38f",
          "status": "OK",
          "code": 200,
          "responseTime": 260,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae6717b0-73bb-48fb-b242-372f48251e7b",
        "cursor": {
          "ref": "ed27537c-9e25-42a5-a77b-28505eb995ed",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "a3a91e28-5824-4135-a844-3cd15ebaed6f"
        },
        "item": {
          "id": "ae6717b0-73bb-48fb-b242-372f48251e7b",
          "name": "did:invalid"
        },
        "response": {
          "id": "fafc42c9-12bc-484c-bfd7-dbb4c6d694a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae6717b0-73bb-48fb-b242-372f48251e7b",
        "cursor": {
          "ref": "ed27537c-9e25-42a5-a77b-28505eb995ed",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "a3a91e28-5824-4135-a844-3cd15ebaed6f"
        },
        "item": {
          "id": "ae6717b0-73bb-48fb-b242-372f48251e7b",
          "name": "did:invalid"
        },
        "response": {
          "id": "fafc42c9-12bc-484c-bfd7-dbb4c6d694a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1661d32a-e5c4-4594-ad45-3c2fbcd97a44",
        "cursor": {
          "ref": "5c25e324-ad02-423c-be3e-0e5e9d98cf4f",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "672edc3b-b6be-4dfc-8747-79847c1843f6"
        },
        "item": {
          "id": "1661d32a-e5c4-4594-ad45-3c2fbcd97a44",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "f6bfb205-0a32-4d12-9f04-404c0fd4e762",
          "status": "Not Found",
          "code": 404,
          "responseTime": 109,
          "responseSize": 49
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fce4e06-cd38-4aa9-a03d-40682bfeea3f",
        "cursor": {
          "ref": "dc735695-9703-4ce1-bd57-d581fb60001e",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "f431d3e7-6405-41b7-a800-0f8baa20d2df"
        },
        "item": {
          "id": "2fce4e06-cd38-4aa9-a03d-40682bfeea3f",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "cdaf29c6-9aa2-43bc-a75b-a07170028512",
          "status": "Not Found",
          "code": 404,
          "responseTime": 63,
          "responseSize": 82
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4bed6654-cf55-4d97-970d-ca5b92a8a17e",
        "cursor": {
          "ref": "4f2c7135-c3ad-4529-beed-7b570081b4a5",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "c4b392e5-e9b0-4b1f-bfd7-288785b282b9"
        },
        "item": {
          "id": "4bed6654-cf55-4d97-970d-ca5b92a8a17e",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "94de3aaa-b968-46c4-842f-52d9051e632b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74793f09-cfd0-41cd-853e-9d8f7e1e2532",
        "cursor": {
          "ref": "9a3f85f2-eee1-440f-9951-98fb45fe2502",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "1406410e-1179-4219-b525-6919ec073dd9"
        },
        "item": {
          "id": "74793f09-cfd0-41cd-853e-9d8f7e1e2532",
          "name": "identifiers"
        },
        "response": {
          "id": "02cad951-d1b2-4c1e-9a4d-9c607b5f6432",
          "status": "OK",
          "code": 200,
          "responseTime": 99,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ebf4b62-db07-407c-87f3-9f545b5f7279",
        "cursor": {
          "ref": "e8699139-cda2-486c-bf3e-c6cae8eff99e",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "c0ea6dfc-8db7-47f8-8e10-31077fc1b43f"
        },
        "item": {
          "id": "8ebf4b62-db07-407c-87f3-9f545b5f7279",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "03d28f3a-2e97-409d-8525-8dea00d0b88a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbcec9e5-fa17-4e59-bec5-ec00e64d0806",
        "cursor": {
          "ref": "94421d50-64c5-44e7-bca3-de9684dc60cc",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "e2732c6f-6a6d-47e1-a1fb-b394c98b1042"
        },
        "item": {
          "id": "cbcec9e5-fa17-4e59-bec5-ec00e64d0806",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "bbb8169b-00c9-42f8-bb6a-95d0b8c0caed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6481d08c-5cf1-422d-b81a-52a3401f3d70",
        "cursor": {
          "ref": "cf23092a-004e-4223-9636-e98505c8bfa8",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "a6033430-bec7-4be4-bc13-90e906facc64"
        },
        "item": {
          "id": "6481d08c-5cf1-422d-b81a-52a3401f3d70",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "57ae8ca3-c81a-4a4a-869b-79e1194034f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "233451b3-609f-48fa-99a0-c7d371466c46",
        "cursor": {
          "ref": "d1842eda-788f-45df-9688-39663ad006b8",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "617e51cc-53ac-476e-bc7b-2ccc1fcc7175"
        },
        "item": {
          "id": "233451b3-609f-48fa-99a0-c7d371466c46",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "9cab3bd6-2976-48ea-807c-6c70e8d2110b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "933d177a-f5ed-4b9f-bf9a-2a99bb264aeb",
        "cursor": {
          "ref": "03bec08c-9ceb-4f80-a2f6-416a6e7c3059",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "08d582ef-4ae8-4eae-b240-e6c1718746a2"
        },
        "item": {
          "id": "933d177a-f5ed-4b9f-bf9a-2a99bb264aeb",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "5fca5b5d-ebbb-4310-a384-3d6f72d3601b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df5df09b-db71-4e03-afbe-fe8cf8b4687a",
        "cursor": {
          "ref": "4d73e972-4c08-4d33-87b5-0eea53995a9f",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "ca15cc60-2360-47f7-809a-b5b2778ca28a"
        },
        "item": {
          "id": "df5df09b-db71-4e03-afbe-fe8cf8b4687a",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "a6c1a419-48e8-445c-9daf-53c169c90deb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d93a47ea-3a89-4807-bccd-27c40c2529ad",
        "cursor": {
          "ref": "2e83cb17-f3f0-4da5-b1e2-620df5b88dc3",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "6e063f33-d945-48e5-b8d8-20d95985d325"
        },
        "item": {
          "id": "d93a47ea-3a89-4807-bccd-27c40c2529ad",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "45b45cad-a865-41b9-a405-b57f7d14b021",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9c45d04-315e-431e-981b-81e062391a51",
        "cursor": {
          "ref": "7c88f63c-2309-43ec-baf5-159fbd145590",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "8abfa56d-5171-41be-a21c-c2939b3ff161"
        },
        "item": {
          "id": "c9c45d04-315e-431e-981b-81e062391a51",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "811fb8e6-9c52-4f91-be44-d16e02408fa2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44d765cb-f1ce-46e3-ad93-8204b33a6f7d",
        "cursor": {
          "ref": "a330db43-8186-4ce6-bb5c-38d015a74f05",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "6e2b9517-6bbb-471c-b001-0b6227073d93"
        },
        "item": {
          "id": "44d765cb-f1ce-46e3-ad93-8204b33a6f7d",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "9d01f7c6-7601-4a4b-b862-5fb0a46d55ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb71806e-a6ec-43ad-8f67-60f85ad259ce",
        "cursor": {
          "ref": "2bfc14b9-d516-4f55-b3fd-e2c0690b3bbf",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "b1b370ba-7f60-418a-8c39-e205ae09e1e1"
        },
        "item": {
          "id": "cb71806e-a6ec-43ad-8f67-60f85ad259ce",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "66f6d1df-d9d1-4087-b68d-126a3edabb7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e9ccf50-cfe7-4fda-a786-9531b9a2ba82",
        "cursor": {
          "ref": "44fa8933-b32d-44a7-abb8-5ee6ce9964d6",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "e6b8f02c-e07d-495b-82e2-658a9989ae15"
        },
        "item": {
          "id": "5e9ccf50-cfe7-4fda-a786-9531b9a2ba82",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "2e0dc8aa-44cd-443e-befa-8e28cf3d97c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13d879ce-a2a4-4833-974a-d04abc9eca35",
        "cursor": {
          "ref": "9ed88eb4-43ba-46ea-bbac-14ff05865964",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "349697bb-5272-43d5-911e-95aad68edc16"
        },
        "item": {
          "id": "13d879ce-a2a4-4833-974a-d04abc9eca35",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "db28611c-d868-49ae-8159-676d3f926145",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a623c038-dad7-494f-ae83-e4a1c5b1dc1c",
        "cursor": {
          "ref": "15033783-afbc-4642-a6f5-53df71e143d8",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "ba034533-f6a2-4e76-9b6b-13b7866c37d0"
        },
        "item": {
          "id": "a623c038-dad7-494f-ae83-e4a1c5b1dc1c",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "680fe493-70d7-445d-bc74-17258cee7484",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d722a0bf-219d-4261-8516-f7d9ba3f964d",
        "cursor": {
          "ref": "b9b64821-4740-4526-aaee-d87c7bd289be",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "c4aee68d-515e-41ef-b2c2-23013768016e"
        },
        "item": {
          "id": "d722a0bf-219d-4261-8516-f7d9ba3f964d",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "e8fb43be-9a45-439c-b08a-d4aa3e4c0505",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54a6e9e6-784f-4926-b609-b1cdc18a2a41",
        "cursor": {
          "ref": "bf7f06be-e702-4114-9cc8-cd3c6b507c8f",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "48e37f73-f13e-4ea5-9cdc-d2f42497575e"
        },
        "item": {
          "id": "54a6e9e6-784f-4926-b609-b1cdc18a2a41",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "7c046de7-2b90-4a15-80a9-2b19377f9f78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c5a8b95-4d5f-4190-93e2-b8036e10f98a",
        "cursor": {
          "ref": "0dc8fbd2-6cbe-4e0b-89bc-e40c211f306f",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "50494f82-a611-41e8-9e4b-d5fc93333127"
        },
        "item": {
          "id": "2c5a8b95-4d5f-4190-93e2-b8036e10f98a",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "35037ed8-a730-42cd-9257-001d0109f036",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1cfc9dea-eba5-42dc-a418-1c3f9a15caac",
        "cursor": {
          "ref": "c28de6d6-eb82-41bf-90a5-e6ab82dbc60a",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "b2670221-d7a5-4191-a8c9-32cd87f282d2"
        },
        "item": {
          "id": "1cfc9dea-eba5-42dc-a418-1c3f9a15caac",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "2acfe034-d17a-4551-b6ba-c7118bb35e2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1459c8b8-a8c6-43b1-a31f-59ee729ef87e",
        "cursor": {
          "ref": "5c7c67f6-9e8a-48fe-82c9-4f49ecf94dcd",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "92ba5715-ef0f-45ca-8554-a562f4a064ee"
        },
        "item": {
          "id": "1459c8b8-a8c6-43b1-a31f-59ee729ef87e",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "1688ac04-fe1e-4947-8108-50464d513157",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37c58b7a-ad44-493b-9048-0ad432463a0b",
        "cursor": {
          "ref": "263cafbc-b873-4029-ba90-938383e71d41",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "c36dc48a-0f08-4461-9291-4cddbaa2f41e"
        },
        "item": {
          "id": "37c58b7a-ad44-493b-9048-0ad432463a0b",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "68df426f-84d5-46b7-bffd-7efd2a84b603",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7bc32a8f-fd70-43cd-aa81-518699e41bea",
        "cursor": {
          "ref": "63b12370-2c40-4ffe-868e-e22cc41b6778",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "e7ab4249-2e34-4416-a33e-7fd26ef6b1d7"
        },
        "item": {
          "id": "7bc32a8f-fd70-43cd-aa81-518699e41bea",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "8732b902-5db2-4e32-8063-03d8c53b65fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eabc25d0-2b36-436b-a82e-4672e7aca25c",
        "cursor": {
          "ref": "81f3d968-283c-47ee-ab16-cfac06ef750b",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "3dadf5ab-807d-4f1f-a78e-b0f8fb6f9251"
        },
        "item": {
          "id": "eabc25d0-2b36-436b-a82e-4672e7aca25c",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "8d2b158e-da50-4c61-a0ef-aab7cc7f12af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63f4627c-be8a-4832-9c39-9f5e81a16807",
        "cursor": {
          "ref": "fbc53689-be6e-4bda-9e38-fa8917b0a188",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "354ff0f9-9c28-4dfb-84a0-f1e716dbf3f6"
        },
        "item": {
          "id": "63f4627c-be8a-4832-9c39-9f5e81a16807",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "01715fa8-6f53-4322-9ab5-d5622b04c952",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abc63c3d-0df7-4fdd-9d64-090eb65cddf5",
        "cursor": {
          "ref": "e2e6cbd3-1fd6-4ddd-825c-cf7c4498a5a4",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "a6b82113-8cd9-43ce-b470-7ae12df5bda4"
        },
        "item": {
          "id": "abc63c3d-0df7-4fdd-9d64-090eb65cddf5",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "ac2bc6bc-2c37-40c9-85da-a30778c546e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23eaf93d-7064-4b04-9033-8de4f8dfd741",
        "cursor": {
          "ref": "47930af5-9eda-4a26-a667-577ef4be7362",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "6ac92e3e-6756-4d81-800f-ce504fdc555f"
        },
        "item": {
          "id": "23eaf93d-7064-4b04-9033-8de4f8dfd741",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "85a44637-aa0f-4d37-91da-35c8c8c0de70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4dbec87d-4d39-4a4e-97af-91575dba58d6",
        "cursor": {
          "ref": "e66e0c39-3ce7-47e2-8775-9aeeaedd5177",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "88df209b-2bd0-4e27-a94f-6b0623e561cb"
        },
        "item": {
          "id": "4dbec87d-4d39-4a4e-97af-91575dba58d6",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "a7537aa4-9197-46a0-a8f0-6db2da37fea1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "191f4e5c-da9e-4434-a66e-a140df9b0e7c",
        "cursor": {
          "ref": "3ae13f2f-af6c-4a3a-b755-db8b3dabe15c",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "23a5f105-b3e5-42e4-adfa-9c5270ab1685"
        },
        "item": {
          "id": "191f4e5c-da9e-4434-a66e-a140df9b0e7c",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "ff4871dc-dce8-4b90-8d2a-0929aee55380",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed260074-3f46-4092-bc6e-8b13a7b29352",
        "cursor": {
          "ref": "f43bedeb-408f-4198-bb6c-892a412b04d6",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "3c9e10d3-d4a7-4dee-929c-3b93a74c76e8"
        },
        "item": {
          "id": "ed260074-3f46-4092-bc6e-8b13a7b29352",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "030bb61f-a8ec-4d4c-8d70-d287294a2a93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29a6a7cb-89bf-46cf-bae9-e5f4cec1017c",
        "cursor": {
          "ref": "4b77e21e-48a8-4b4a-94cc-7697a7dcaecf",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "60fc526b-bf6f-45d8-bf10-bcba1d589802"
        },
        "item": {
          "id": "29a6a7cb-89bf-46cf-bae9-e5f4cec1017c",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "d250c308-e75e-4bda-9643-451045112016",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1bcf25f7-3426-4e17-bddc-a77110094a89",
        "cursor": {
          "ref": "f0b416e5-6492-460d-b232-44181673f0a0",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "ab888539-6490-4038-8570-0711d1d07539"
        },
        "item": {
          "id": "1bcf25f7-3426-4e17-bddc-a77110094a89",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "4dc9f58c-7392-49da-b7c3-0cb2adc3f83e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c92913f5-e6d3-41c9-8851-aa57d0c37203",
        "cursor": {
          "ref": "80c1e1b4-5380-461f-af0a-6dc3692870d0",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "a3ff9387-b740-44c4-9983-4470ad8e845c"
        },
        "item": {
          "id": "c92913f5-e6d3-41c9-8851-aa57d0c37203",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "3d7092ab-47c2-488c-9472-cd14e9afdb2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7843f834-72fd-46b4-949f-6cf5d72604ed",
        "cursor": {
          "ref": "9d6fbef3-7b09-430b-8916-0a00512db709",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "3937189a-140b-4df0-8caa-8765d2510854"
        },
        "item": {
          "id": "7843f834-72fd-46b4-949f-6cf5d72604ed",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "bf490c47-1120-4cdf-86a6-35da287010b5",
          "status": "Created",
          "code": 201,
          "responseTime": 731,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "c91239b7-06d9-48f3-8934-0bbd462de3b2",
        "cursor": {
          "ref": "20b14b71-a174-408c-ae6c-c35b4f69cb3f",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "38ceaf24-0da0-4f24-bbbd-d5cdee2aba8f"
        },
        "item": {
          "id": "c91239b7-06d9-48f3-8934-0bbd462de3b2",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "d499f069-9ce5-44fc-a34b-44953ab650ec",
          "status": "Created",
          "code": 201,
          "responseTime": 273,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "53e71d04-99b0-4c6c-8d86-a3eefcc97559",
        "cursor": {
          "ref": "c0fd8748-1d0e-4be8-9478-2580aa4645c8",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "8ac1dfcf-ab92-4936-915b-7508a00dc1ee"
        },
        "item": {
          "id": "53e71d04-99b0-4c6c-8d86-a3eefcc97559",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "c508d785-365a-4798-a49c-6ff68d3f5e68",
          "status": "Created",
          "code": 201,
          "responseTime": 282,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "96a830fb-fd35-4c6f-a25c-a8fd26d1ad5b",
        "cursor": {
          "ref": "36a4f01f-4d34-4948-ba09-060528d71f28",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "5e40e0a3-df2c-4f1b-b1fd-1dd7b2659ece"
        },
        "item": {
          "id": "96a830fb-fd35-4c6f-a25c-a8fd26d1ad5b",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "1f5c5806-892d-4377-afca-fe6639715588",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "726d3203-bc67-47ea-b7a4-dbf9513f42a1",
        "cursor": {
          "ref": "66ab9bd3-285b-484a-8a51-bb9dbf7606b6",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "09dad3c8-7f53-42e5-b0d4-bce130a59652"
        },
        "item": {
          "id": "726d3203-bc67-47ea-b7a4-dbf9513f42a1",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "66f325b5-1ec3-45da-9651-570fe16a82bb",
          "status": "Created",
          "code": 201,
          "responseTime": 218,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "3be25aa8-b9aa-4267-a6e4-1b69ae9e4551",
        "cursor": {
          "ref": "133d7251-cf02-4026-b465-c41963f2d4b2",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "52ca40a5-e725-47f9-9cae-42e0d3130c33"
        },
        "item": {
          "id": "3be25aa8-b9aa-4267-a6e4-1b69ae9e4551",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "181dc74b-777e-43eb-bd4c-f500bd6e1181",
          "status": "Created",
          "code": 201,
          "responseTime": 235,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "eec8f9f7-ac83-4061-a495-299502a551ea",
        "cursor": {
          "ref": "72ff702e-76e9-45f4-9d61-4f80f3011298",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "c9de6bd2-f6b9-4e8d-a5c3-c5f969f0108e"
        },
        "item": {
          "id": "eec8f9f7-ac83-4061-a495-299502a551ea",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "5a564caf-b399-4582-bb0a-e15dbda06ad2",
          "status": "Created",
          "code": 201,
          "responseTime": 235,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "6dd93a94-88e6-4af1-9f1f-b752a84af783",
        "cursor": {
          "ref": "585dd96d-58f8-4193-bdb6-362c070bb0f0",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "7496a4ef-d29b-4972-9b36-069a50a22b53"
        },
        "item": {
          "id": "6dd93a94-88e6-4af1-9f1f-b752a84af783",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "0e4c86a5-8054-403c-a522-8815ec3e3798",
          "status": "Created",
          "code": 201,
          "responseTime": 219,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "77310add-6638-48b3-a080-e314ceaa0486",
        "cursor": {
          "ref": "5a6cca15-c3a2-4c6e-9cf7-1faf15564e24",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "15e12d97-ec05-48a2-9ae3-9659ba81bd0a"
        },
        "item": {
          "id": "77310add-6638-48b3-a080-e314ceaa0486",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "5b5d7626-c258-4d00-8166-a396ccb98b3d",
          "status": "Created",
          "code": 201,
          "responseTime": 223,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "687cae73-ea29-45d1-9579-b9e56f4004ca",
        "cursor": {
          "ref": "d0366ee6-85dd-4798-91e4-40fd39e29f73",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "e2f39f4b-d40f-43a2-9ea4-07ff2c244995"
        },
        "item": {
          "id": "687cae73-ea29-45d1-9579-b9e56f4004ca",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "d1919af3-8b69-4e03-b937-00a2a4666248",
          "status": "Created",
          "code": 201,
          "responseTime": 292,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "8da727c8-c565-45e1-a016-812fec58c1ba",
        "cursor": {
          "ref": "4962ee24-0907-48c3-a875-ebb32b4a7ef2",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "3b26f064-3067-487a-ba79-49976f0e17a2"
        },
        "item": {
          "id": "8da727c8-c565-45e1-a016-812fec58c1ba",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "62aa1cc2-84ea-4684-bf97-c290a873ab38",
          "status": "Created",
          "code": 201,
          "responseTime": 212,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "ba299632-71a7-49cd-992c-8dab54c9f1a6",
        "cursor": {
          "ref": "79669e2c-2569-471e-8817-6514559920d2",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "d6ce2134-73fb-46e3-a4fd-71a3934cf776"
        },
        "item": {
          "id": "ba299632-71a7-49cd-992c-8dab54c9f1a6",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "9b964776-94be-4a5b-8718-1d24e2bed91e",
          "status": "Created",
          "code": 201,
          "responseTime": 223,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "065eeac4-38b6-4c97-ad61-0fce1bacb705",
        "cursor": {
          "ref": "a86da9d6-e985-4cf7-baf5-4c4430974556",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "2285523f-8f2a-4607-b235-e742f88dd749"
        },
        "item": {
          "id": "065eeac4-38b6-4c97-ad61-0fce1bacb705",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "5eb7bb1e-d547-4895-8626-4bf15a2ac95a",
          "status": "Created",
          "code": 201,
          "responseTime": 236,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "2187f593-0173-4dd8-9121-15ffbc057b73",
        "cursor": {
          "ref": "3efe6178-6d94-40f3-95fc-44831e75480a",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "b052b0dd-fb0f-4644-8eaa-264dcd5c7eb2"
        },
        "item": {
          "id": "2187f593-0173-4dd8-9121-15ffbc057b73",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "6a3eb1b0-9426-434b-a30e-b848fbc73a08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8597e1d9-b754-4435-ad1c-e81e8e0166e8",
        "cursor": {
          "ref": "461935cd-5bb5-4958-8222-021117120035",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "db1cf54f-36bc-42da-b9a0-257c1db398e3"
        },
        "item": {
          "id": "8597e1d9-b754-4435-ad1c-e81e8e0166e8",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "432f94e0-38e0-4e96-9632-a5a707aed774",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "259a192f-2199-4f0a-b569-ee6e59ad8c74",
        "cursor": {
          "ref": "62563ed3-fd56-498e-8e30-66650fb8940e",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "7c1c28e2-d7a0-4331-9cef-2a4b55790ec7"
        },
        "item": {
          "id": "259a192f-2199-4f0a-b569-ee6e59ad8c74",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "2b5ba770-859c-4743-b949-beb41b84e57f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f16f7750-bcac-4925-b99f-ce2c4a087ae9",
        "cursor": {
          "ref": "8d4e5593-3ab3-4d89-9c75-665c2d9ad5b4",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "57f0eac7-6fdd-4663-b6c5-cce68587913d"
        },
        "item": {
          "id": "f16f7750-bcac-4925-b99f-ce2c4a087ae9",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "10f0b8a0-4f31-4fd1-b3ee-accfca9af89a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ca13974-9328-49cb-9a0f-f2eea3552ffd",
        "cursor": {
          "ref": "e65e5206-8c54-4a21-8f88-cfa15a0b0aad",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "e072281d-d0ed-4896-82a0-dd5498bd9323"
        },
        "item": {
          "id": "8ca13974-9328-49cb-9a0f-f2eea3552ffd",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "a539eb28-e2d9-404a-807f-3fa77476bcd6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fde93e4b-6ca9-49cf-a987-bf7355d219ab",
        "cursor": {
          "ref": "5eceec81-58cc-41dc-8601-a9ae029559b0",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "b7dbf0a4-acb1-42f0-8bc0-77445524d289"
        },
        "item": {
          "id": "fde93e4b-6ca9-49cf-a987-bf7355d219ab",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "1afdd10b-2f9c-4861-9c06-ab5124a3a006",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a8c4e8b-6f10-41c0-9c32-27d845670467",
        "cursor": {
          "ref": "cea66856-cc6d-423e-b287-99bbd320b99b",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "affb58b6-c4da-4fc0-b5a0-399f28040d33"
        },
        "item": {
          "id": "8a8c4e8b-6f10-41c0-9c32-27d845670467",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "6af6e0c8-d2b5-4dd8-b0bf-c2400c923468",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd7e9f83-756b-462e-bf4d-3d8f1c64062e",
        "cursor": {
          "ref": "d0ad2575-686b-45ef-960b-8af6be67e45b",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "02f328b0-bc5d-40c5-8593-1e73590cc2a3"
        },
        "item": {
          "id": "bd7e9f83-756b-462e-bf4d-3d8f1c64062e",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "76c958bf-7de1-4014-a210-163950c0783c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a24a1121-722e-4c5d-ae3e-3adc35ef65cf",
        "cursor": {
          "ref": "9233e1ca-880b-4fdf-a13a-9ce733a7f438",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "97c6a2bd-d581-4d0e-baa9-91033ac5c266"
        },
        "item": {
          "id": "a24a1121-722e-4c5d-ae3e-3adc35ef65cf",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "fcbf2a2d-8052-4c45-99ef-3244856da657",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 110,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f1ae1ed-5b5f-41c7-bfca-afe92c519603",
        "cursor": {
          "ref": "50690a97-076a-4517-9dd6-1a151b8fd3ab",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "effba120-1e57-4c05-acba-802d62fd9464"
        },
        "item": {
          "id": "8f1ae1ed-5b5f-41c7-bfca-afe92c519603",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "f556887b-5969-4252-be23-e0d3642a2e0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4799aca6-f469-4b99-b913-cc205accb470",
        "cursor": {
          "ref": "e45f9630-4e00-4e84-acde-acb334f52dd0",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "63c58452-eef8-42bf-8826-7cfe42963a1d"
        },
        "item": {
          "id": "4799aca6-f469-4b99-b913-cc205accb470",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "7d3b7024-bc1c-49e0-81b6-d65d19e878c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3aac04e-e4a0-4b18-9e7a-461e2eb11a9a",
        "cursor": {
          "ref": "7ce53aef-21de-4adf-9ff4-6659263e4f9f",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "ee491dcf-a463-4d2e-a595-b66d58fdcdab"
        },
        "item": {
          "id": "b3aac04e-e4a0-4b18-9e7a-461e2eb11a9a",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "6407b83e-14ce-4808-8bcd-8b778291c8e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e77a15f7-a23e-4c2b-805c-484c49970bfe",
        "cursor": {
          "ref": "fbed4a8a-f361-4ad6-b890-8eb39d4d05d0",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "2aea33f8-3ec3-4a6a-b2f6-f6cca44bf1cd"
        },
        "item": {
          "id": "e77a15f7-a23e-4c2b-805c-484c49970bfe",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "90a62d91-74bf-4022-9bb9-b57a945166c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aee4fe12-542a-454f-be2f-c583071b35ea",
        "cursor": {
          "ref": "88da2b20-3386-4efd-bea0-38892f137c19",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "d132e5db-6b84-457b-9424-e6363444b603"
        },
        "item": {
          "id": "aee4fe12-542a-454f-be2f-c583071b35ea",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "b43ee415-3854-4b29-a4bc-d4a61cc2e482",
          "status": "Created",
          "code": 201,
          "responseTime": 210,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "497848bc-4fff-4403-bca4-b225d2fa56ed",
        "cursor": {
          "ref": "866b4d27-6bae-4349-ad0b-fa4aa4868553",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "b50e8cea-a2dc-4121-b971-59b8e1cec05b"
        },
        "item": {
          "id": "497848bc-4fff-4403-bca4-b225d2fa56ed",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "893ed423-71be-4c91-bbfb-025cfd6db387",
          "status": "Created",
          "code": 201,
          "responseTime": 320,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "d7f153e2-5712-4f4c-898f-a3b4d1e3736f",
        "cursor": {
          "ref": "b91947c2-5b08-4ecd-8150-6c5cf72e0daa",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "19bdcd75-f0c5-44ac-955c-103110cb36e7"
        },
        "item": {
          "id": "d7f153e2-5712-4f4c-898f-a3b4d1e3736f",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "af0d9596-e97b-4376-8c6a-0d454e41f8c1",
          "status": "Created",
          "code": 201,
          "responseTime": 645,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "e8672a86-8418-4597-b8bb-ffe7dc2d10c4",
        "cursor": {
          "ref": "2839bdfd-13de-42f4-8049-53a8b50c1145",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "b6107b22-1f62-405d-914b-cbe5b96b0b67"
        },
        "item": {
          "id": "e8672a86-8418-4597-b8bb-ffe7dc2d10c4",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "0ab37610-47d8-452e-879a-0579f73067e2",
          "status": "Created",
          "code": 201,
          "responseTime": 257,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "2024e832-1858-495d-987d-32dad59f69c1",
        "cursor": {
          "ref": "288f7b04-c59b-4565-83bb-1ef95cdde767",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "fb82f7d7-0680-49b9-ab4d-d150ece22279"
        },
        "item": {
          "id": "2024e832-1858-495d-987d-32dad59f69c1",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "c982b76e-164d-42eb-b768-da729fa1bcdd",
          "status": "Created",
          "code": 201,
          "responseTime": 247,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "5119c24a-a6e7-4fa5-904c-96c4696932d5",
        "cursor": {
          "ref": "7809e363-e24b-415c-8df5-c58b8abd8f51",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "911155ff-f23c-4783-a389-14da7afd4eab"
        },
        "item": {
          "id": "5119c24a-a6e7-4fa5-904c-96c4696932d5",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "8aecf929-f099-45fe-b723-faceb8e1a3c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4bef6cad-3e7d-4f8f-91ae-bf44f8d20d54",
        "cursor": {
          "ref": "9e4cab92-b266-426e-b256-8f26e185685b",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "a8742be0-7eff-42db-b75f-1e5d3d904bdb"
        },
        "item": {
          "id": "4bef6cad-3e7d-4f8f-91ae-bf44f8d20d54",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "c9b0812b-9cdc-48fe-ba5f-fa90c5028927",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89f7209a-1990-4d8c-9745-343634c40ba4",
        "cursor": {
          "ref": "8ca199b1-6f3c-4717-af87-1ca94ba14d73",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "77b7f650-f78c-40bd-bfed-847d1cc4717e"
        },
        "item": {
          "id": "89f7209a-1990-4d8c-9745-343634c40ba4",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "4b85b435-d293-4bad-9f50-23774e6c957b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9bc8f1b9-f51d-4486-b121-a8179d91ca8d",
        "cursor": {
          "ref": "7bad8b77-cdef-4e61-8317-9ad2f49b89aa",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "d735a9e0-7b48-41bc-97ae-15764bbf1e06"
        },
        "item": {
          "id": "9bc8f1b9-f51d-4486-b121-a8179d91ca8d",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "4cada3ba-d7f1-4db7-9ffb-0c6ec3fee46c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "463c4cdc-25e5-435c-b605-fcf3e8982a1c",
        "cursor": {
          "ref": "7ed5f760-9c8d-4f2b-8061-b39c014c1983",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "cc076b68-cd37-4697-ba92-1d1705f505ea"
        },
        "item": {
          "id": "463c4cdc-25e5-435c-b605-fcf3e8982a1c",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "55976f5f-898f-4997-b9c0-2d015eea3ee3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1746367-db20-4f0c-b73f-9f45a613ff70",
        "cursor": {
          "ref": "e6693917-1ffd-4f0d-b815-742d587a411f",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "61f0c79e-4f58-490a-bb03-9339e95c300f"
        },
        "item": {
          "id": "e1746367-db20-4f0c-b73f-9f45a613ff70",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "08f40abc-fabc-4f07-8772-94c764eec0a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7db57270-8029-4708-aaa3-bd6ec2e2b920",
        "cursor": {
          "ref": "1fae6c9c-501e-4e7b-b590-324b9980b26b",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "ae97088f-e866-4c92-bae7-fd4c22351c28"
        },
        "item": {
          "id": "7db57270-8029-4708-aaa3-bd6ec2e2b920",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "131061c9-58f0-4455-b8e7-6a123b3cd76a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca059f47-67b6-4dfd-a63a-3403a770899a",
        "cursor": {
          "ref": "357c6083-6024-47b9-949d-4b8dd57ea621",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "8ef431c1-7af3-440b-b73a-a47eea7cbc22"
        },
        "item": {
          "id": "ca059f47-67b6-4dfd-a63a-3403a770899a",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "1f113d39-b036-46ae-884b-4e1f183367de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "385e4af7-9d3c-49f8-a43b-a3de09578045",
        "cursor": {
          "ref": "3e4afc87-e4b8-4d86-8e5e-67ce74e5d793",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "551a48de-4129-4312-be0e-600a73f8cb11"
        },
        "item": {
          "id": "385e4af7-9d3c-49f8-a43b-a3de09578045",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "0799ac94-7ec3-471d-b0db-6d12eb82ad69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b80be909-4bd2-434b-a5d3-7f903f504f00",
        "cursor": {
          "ref": "6d320d76-525e-4e7e-9ed1-93d3a6fb29f2",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "e2bbe432-6bf0-4042-a5cb-e929c28dd90d"
        },
        "item": {
          "id": "b80be909-4bd2-434b-a5d3-7f903f504f00",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "5ddf58f6-7458-43fe-8c2c-b2ab1986ba8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09d37827-01e8-4755-8be0-ba04bbc8dab9",
        "cursor": {
          "ref": "a6747942-8393-4dfd-bc54-ad25dd519dbd",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "7296e7a1-cda9-408e-8c47-314dfacd95ae"
        },
        "item": {
          "id": "09d37827-01e8-4755-8be0-ba04bbc8dab9",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "235057c3-599d-4a22-a11f-65675a8e8ede",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a67ec0e6-854e-4eb3-b7c0-79ec06f0d131",
        "cursor": {
          "ref": "f91d13db-7153-4e7c-b905-ef325a7a12c2",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "ff2e50c8-69c6-414d-92c1-ec7328813480"
        },
        "item": {
          "id": "a67ec0e6-854e-4eb3-b7c0-79ec06f0d131",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "a3d53462-e129-4c99-88ad-6563e32bdca9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dcba68d6-f78a-46f7-b1d0-40911189cd35",
        "cursor": {
          "ref": "49cbf03c-6b49-43f9-8a0d-1c53f5f49f07",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "adc975ce-882a-45e9-ba60-7d90ae6be043"
        },
        "item": {
          "id": "dcba68d6-f78a-46f7-b1d0-40911189cd35",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "033e883e-c127-4311-81d2-4c7481de4c7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d024186b-36c4-4587-b96d-e3f26ef7d813",
        "cursor": {
          "ref": "9931a9e4-d274-455b-b32c-edf338588589",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "3cfaf7b4-edfb-46c7-8a15-58d26221c15e"
        },
        "item": {
          "id": "d024186b-36c4-4587-b96d-e3f26ef7d813",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "ec121dd5-6e08-40d0-9a8f-8d169f892531",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d4399f6-7b91-4bb3-8d99-03cc65f14c05",
        "cursor": {
          "ref": "c67f5ddf-de68-4ee6-8a7b-90753e52eb07",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "ecded835-fe61-47b9-b5db-2d52f4acac26"
        },
        "item": {
          "id": "6d4399f6-7b91-4bb3-8d99-03cc65f14c05",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "2ba3dba6-4a21-4b1d-b822-4321e47d5217",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d0e767c-ad0c-4375-9c63-b270ea2f695e",
        "cursor": {
          "ref": "080a3293-857c-45c6-810b-bb8020d3701c",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "3ed271e1-d253-4c2d-a551-402cc00242a8"
        },
        "item": {
          "id": "3d0e767c-ad0c-4375-9c63-b270ea2f695e",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "1acca76b-80ce-445f-b20d-4af892518633",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2711836-7082-4b4c-ae42-a0fe6e1b6421",
        "cursor": {
          "ref": "cee6ee87-30de-4c2f-8fc9-691acaec4263",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "74ad7f6c-6cab-469c-b87d-a4a894166175"
        },
        "item": {
          "id": "b2711836-7082-4b4c-ae42-a0fe6e1b6421",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "d2e14a5d-7eab-49bd-b32b-d0db8151e533",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ccd5eced-83ee-4995-8370-6fd74e4de28d",
        "cursor": {
          "ref": "4b8579fc-24fc-44a6-8bd5-64283b4a0b59",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "9e191c11-3275-4438-b155-b48c56b05d59"
        },
        "item": {
          "id": "ccd5eced-83ee-4995-8370-6fd74e4de28d",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "3029fb14-a29d-43a3-a07b-6a5b63557b73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33f77ec3-c7f2-44fa-b3a1-732d863c8a6e",
        "cursor": {
          "ref": "016370d3-8138-4c44-86c5-0c9008910c16",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "d02ebb57-273f-4ea9-8758-ceb57c9d7f96"
        },
        "item": {
          "id": "33f77ec3-c7f2-44fa-b3a1-732d863c8a6e",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "e31e7217-3bb8-419f-add2-3876461eb64b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30d178f2-c3e8-4481-a869-78ef0edc02a7",
        "cursor": {
          "ref": "9525fe2a-ffdf-46f9-ace4-2afbc557e429",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "30c9b82d-58e7-4e07-a518-46670e7fac09"
        },
        "item": {
          "id": "30d178f2-c3e8-4481-a869-78ef0edc02a7",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "4e71c314-c021-4ec4-a020-515acc27b5c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b730abf0-9aec-44a0-98d4-a9132919fa98",
        "cursor": {
          "ref": "ad546cf8-b99d-42e7-9104-d9c082882194",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "e32bd684-0c87-4aeb-84cf-306a5d99d7f0"
        },
        "item": {
          "id": "b730abf0-9aec-44a0-98d4-a9132919fa98",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "7ff333e0-6cd1-4cef-8986-6f74def2086b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d7d1b09-2f33-4e47-86a2-5cb88e82b5d3",
        "cursor": {
          "ref": "e5059680-8507-4d97-8114-915b1570d8e2",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "7030c3c4-fdda-418a-9491-ddba41cc4f09"
        },
        "item": {
          "id": "7d7d1b09-2f33-4e47-86a2-5cb88e82b5d3",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "7b785ff0-9137-427f-bd93-bde96567bb0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e151a151-0896-4341-b817-d4784c6192e0",
        "cursor": {
          "ref": "688d34ba-1156-4545-b3ba-158099839df6",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "5cc48f45-ded2-4b7b-a59d-bb879202afc0"
        },
        "item": {
          "id": "e151a151-0896-4341-b817-d4784c6192e0",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "b36d4977-a473-43a5-b01d-53226f4a5316",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc16fc5f-b4af-486c-ae01-b59fae1eed30",
        "cursor": {
          "ref": "4efead14-b625-4388-96b5-780f8dca1f92",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "f377e0d2-d3ff-4504-b32b-766b7ef4c65b"
        },
        "item": {
          "id": "cc16fc5f-b4af-486c-ae01-b59fae1eed30",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "c5db5c4b-86c6-4240-87f3-5d0a42ca31cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4747deda-304c-409e-b37b-f799a15b9cff",
        "cursor": {
          "ref": "332b5b00-3ed4-4897-8d2b-c261a3aa511c",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "c72bff9e-1b00-45d6-bb45-225d6a174dba"
        },
        "item": {
          "id": "4747deda-304c-409e-b37b-f799a15b9cff",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "b04004f4-2520-477e-9b4d-a345ac87e4bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b366d24a-aa30-43fe-8636-f8980d233449",
        "cursor": {
          "ref": "09c97994-ef2a-4114-a76f-86c440175eac",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "05d7c07f-8145-4d1e-8c48-31ba50c1766a"
        },
        "item": {
          "id": "b366d24a-aa30-43fe-8636-f8980d233449",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "061e6512-d1c7-4ae7-90d9-95bcb9ab6355",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f77e32d4-1435-46f0-9b3a-84ea1aad489f",
        "cursor": {
          "ref": "8ca06276-a33a-4ef3-8c95-0b1b59633317",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "787f5f06-ecd1-48d5-b695-9690f33c1cc6"
        },
        "item": {
          "id": "f77e32d4-1435-46f0-9b3a-84ea1aad489f",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "97caf599-fb3a-4e0d-a826-e052491ca8eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0dd678d5-a502-4781-b769-19e2c06865d3",
        "cursor": {
          "ref": "98e5b1d1-e82f-4c9b-af8d-5a7ef1e9df01",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "3fedf26a-6e1f-4c09-8973-6682fed9d60e"
        },
        "item": {
          "id": "0dd678d5-a502-4781-b769-19e2c06865d3",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "7a22de80-df15-4da8-b30a-fc24a26898e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ede1f1ae-db9a-4282-9c31-624b8152b9cd",
        "cursor": {
          "ref": "a870ca96-2d37-401a-8113-001579a9e5d6",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "5d95093d-f883-490e-8e3c-2cf562f13883"
        },
        "item": {
          "id": "ede1f1ae-db9a-4282-9c31-624b8152b9cd",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "aa8e737b-2e19-417a-81f2-6394af4a0d71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76027e27-1a5a-4825-847c-9f1f8c88bdb7",
        "cursor": {
          "ref": "553d9428-81ae-43e1-8b4e-6048c8ae7248",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "c942578b-39f7-40ed-aed8-5379a3582de9"
        },
        "item": {
          "id": "76027e27-1a5a-4825-847c-9f1f8c88bdb7",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "251a572a-38e1-49eb-88d2-89dcc28e748c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e37fbc35-c189-4f7d-a15a-4fbc753bc43b",
        "cursor": {
          "ref": "bb12f8bf-16fa-4671-8470-a1cf18160162",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "814f881f-1a76-43a1-ab78-145bfe1e7fdc"
        },
        "item": {
          "id": "e37fbc35-c189-4f7d-a15a-4fbc753bc43b",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "0f8b3367-0aa6-45f4-a6cd-628eb931a515",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a73fa02-d9a6-4a20-8e5d-1e00fdbf01ee",
        "cursor": {
          "ref": "1bcaffdf-39bc-4d6e-9fc7-a251a6e1908b",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "46d0715b-a9b8-47b0-8e8e-53eee7fa7dc1"
        },
        "item": {
          "id": "2a73fa02-d9a6-4a20-8e5d-1e00fdbf01ee",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "0bf3f4ec-be5a-4c77-91b2-bf39aa26a15a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 39,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "695c0d03-cb90-41cf-8e74-3e22847ecb1e",
        "cursor": {
          "ref": "9459777a-ea02-4f3e-99d9-0779bcb03fd7",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "ff5654fb-728a-4c59-a004-2c4fa9b8b8a5"
        },
        "item": {
          "id": "695c0d03-cb90-41cf-8e74-3e22847ecb1e",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "03e354ad-8edd-41f5-9620-33f7331fe9bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "56645472-712a-4572-ab5d-4f184b0883d1",
        "cursor": {
          "ref": "a48c18e8-5a42-44fa-abc0-e05a10e3368e",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "b555ed28-35de-46e4-9a5d-db58a412a852"
        },
        "item": {
          "id": "56645472-712a-4572-ab5d-4f184b0883d1",
          "name": "credentials_issue"
        },
        "response": {
          "id": "c006a268-0218-441e-a5bb-f3fcbcc3a10a",
          "status": "Created",
          "code": 201,
          "responseTime": 231,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "b47c31d5-9571-4828-b66d-f7e626ce2016",
        "cursor": {
          "ref": "b7baf218-de15-4487-8318-25590d763c93",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "b2be5d02-0059-4505-b37d-f8649ac067e9"
        },
        "item": {
          "id": "b47c31d5-9571-4828-b66d-f7e626ce2016",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "6a59b471-43ba-4f85-b1d5-ca1c36629c75",
          "status": "Created",
          "code": 201,
          "responseTime": 271,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a2e582f-58f8-4313-b6c9-0dd23686c2d6",
        "cursor": {
          "ref": "fec486fb-21ee-4193-a973-fc109bead896",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "b28012ec-3da0-44b0-af91-7e3cc2a97169"
        },
        "item": {
          "id": "2a2e582f-58f8-4313-b6c9-0dd23686c2d6",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "1080ad00-2091-4205-8906-5b0e76d345d3",
          "status": "Created",
          "code": 201,
          "responseTime": 216,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "45624e7d-8d76-49d7-b99c-9eb5847dad60",
        "cursor": {
          "ref": "b74e8faf-a4dc-4542-b638-0c38173ed424",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "38319efc-7f72-46b7-8bde-9c5a08043051"
        },
        "item": {
          "id": "45624e7d-8d76-49d7-b99c-9eb5847dad60",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "fd353ed0-7cdc-48a6-b261-c40c51afc465",
          "status": "Created",
          "code": 201,
          "responseTime": 222,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "b92f34d0-b893-4d4a-882d-f74a0727a744",
        "cursor": {
          "ref": "20ac23ed-cf3b-4110-a894-f22ea2ca16fe",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "d822a2a1-7513-4aee-b62a-1981e27c18fb"
        },
        "item": {
          "id": "b92f34d0-b893-4d4a-882d-f74a0727a744",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "6c205107-9d22-418c-aed9-433c4dd02044",
          "status": "Created",
          "code": 201,
          "responseTime": 254,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-03-25T00:36:06.608Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-03-25T00:36:06.608Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "1840f7cd-619c-4718-b76e-260014243ac0",
        "cursor": {
          "ref": "85765b03-91a9-4fcd-8bd7-60374004fd69",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "054b93e1-74a0-4bef-97a9-bdb83a698221"
        },
        "item": {
          "id": "1840f7cd-619c-4718-b76e-260014243ac0",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "15fdccad-802e-464b-bb6e-db91274efe84",
          "status": "Created",
          "code": 201,
          "responseTime": 342,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f88d3d5-691c-4463-a75a-baa97b40031f",
        "cursor": {
          "ref": "97248c0e-b5f1-4cd1-ab5a-d2532b4b268e",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "7cc8c61f-99c4-487e-aa20-0806377ebc76"
        },
        "item": {
          "id": "4f88d3d5-691c-4463-a75a-baa97b40031f",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "d07715ad-cd45-4461-ba53-29df2ef9f03e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36a33dca-8f2c-4bb4-85ff-9b8267f010d6",
        "cursor": {
          "ref": "37137813-5ff2-4f5a-b3ea-a7f33e4c836c",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "b2606d6f-7131-446b-a715-fe972cac7471"
        },
        "item": {
          "id": "36a33dca-8f2c-4bb4-85ff-9b8267f010d6",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "3dd2a1dc-da82-4be6-85ae-b74f77121af5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e069c8d6-8df9-4547-817e-17e3c0013293",
        "cursor": {
          "ref": "76382310-93f1-40f2-b711-b597ba3365c9",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "cfcf9897-4371-4112-90e4-13a44527b65e"
        },
        "item": {
          "id": "e069c8d6-8df9-4547-817e-17e3c0013293",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "9a396efd-f086-4280-84f1-5eb83ab34272",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3d89917-67ae-4b68-9fa5-02ab299d2a7b",
        "cursor": {
          "ref": "7a928205-1ff1-45c8-aa89-54a5c667de0c",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "2e29521e-c7aa-48aa-a845-f68e139da838"
        },
        "item": {
          "id": "d3d89917-67ae-4b68-9fa5-02ab299d2a7b",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "1037d07b-3a78-4f95-acff-e81c05449783",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75a3b029-d447-4eee-84a5-dbff91151350",
        "cursor": {
          "ref": "2f7c0aec-8a08-4d20-b9f8-0e534f0e72b2",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "d8a6d686-5075-453e-99f1-b4addff22f64"
        },
        "item": {
          "id": "75a3b029-d447-4eee-84a5-dbff91151350",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "d866d690-5fe9-4b3c-89a9-c3863c62bbbd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "286301e9-7ffb-4c31-b9e3-45e19b0ad1e6",
        "cursor": {
          "ref": "073d8307-e7e7-40d1-965c-18305882e663",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "3ae94961-ac58-4085-8c4c-083111518f8e"
        },
        "item": {
          "id": "286301e9-7ffb-4c31-b9e3-45e19b0ad1e6",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "cad82e3f-7522-49b2-b358-97d0ef58e5cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08b108c8-4bbd-4823-87f2-563859bf147f",
        "cursor": {
          "ref": "5e5a1489-b4ff-44a2-a28a-83f517384600",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "e4c7385d-c1da-4c4a-970b-0c6c11a68b9b"
        },
        "item": {
          "id": "08b108c8-4bbd-4823-87f2-563859bf147f",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "7ab1319c-4699-4d80-8e18-e9788d5d93ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09063cbc-1df0-4231-b4f0-8bb446c407e9",
        "cursor": {
          "ref": "840eacdf-bf4d-4d99-ac24-53adc940f214",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "20926db2-4bd3-4784-b2d4-3447677719bb"
        },
        "item": {
          "id": "09063cbc-1df0-4231-b4f0-8bb446c407e9",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "93436b2b-2028-4392-8a09-7eb68676b3e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c709afb1-dad8-4c96-8ed3-e7d99489db97",
        "cursor": {
          "ref": "d950dd36-ceca-4ba3-9042-6075add8c14b",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "5efc9307-4d01-489b-b787-c9d3ea2c4ff9"
        },
        "item": {
          "id": "c709afb1-dad8-4c96-8ed3-e7d99489db97",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "3030295e-4524-40a5-89a5-1cf129ca6b33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72ef64ac-e5fd-4159-a3be-bb6d466af567",
        "cursor": {
          "ref": "6031d97a-a5ce-4f5d-988a-57a47d95c584",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "166e57fc-5371-43bc-b87f-546379e669ac"
        },
        "item": {
          "id": "72ef64ac-e5fd-4159-a3be-bb6d466af567",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "3b1cf652-96f1-490a-a2f7-8d0f66ceff46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6bb36846-04fa-48c9-ab08-69b0f57b1432",
        "cursor": {
          "ref": "9593d395-28c9-4b47-89a2-fb63dc22d4e9",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "dc448d36-b74d-404c-a637-c45bf600c4cc"
        },
        "item": {
          "id": "6bb36846-04fa-48c9-ab08-69b0f57b1432",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "8a02f5b5-ec86-47a6-94f7-d9aba20e7361",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "838e9089-a962-407d-a7dc-080c005351bc",
        "cursor": {
          "ref": "96dd8700-0b67-42ed-b2bf-20835a0081ce",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "121bd23e-2f63-4250-9bd1-940b365c2d71"
        },
        "item": {
          "id": "838e9089-a962-407d-a7dc-080c005351bc",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "5b447cc9-1cb8-4ad8-83d3-ed605979fcf0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6533691f-fa24-4cb2-8c1e-d610119dadd0",
        "cursor": {
          "ref": "bb0cc9ca-ed15-4716-b451-f7190d91a32b",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "e2d788b0-f786-4fb7-a275-f3fddfabaf21"
        },
        "item": {
          "id": "6533691f-fa24-4cb2-8c1e-d610119dadd0",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "1f76a02b-6fa1-4fb6-a18f-08da4e4fc67e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 84,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "4e2169c0-66b4-4c90-9549-aaaec0d2d98c",
        "cursor": {
          "ref": "52ef8ee5-ff99-4055-bea1-c9ceb58e7d0b",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "ed7061df-8444-4c8d-9715-b10fccaf88e7"
        },
        "item": {
          "id": "4e2169c0-66b4-4c90-9549-aaaec0d2d98c",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "bf9d43c7-825f-4cd6-be6f-ca0e0fd0f9a6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 73,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "5ff63899-a60e-4eb8-863c-9f579d94a895",
        "cursor": {
          "ref": "69b0ed48-095a-44c8-88b3-45615faef0a3",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "dcb1768f-8b57-41cd-99a6-8973649938bc"
        },
        "item": {
          "id": "5ff63899-a60e-4eb8-863c-9f579d94a895",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "3a2e1395-5c04-44dc-9286-a3923c97b81e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f46246f-e8b8-4a8c-8c67-93f070141762",
        "cursor": {
          "ref": "dbc304a3-233b-410c-9f93-2a5be9e8545c",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "37084ffc-22cd-4235-bf9d-02ce322148c7"
        },
        "item": {
          "id": "4f46246f-e8b8-4a8c-8c67-93f070141762",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "4f8ef6dd-72df-4b00-aeb0-33101e245f20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c3a72a1-1fb8-4e01-9756-50723b815f51",
        "cursor": {
          "ref": "2f05bd3a-5bdb-4b4a-bd4d-4acd7d7c358c",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "50445f98-2d5c-416a-ba25-6d90079b9cc6"
        },
        "item": {
          "id": "4c3a72a1-1fb8-4e01-9756-50723b815f51",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "516fdca7-facc-4933-8be8-0e4f16649426",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "784e9217-cc06-4ca0-9c53-d4651e3a5c4c",
        "cursor": {
          "ref": "98df4ecf-0da8-4630-b455-9334925051fe",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "29830d9c-ced8-4ce6-815f-5c662ee7e200"
        },
        "item": {
          "id": "784e9217-cc06-4ca0-9c53-d4651e3a5c4c",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "89ece062-30dc-47d2-af18-999e6f34881d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "106b7f79-528e-4c4f-96a5-0f7a5d47a9df",
        "cursor": {
          "ref": "87c5c8b4-333a-49d9-9b00-9819fa210d13",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "ce68ed4f-38d4-4b7d-a5ba-a84071e95419"
        },
        "item": {
          "id": "106b7f79-528e-4c4f-96a5-0f7a5d47a9df",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "2d43bd7a-df3e-49df-9e91-a39e9c53bbb6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3cc7f808-bcd7-4316-aa2b-2225fe9e4770",
        "cursor": {
          "ref": "0fc50287-94b8-488f-8a9c-0b4d1822a194",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "841c63ff-2526-4ae5-baa4-0143c0389f0d"
        },
        "item": {
          "id": "3cc7f808-bcd7-4316-aa2b-2225fe9e4770",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "bc40e450-a8b1-4bfe-aecb-3c4e2a5adb0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e3a84b9-492c-4399-9d21-26d772d544a6",
        "cursor": {
          "ref": "478e6cad-d459-4db2-9018-165214d47bd4",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "a34fd471-c391-4f89-8150-ec4e739a1e57"
        },
        "item": {
          "id": "6e3a84b9-492c-4399-9d21-26d772d544a6",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "f65a96dd-d656-415b-b806-34acc6193422",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a25188c8-ed06-49f5-bbbd-c9032d3b868a",
        "cursor": {
          "ref": "03896942-d2a8-423e-9182-a0e2b79aa868",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "229faedd-fdb4-44e9-8f73-2f704b541198"
        },
        "item": {
          "id": "a25188c8-ed06-49f5-bbbd-c9032d3b868a",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "50a65557-45f5-42fe-b073-3e1348f99f59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4645b186-753e-4502-b5ea-a206d65b3aca",
        "cursor": {
          "ref": "06195b75-b9be-4ee1-9d38-7ac7edd5c8ee",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "02fddc39-b290-483e-98bf-f2c25dbd9326"
        },
        "item": {
          "id": "4645b186-753e-4502-b5ea-a206d65b3aca",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "013037bb-4eb4-4b92-875e-1a67609eeda8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f54dd81-911b-43c4-a6e5-15dec310f3e9",
        "cursor": {
          "ref": "c0dc751d-59e4-47d3-aa0f-57bee5a8dcbd",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "2dac08b5-ec4c-41bb-8c09-4b8319f27e35"
        },
        "item": {
          "id": "9f54dd81-911b-43c4-a6e5-15dec310f3e9",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "1b4a7c4f-ea11-4704-a9a1-9f4f4d8428e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2db7ea4a-9f8e-401d-981b-ec68d0422c6d",
        "cursor": {
          "ref": "6c018856-7d97-43f1-9a79-a5782ba67a34",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "596ea8ee-a102-4348-9b16-3acafd28ba3e"
        },
        "item": {
          "id": "2db7ea4a-9f8e-401d-981b-ec68d0422c6d",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "2448cc7b-1086-48c8-a34a-0331fe8c86cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d65d8047-cd2d-4ee1-92db-fb8630fd517d",
        "cursor": {
          "ref": "6db073d2-9d7b-4faf-b723-2694fb62947b",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "a7e1713f-b582-4c60-b879-073842cad012"
        },
        "item": {
          "id": "d65d8047-cd2d-4ee1-92db-fb8630fd517d",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "f9960232-0a23-4d59-ba08-b510ad664217",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9a05ea3-de12-453e-9c13-0489f02ea251",
        "cursor": {
          "ref": "ca3b5528-c16c-47ef-a365-8650d90e64a8",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "4e8e845d-e6fe-4ed7-b6b6-fcaed35599df"
        },
        "item": {
          "id": "a9a05ea3-de12-453e-9c13-0489f02ea251",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "03fa271a-22f3-4a5c-8083-cd68b3ed486f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8944da7-5c05-4677-9e34-568fb728c7e2",
        "cursor": {
          "ref": "919108fd-bd50-4ddc-82ef-55528e93a431",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "4be8e91f-c6b7-4e4f-bbb1-546e946cecfa"
        },
        "item": {
          "id": "b8944da7-5c05-4677-9e34-568fb728c7e2",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "d6420b29-17a3-4fac-8f94-fdf3f2817668",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f913937-8a7f-4ffc-927c-0bc721003c35",
        "cursor": {
          "ref": "32fdcbbf-bf2d-4975-a10d-b98ba8bb5554",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "7c179888-b3ca-4f5f-8074-f45b661b1d4f"
        },
        "item": {
          "id": "4f913937-8a7f-4ffc-927c-0bc721003c35",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "da002624-adea-4947-82a7-3123fba060e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06b12303-9e71-4b7f-b536-87f3c2d8d167",
        "cursor": {
          "ref": "206ed5b3-eefb-4859-aac9-fc4e98a6c608",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "b360aa8e-51ce-4771-9f37-b6e55cedeece"
        },
        "item": {
          "id": "06b12303-9e71-4b7f-b536-87f3c2d8d167",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "c9b2230f-4daa-4195-98fd-598998f4468d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72a88592-da15-476f-8989-aa06eb27f9c8",
        "cursor": {
          "ref": "f94d261e-160d-406b-a509-8f6d86d592fc",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "81e267c2-d11e-4a3c-9263-ba54aa42e3f8"
        },
        "item": {
          "id": "72a88592-da15-476f-8989-aa06eb27f9c8",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "66a5ceee-fd37-4a37-b0c1-04ff08900e6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e39215e-0813-49c9-8cbd-0747b27f9916",
        "cursor": {
          "ref": "a07c17a7-3602-4cbc-a5eb-1057a77fda29",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "0e7d7729-a948-4c48-8c6f-3a10c7184030"
        },
        "item": {
          "id": "0e39215e-0813-49c9-8cbd-0747b27f9916",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "eb3ed249-14fb-42b8-867a-f8639f3ac001",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 98,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "0aa2366c-fb13-4b6c-898e-26407db7b945",
        "cursor": {
          "ref": "04e4c955-c058-4764-98dc-4a3c213380b9",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "c4dd1bdd-2eaa-4d2e-830a-88d0f022a728"
        },
        "item": {
          "id": "0aa2366c-fb13-4b6c-898e-26407db7b945",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "fed1504d-43e7-4e4e-a475-40b1fbab67be",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 38,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38320763-b45d-4121-a830-7fbe0671ae39",
        "cursor": {
          "ref": "1bb0335a-8142-411f-b404-806953d2115a",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "45637e09-7f1b-4944-9a77-2539d086189d"
        },
        "item": {
          "id": "38320763-b45d-4121-a830-7fbe0671ae39",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "1e90bf16-a87a-417f-b55d-8ed050b18b41",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3cc54a11-d7ce-4a7a-a5c5-95a7e6da1e98",
        "cursor": {
          "ref": "09170192-f817-40ba-a9b0-26f8789ca5bd",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "9d440e8f-2836-4cd8-8cf9-0a840c32114b"
        },
        "item": {
          "id": "3cc54a11-d7ce-4a7a-a5c5-95a7e6da1e98",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "f7434785-cec1-468f-a731-be5c70a3e817",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07d2a3df-4b5f-4a56-832e-f248996f92cb",
        "cursor": {
          "ref": "c5da9b38-fde9-4f49-845c-650af9de29af",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "95c481f6-d72e-4926-b193-025336ad1348"
        },
        "item": {
          "id": "07d2a3df-4b5f-4a56-832e-f248996f92cb",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "b700ed4f-2075-4ce4-9855-80edda7906bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "118abdc3-35fb-4573-be16-f6f962224d6c",
        "cursor": {
          "ref": "e27c5056-548a-4a35-9f98-3fcf8865bf6f",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "d9b29796-7f3d-4ab8-8b60-34125d1771d1"
        },
        "item": {
          "id": "118abdc3-35fb-4573-be16-f6f962224d6c",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "b29b838e-7260-481e-9e61-cf7a7f599e74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b3dd371-b065-42df-a313-aeff3224bd54",
        "cursor": {
          "ref": "7f657c9c-4f69-4c6c-97a6-d867afcdb073",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "a8cf7a9c-b014-4c9e-aea3-62d982323cee"
        },
        "item": {
          "id": "4b3dd371-b065-42df-a313-aeff3224bd54",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "d284955e-4f8d-4082-8227-249b9cf9fde2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fcb8e27a-0e91-4b46-9307-43f74b3502f3",
        "cursor": {
          "ref": "61ea484e-440f-4d6e-85da-177312a7944a",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "80ac0acd-f79b-4e65-ae8f-fe21158590f1"
        },
        "item": {
          "id": "fcb8e27a-0e91-4b46-9307-43f74b3502f3",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "47d55e1b-18be-4252-8fb1-905885e0f3d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "feba663b-3352-4126-869b-9792f585a296",
        "cursor": {
          "ref": "4032deb0-f234-443f-a2d0-38f1a65265d9",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "5ba31df1-ddbe-4dea-9615-2e568edbb3b1"
        },
        "item": {
          "id": "feba663b-3352-4126-869b-9792f585a296",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "5a14cd5d-d9b8-43ba-9040-c5c2c95427ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c660132b-7d77-465c-8f4a-0adfe32668bc",
        "cursor": {
          "ref": "e6434afb-14e7-4668-aeee-3c738a1f2390",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "4a7a13d6-95cb-441a-b3f8-a0d0e0e4d12c"
        },
        "item": {
          "id": "c660132b-7d77-465c-8f4a-0adfe32668bc",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "f835e6ad-c952-41ca-aef3-c499e63a4f59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5d2d7a6-5ca5-4c1b-bc82-f75808f24c69",
        "cursor": {
          "ref": "97f1a391-c67f-4b1c-966e-342ac9c7da5a",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "6b1ebc72-2c93-4644-8933-64413b39a8c6"
        },
        "item": {
          "id": "b5d2d7a6-5ca5-4c1b-bc82-f75808f24c69",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "f7bbbd3f-2aee-4698-9f36-816e5d89231f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aaeeb419-c8f7-4e42-bdb2-b15a86a79166",
        "cursor": {
          "ref": "7a16f495-d76e-4614-bed7-ad4234779e41",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "9c6e8aa1-35ad-4e65-9ec3-70ea6dc8fa45"
        },
        "item": {
          "id": "aaeeb419-c8f7-4e42-bdb2-b15a86a79166",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "3015dd15-b986-49b5-a4ca-8335c90e6a3e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db1fae54-1f3a-4c65-88b0-61cf8e70b8b8",
        "cursor": {
          "ref": "330d262f-4441-444d-bed6-feefa1265f42",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "d12caaf2-bac7-4633-b9fa-25d8403fdd89"
        },
        "item": {
          "id": "db1fae54-1f3a-4c65-88b0-61cf8e70b8b8",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "400d7da7-d1cb-45e5-a28b-ca1a7abeb94a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d696441-f083-494e-b61c-a8899f49c438",
        "cursor": {
          "ref": "1499a432-773d-492f-b356-3c954b5f4e46",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "1b3f5871-74e6-4537-8152-a2bf94712285"
        },
        "item": {
          "id": "5d696441-f083-494e-b61c-a8899f49c438",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "cd6f1248-f7c4-4f29-85d9-001a02d16da9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aac43628-94d4-46db-a2f2-e1821ab34d1a",
        "cursor": {
          "ref": "eb00f5b2-5bdc-4fa3-bc8e-435064fffc68",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "f3af0aec-8d1b-4154-a9f3-69f1526458cb"
        },
        "item": {
          "id": "aac43628-94d4-46db-a2f2-e1821ab34d1a",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "1afed6ca-2672-46a3-838b-feb33d835e46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 194
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f073e42-ac65-47b8-8e13-24a2b0a0672e",
        "cursor": {
          "ref": "41bc69c8-3e66-4071-97d7-5d540580fe0e",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "3b0d636a-1c42-46ff-b7e7-1445ecc16387"
        },
        "item": {
          "id": "5f073e42-ac65-47b8-8e13-24a2b0a0672e",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "d3453080-c5fb-40d9-8a77-56d3104bb0e0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 84,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:155)"
            }
          }
        ]
      },
      {
        "id": "e481ebd2-80eb-4292-a4f1-de6cbc1e95a0",
        "cursor": {
          "ref": "80f2c1a4-4221-47ed-9adc-d74b549a5ffd",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "ad799bf7-8bae-459b-a346-1230f8f9ea0e"
        },
        "item": {
          "id": "e481ebd2-80eb-4292-a4f1-de6cbc1e95a0",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "14405e0c-58d7-49b2-a1e0-332df21accca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46dbb8c9-1e1a-402e-a4cf-8c99a61535b9",
        "cursor": {
          "ref": "1b748ab6-6f06-4205-972d-d1af716fa30a",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "787c21da-94b4-49d8-8871-d0dde895e391"
        },
        "item": {
          "id": "46dbb8c9-1e1a-402e-a4cf-8c99a61535b9",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "d1ff8055-f9c4-4825-8bab-40d5291cb705",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a486dc24-251c-4769-b072-bb6494b15f64",
        "cursor": {
          "ref": "b9d3a34f-ede3-4a38-90fa-7ee8c2170864",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "3ab93110-5b15-4b6e-9042-cc385f787477"
        },
        "item": {
          "id": "a486dc24-251c-4769-b072-bb6494b15f64",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "f8809c0a-c33c-4800-986e-7c930b14c388",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12ad509f-49ae-407f-9241-11f3995c4795",
        "cursor": {
          "ref": "c3181c13-ba29-428c-a46f-dda53e6e312e",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "43e679fd-d994-4cce-9b40-c5a9130d60a7"
        },
        "item": {
          "id": "12ad509f-49ae-407f-9241-11f3995c4795",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "760c6a37-ac6b-409a-b3bb-95bbb74c0ad3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8e79974-f740-4d12-9d99-838e3d641e52",
        "cursor": {
          "ref": "d1b73f0b-24d5-45fa-afa6-a22dd77031d3",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "8bca41e1-c2f5-4420-9a01-d6c039c5cd5a"
        },
        "item": {
          "id": "b8e79974-f740-4d12-9d99-838e3d641e52",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "465a8d85-a629-4a23-be28-99eb0228ba12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ce8f944-104e-4e9b-be43-4486fbf68e40",
        "cursor": {
          "ref": "4aa2cd4e-2d87-4811-bc20-e3c6941fc541",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "169406c6-6d51-4670-8c5c-479363589e3f"
        },
        "item": {
          "id": "6ce8f944-104e-4e9b-be43-4486fbf68e40",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "4b8d6d05-4c37-4156-b14b-f2afd9d1cf22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ef10dba-42c1-42ec-bc30-0e919243a58e",
        "cursor": {
          "ref": "2136f929-0497-42d4-a00d-044e7b0ca1fd",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "1562c2e8-3e5f-44ea-804b-fc01d7633fee"
        },
        "item": {
          "id": "6ef10dba-42c1-42ec-bc30-0e919243a58e",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "97688d7f-ee18-4982-9b28-870c4aba03d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c2cebba-e1a1-45ed-8e59-5f2453dc44a8",
        "cursor": {
          "ref": "45cab1b3-f160-4e5e-b2ae-6a0717ad31dc",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "740d3648-b7ea-4b49-860c-3b2393cb1fd1"
        },
        "item": {
          "id": "1c2cebba-e1a1-45ed-8e59-5f2453dc44a8",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "2c58e181-7692-4dc7-adcd-2d2b05981a2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af17b8c3-b8ae-4de3-9428-0f63e863246c",
        "cursor": {
          "ref": "8fff6986-e759-4248-b92a-e8b50020c11f",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "27d9b915-32e6-4a94-981b-759dfd1ed05d"
        },
        "item": {
          "id": "af17b8c3-b8ae-4de3-9428-0f63e863246c",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "fec8b197-689b-49cd-8f15-f698204a4814",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "496d3068-b2c5-4668-8a75-8e45dd69907e",
        "cursor": {
          "ref": "2364a375-c6a9-4e15-b7c6-6d0fe80b9ca8",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "b1d87533-6439-432e-af0c-6753b0c03b24"
        },
        "item": {
          "id": "496d3068-b2c5-4668-8a75-8e45dd69907e",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "c07b6793-50ac-4c6b-9d0a-da551d41ddee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85a39e48-1d6a-4d00-9b92-7712a6db210f",
        "cursor": {
          "ref": "84b1b785-334b-4219-a945-573e5f9a99e0",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "6b39d027-4a79-49e1-83e3-2896f3e61e9c"
        },
        "item": {
          "id": "85a39e48-1d6a-4d00-9b92-7712a6db210f",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "975e9c77-d5ac-452c-8c13-9996dce5decb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28889672-7e83-4126-aee3-5bae1e541728",
        "cursor": {
          "ref": "27f2bfd0-c804-467c-a20e-6bf438fd6654",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "cf66ee4c-5e60-4186-8139-9728ea5e5898"
        },
        "item": {
          "id": "28889672-7e83-4126-aee3-5bae1e541728",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "63c067c3-32d8-4426-821f-c7f1a70ddd1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6210f896-b5fa-49e0-81bc-801f0cc04726",
        "cursor": {
          "ref": "75c83f1d-83b2-4440-a079-97bdba89887d",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "43a7956f-2fbc-46eb-9c6b-efd5eedc4763"
        },
        "item": {
          "id": "6210f896-b5fa-49e0-81bc-801f0cc04726",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "ae17ec3f-256c-4d6c-b731-a9dfd9a34aa7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45ddf632-1509-4f2f-b784-7ae8e0443743",
        "cursor": {
          "ref": "1111a76c-6905-44ae-9767-e5def814ca6f",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "e06a6513-a68a-49f5-b239-da50f2a53df6"
        },
        "item": {
          "id": "45ddf632-1509-4f2f-b784-7ae8e0443743",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "a170bba1-5abb-4aac-b0a4-803f00f56006",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7dcad70-391e-4245-8bf6-6832a6d63f44",
        "cursor": {
          "ref": "a9fe43a8-8388-40c2-8c7f-f89b603f4166",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "3b0b4ccf-3c5e-4010-a189-11e89ccc2017"
        },
        "item": {
          "id": "f7dcad70-391e-4245-8bf6-6832a6d63f44",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "54ed9621-9afc-4151-8223-79d2d1785af9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a57a89ea-8196-4f1b-9e96-accdc7de9c3b",
        "cursor": {
          "ref": "f8542b57-2c73-42de-8e5d-959819931aa0",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "8ec41937-c300-45d3-98d0-c97623196400"
        },
        "item": {
          "id": "a57a89ea-8196-4f1b-9e96-accdc7de9c3b",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "8faed356-cc37-441d-a180-22c46c5bca73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92d8d35c-0a7d-4b96-9bf7-e1a42d9bd123",
        "cursor": {
          "ref": "4aba5118-df9e-4de0-a469-968d6f848b1f",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "a34d7a5e-8901-4ee8-b5e6-8a38a6b0f439"
        },
        "item": {
          "id": "92d8d35c-0a7d-4b96-9bf7-e1a42d9bd123",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "bc424f6f-9074-4f21-9052-412d47c7f9f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18dbc8e4-28e7-409e-b5bf-46939b04641b",
        "cursor": {
          "ref": "cc3434bd-00de-4f86-a424-a79deeff3528",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "ab534875-703e-482d-9ce2-1addb7ffa059"
        },
        "item": {
          "id": "18dbc8e4-28e7-409e-b5bf-46939b04641b",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "81ed4def-3e1c-4783-a0e4-c6ab5c316b59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89b6672f-d176-415e-851e-0b4e26ce4bb6",
        "cursor": {
          "ref": "844ca13a-d17b-44f5-a606-c0a24883df45",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "bc906d4d-66ee-437b-86cb-cdd2ae468d48"
        },
        "item": {
          "id": "89b6672f-d176-415e-851e-0b4e26ce4bb6",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "e7f4060f-63c1-4d44-9974-8192e9425f5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1c71203-14fc-4b6c-a980-8e3e86cce34b",
        "cursor": {
          "ref": "e9bd2c63-c0bb-4d7f-ae4b-a8acec59c918",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "f28d299c-bd84-4873-83ae-3108e6155641"
        },
        "item": {
          "id": "f1c71203-14fc-4b6c-a980-8e3e86cce34b",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "3e54bb8a-eded-4a7b-92f6-910715e8dcc2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ba66e69-a7cc-4190-b249-8ebf0d4ef753",
        "cursor": {
          "ref": "ea700299-ff98-4e67-8b99-d343eb184c4c",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "24103009-969c-42d1-b63d-8a1d48ea2ad3"
        },
        "item": {
          "id": "4ba66e69-a7cc-4190-b249-8ebf0d4ef753",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "1691d6b8-bbc2-46d6-bdcb-c490e2bb49fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35cbc24f-d285-42d3-a475-d57e70e64f16",
        "cursor": {
          "ref": "d0547a9b-a3fd-436b-bbae-55111f196521",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "e5eb2382-d9df-4323-ae88-3f1808d9cbaa"
        },
        "item": {
          "id": "35cbc24f-d285-42d3-a475-d57e70e64f16",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "63c1a4f1-c899-47b1-804e-5046789b50cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78328cdb-5e97-4e37-a686-10c61746861f",
        "cursor": {
          "ref": "9c667312-b0f7-4600-a681-ef396d148633",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "334ee039-3eda-4bb5-8fe0-4750917f91fb"
        },
        "item": {
          "id": "78328cdb-5e97-4e37-a686-10c61746861f",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "cbba2045-e43f-4e1f-a00c-c018bd79fa81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c49d2e21-ea77-4b33-8335-9c8f3e40eea9",
        "cursor": {
          "ref": "0d2f9604-cdec-4a6c-9185-7eaa18872106",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "9d6654ae-1072-4ada-acff-94948ba9cc66"
        },
        "item": {
          "id": "c49d2e21-ea77-4b33-8335-9c8f3e40eea9",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "8369bd85-3566-478f-9c11-5a50f88adbf8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 38,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5a6cc3c-ad82-42c5-8ab8-ab182adc59c5",
        "cursor": {
          "ref": "362d71fc-d0cb-4a2a-bd4a-bcdbca4118d8",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "7f5efcfb-8e8b-410f-a55c-396719cd527d"
        },
        "item": {
          "id": "d5a6cc3c-ad82-42c5-8ab8-ab182adc59c5",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "7489c218-f25d-4e6c-8d18-d7cc1a29a241",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b677a44d-ed29-436f-9105-c3887b0bd4a2",
        "cursor": {
          "ref": "d624096c-84d8-4a71-9dbe-eca566918422",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "c8b3dbca-5b3a-40e4-b9bb-6e8969048b3f"
        },
        "item": {
          "id": "b677a44d-ed29-436f-9105-c3887b0bd4a2",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "eb812bcf-aaae-40e3-a0e9-0daf8a56d56c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "beaac37c-3f70-4f69-9a26-355a4b8d9fc1",
        "cursor": {
          "ref": "60a3ade5-02a4-49aa-8259-66b81d1da112",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "257c10c8-32e7-4a8b-9e40-59bff70b7782"
        },
        "item": {
          "id": "beaac37c-3f70-4f69-9a26-355a4b8d9fc1",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "ba9afd1f-7848-420d-951c-bb0e1645ddb2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8135a23c-2529-4e2b-9799-0b715a0c6177",
        "cursor": {
          "ref": "038286f6-652d-4ac2-a369-f2870d739ae9",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "2751e478-ed04-4ead-a810-7b8dcbb6d0a7"
        },
        "item": {
          "id": "8135a23c-2529-4e2b-9799-0b715a0c6177",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "4e8cad43-8342-4f54-bba8-410d0724a091",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "738a4b6c-1bba-4f02-a968-5759ccfda166",
        "cursor": {
          "ref": "11a36986-6609-4abf-845a-ef4133eedeb3",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "f8259f5c-c50f-42b2-a227-fde760f62b07"
        },
        "item": {
          "id": "738a4b6c-1bba-4f02-a968-5759ccfda166",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "ebd53b1d-26c4-4231-a486-454afe7d57cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d80c0d7-05eb-423c-a5e1-72502d51ed28",
        "cursor": {
          "ref": "69f917f7-c894-4065-b7ee-5544230160b1",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "88ce14d1-73a0-4f45-8b66-8cb4fea22d88"
        },
        "item": {
          "id": "9d80c0d7-05eb-423c-a5e1-72502d51ed28",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "c95dc0c4-6720-4c2b-98f1-1c4c9cd46a16",
          "status": "OK",
          "code": 200,
          "responseTime": 133,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "fd17eddc-3479-48b6-8c60-c9531e4a18a0",
        "cursor": {
          "ref": "5c93f562-4d04-45ba-8a6f-14e877f2bf35",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "4ebd1588-fa3f-4930-8cbd-d0021469ef6b"
        },
        "item": {
          "id": "fd17eddc-3479-48b6-8c60-c9531e4a18a0",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "05865db3-ca53-4d7f-893c-47d2499f3c12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e77b18a5-c83a-4791-bec7-1fd05d094289",
        "cursor": {
          "ref": "dc4c3df0-74d0-4960-aed3-c7098321e1a8",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "f9950e58-7e96-4000-9290-15232cbd4bfd"
        },
        "item": {
          "id": "e77b18a5-c83a-4791-bec7-1fd05d094289",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "fabe571e-1fd1-4d3d-8da1-fe2fc140c220",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e51031e-6eb4-4fa8-a7c8-403682c65da6",
        "cursor": {
          "ref": "b7a1f99f-68b2-4b17-bbd1-d8419395e58c",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "b2dd01d6-b7bf-405b-b4fb-5e1ec12268b6"
        },
        "item": {
          "id": "5e51031e-6eb4-4fa8-a7c8-403682c65da6",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "756a6889-f28e-43b7-8925-75d473dd5a80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "368c509f-b6b7-4ba3-a26c-59c43ce5ddbb",
        "cursor": {
          "ref": "9d6011b6-5f13-4043-87b3-adbaa18feeba",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "a7ded191-fdaa-475a-8adb-3c9a5ccfa547"
        },
        "item": {
          "id": "368c509f-b6b7-4ba3-a26c-59c43ce5ddbb",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "96173970-5765-4384-b94f-29c78e1ffd9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1463460-0de4-4baa-a173-51fcece78c46",
        "cursor": {
          "ref": "abc2203c-7358-48e8-a8f4-94462620ee4a",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "b0885960-7c18-4684-97b4-ed6cd15a5948"
        },
        "item": {
          "id": "e1463460-0de4-4baa-a173-51fcece78c46",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "3309b90d-ac90-4a08-aa1e-28b4eac3e502",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4eaf92d0-1d9d-4eb9-891d-5bf01554d4e5",
        "cursor": {
          "ref": "c57f160a-3873-4b74-8194-f8af7faf1bbc",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "2beb5b18-3017-4785-8af4-1913e4955a19"
        },
        "item": {
          "id": "4eaf92d0-1d9d-4eb9-891d-5bf01554d4e5",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "439a85f9-6daa-47b1-9f6e-b5f94d8682ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c47dde0e-6603-49ff-ad44-d7c7539a15e6",
        "cursor": {
          "ref": "26181ce8-ffe3-4cf4-8a13-facb73684b18",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "caffd02d-f5aa-4fcb-8161-0efc07f72961"
        },
        "item": {
          "id": "c47dde0e-6603-49ff-ad44-d7c7539a15e6",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "b0aa768c-379d-4d1e-af9e-468d7e8f23a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "968337de-acdd-424b-a61b-28d01d8ea25b",
        "cursor": {
          "ref": "b968c7a5-3d50-47ec-93c0-7f74dcbda727",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "42bb8516-7f94-4978-b9ec-18c0c3ec39f3"
        },
        "item": {
          "id": "968337de-acdd-424b-a61b-28d01d8ea25b",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "14947545-8807-4f9b-8ddd-28bef1e736b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ba30f8a-5a43-46af-b7cc-5292ecf22809",
        "cursor": {
          "ref": "56bf144a-16e4-45d7-a2f2-4a8712b5f35f",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "1436c651-4b22-42e0-a728-862a827e3f58"
        },
        "item": {
          "id": "1ba30f8a-5a43-46af-b7cc-5292ecf22809",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "0d5f4a4e-e368-45b6-94be-e823860d121b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b36b849-ff36-4c9b-b62f-5497804970d4",
        "cursor": {
          "ref": "491471cb-2eff-4d1f-97d4-cacdb51836d8",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "8544c26d-0ab3-4572-acda-e0b9992db4b4"
        },
        "item": {
          "id": "3b36b849-ff36-4c9b-b62f-5497804970d4",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "c264a9de-3518-435e-bc6d-79be888dc1cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7250c943-3866-47d5-9a60-d563196b6880",
        "cursor": {
          "ref": "a98fd3fc-de20-4f72-acb1-378be561e083",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "2ed6fcae-dcec-4cd9-8792-efb2e537fdde"
        },
        "item": {
          "id": "7250c943-3866-47d5-9a60-d563196b6880",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "4c6ea6f9-4de5-4276-8305-63147265d046",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b906207-fbe2-4f1f-9d81-82a59463c605",
        "cursor": {
          "ref": "29196ab6-10a6-41a2-86c9-f78df7067cb8",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "668de6f7-ce99-46bf-8909-30b450d65514"
        },
        "item": {
          "id": "1b906207-fbe2-4f1f-9d81-82a59463c605",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "7c5d745b-c912-4039-8c58-6e41b88ba179",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31974068-b279-4bca-974e-d13dd41ef0f0",
        "cursor": {
          "ref": "c8821389-6640-4124-a199-95cbf0846df6",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "ab26d45f-ef7e-44f8-9d2e-fff5323a175b"
        },
        "item": {
          "id": "31974068-b279-4bca-974e-d13dd41ef0f0",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "5b6c706d-5086-4975-8d05-0fc5038839f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d173bbae-6674-489b-9b42-268c23066be2",
        "cursor": {
          "ref": "53392670-b405-46dd-96f6-c8b711cc7172",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "c7763675-02c8-4e41-9d1a-e06ad47b3659"
        },
        "item": {
          "id": "d173bbae-6674-489b-9b42-268c23066be2",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "a640671e-f161-44dd-af73-1d1aef3cacd1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2db41d37-d34d-44d6-97b3-d53d3545a3f2",
        "cursor": {
          "ref": "8587eb09-465f-4543-801d-20b567c4c8e6",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "1f6060d7-b0c6-4fe8-a645-2f2744f3e334"
        },
        "item": {
          "id": "2db41d37-d34d-44d6-97b3-d53d3545a3f2",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "8a5b1320-52b7-465d-84c5-60f26b2c7d2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "706b0449-220a-49b5-9115-660b27ee834d",
        "cursor": {
          "ref": "d35beb16-4ac3-42e5-8cfc-33c83504bf4c",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "3b5e5e02-0911-4ded-8613-9445419fe07e"
        },
        "item": {
          "id": "706b0449-220a-49b5-9115-660b27ee834d",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "7c3ca0aa-c83c-4fb8-8a52-93370177334c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa5b0a0b-fe05-4de6-a666-6965429a3ecb",
        "cursor": {
          "ref": "79a07a8c-b783-4eaf-9c80-23327c7cfe41",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "2901dbfc-75f7-43bc-b651-1aefa6df0a85"
        },
        "item": {
          "id": "aa5b0a0b-fe05-4de6-a666-6965429a3ecb",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "686d19df-db9e-49b4-8b66-c46a0482bce9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "942bf146-1ece-4a4e-af32-b1c25c542b7f",
        "cursor": {
          "ref": "13f47e1f-4f7f-4b1d-a8cc-1b11c8d0b733",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "3bbc22ff-f0a3-44bf-bfca-ee55300fde8c"
        },
        "item": {
          "id": "942bf146-1ece-4a4e-af32-b1c25c542b7f",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "265c8a7f-8d49-4491-82f5-c0d2c1709d99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77a32203-5550-4fbd-825e-b2552c9943d3",
        "cursor": {
          "ref": "f2b0b498-273c-469b-a746-e64ceb26c2a1",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "4244a018-021b-496c-ad19-9eac066f190b"
        },
        "item": {
          "id": "77a32203-5550-4fbd-825e-b2552c9943d3",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "cbc16491-7f9c-40de-aadb-9dc22090e876",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8d34bf5-8531-4cd3-be65-f50807f07e76",
        "cursor": {
          "ref": "1529c07e-7e9b-40fb-b016-74b645b4a6bc",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "6ef0b9a2-e9aa-40d9-8ca2-b0de722126af"
        },
        "item": {
          "id": "d8d34bf5-8531-4cd3-be65-f50807f07e76",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "7ad4b658-200b-49e7-b0be-5d17e73b58bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "192be1bc-30b4-4e1b-a560-cf180fce8125",
        "cursor": {
          "ref": "109e750c-9881-406d-b728-569455869215",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "c1011695-db70-4b58-abcc-37d1c9ebf637"
        },
        "item": {
          "id": "192be1bc-30b4-4e1b-a560-cf180fce8125",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "4714435d-3ca5-4c19-94f4-d934dac28923",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad240a68-86da-4d23-baf9-d58809646f0c",
        "cursor": {
          "ref": "90bfc8ba-07e2-494d-80b5-bbc241222567",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "5610adc4-7742-4fee-b5fe-85c2e9e41d70"
        },
        "item": {
          "id": "ad240a68-86da-4d23-baf9-d58809646f0c",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "f7766ee1-8c9b-46ef-9904-b5b504016bf8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1f09589-f635-4257-a439-88cf584bea0b",
        "cursor": {
          "ref": "ab85f79b-f660-43b8-ba5e-be90aab1135b",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "b67be747-470a-4bd8-bfe1-c6e2b704804c"
        },
        "item": {
          "id": "b1f09589-f635-4257-a439-88cf584bea0b",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "4f9a54a3-3206-4be7-93b7-7b34c3fdb2fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d69d234-ff65-4768-90ab-e47d1ca27945",
        "cursor": {
          "ref": "384f3b1a-d316-4b51-8524-8d9faa99a891",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "6a9f0506-948c-43eb-94d3-5b5b10c8fa13"
        },
        "item": {
          "id": "2d69d234-ff65-4768-90ab-e47d1ca27945",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "fe129159-4360-403f-99bd-48de7c163468",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8d27167-c3a4-4200-96a1-33f90e5768dc",
        "cursor": {
          "ref": "3e43e98e-638d-47b4-b0cd-f9c624675e25",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "347ffc74-36a6-4f5b-8fb2-4ca2a5a27dfc"
        },
        "item": {
          "id": "a8d27167-c3a4-4200-96a1-33f90e5768dc",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "047ac440-9012-4b17-ac7b-2cc8df83b532",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c322c4a9-1bfc-4da1-8af0-ec4a03837315",
        "cursor": {
          "ref": "269f00b1-de47-4b9c-b720-900427a8771a",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "895b7750-6fc9-4449-9a98-d6ea327341a7"
        },
        "item": {
          "id": "c322c4a9-1bfc-4da1-8af0-ec4a03837315",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "e134cab4-8d9b-48d2-b980-1dd191a83c42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0ba87e2-4a91-46df-b2c5-9a8736aec4f7",
        "cursor": {
          "ref": "e1495de4-d621-4278-9bdf-9dbfeafc7589",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "f9a8d2d1-1698-4f79-9964-477dc4299b5c"
        },
        "item": {
          "id": "e0ba87e2-4a91-46df-b2c5-9a8736aec4f7",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "98f0863d-55af-4b8f-b5a9-c3edb40f85d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c332c1df-1456-4449-b54b-3934b4f73480",
        "cursor": {
          "ref": "aaf2c406-4b1e-48f5-9e22-8fbaa95a276f",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "5da6de20-273b-4eb9-a5f9-bcbf934ceb7b"
        },
        "item": {
          "id": "c332c1df-1456-4449-b54b-3934b4f73480",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "25687fd0-54c4-4943-aea7-64509bb40829",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d7ce485-dec4-47e2-8e32-7d8c9a059df7",
        "cursor": {
          "ref": "200044c7-6af3-4496-bc4e-21b691c4c148",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "64b5b5e2-2dca-4ad0-8978-54c528f42958"
        },
        "item": {
          "id": "5d7ce485-dec4-47e2-8e32-7d8c9a059df7",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "aba0136a-674a-484e-a7b5-2ca03b72e6f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "647f8711-56c6-4d13-aa22-93b16f47a04d",
        "cursor": {
          "ref": "3dba51cf-76b9-482a-9c71-145e2b29caaf",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "4dac4363-89dd-408f-a6ae-3026d259dc20"
        },
        "item": {
          "id": "647f8711-56c6-4d13-aa22-93b16f47a04d",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "af3f90db-c787-4e4f-9e89-5a396e2c961b",
          "status": "OK",
          "code": 200,
          "responseTime": 84,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "5c8bc5ea-7fcd-49b9-8f51-a8357d918c80",
        "cursor": {
          "ref": "f71dce36-dfcc-4aff-839a-6d918fedfbc2",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "831d2196-40c2-4d9f-b552-ed60e0d2ed71"
        },
        "item": {
          "id": "5c8bc5ea-7fcd-49b9-8f51-a8357d918c80",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "6510d218-f872-4a84-afb8-12f1724f4c4b",
          "status": "OK",
          "code": 200,
          "responseTime": 89,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "ab93aedc-d40f-4e4f-9fd0-ce2808054db6",
        "cursor": {
          "ref": "0669f4eb-5dc9-4cfa-94a6-9e092659e858",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "e3646fca-e0fa-4bcf-8b8b-03cf03dc9285"
        },
        "item": {
          "id": "ab93aedc-d40f-4e4f-9fd0-ce2808054db6",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "fe488130-c7d5-4f8f-b1da-aad9352ea2cf",
          "status": "OK",
          "code": 200,
          "responseTime": 93,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "c5ff855b-3541-4f0c-9760-e7f2f5b4926e",
        "cursor": {
          "ref": "f571d30b-fc4c-4676-8741-5603eb3fac0d",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "f7599bbe-07b2-4610-8291-a1c2f34ce45c"
        },
        "item": {
          "id": "c5ff855b-3541-4f0c-9760-e7f2f5b4926e",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "bb4ec8bd-99dc-4dc2-849e-ca4230b95557",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e55995a-7234-40ad-b177-039ab57ae26b",
        "cursor": {
          "ref": "0138d14c-07b5-4abf-979b-dd5698c274f5",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "3e38dcf8-e52d-4d19-9724-2e5363d284b1"
        },
        "item": {
          "id": "5e55995a-7234-40ad-b177-039ab57ae26b",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "855d0001-ae81-488c-92a6-9d45bc4fdf01",
          "status": "OK",
          "code": 200,
          "responseTime": 85,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "b8e26062-31d1-4655-8d59-8bc0b7314d9a",
        "cursor": {
          "ref": "683e552c-6c8b-461d-8d5b-62dcd6dc9fc7",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "246cf269-f31b-48e6-afa6-174ec25387e3"
        },
        "item": {
          "id": "b8e26062-31d1-4655-8d59-8bc0b7314d9a",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "ff5de851-c7c3-4c10-80b9-a0c4df93516d",
          "status": "OK",
          "code": 200,
          "responseTime": 92,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "0297a85e-5bc7-4b50-8fcf-e97f2eac5092",
        "cursor": {
          "ref": "78053186-d8b1-4885-b447-58c3403a1488",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "c8ae5bdf-5d9a-43cb-89a3-c14653f1a9bc"
        },
        "item": {
          "id": "0297a85e-5bc7-4b50-8fcf-e97f2eac5092",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "634d6c04-756d-48c1-836b-1af8e22467d1",
          "status": "OK",
          "code": 200,
          "responseTime": 88,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "683cc1c1-9d3c-4bea-b60f-1f28edd2ee21",
        "cursor": {
          "ref": "1b39eb45-b30d-4ca8-a4f1-c19f31ca6d26",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "92d8891f-15b7-452b-8e14-fedad775d961"
        },
        "item": {
          "id": "683cc1c1-9d3c-4bea-b60f-1f28edd2ee21",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "4609501b-db58-47b7-b55b-3bf5d5167bcc",
          "status": "OK",
          "code": 200,
          "responseTime": 84,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "ef9fcbcf-895a-40bb-9ba5-ef814d24b623",
        "cursor": {
          "ref": "32572713-194a-48e5-8b6e-694648b5ee13",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "3a3773e8-635c-4e4d-9e37-16f9732af798"
        },
        "item": {
          "id": "ef9fcbcf-895a-40bb-9ba5-ef814d24b623",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "0058d8a4-9f4a-4d60-9aea-ebcd3d54e222",
          "status": "OK",
          "code": 200,
          "responseTime": 83,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "a52daedb-73ea-48dc-87ed-8090bc2ec6b4",
        "cursor": {
          "ref": "d886d14e-3fad-4053-8bc8-b04493afaf1a",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "d6d3b3fe-27bf-401c-bdd0-1d9645d4a997"
        },
        "item": {
          "id": "a52daedb-73ea-48dc-87ed-8090bc2ec6b4",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "008ba6b7-76d6-4d3d-beed-35050bba34e5",
          "status": "OK",
          "code": 200,
          "responseTime": 81,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "9233c3ff-5162-4c8d-8e7e-801b8c01024d",
        "cursor": {
          "ref": "7ab869d7-9340-4e38-878c-2103d10e92a5",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "223bfd55-2b12-4c24-af84-069b15c6e102"
        },
        "item": {
          "id": "9233c3ff-5162-4c8d-8e7e-801b8c01024d",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "b98e3808-c2be-43d3-8833-d78095c25c69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67d8c8e2-6b63-4fd1-957f-a3ffb46f1e6b",
        "cursor": {
          "ref": "071f502e-9630-462e-bce9-e219dfcbb379",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "c2963a2b-7e31-4d32-8bbb-555e0c2b5ca2"
        },
        "item": {
          "id": "67d8c8e2-6b63-4fd1-957f-a3ffb46f1e6b",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "993fbdda-c1ba-4563-95f4-9f357d77fccb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5dbcab09-e399-415c-8956-21d1d61c9a4a",
        "cursor": {
          "ref": "9cd01336-7911-4a9c-b523-cc82a2c8053e",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "055e7051-5da9-4e45-8fd6-91d5355023c9"
        },
        "item": {
          "id": "5dbcab09-e399-415c-8956-21d1d61c9a4a",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "31cecd70-7efe-48ad-9e45-b16564f22f10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee0d70d3-29f1-4316-8f94-1a2ea01f6607",
        "cursor": {
          "ref": "ca018b77-bc07-4e87-9a0f-acaf891bf237",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "d4977ec4-7fc1-4b8e-bc17-de24c4217038"
        },
        "item": {
          "id": "ee0d70d3-29f1-4316-8f94-1a2ea01f6607",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "48145836-470b-4ab2-aafb-a360f27aef70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96a865f8-7ff9-480f-8e76-544d2fbf892f",
        "cursor": {
          "ref": "be46c9a1-f3e7-4467-91bd-7717be1df7bd",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "b59b824b-0687-4d60-a67b-99776ed785a9"
        },
        "item": {
          "id": "96a865f8-7ff9-480f-8e76-544d2fbf892f",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "a379dc6f-42fc-41fa-90a2-a0ee29fa60f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55033add-85c3-4fe1-9778-49d56ad8f09e",
        "cursor": {
          "ref": "ae64e9a6-45cf-4941-8020-0f4b6824bbf2",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "aae1c8cc-c760-4c0a-918b-e0781c30ef3e"
        },
        "item": {
          "id": "55033add-85c3-4fe1-9778-49d56ad8f09e",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "09ff8afa-48b9-4009-8e96-18d083096481",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "947c0f95-4289-4029-b3cc-461e3af86b90",
        "cursor": {
          "ref": "117f2e5a-5af3-405b-b168-945a82763605",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "0b3d74e9-5c46-4b98-892d-41291a93c7b3"
        },
        "item": {
          "id": "947c0f95-4289-4029-b3cc-461e3af86b90",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "6c12f3f8-c226-4625-b48c-dedfbc786632",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a491d8cc-eba2-46f0-91a7-4da3f4b099e0",
        "cursor": {
          "ref": "c52fd02f-dc50-4c7b-8536-d87960bbbc12",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "b0e65cd4-9e03-470d-9a01-eb19622f3c95"
        },
        "item": {
          "id": "a491d8cc-eba2-46f0-91a7-4da3f4b099e0",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "f8dbcb59-7bed-4a8e-a2a3-589eb692feb9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5b6e566-0031-4bef-a3bb-072dd0b08441",
        "cursor": {
          "ref": "5045cbd3-4d78-41a5-a9a2-8bbd86f77464",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "c01d1d6a-482c-4e1e-a487-cc9b8c5c5553"
        },
        "item": {
          "id": "c5b6e566-0031-4bef-a3bb-072dd0b08441",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "75680736-32a2-479f-a3ee-da4fb66e9d71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91d5c804-5426-4a47-b983-0ee67ad987b4",
        "cursor": {
          "ref": "bd5ed5e0-4098-4442-897e-e96b173a5774",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "1c0eb96f-0e36-4b1d-a063-849d01a65866"
        },
        "item": {
          "id": "91d5c804-5426-4a47-b983-0ee67ad987b4",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "239c2eba-9b5a-4ac5-b64b-233560d666e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f429bb5-f54d-445f-bb52-0ff275958166",
        "cursor": {
          "ref": "ec12c4b4-bc78-4162-b11b-ed86ef549386",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "f84e0e72-0340-47a8-9f62-feef976dc369"
        },
        "item": {
          "id": "5f429bb5-f54d-445f-bb52-0ff275958166",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "997294ac-fba9-43a7-b34d-68820ace448e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2f29faf-f8c9-48e5-96d0-923171f3f2ec",
        "cursor": {
          "ref": "1863c986-dc40-4501-bb24-ce9c58adb5da",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "4c997e61-34ce-4e16-930b-8d849d50d2af"
        },
        "item": {
          "id": "f2f29faf-f8c9-48e5-96d0-923171f3f2ec",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "b6c71e15-fc4c-43f4-b0ff-bb4f460d89ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6e91608-bcc6-44ce-af22-15b7d8409655",
        "cursor": {
          "ref": "c8d08e25-82a3-4ee7-b92c-90b42bfaae16",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "df76c7b9-6eda-4014-9115-590382b499ba"
        },
        "item": {
          "id": "e6e91608-bcc6-44ce-af22-15b7d8409655",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "9aff244a-e105-4b60-85c6-cd625eccc9ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30a0e280-c6ec-43a0-a509-6adaba216a91",
        "cursor": {
          "ref": "b600c24d-3774-4e11-aa46-0454311250b6",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "1d350924-ccc0-436e-a1dd-a7c4620954fb"
        },
        "item": {
          "id": "30a0e280-c6ec-43a0-a509-6adaba216a91",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "52f780cf-6743-4f58-af90-1904f9c9aa1e",
          "status": "OK",
          "code": 200,
          "responseTime": 84,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "fee90617-e50c-4461-ad80-38ddee694528",
        "cursor": {
          "ref": "b49f6e72-aefa-4d4c-9156-bd9722fce8b6",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "f79beca4-57a0-442b-82b8-5f2a1f3b64ec"
        },
        "item": {
          "id": "fee90617-e50c-4461-ad80-38ddee694528",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "c7c5eede-c781-4b47-b71e-6de1f9cd916c",
          "status": "OK",
          "code": 200,
          "responseTime": 80,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "c6eacf39-8c25-466f-8708-09324fa1bab8",
        "cursor": {
          "ref": "c5109c61-40e3-4b62-a991-c309e61f296a",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "6c11b3fa-b966-4e51-84d2-2250d5f64c27"
        },
        "item": {
          "id": "c6eacf39-8c25-466f-8708-09324fa1bab8",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "4072b76c-22dd-4eee-a879-bffd0b487ae0",
          "status": "OK",
          "code": 200,
          "responseTime": 92,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "a345c392-2753-4089-9202-e4c357d1b8c6",
        "cursor": {
          "ref": "75941733-f477-4df9-b0f9-04efd16f6a6e",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "2692d2bc-7635-440c-b672-74bc99e067da"
        },
        "item": {
          "id": "a345c392-2753-4089-9202-e4c357d1b8c6",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "4af47079-5143-4169-b96c-69357068dace",
          "status": "OK",
          "code": 200,
          "responseTime": 89,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "8d539994-cf02-4377-83b8-b5f46d1fcdba",
        "cursor": {
          "ref": "9d4e6837-a75b-4ea9-9afe-9069e8018d9e",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "550c0efd-6ce8-4509-94ab-5fd2dfc5e5d5"
        },
        "item": {
          "id": "8d539994-cf02-4377-83b8-b5f46d1fcdba",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "2f792808-fbaa-491e-a51b-d9af3c47469e",
          "status": "OK",
          "code": 200,
          "responseTime": 87,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "76b02789-459e-4a2f-b119-839a492eb722",
        "cursor": {
          "ref": "8b4bb7a5-db14-4c3d-9c43-88728473d4e6",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "730c88ad-a430-4c0e-8e9c-170d62b26f10"
        },
        "item": {
          "id": "76b02789-459e-4a2f-b119-839a492eb722",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "0fd5c036-2690-4e5f-a5fb-039fe92aecdc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32af2586-6742-47e1-b98b-9292c23a3e70",
        "cursor": {
          "ref": "1603426e-7b61-4697-ab67-9f5110cbd118",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "f6fb3d83-99be-49f0-9ee1-1ed82291ba78"
        },
        "item": {
          "id": "32af2586-6742-47e1-b98b-9292c23a3e70",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "1f96a212-896a-4182-ac0f-bc8e808e06d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c56962dc-307e-437c-8408-184bfafcb629",
        "cursor": {
          "ref": "d9a7e869-bde6-4f6e-88f0-3b0222dd8aeb",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "8847ccb9-5f15-441b-a7ae-baa4a75044ae"
        },
        "item": {
          "id": "c56962dc-307e-437c-8408-184bfafcb629",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "8887e012-2c74-460a-884e-a00e52444661",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bfd08b28-ee37-4a36-8c7f-802f75eb3852",
        "cursor": {
          "ref": "aff5302d-de48-4144-876d-6202812dd5e8",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "7c9a2f34-b12b-4187-ba5b-f9f1f9f3c534"
        },
        "item": {
          "id": "bfd08b28-ee37-4a36-8c7f-802f75eb3852",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "68114be8-86dd-4b2c-8498-85d1925b0ea3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b36ad5c4-6945-415c-ae77-4e9c842a7609",
        "cursor": {
          "ref": "688f9397-ebd4-4a7d-8103-fd2a942b41a8",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "25b5e0d8-99df-4b1d-bc8d-21d5516cc35f"
        },
        "item": {
          "id": "b36ad5c4-6945-415c-ae77-4e9c842a7609",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "e99a6c91-d23e-4b35-8c25-dbaf9bd21c11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8b18e57-936e-4ef3-aa57-b08643f860f9",
        "cursor": {
          "ref": "6f2bc596-a44b-4c60-9244-185760ecffb7",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "f8ff8ed9-0ceb-408e-8bbd-8f0ffa988571"
        },
        "item": {
          "id": "d8b18e57-936e-4ef3-aa57-b08643f860f9",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "398ef5d1-680d-4e8d-a82d-3e4bbd4d664a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb4e9959-22b4-436c-bb95-da7c7c93f4d4",
        "cursor": {
          "ref": "dc0d8be1-bfc0-4df0-b468-7252dc278c41",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "2b4597d0-1f6f-4631-b581-79b7ecb0f87b"
        },
        "item": {
          "id": "eb4e9959-22b4-436c-bb95-da7c7c93f4d4",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "adb791e7-f704-43d9-a713-eb77b77b6dcb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d632ee1-16ef-46c5-b57f-b5edd95699ec",
        "cursor": {
          "ref": "eae30c92-8d61-4042-9d5b-5871e94c83ad",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "889e5920-760c-47b3-97fb-785bbc14b30a"
        },
        "item": {
          "id": "8d632ee1-16ef-46c5-b57f-b5edd95699ec",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "f5f0ddcd-51e5-47ca-8ea7-7c4f26d97039",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c97a36d-16f7-45cf-98c1-8c65f721e979",
        "cursor": {
          "ref": "509ece60-dbe7-4b61-b473-cb2fb2e794f9",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "ac91f426-2559-4a88-85fc-78bc634e9a0d"
        },
        "item": {
          "id": "6c97a36d-16f7-45cf-98c1-8c65f721e979",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "fa66107c-dc54-4771-9758-f9fc46f59322",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd1c8b2e-7928-46ac-9bec-6ecd4e4b49cb",
        "cursor": {
          "ref": "adabc87b-531d-4f03-bfe2-2a2378815526",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "46c36031-2cd5-4aca-bbd8-2953b6baf78e"
        },
        "item": {
          "id": "bd1c8b2e-7928-46ac-9bec-6ecd4e4b49cb",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "c5edf98b-293e-42da-bac4-f98fbe60b939",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eed1433d-4d47-41d2-9359-f3d523d7015e",
        "cursor": {
          "ref": "3c4b3db3-cb6f-4530-b6da-386603e93a4d",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "aaac03a6-6919-4f48-b644-80db615d1f70"
        },
        "item": {
          "id": "eed1433d-4d47-41d2-9359-f3d523d7015e",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "3abe7e29-7b99-434b-80cf-ba5b80214687",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42ab8cb7-be0a-4945-aa71-3b2713bb64f7",
        "cursor": {
          "ref": "6c108fd5-4ac5-4395-8b87-4e58708aa685",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "bd6bc5e4-f002-4051-bb1a-3f26bce0e784"
        },
        "item": {
          "id": "42ab8cb7-be0a-4945-aa71-3b2713bb64f7",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "7271e7fc-89dc-4fc8-a2a5-115f0a2c88ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b75f91f3-7575-4524-87e4-f2af6b8ee6ba",
        "cursor": {
          "ref": "4852e98a-5d6d-4151-9bcf-25a5f59d259d",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "f5d78966-4ac4-4bc3-a8c8-9984b45b0e82"
        },
        "item": {
          "id": "b75f91f3-7575-4524-87e4-f2af6b8ee6ba",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "7a8896a2-cba2-4ef6-835c-ed163aa9661c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "904804e1-a9d4-41f9-a118-49d69854b516",
        "cursor": {
          "ref": "80678acd-a920-4c84-baf1-6e21fa0ef0a7",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "087e5fd7-d21e-434c-87e9-f4fac5cfa6c7"
        },
        "item": {
          "id": "904804e1-a9d4-41f9-a118-49d69854b516",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "1eada61a-9e4d-4f5d-b10e-1d501b705cb0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e318feac-2abe-4b68-aa08-0d52c4b7e4b6",
        "cursor": {
          "ref": "3dce5d61-bba2-4af0-9b22-d3830f8dc054",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "6295d696-4ac4-4895-b62c-f9fbee200e3e"
        },
        "item": {
          "id": "e318feac-2abe-4b68-aa08-0d52c4b7e4b6",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "2f235654-f2c2-4c69-bcc9-a11656546099",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "186771a9-6d3d-4e37-8661-556191c0fab2",
        "cursor": {
          "ref": "089d46cf-f9b6-40c4-ae98-dfe7e7d0957d",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "faafa5a1-544b-47d3-a4c2-2a662ed91ed7"
        },
        "item": {
          "id": "186771a9-6d3d-4e37-8661-556191c0fab2",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "7bc0d81f-b646-4022-9406-b7e8ed8eb9fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e93c7f2a-7f32-402a-83eb-c372864fc9ef",
        "cursor": {
          "ref": "4c862b54-6793-40b9-b499-1f9ef1db419a",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "30e7cc6c-f1a2-4700-ab04-bc6a27331e7c"
        },
        "item": {
          "id": "e93c7f2a-7f32-402a-83eb-c372864fc9ef",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "628475ce-5dea-452e-ad0b-447ad815eb4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f2043f1-d21b-4e25-a337-cca627d94e65",
        "cursor": {
          "ref": "059ab4af-f786-4852-a3df-2f75de0a10ba",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "ebe61eb0-047f-4b47-9c64-9c26da4fa40b"
        },
        "item": {
          "id": "1f2043f1-d21b-4e25-a337-cca627d94e65",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "c7472832-d800-4e71-87be-ae39f6aa9ac3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a734223e-9bc9-40ba-a17d-2718711068b7",
        "cursor": {
          "ref": "9f35d6a2-0de2-4c2b-87ae-b038652c4271",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "0904e6bd-1728-455c-8bc2-de5e50ca1b7a"
        },
        "item": {
          "id": "a734223e-9bc9-40ba-a17d-2718711068b7",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "7e4b6051-867b-4ff2-b4c6-9dd94d0df220",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ef379e2-e06c-47a9-81fa-59a43c9e309e",
        "cursor": {
          "ref": "93a7a1b9-49a4-496d-85da-a68550ae2505",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "fdc58248-cbd4-4f7f-ae6b-2e206020df70"
        },
        "item": {
          "id": "4ef379e2-e06c-47a9-81fa-59a43c9e309e",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "4be3a352-de79-4818-a652-609a723d06af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31b43efd-0291-4142-b041-d5e5bd272939",
        "cursor": {
          "ref": "25e83d38-ebb0-4194-b26d-408287af9cc5",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "9b39719d-10e0-4c8b-aa73-f5e6ea6169b9"
        },
        "item": {
          "id": "31b43efd-0291-4142-b041-d5e5bd272939",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "ce32966a-6825-441f-b64d-911540ef9ee1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4664cbca-af4a-4a18-9b83-ac6208196118",
        "cursor": {
          "ref": "7da86349-af26-4dd7-ab57-d79c0c8626f6",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "1cd1b2ed-f277-46ad-b0f0-9cb11ecbd3d9"
        },
        "item": {
          "id": "4664cbca-af4a-4a18-9b83-ac6208196118",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "eb5055cb-4aa0-48d3-98b1-7cc135011e17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56378fd1-16cf-4567-9f39-9e81bb7db4bd",
        "cursor": {
          "ref": "7f098929-57fd-41df-8653-0cbf3b351984",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "996cc73e-03d9-4cd7-8a7d-81727b9eb08c"
        },
        "item": {
          "id": "56378fd1-16cf-4567-9f39-9e81bb7db4bd",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "50252220-ed2b-4d06-9e42-ee0a72a45893",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "338f072f-c176-491d-be08-5a92287640a7",
        "cursor": {
          "ref": "38b3e595-e140-4f18-be37-1b8118c95980",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "7529e6f2-1bf9-4d2d-9601-1bd8fb687dda"
        },
        "item": {
          "id": "338f072f-c176-491d-be08-5a92287640a7",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "11cf5ca2-baf8-4410-a9c6-75437a2c5ddd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "988d54da-29fd-4ce7-8cb8-06559a98f283",
        "cursor": {
          "ref": "04a553b4-d513-44b4-93fb-03f14e1fc388",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "d27df60a-5530-4097-9b20-72c1d93be7bc"
        },
        "item": {
          "id": "988d54da-29fd-4ce7-8cb8-06559a98f283",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "4e3ea104-5250-4a20-a494-11e51b8965ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "369fe6df-63f4-499e-bbc3-a12799a5b181",
        "cursor": {
          "ref": "8e96bda4-6458-487c-aaa9-9a7732f22175",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "37a6e20b-6e0a-41db-a293-766dcbbe664e"
        },
        "item": {
          "id": "369fe6df-63f4-499e-bbc3-a12799a5b181",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "82d4deff-c5bb-4192-b222-f4fe729fc9f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a58f83c6-4d80-4f04-a472-7a1b14a61dbe",
        "cursor": {
          "ref": "e361ca6c-a95b-41a8-8e2c-4b94e499e1f9",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "e06aa92d-d882-4bf7-9728-e673c5fd5e30"
        },
        "item": {
          "id": "a58f83c6-4d80-4f04-a472-7a1b14a61dbe",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "11b98421-6e77-49a4-9834-2279b7fe5091",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "387baecd-d4ff-46ee-be15-b5df59e29d70",
        "cursor": {
          "ref": "f840c94f-2863-4615-8e81-e325589c4f60",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "f266f158-395a-48ef-a143-0bd28a3a8f8c"
        },
        "item": {
          "id": "387baecd-d4ff-46ee-be15-b5df59e29d70",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "35d0ed9e-7eb0-42da-abe3-0788404d5599",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1ebc3d2-cc9a-4cc6-a0b8-524c9372beee",
        "cursor": {
          "ref": "4fda117a-1d35-4e9f-800a-86271a471295",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "2b40a14a-dcee-47db-bc3a-79f0139bda6c"
        },
        "item": {
          "id": "c1ebc3d2-cc9a-4cc6-a0b8-524c9372beee",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "cdd60b69-7e81-4bbf-84da-f39a82e530cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73d6b110-9711-42d7-8215-575eefe639ad",
        "cursor": {
          "ref": "8e6101cd-165c-4e33-984a-6a8a923eabdb",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "edee2a04-3cc4-4ed3-8df7-353c66782736"
        },
        "item": {
          "id": "73d6b110-9711-42d7-8215-575eefe639ad",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "80021eed-2289-4be8-8a7f-213865b8faf3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb5a3ea5-6466-406a-afbc-e30928e103f0",
        "cursor": {
          "ref": "367d759e-4a9f-44fd-bc71-267492d2f8e8",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "27d6f879-a3b6-44cd-8533-438fd50c30c6"
        },
        "item": {
          "id": "eb5a3ea5-6466-406a-afbc-e30928e103f0",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "1182df99-d2d1-4ca5-bb98-c803907f0d0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41e4f99b-6c95-4ed5-8e9a-97fd6651dfd1",
        "cursor": {
          "ref": "31f9f44a-8f61-430b-ab65-1522fba084fe",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "2b04dcca-f5ff-4d5f-8922-833b25826599"
        },
        "item": {
          "id": "41e4f99b-6c95-4ed5-8e9a-97fd6651dfd1",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "67b0f67c-9cbf-4bb2-af72-8ff713adf9cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db8a5afa-9b39-48fa-8bb4-ac4e715c3bab",
        "cursor": {
          "ref": "1cb9a48c-b8b1-43d1-8092-2cb72980fbeb",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "665d26c7-974b-4a3f-a1c3-e8e75d78ef5d"
        },
        "item": {
          "id": "db8a5afa-9b39-48fa-8bb4-ac4e715c3bab",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "91e6b986-79f1-4dfc-916e-d1dfa789c648",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf12c038-750b-4315-9442-8656e19a395c",
        "cursor": {
          "ref": "64449e0a-1244-404a-a70f-15cd88f177f2",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "567b1492-2279-4545-822e-4ee491ca495e"
        },
        "item": {
          "id": "cf12c038-750b-4315-9442-8656e19a395c",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "c61959b1-2af6-4d57-b1e3-af109dc39137",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e390bc2b-59ac-4358-b5e4-dee51fc879da",
        "cursor": {
          "ref": "ed15c6bf-8297-4cbb-b3b3-e641bc87e055",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "b9e84358-f199-478c-8d26-85ec8f7e1380"
        },
        "item": {
          "id": "e390bc2b-59ac-4358-b5e4-dee51fc879da",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "9354aaea-fe93-4d97-9b51-de74de545f50",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 39,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e9f4e7b-bfe2-4809-891d-b1e99247c6ea",
        "cursor": {
          "ref": "caac2dd1-a8e9-4d6f-a3ee-f2b96d45d077",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "360303ff-b902-4c81-8137-91453542cc4d"
        },
        "item": {
          "id": "4e9f4e7b-bfe2-4809-891d-b1e99247c6ea",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "5b9c3ea2-18cc-4e1a-8f8c-c4b89361ebfa",
          "status": "OK",
          "code": 200,
          "responseTime": 89,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "966adc42-14c5-4b09-b773-e448fd185c3b",
        "cursor": {
          "ref": "cd16d4e7-7de7-47f1-9bc1-1daeddf2d43b",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "d9702bbb-a8db-4443-a3d3-07b21851b540"
        },
        "item": {
          "id": "966adc42-14c5-4b09-b773-e448fd185c3b",
          "name": "credentials_verify"
        },
        "response": {
          "id": "e206d091-1b2f-4edc-8dcb-f87e5ad2ba28",
          "status": "OK",
          "code": 200,
          "responseTime": 91,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "d872c16e-101d-49df-8fdd-389a3b778713",
        "cursor": {
          "ref": "f9f1b383-67f8-48d1-afad-ad9edba5d346",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "68b31782-3fef-411e-bcac-a967d1c02944"
        },
        "item": {
          "id": "d872c16e-101d-49df-8fdd-389a3b778713",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "d382b2a4-b65e-4749-abf2-fbdc2b0155cb",
          "status": "OK",
          "code": 200,
          "responseTime": 83,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "090df034-95d8-4ef2-88a9-5d22b6cf3463",
        "cursor": {
          "ref": "edf4cc64-3321-4380-b904-0dec67ac1463",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "4911bb48-e503-48d5-abf4-2d5e2aa9ba9b"
        },
        "item": {
          "id": "090df034-95d8-4ef2-88a9-5d22b6cf3463",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "a189c659-f55f-460f-8c84-3d7cabcdac66",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 38,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "090df034-95d8-4ef2-88a9-5d22b6cf3463",
        "cursor": {
          "ref": "edf4cc64-3321-4380-b904-0dec67ac1463",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "4911bb48-e503-48d5-abf4-2d5e2aa9ba9b"
        },
        "item": {
          "id": "090df034-95d8-4ef2-88a9-5d22b6cf3463",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "a189c659-f55f-460f-8c84-3d7cabcdac66",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 38,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ef7041e-6fc9-426c-9f35-74c9908a2544",
        "cursor": {
          "ref": "ba23cd41-d107-43c3-b885-79217fa5a3c2",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "fc457107-8c96-41e9-8d5b-267db9891bd9"
        },
        "item": {
          "id": "1ef7041e-6fc9-426c-9f35-74c9908a2544",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "08f3819c-12a9-4b58-b7d4-6dcaf85ffe10",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 38,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "444659d8-aa4f-4c2e-bfbc-30725d4a8d31",
        "cursor": {
          "ref": "47ab33cf-fe22-4ed2-8a79-9dda718dacd9",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "3d39b7d9-469c-4608-a0ba-0c980fc8a3a4"
        },
        "item": {
          "id": "444659d8-aa4f-4c2e-bfbc-30725d4a8d31",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "925d2f5e-4480-4418-80af-fad9f260af17",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 38,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}