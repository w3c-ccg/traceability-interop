{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "fb91452a-c09a-4e56-bb7d-9cb2b6049065",
        "name": "Clear Cache",
        "item": [
          {
            "id": "2bc676c2-75ee-4a29-9476-06775baf4675",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "7de51205-2afb-4cd9-84b9-e0b087f4210b",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "581db403-39ee-4c60-bf8b-7d6567ae843c"
                }
              }
            ]
          },
          {
            "id": "f60d66fa-b7ef-4c68-a3bf-819c9e67a088",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "9ba375c0-8cf6-4afc-a4c5-6e2acabd3cfb",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "d4e8de27-02d2-4946-b283-a1e252bb6a8b"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "7ba570bd-e7e2-48fc-a40d-b38904858a7d",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "d01779af-b4ef-466c-9dd2-594e53001ab8",
            "name": "Positive Testing",
            "item": [
              {
                "id": "c05de520-e052-49ed-b8e5-edaaa079f38c",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1c37c263-99b3-4c8e-8340-4d9c8e730930",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9adc216f-2cda-4fb8-be7c-f48053347729"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "fac270f6-4bab-46cc-9a60-58dafc3bf316",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "b8c6cddb-a224-4f9c-aa0f-f80a5bba7a85"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "7eda8908-993e-4a06-974e-10ff85bd38bb",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ea638c7d-1148-4d68-ae6e-863521147bcd"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8bf6b323-351b-4e55-8c21-d67fa582df99",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "968a0bb8-882e-497f-af18-e57dacd294f0"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c985afd7-426e-4555-b5e7-7608c0ba261d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "19a9d9ca-6850-4b7b-ae01-e8620a4d567d"
            }
          }
        ]
      },
      {
        "id": "b80cc7e4-bab9-4039-8a49-3730b75fae0d",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "4e96703c-6349-4f10-9a4f-1175989c6615",
            "name": "Negative Testing",
            "item": [
              {
                "id": "206d217d-3afa-4523-ac52-da0fdcccc438",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "e85eec90-7fb2-438d-a8e4-c3a384d0ca7e",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a42bd6a2-943b-448f-abc2-79860cb87d35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0852b85d-2684-4f55-adf0-0ae42da705a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7ea8821-6cde-463d-b045-3048240d37c7",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b18f8b11-b883-48ff-bfad-a8ab14fc3020",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "312968cc-bba7-47ed-9ba1-c7bdfaf5410b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "316d7d8e-4f3c-4196-917b-64ade8aa81f1",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e789469d-d270-4967-a409-831d64f010f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7c0f6949-15fb-4e40-ad1f-39530dbcc54c"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "0534f822-b863-4e79-a7e5-ed18649607f0",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a1ee3c2e-59fd-42fd-a90e-f7b3b5d2f4c6",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aabcf483-aada-4a68-ba14-730421734077",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "232bbe90-001d-4e25-a805-a4fca98e2f5e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "065e17fc-932a-4056-84f2-03faba80d139",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a773b0e-5348-40d4-8b06-ea7d2a21b814"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "416dfa38-2d53-4f40-bad8-0302f5bafc71",
            "name": "Positive Testing",
            "item": [
              {
                "id": "be9dd3c6-251c-4e0c-b6fe-2c5c88d42263",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "bb93b3a3-6f69-4c55-9c51-b0a3b4665fde",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "73393442-d095-417b-8a55-ec2cb1829260"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2f081130-325a-4ce5-aaef-2c9c15ccf3de",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "71bc955a-d0df-45d4-82a3-a75117293702"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8f0baa23-8d17-4ac7-ad8d-99f3de0ab519",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d8c3bf4d-ddfe-47c4-b8ec-45b3dd39dd35"
            }
          }
        ]
      },
      {
        "id": "9e8ee751-a948-4ad6-958e-07e12aca78e4",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "1a5807ce-4db8-46c2-94bd-f60db7f2ea05",
            "name": "Negative Testing",
            "item": [
              {
                "id": "faef0663-0481-4684-a57b-86a9ecbb1d02",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "a5b62179-3f43-42f0-a137-99e2b7fedc3e",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c943a11-11c3-455e-8a64-04783cf0e8e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51bfc3bf-1c2d-4062-b2e1-c871107e3538"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb0f2cc1-3a2a-4436-8f10-ddb383febf8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1d1e43e0-d161-4bb2-9dd7-b2ce188c0a5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07545ffe-3164-4806-a1e3-7bc571d81b5a",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0efa87b1-222b-40bb-b921-1d8707871b55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "026b71e5-f611-4360-b49c-8e9066708301"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50d20f60-3e42-47c6-9f7c-2f9039906967",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "22171e0a-29d1-4a28-a8ea-4bd8a57fdb9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abfa48b1-93b4-47ad-b93f-8b8524fc590c",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1098476f-4e47-4cf7-8d5d-1c82b1f37279",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eba10235-31a1-459c-9369-991a71133c25"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "171f1c59-79f0-4aac-b4b6-7abeb7dbb350",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8abd1048-2248-41fc-b3de-c54c46231641"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1ed3eb8-42a8-4576-a789-84dd669564e9",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc5d793e-d6b3-4b9e-a2a1-0aa7cabdaff9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9cb7e161-34cc-41a6-8733-60e217c4e013"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3dbed9ab-c1f3-404b-b7f5-0d5b4f658f30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "703cd5c7-eacc-423b-a905-2a210b27d878"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5eb36560-0e2a-45f3-8d66-dda22efffd9c",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6f70f11-f188-402f-adbf-49ce4e98941d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aef1d4e0-db34-428d-a0fe-b6c06d9b3e27"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8127417c-0763-4409-9b29-33f20dbda913",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cf195d1d-610d-47e3-a732-6ac0d2372406"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a82577e0-ece9-4091-8559-1a37d704daae",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d1679bd-c111-4b23-91d2-9ab8c2f22fa2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12a38873-ee10-4814-ae4d-9b28864ecc60"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7ab2584-cec7-4d5c-8ef7-0c5fb1a9e678",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5b39fb35-013d-4c8f-9dc9-7832314e9da8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4d1c4bd-7c25-4dd5-9f74-e55979154e84",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b54e6ee-3f8b-4d0e-9cbd-2df94b013816",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dde38405-8fbf-421d-884d-8068a56aaba8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2ed19d8-f4f3-4bf0-81ea-62dd4af47dc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "28484f21-e277-4548-bfe9-55fd8b145284"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f5ccf73-f823-49a3-b2f4-10bea0aec7b3",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1e39a13-3958-4f0b-a9fe-1d64b68da121",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b887a14-0bfb-4406-9999-b834fbc64ff3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36369ed1-d4a3-43a0-813e-8e22632a1169",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ccccf8f9-d049-4d75-8b12-9a018c72ff82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14183ab6-ba96-4458-83bc-f2d606c76798",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3a7436f-1a0b-4274-9dab-1407c33aa89a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62208d05-2d37-4c59-bb97-518c554b4b40"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23f6e500-b217-43de-8d9f-eabb67aae2eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e5f471ad-a872-4512-badd-0f45fb507b7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b46c0d05-a330-4860-acfe-a6aa888dab7a",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbfb312e-d22e-4b6f-b554-98f9e82dca1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2871680b-2b7c-4f75-9bbe-ecc9b5860f96"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbfce978-21bf-4fbd-a384-a6cfb3f8f8e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d25fe456-9897-485e-8f01-659dfd8de3af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a0e40b0-42e2-4d69-ad92-75289fccb9ab",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70b62ea8-9bdf-4319-b8f0-65fd9c9a15bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2ed0f9c-587a-4c2d-82ee-f5a7be4a89ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c991a122-cec3-41f4-9194-b1537af65a7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "89090e1a-4fb7-41ef-8f1f-e14489fa71d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dee46254-cbb2-4442-abb6-e48d22c463fc",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a30f6a6-cc7c-403f-a6e2-7df5100e34b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ddbdf648-35b5-4a83-bf5e-bc1a7c062271"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa2939f0-b078-441a-99e5-754500bbaf51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b56dbe3e-4db0-44c9-b61e-ef7c3da61708"
                        }
                      }
                    ]
                  },
                  {
                    "id": "573a7112-0a89-4f4e-923f-501357eed5c1",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89ee0ae1-5812-4e24-a966-84b279ecdd55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "032c3b78-0482-4c01-9c61-386a2e103bc9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8b6479d-c979-43a3-a79c-9185e8e505f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e7947139-0a19-4648-8716-2a4c225710ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96c71af1-cf99-4c78-bcee-a5645160b025",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1d12212-8662-4a7d-b60c-35a1fc9ad504",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f2899e7-69ec-4125-9b6c-05cac268c5bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5af126a1-823e-468a-b26b-1bb6d4b364ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a3dc539a-5e87-4fa9-9a40-03af84086e31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b74e627-2ec9-4d41-b5bc-3846eff3f571",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d06f2add-83fa-4965-8616-a7547f44163c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "511ee093-32f8-4f9b-9353-c0771a369cc8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "502e6a71-cb43-4bf5-a7a1-deabdc756cd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f29be305-6c7a-4671-84bd-21f6d74fc34c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2335598-77e3-4b4d-aceb-ba5802d95cd3",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d018d0bd-df86-42be-9b5b-aaa4f590bc5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55998151-421b-472b-9fea-08670cfa7064"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ef0689a-1c95-40bc-8ba0-92223d2a7cee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fb8ba958-149d-4ab7-9180-80f508f28170"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5144c716-fafb-4aaf-90db-a9c122422ee8",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9933df9-2883-4009-aef4-0d988f14c6ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ebad82a3-dce2-4944-8816-3e8ddb513f0c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ab971fd-a708-4dd9-ba84-7c2521cf9bc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c5e531ed-69c7-4877-9106-6f4a273d9e1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e59e3d6-2a82-476e-b8c1-57fa3c4c0120",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cebc0112-f467-4fae-b0fa-88b2f977ec30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2355f11b-970a-4ca9-9a40-c01faec7fe3a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "137e749a-f3df-4cae-8c90-b148fb38be94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "589abc58-25e7-4571-8a0e-5b455828743e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e2cbfb6-6f32-4c4c-8737-1219805b056d",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b750cd23-aaa2-4b72-8080-967b1ad9f571",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd5cb26a-6001-46a4-851f-ffa1f1ef6dd4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97d4ee8f-b050-4736-b01c-71ce14274617",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "530b1253-9cea-4d91-a960-4c77d84cc5f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65647a51-ef6a-4224-91a6-54ffde02cf34",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5e269d9-8502-4b27-9107-7493bb3923ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc556d2c-19e0-429b-93fb-177103193eb0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed98ab63-e458-4d5d-8e10-d8460525f8bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2ba78502-0df0-4c3d-ac85-b6e2d7643386"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18699435-dc94-4c44-98b8-66ec0ec7ac47",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb8c764a-d462-4ade-9298-abe5c3c40c4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df7be1c5-2684-40ec-92b1-fa2a33b3514b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3aada06-b58f-48a8-95c2-1f2c149b7c54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2fcf025a-4f7a-4868-b289-3d2033748e36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40d8bc57-20a1-4461-93a6-116889fdd4bb",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a308b21-1fb2-49ca-bf75-03bd2af71cdc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e1ba384-fba7-440a-878d-d1f7434bd2e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5cb48813-6782-49f1-aa8b-e0a477c5d8df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d2563651-efe5-4e6b-8982-9e515691b234"
                        }
                      }
                    ]
                  },
                  {
                    "id": "954c4872-d7b6-4b36-975c-7bbafa950c64",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da2131d4-b644-48d2-a934-22b9b61dc633",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8819581-c54c-40b2-ac40-fd3aa5acd2cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d65621c7-eae8-4fe8-b1b9-d9c88df55e36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f2ff7eb7-11a1-4734-9edb-9afa736e7fcb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1892abd-c97c-4b3e-97e0-542fce575558",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ce639a2-4d27-4b36-a5c6-c0ce8eb8aeb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73430927-aa02-4955-a372-a31c44624f9f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7d79f9d-ebb1-43f1-a76c-463d5dc335bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "851366fb-f919-4bca-b600-8ed00e1e33d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0522c277-76b3-40f0-9829-aaee3f43a939",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04d6a2e3-00e9-4d2f-ae87-c68645ca2558",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "736570ce-3578-4e1c-98ea-7281005f43fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be353207-7ad8-4afa-b0e2-b27739a11724",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "09ba260c-6d10-46bc-8dba-da4f73f325c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fdbfa52-1b31-4658-9f77-dabbbb672572",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31e02d5b-7f33-499a-88cc-9a30162f879d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b115128-7c51-4302-91e8-f27b5cc155b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4505bfa6-5c15-4d36-97a9-8ce52aaa4863",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "ec8517f8-6924-40e8-aae7-117d3c16788f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b29e9dc-be12-408e-bf66-dbabe9148466",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfa81dac-3e48-4ae2-a079-91c180084679",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9fd07f6-e529-4fad-975f-8c8e98ee9f6d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4264d9a7-6bc1-4793-a791-1c942695b92c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c5b05f30-2b0c-46ca-8c9f-d03a5ca64e6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7c5bb09-459b-4041-95a2-ae1d9360730a",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4eb90288-bb1c-4b82-939e-78343607a1a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f264b391-72a4-423b-968f-6c45daee40bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37c56dff-c08d-49fd-b474-e8101a925838",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "d5d395ca-846c-4dd2-8f3d-c0d35d367a19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "102a1673-d184-4049-9d88-0a9aef8a4179",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee85233b-c206-4a2e-b103-eff1d2844207",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0404567e-3a08-43f1-a742-2203b14bc123"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59d7e155-f0d3-43f4-ac43-2456619fd302",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c884c420-7181-4f6e-aea5-7e16dd851476"
                        }
                      }
                    ]
                  },
                  {
                    "id": "473f40c3-1ee0-445d-a360-9180418b0f5c",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48a96036-97dd-4fad-bc54-e4e3680d6e45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d680f456-0c17-4530-bb8d-bc38f6a93f4f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d5e4c0a-6e17-4a64-bffd-5392c6b0544a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "3bccc907-4cb6-4e12-8bdf-00df03fcb326"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67ba6ca2-eb8a-441f-9d5d-56ed5ff5e78b",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0afd1276-72f3-42f9-8801-1a5765324b54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11122d5b-0353-434e-ac37-889968bd2573"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e710bb13-08de-43f6-90b5-9a4cc1247d14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "9cd685d3-4222-4446-902d-99bec90653b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6078fe7d-a820-478b-88b0-0a237dbb1159",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e3b2776-87c0-4d1f-bc20-00e59b4e83be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7161e845-5ed6-4757-a0ed-41270129455d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "532fc8b5-83c2-4e27-acde-229adb197d05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "bbb64f78-0945-4338-83e0-6d1a973ae1f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c854509-7f4f-4415-864c-1212c53744a4",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "020460fc-930a-4df5-baa8-0c9694687fa9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7f63c8c-cefb-47e6-a94e-848ff224c343"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5780e238-1f0f-4fe7-9de9-c2a5e7fc6419",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "46b36ecd-d7fc-4353-9b21-a2bd4939a274"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f594364-def8-459d-9ca7-581e9bedf44a",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdd3bdaf-f175-450c-847c-8e3d5cc89887",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1aa4ec84-4912-4bd6-9900-b3e54805b262"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad749b49-b26d-4d4f-830d-f6cb3a396863",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "cbad17da-480a-4d8c-8ee6-2b481ca9d77c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9482a621-b20d-4283-887b-6ca20bd8e8ee",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7ea3f7b-e3a5-4eb7-9f1e-13f941ab920d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f04802c-65f6-4155-bc9c-71dad95489b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e12dc73-2683-4bb0-9575-af83ad4d6dbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "e4c74d7a-99a4-44cc-8f28-aebb8ffdef0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0571684e-7dc8-4129-a930-8a0488f0edc7",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c183a211-e2f2-4487-ac93-84a8d1490345",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a074442b-98c6-4651-ac8d-366fee3d4878"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a7a89d1-b08d-48b7-af08-846fea97d3c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d627d050-e17f-4d87-94d7-aa7b61670b64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73a253dd-a88f-4580-8fd9-3ec1f37b61de",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "790aaea3-10d9-455c-a4c0-77764735fdeb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64dc7530-99cc-4a11-8734-eff1d8025de6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e792f05-c6ae-41c6-9918-3ab9dd1eefae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "63a4180a-eccd-45b6-be45-f533878962c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20eab9ea-88dc-4487-b9ab-44e5d0014ca2",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3743e3a8-86b6-41cd-a68e-2632d0c6033c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef82573e-292b-4fe0-b660-185de23c4b15"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5eb8e289-c977-4dc1-8346-e16e56c4d8a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "a75c0d30-458c-47cc-98e1-35e2c4eef692"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1a883db-f863-4a76-89d0-1daf68acbf23",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cd9ff89-ba7d-4cc4-8281-8fa8d4578fae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b556e89-12b7-48eb-8bc5-2eb3ffd59b11"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5efd85d0-2076-43b5-8051-211d9fd188c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "ca1f56f3-e203-4b67-89c0-47e814255d4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "285fe8fa-e629-4730-ad83-8b8bd61d4d73",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b59b78d3-9516-4a9f-8f1a-b45d664766de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "abf2d8bb-76d2-4ddb-8686-40ac9c029b07"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd2d5291-c502-41f0-aad9-def4912c3e55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "01ab6b7f-d145-4e2e-ada1-047191a9116f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "518a3c67-1f68-429c-b157-6b97c8f41d4b",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d37c90a-1a82-4853-9b38-307f47f77d96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3dc502bf-cc55-4b84-a7ad-ab67cb8ac92f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b48e985-3b31-436a-ad69-653a59b96d72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "a72b0445-bc2a-45a2-8aa3-74345c31cdb3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33feb02a-14a3-4b11-8d82-aa79d161ae49",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "728f52d1-f0e3-4944-ac0a-2db2d2af90ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a04891e-2b4d-4e20-8cd8-57e840a17ef4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f37fcbb-3a26-4014-81bb-8b00b0909b98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "4347643a-cae2-4110-a6cc-dffe42c5170e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e533af0-2905-40e3-954b-7724dac81e63",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffa1deac-e448-47c4-a9ae-8f9caec1f07b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af98160c-092c-47ec-b251-de5b5efe1884"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f8c0356-5fc5-414d-9428-36c15175ed3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "bccb997b-7dfc-4cc7-9569-2ab2a543ba93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7cd7afa1-9395-40f9-8cd6-bd0a840c55cf",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cecfb9b6-18dc-4123-9c0f-f8d44b633511",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53399bd8-4f28-4c6f-b165-cc744341c7e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e9b4b54-5f77-4fa7-b17e-748444522a71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "54b16919-f05c-4989-b13e-10eae8a488cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61844c0f-98f8-4a70-a1ca-5336f445cc8a",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4b73641-4610-4825-8f83-dcd4c336807c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b75f9a4-292d-45b8-9af6-91b5e140edaa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "585e5489-ab2c-4b39-a562-7bfda82b052e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "0a410892-97e7-4028-9d87-bf36ffad9c7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ccf00a9-8baf-48f0-8284-5508ce5c0955",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0917d86b-f4cc-469e-84c4-949dcb1a07c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3a8a9e5-4630-4721-8cec-9b786267d27a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cac3d92e-af8f-4935-815a-9f0bc59b0353",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f0d200fd-975c-4a1b-9fdc-fd5ec29bcb9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04d7edbd-a8c4-4051-a25b-a11b4036853e",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26ac987d-c5aa-4a8f-ace3-cb92de1a55e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a601228e-b455-49ab-ae87-e0dd0cf51b5e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d56c3b66-86ca-4b2e-9246-b8a21364aa20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "40492f97-ff23-4a10-a029-560e151e3593"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01942ad8-2bfd-490e-b924-14d598c74961",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab6c0781-df63-4546-8feb-cd9cf24dad9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02e79b0c-a76d-4589-9850-943799cb3390"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "584b7444-7ef7-4c91-96bd-284558d45bad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "cd31fdc9-a526-4ed3-92f6-f21545453f6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7a26652-cc6c-4b9c-b065-67373c77eb9f",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bf1a060-7a68-4c97-8350-73c3826d42e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0021781-b480-4d16-9a16-4ade96879861"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a74f309d-17b7-45b7-8564-968b56e13488",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f58a5e55-7a0d-44c9-884d-af3a65c5997f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed247380-254e-422e-a151-9c0bac05cc00",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6deca48-061d-4384-ba6b-8112276ba587",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50b94664-1ac6-4a07-b232-f89bea95696c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05437ada-0ef8-4403-a1b6-0152b2b835d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2d493f15-6acc-48f4-84d4-6efc57e5afe9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b563bb5b-cb98-4a04-a576-c534f3ec0c4c",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37b05c14-f271-414f-b947-f839877b9bb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "467ae705-b1cf-4047-91cd-cfcdc1633dcf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1d1f6d5-9264-4028-8f9c-23ca1d1c5744",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "1c6e8a83-0c1d-4a3a-9a02-045a73c19dbd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5d3c61d-6ddd-42d2-ac2b-62208dc25359",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aafaa97a-29d1-4964-9cd7-52ad91ea1df1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "764ab9a6-24f4-424e-a6af-58a3992db0ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "281c306b-ffc4-4c64-b254-cc54b377a7bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "e96d520d-f7e8-47bb-ba7e-bfb33b2638cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d62628d-2e33-49ae-a463-5387ac08ec2c",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "139bcff9-b4e5-4849-8a47-3ed3bab5ac8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a547868c-270c-4136-bfc7-8bca3c66820e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85cdc110-72e4-451d-ab94-ba56cc8037a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c91e1aa3-80d1-450d-9073-3f0439632979"
                        }
                      }
                    ]
                  },
                  {
                    "id": "128d54dd-7ea8-45a2-ad08-42f39d9fb21d",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a09df17c-cd4c-44df-85e9-627691a1bdae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cabaffe8-5886-4744-abeb-dc85ed1a4c46"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19aa27b3-3b59-4bba-9b95-6dc4201026ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d852f5b8-f1e6-41cc-b2e3-15fbc59fc336"
                        }
                      }
                    ]
                  },
                  {
                    "id": "050f0606-24bf-485f-a299-c62dcbee0d64",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71293860-77a3-43b5-8a18-08e4fcab6614",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a6c6d22-4ab9-4647-a7be-bf3172099188"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54880e31-d458-4845-9ac5-5341ca7ca7ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3c17fa2b-14da-4f92-9074-e1c54b922475"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97915196-7651-4f4a-b85b-375946c10a07",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33ea20e8-8d4d-479f-874e-ab2467bd4d9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd351d15-08a9-4f56-b3b8-5755e4770418"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8909938a-58bd-452a-bbb2-6497fcc89a94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "4ee64f11-c9ce-4500-bc09-c521521d848e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48fd307a-f152-4c09-ac06-7f3f49648592",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "180a5207-948f-4cfe-9a98-780fff687692",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dbdc69e6-5d45-4ad4-ac7e-b61f8732d5a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "349a498c-4e64-433e-8c1e-62721b35b0c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "7bb9246a-ad9a-4692-9726-211ac8604922"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d6883d7-26ef-4d9b-a085-84343951d0bd",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c391e428-0f84-461a-8dd6-9b1eb1fd9d91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5827c68f-4750-4202-953b-02dd02fb8942"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfbbc69c-4d99-42ae-8a24-9f44f3a1ca30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "908be4d3-644b-46e1-918d-e639da1c7f26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22f95d9a-1f2f-45e9-9336-9abee07b740f",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec3579a9-2e00-40e2-a9de-ddb06c1e08a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01e85956-ec2b-4923-bc6f-d24e53c0c7a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0afc74e-1519-4044-8723-c6c3818c1384",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "72ba6e13-404c-4287-a715-6301b3fd9844"
                        }
                      }
                    ]
                  },
                  {
                    "id": "979df531-b45d-4500-9875-4574995c100d",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "def4660e-c77e-42ef-be00-5ea9867094d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52243b1a-4e0c-4900-8b91-d620048f0eac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29fa434f-fc4e-4105-b9c9-dc87d6c4323d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "7987efcc-1a94-477c-b0cd-3b7b6af0783d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9782941b-d9a7-4035-b0a8-a2c11a31f69a",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e98c6f1a-0261-4e08-85fd-b4af9f42047d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75e25bbc-64ab-4bbc-bfb8-21ff22d4e0d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d47ffcf-10ab-4ccf-bafb-896a80292ba9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "749362e7-8d3b-4042-9818-81f2ed74b9e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45b8abc2-db87-4bef-bdeb-7ee0f90f42ba",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02fed390-0629-446a-99df-ce1e201a66a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1390830e-72f8-46d5-976e-7c5bdf561622"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "658054cf-e5e5-4944-8479-876b8a7356e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "cab21d3c-68d9-4f6c-8f88-4af33103dfcc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95edf637-b881-45bf-9378-26324077d955",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a26ee827-34a6-4aa7-a18d-1c92daf624c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8f44502-ac30-486c-9a5f-ce5e5ee91820"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17bd5404-2ea0-41fa-9cc8-8044dca4fdf9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "e52e7469-6f83-467e-97a7-a5d549b16020"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7910874d-84be-42c9-9a6f-8ce67ad9186f",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c60fdb4a-c86a-491b-bcdf-834996ef813f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aaa8ad4f-6027-4773-977d-5e419ec17b8b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ad74590-baa4-4be7-910a-7dc64dfd05a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "daf3f921-fa23-4251-b170-cd330b4b6738"
                        }
                      }
                    ]
                  },
                  {
                    "id": "336800cd-1b08-4965-a17c-7a7179ca8af1",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb2a7eee-2180-474e-b158-23ab28286e96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19926ef4-944d-45f8-9f2b-7cb6d434af72"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f71dd7fb-e22f-4c1a-b465-cf5698622c4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4c4b18b2-ed79-4e7d-a38f-b3d7f2137364"
                        }
                      }
                    ]
                  },
                  {
                    "id": "185d2bf2-48b2-4784-9330-fa8b1f5ca473",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf10e9fe-7d48-40a6-ac6a-369b3dad6ec3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "253d2aa6-6981-4737-9b57-5d2e82841f92"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9aa52ecb-0c25-4292-b4c0-8c7240c55ee0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e8e205d3-c5d8-41fe-8a35-b5aa3b9a4056"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b0cf8bb-143c-499b-8b80-facadf791041",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09fa0d3f-aef4-4099-8381-6b75d07c6c96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "349f7b6e-428c-495b-9404-9dc8875578df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1bdb8b83-e31c-499d-a13c-b33f864766a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "458405f7-df2f-421b-be2b-65ac32a88e42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8323db9-70bb-42ec-9f90-da8dcab071c5",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14fef506-a5ee-49c4-a527-3b0ffd5ba222",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3032582-d1a7-4336-8f80-a1c9d145b22b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3ee070b-b344-4c64-a4c2-09bd85c2e5c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "452427a3-4142-4a0e-84b2-e57bf04b27f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff468434-10cf-45bc-8ffd-cf35827baf97",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4f21e61-849f-41bc-adb1-b52954cabcf3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "659ac4fa-0b8d-4460-8960-908080f69921"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0dd65ac8-a1fd-4bdc-a192-8d7711edd1f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "67fb147b-7c13-401c-bbe2-6bfe459f3973"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00a196ec-3c88-479b-b1aa-a7622a9cfa22",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bb8b8c4-0016-4841-8105-33e963e14dd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "713f7444-8346-42fd-a44e-debca8111427"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18a86554-fe4b-4d09-a499-505bd32eb3ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "657c9892-037e-4068-ab83-f99292d7e533"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1109a62-d168-4740-995d-3ec2428f1011",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2ff3a7c-643e-4657-bdd7-cf519108bf6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "122794fd-64ff-43a4-94b6-0d654eb12478"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1cbb7bdc-82af-4975-ae88-5a4ee0751f00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "982ac1de-41e9-48dd-a308-c6e04560f82b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e220865-51c7-4f0a-9fd2-a1d3018d089b",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50191dfd-35b4-463f-86ea-0fc6e2ba028c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86633184-cf56-4c1c-8c48-0a779ed899c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7dfab7f2-5941-448f-93cf-b3d0c6c94cf9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "70a21262-6d19-4910-b628-e0502c815a37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73660acc-b675-47a6-b235-d94f9e24067d",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0b3f05b-0ca1-4a39-9c8d-fe1da3b15ae1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "880bdeb1-923d-4766-b7ea-d9fec9eb418d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51ec4c1c-5093-4d6e-9cfc-5cfd4e1f762f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "5ecf8319-6dbc-4ca7-b0f5-e30c9355176b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58f35ef4-014d-484b-ae80-8f47b2bbb5b5",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "570df5ea-097b-4047-996a-1af472f938fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f157127-c26b-4e60-a431-530582eb111b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f8ebe94-8c7a-4140-8ffd-4a1e06a330f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "055e4eb3-acff-4c69-8668-549d0af258c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fa85dd3-19cb-46ea-ad30-ed1cb175c653",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af5b9d19-fb8d-444c-93fc-52f10f09eef3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f2ff0a2-1769-48fa-abd3-cb81928e480f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f968f0dc-65a5-4fdf-84b7-6828d12b69c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "1a1cfcf0-7b9f-494f-94fc-88a02f6b79f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44882916-3e6e-4690-b965-a4300aba40fb",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c4959ec-e6dd-4724-b4b6-0710f9c0260f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9a1a8ce-55b0-44b7-8a0c-abf6599b31e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "835943d3-3f54-41ab-b153-d4564c37e710",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ea362a38-7b48-4a85-8556-94123d31333c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33397289-1281-4270-a3f1-309fc36b9a95",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be7a156f-1b74-46dd-863d-19561f5866c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93e22150-1881-4221-a471-078c5a6af2eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1fb29ae-ac33-4e96-a143-04f2ea28aee2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8f86500b-87b7-4a5a-b16a-4deb629efa3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d357517-91d8-443c-b33b-571d0b9584da",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a01ca4e-8214-476f-a67b-25514ac4bf5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22502be0-aa10-43b2-bb25-f279e14f3591"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a303f53-1d81-4d8b-99fe-0ea2cf80ed1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "257648ab-2288-44bd-89de-bbaca6aa454b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "141c9d33-8444-4791-8e66-9e575dd2fd32",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a84507e-6f89-4ba3-b6e4-fbc3f95df52f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da852dbe-5fb8-4149-b2ac-99e352f8b979"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "555ca177-8b30-417a-a8db-bdc319146dbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "1486ca24-18ae-48c1-99ad-4042d859a17d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5dde7cd-69a5-42fe-a730-45ad4fd37683",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a766f106-5635-4dc8-af5a-5a288d2fe4f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f39b1906-b568-4349-ba7c-878699ae07f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be888de7-5130-4cac-bde6-87c9acf393a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a5bacff3-5499-4907-a8d8-aa923aeb48ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b586009c-9bf6-4440-94b8-81e4ad0b6c0a",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0a0747b-9032-41ce-b9d4-c0961f6ecdca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1278959b-53d5-4af5-bf37-ca7fb8987d18"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ccc4778-5692-4652-a385-cbfb8692e4d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "2a12c2ce-ef51-4fd0-af5d-3d7c6592d3cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8b161c0-8020-4c2e-b5a3-27e216c6b713",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6cc1f85-a032-4f95-8355-6d3fba87753c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1218cc21-9ad2-48c7-bc59-bd9a7cd5a6df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b60b78bf-d259-41d0-bfe0-4da5a726ed65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "91d155c0-1c34-4208-b495-97d3d2c715d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9aaf1bbc-cc80-48d1-b031-b21ebf7dd276",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87f8dcd4-77a1-4a06-9dca-46f8e0bf954a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86045113-04bf-4083-b3f3-65d4847b4225"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35e8f156-8fc0-471e-8232-3f49f8e57e33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "978d3b96-562e-476e-9795-5134cd3421f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf99cf9d-19b6-4784-8181-12bd3eab951a",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ea25f11-e62f-415a-888c-47a60383ccb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54b4ac9e-e4d3-4dee-9cec-df855e9a4b57"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "923afa06-5b6a-4217-84cb-56d313544995",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "fbe6b74c-22fd-4dfb-92ba-80c5a193450c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "347de51b-6aab-4c89-9293-1e13a9d846e5",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7dc844bd-bab8-4836-8fe4-13be0c7a01fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ec40790-37f7-4916-a7d7-0f89c3bb200f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38179f2b-d639-4bc6-bc26-0ec06b2ce8aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2d735cff-8e1e-49a8-bd99-d82f60d4a6a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7a51d1c-9bb4-43ab-ab1c-9b6c7a9b88db",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4004570-5973-475d-9bf1-9f61dac83297",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91c5b3f5-c5a8-4f4e-9361-f16f2d75a010"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0db8d709-b392-4658-8abb-8ef0b5ad0f35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "9c5d8f65-90e4-41ef-93c7-72b810e73f71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41aa4621-aa95-4eb9-9ec9-5ebb2ba65852",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90bd5b03-65b9-42e5-aa4e-7ebe2607532e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24e25a21-c0d9-4eaa-8e24-386ed2dde788"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "988a668c-7615-411a-a1d5-6fbaf88a17ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "6b074a9e-4a36-4db2-a28e-63915dc0d1ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fa929e3-3878-41cf-9c15-8ee135a3afdd",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e926afd0-61e0-418d-a53a-870b7f92f088",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26fb5b29-aaeb-48f7-abd9-a340beba9378"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebfbce21-82eb-4022-9ae7-5150a7504133",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "a80e643b-b34c-4cea-a756-cee4dbf07c54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c740d785-b6f9-4cbd-a24f-db53bb0b2ec5",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b73ee54-85ad-49b4-bf00-9c91ad06d0d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91c078d9-c7b4-457a-84db-c8c3af079044"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ab5eace-8df8-4508-9d1c-dfc579706297",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "628c41e8-fd29-47df-a217-d7499ced30b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51c0eefd-cccc-406b-a76e-f59b29be659d",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9bc563c-2714-4446-b2b8-ae2bc172e928",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b20c4c01-2bca-4eb6-8ebf-3e97fb0cd8cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "151ff359-2f72-4092-a184-f605548be22e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "14dbcf92-e341-42aa-9eba-17427aae1aab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aff48c98-68a9-437d-a0e2-350e721a204f",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3456793a-2207-480d-8457-4311f8e4d59e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e82e9810-7117-4650-82d1-94d172085de7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d34438c7-59bd-4897-a5c4-e1ad5db6e946",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "9a46b006-c366-4cbf-b6ec-f20339b06c02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d01fe16f-4ca9-40b9-a850-9af54087a2bd",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29b2cc68-0c0c-452a-acaa-e14edab459bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "f3f77d0b-b622-44cb-8cdf-6a47c1133d89"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "141475e0-aebc-4d8f-81ad-4c390e6393ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "75ea9146-412f-410c-a5cf-3bc4305d53e6"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "49cbb67e-bb41-4c3f-acc0-b79c48260c6e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1d1f0110-883f-4d5d-bea2-bc6fb163860d",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2ee5eb8-cdaa-4ac1-85f4-732f471cc89c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "320f9bab-2f18-4f43-865e-443f635bd076"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f094ada-e179-48e3-ac43-71d26bd9932f",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "27cea88c-1d26-40e6-b10f-303e507baec3"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d9ab1c0a-f03f-432c-97f9-5c426d942b12",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3f06802f-ed3a-4e50-b8b1-3742c6e9f5db"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b41a73d6-987f-400d-aeb2-41730a09caaf",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c3fb5f89-fabb-4263-86dd-be4c700135f9"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "389071ae-f69f-4bc0-9cb9-c5e46aa6f832",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "5edde4c8-f14d-4cb7-8681-2f119c6ff2e3"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "deffc134-f6cd-43ac-8e3a-90035b9bf0ac",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "9507fbfb-5ed6-4977-9273-91a98310f44b"
                }
              }
            ]
          },
          {
            "id": "029010f3-0148-4220-9a04-ac9f04a645e7",
            "name": "Positive Testing",
            "item": [
              {
                "id": "3a144a42-69b7-4b9f-a64b-6621d4cea39b",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "e2c24745-96dc-47b8-aaba-6307f75b6968",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f38b8145-01c2-4717-a045-c77d1c3082c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "78528c8a-26bc-43f0-9425-a29446ddcbee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bd44471-33c1-4d89-8b6b-2bfcfdab7c0f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e85ee97f-ae7e-4f78-ac26-d6be35256aeb"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "974d46f8-256d-4b0c-8b4b-4f22096f5267",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "05b8f431-a18f-483d-9eec-a9120e18fd5b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d44e55f8-2716-4df3-b726-80e7f7e7903d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "06733fba-2159-47d7-bd48-71a314f372f4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "85f53774-6c24-4215-b4d4-c344d09672b5"
                    }
                  }
                ]
              },
              {
                "id": "a3e469af-f618-43fd-a438-4c7f6318af92",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2d226406-8fd7-4fe3-987e-9aa3407cafe9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "32650b82-018a-4191-a68c-bdb2184f2e2f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b6adb9a1-7e4f-4e1d-a2b3-d4d3928905ed",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "e4da28dc-2f34-40c8-bf18-697c623a3260"
                    }
                  }
                ]
              },
              {
                "id": "af93f7a2-7912-493f-8bf8-aada391d0ce7",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "367a82e1-1afc-4502-9d91-aaf13b170a21",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2fe8cff6-fcc3-461a-98d9-bba22e9158f8"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "61f43766-0e0b-446b-9bb7-484bdd661dc7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "a681e03f-7a83-454b-ae8f-b8f0201bfe12"
                    }
                  }
                ]
              },
              {
                "id": "a18c5293-d023-4fb1-9732-f33abf1a930b",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "67d40485-a48a-4aba-8334-17a09f8d3f15",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "cd7ac315-bca6-46aa-9ae2-6a58038d5600"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "45d0775b-caf6-4b8c-afc3-fecd962ff977",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "b486668f-3b68-4dc6-b6df-93d577557238"
                    }
                  }
                ]
              },
              {
                "id": "5dc0a52f-3621-4662-bdb3-fb1217e94b47",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "df3a64e5-540d-4439-83e4-d3a4c0bc0ed2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d6b74c24-e28b-4e4c-909a-c7a0a19339d5"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2a9fbc18-772d-4b55-947f-b774373e8417",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "303b2b96-cddb-45fe-b00c-02a4bb16f092"
                    }
                  }
                ]
              },
              {
                "id": "49b9d853-4b57-4cb2-8cf7-d22f39198b60",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f63c2591-03a8-4c8c-94a3-9a23b340cf4e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4ac01068-5a6a-404d-ba9d-b6b35a3f57a1"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "96dc687b-2c12-4cd1-9ff6-131b5574b1c5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "a0a9cccc-79bf-45f5-b221-fa0dc27606ff"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "e1ec761d-9913-46bf-9ea8-3f4d97219cbd",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "252a1d5f-8f8f-49f3-a55a-f7bd76cba517"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "56fa1a6b-141b-4f3d-a103-b5b53087d4e2",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "491f8fb1-7f52-4df1-89c4-c7f852779adc"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "fac2f1a3-ae6b-46c1-8eaa-cbf0eef04fdd",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "4a50e7a4-297b-4d9a-bc13-0abf7ef5489f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "487f9cb9-e870-4f5d-9930-f3025780667d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "83f6bfca-95ae-479c-99ac-206087d47889"
            }
          }
        ]
      },
      {
        "id": "8823db54-765f-4838-a42c-fc427386e5b0",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "ed5d51e8-1e85-4cff-ba64-f9604f6ba122",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a7bd92d0-03ec-4122-ad59-e6247563faee",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "f1879a05-d028-4c69-896b-ec51e54ea5a7",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3867f308-73b4-46bb-a3c2-f737fb57599d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1f848b5-b4b8-4914-b74e-6db8fbf3d81a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7db8ce9-3698-4e1d-907d-5c49d7486c9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "df10bcc1-650f-447f-839d-1270656e73d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6e7ea64-1560-4977-b418-724a9a72bd88",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9711d800-e1ba-4af0-bf0c-60f2e566442d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5922ccf3-e593-44e0-9be4-c288e17659d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75c70388-2fb2-44ca-ada8-40f823007247",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "f899fc98-74b5-4c65-bea8-de9e6defc87f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9477bca3-3650-40d3-bf0d-23073903aa27",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fadb627c-d4ba-4ee5-8aee-3f4a4db3538c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef75eccd-bdfd-495e-9c6a-21e99f8cf390"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f939d2a-1d4b-4a57-b83e-67d37e7e6f35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "02f3fa6c-5a64-40a1-8f4f-1167b3e83eeb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "faed95b9-4646-4465-81fa-f144bfdc0033",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4837625-bae6-48c7-8cb3-ba113fb86ad2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea92d414-b2a1-42ac-8e16-49e35e838b22"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c32fb9d-1f60-49dd-a86d-234daedb8a82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6f1097c6-e96c-4aa1-8303-4d6667855e72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b00265b-affe-44a8-8577-bded91e4e12e",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a42511d-a48f-4e8d-a9e7-1cb17205899b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "016ac2e9-97f9-41b8-ab97-a6226a8dc182"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e2bd045-d06e-415b-9081-780d63f75f56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "41e01329-3b94-4e39-ac28-ec108c2f5efc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3145ebc-a2b3-4f39-83a3-875cb8c92474",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79d1319f-e7b0-47ae-8094-b5ec4b7cf8d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ffa3e3cc-d861-485c-b043-1693a0bd8664"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae832a2e-0441-440b-b765-609c83fc65fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "70f5ee24-2d57-426c-a420-b32390d61fdd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec781beb-5292-49a9-bead-64189fd7dfed",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0cad175-438b-46ff-ba46-b414af2ee57e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6b66c3b-f2aa-407a-adf9-97576ad2ef42"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3485bc6d-8188-4667-bae1-1f00c1bc76fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "daf78c6d-cb2a-45f3-a7a3-8099b86b198c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09dea958-eacc-4683-8647-e592b03380d5",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7f0a51c-145d-459e-b6e9-841fe3d7c99a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1859f2e3-f6de-4ffc-a5bf-1d42685f5540"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "318780e2-15ad-4bee-91b8-779ed993c40d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "62bfcbbc-1dce-43f1-9a75-63f95af85d00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0124e35-e544-497f-adb9-acda8909990b",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1758638-e558-4fd7-b1bc-32a82b4a2df9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12df9fb0-8bb5-408c-9ebd-c78c90e79563"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5468402-f016-4703-97b3-ca19a55d4680",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "23267753-3fcb-4970-bf69-9f738b92e9ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfb35822-974f-41f0-afb3-4a7f809632f8",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0b7cd92-af24-4468-bf8d-3e458e1fb6a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e86861c-9022-418e-b48e-c78d6368b7e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53580498-3cfa-4f7d-8b27-9add1bf8e41d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "587edba1-d318-40f9-b4b8-3f247470e8a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8b969c7-7c81-4895-bba4-bbd603885ef9",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "703dfe54-37c1-4592-a5cd-7101689da5eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32e33040-0db8-45db-b2bf-47ce00b36d47"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b9b0439-a90a-4a37-93e6-979c6df7dc06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "d4d898e7-a8f2-4302-8b52-b2a719e67843"
                        }
                      }
                    ]
                  },
                  {
                    "id": "741efa1d-b4c3-430c-b25d-61b9bf8fe95e",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31e5ba8d-f303-4a10-9589-e10549e778e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "230063d3-10ba-45fa-adeb-b5ac0b842d7e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da58cf28-b27e-4f05-a435-5025da2b68d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "cefbe74f-f641-494d-984d-8118fb02ff7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ddc094a9-1bac-4114-aeae-a20aaa2128bb",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b182e857-e626-4744-ab8c-f8c50e0d501b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85e7424e-9b17-4509-bb21-5e30913a29db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ffbc814-2026-4db6-9f4d-1e80c57447ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "6aebaba5-f18b-4a46-a968-f336a69284cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3606a5de-eb6c-4528-b135-f71fa7d4f07e",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed18c454-54e2-491a-95a9-4ae866f79ce8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b095088-a12c-454c-af01-7351489e9bc6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8826187-08f9-42ef-ad95-09ce3bac1efd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "a53afbcb-27e1-45ee-8193-335b34666c0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df7e916e-c216-438e-8c0a-445dc8232c92",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fc383a9-b520-4fcd-afc0-a379ced8749d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3a78dff-2a62-46d9-b95a-44b7c8af7388"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d0370f7-119c-460d-bc19-469b9c653205",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "c006d7fb-cadc-4f4b-89f0-aab7558be738"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f3f1aab-3af7-4dc9-b311-3ff576d68ff1",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01137648-9919-4bc5-89f5-bf8045b6bc66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5cf54591-4275-4e2f-b452-6f6b2a130f11"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cec3a8dc-cf62-4bb8-8f6a-f7d3532207aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "93d6bbd7-0bea-4434-90cc-dd10e2ba38ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa308aa5-dd66-4980-a9d0-182324f91f53",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9902e8b7-a2ca-4fa1-a887-e65a4062c4c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dcc7935a-d0ec-42db-97e2-154cfe8d2435"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b84b900-3cfb-4189-9c95-3fe955a9533d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "5efbe042-9694-4da0-8084-9169898e19b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd564590-f44e-4ddf-8e8b-1750535b5aec",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f66c5be-cd57-491f-8d88-77941a654d72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b89b78b5-c209-4c9d-93fa-f5e4b65b904e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94ab652f-8235-45aa-9e53-cb1d683ef6aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "75b4d0a0-61e5-4769-947b-512e372c26e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fda6c7ca-b8d8-49c3-8676-c705fc84dc77",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "275f74df-de2f-4bea-ae8f-664f0a2c581c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6323c574-c58c-464f-a899-0abd71af5023"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd783beb-072c-4f5a-9417-358b439d1eea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "34bc7ee1-fd4f-4cf9-9583-6459578e3f44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "452c72bb-105f-4200-8a96-05d184191302",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a9c9a63-6f9e-4227-bf8f-d7d55b522079",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6070979e-7bc3-422a-950a-8ced870c0728"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67ec3316-710e-4718-a5d7-24c4d1b2a611",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "00b02b1b-5fd4-475d-8b54-9a46b31c42c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "130b79c8-a585-453b-b679-92baf2e72a4b",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5403ff33-3acd-4888-841f-ca430faadcd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "637f9a5d-3dde-4725-97f1-2be8f29d0043"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cbf9d2b-4dd8-4564-b4d8-f36ff6710bd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2e04e555-6dc5-41bb-9559-04faac653da8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afa4ba41-2501-4a70-aa8d-0fb193fd759b",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "984cae8d-be63-443a-bce4-a6ae6439a711",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40a5cecd-be6c-48c9-85c7-a036aea4213f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f67de50e-dff6-4198-a18b-5cf580f2cac0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1120cafc-3371-4eae-b892-be6e26bd1b34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fb3d28b-375f-4cea-aef4-1eeacc3da56c",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fb5addf-0169-4395-a8c3-f04ee5b6c1ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24dddf07-2805-4af5-a92e-51bf7c02a8af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ec239fd-c974-4b51-a639-e5c1a5f26bf2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "85e440ac-ba88-4776-bb10-38c9c72936d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02e665ef-1d92-43e6-95c9-a2f87976acf1",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5a5b69d-0c50-4e72-8a40-5ab8bdcf4eb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dcd2f8eb-448d-4d11-9c47-6e75fb6492e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1672c0af-09a6-4e71-94b1-c3298e2a26ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "92ba0504-9218-49d4-9678-9452c20ed83a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ed80682-6e3a-4d42-b125-330618d5d54f",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ec2716a-b2d1-4ce9-ab70-0babc701ca21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e61b31f5-9e1d-40a4-9f4a-b77dbd5f3928"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ab2cc85-55e1-4caf-b088-982e08eb315d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "02607c83-d64f-4064-ab65-b21f60bf23f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b51adaf2-c901-4414-aae0-f728f0523570",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f138ae9b-4950-4db1-a30b-1b98b45ba58c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dcccbfde-d679-49cb-bff7-810a0865efb1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b1c516f-d495-48c6-896b-e6f9b7dd76df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e56eb0a8-3e82-4b3c-87de-aeace6da2313"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfa97aa4-2a7f-4716-bf19-7644968d6e90",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac5e7615-bd50-483a-8e60-a12d4790e5f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "800098a5-d2f0-4cbf-9bfd-8c61c2268064"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f8091e8-8336-4360-8b70-e78a4b5ef976",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bbf49e57-e91e-4e20-8f3b-8b252f5cabbc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f255fab-9d8b-4a57-9168-b05aaf7134a0",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "602b9b38-08f2-4a5c-aa68-19b55465ce4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "102f9f0e-444e-46e0-873a-45e2ded6d9e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cec505a6-624a-41ef-8776-8c361dd5f5da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "72ee2ab6-bbbf-4f3e-b327-460ee6538f51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8f158b5-83f3-48a7-99f0-0b07111237d4",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bf830b3-53bc-44c2-ad2e-021163940bb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e74a23e1-9dfb-4338-b283-0e859b69799f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f04d139-c3c5-41ca-a3ff-33094cab1b2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f25fdf29-f065-4955-ae17-dab43dbf1c02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "826bc820-baa0-4f59-a22b-7e886d3018c1",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d54aa850-9172-43fc-a31b-7a814004167b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c538732-fc23-4453-8f09-c7d9ee087d51"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d7373ef-5d79-4c46-9b4d-1f58229bb0e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f967cd61-c3e0-4b2a-8fe5-fc44f359a2f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad9cf0b9-dab3-4d83-881c-bbbae2d66e4b",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "487aba8b-90af-47e6-904b-e6ef93a5c9ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e7bdc9a-212d-4b6f-8361-da773b9f0617"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b97df12-1ac8-484f-95e9-f9b2f93a3a97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8b0f0367-c8e8-4a39-9f10-f57dfb6691d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38a19bc6-940d-4a5f-bbc6-f4b29235dc66",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45a5cc85-6023-4fd4-b710-ae84adba14e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1eb0d825-fe81-4fad-8664-2189990b4d99"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6e1919b-4245-43c6-9fcc-34f2c236c57b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c8916765-ca81-4d9c-ae54-afbbbbd26fc1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bad4766c-db51-4fd7-90be-db98c238cdcf",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ceac2bd-fbe5-4ffd-b60f-80ca650b6513",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f0f0a5c-e74c-4e05-a450-c66fe757dba1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "838d8017-9a1d-410f-91e8-ab7087effc9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "32fa1784-4daf-416e-9397-69d2df3e892f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05632e1e-3491-45ab-b312-4e7603c21022",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19ba4c34-34ff-4e9a-9369-7ef2b06f2689",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6bb01003-81a5-4f55-a604-b60e46320d24"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7cd08ed-f97c-4685-bb2a-77c8a9dedfce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f4989807-ff16-4334-8bd0-7853cc5e256f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10b1679e-a906-4292-a131-fdcfd0de6633",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0156d7a3-eb5f-47c9-8fc4-f0bc17018893",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a385f392-efe4-48c3-9808-f91c2bbdfa98"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f4d96ee-181a-4379-8da1-40fb3a36058c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cc897300-3ae3-44fd-a226-aec225dce918"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68d22442-8ba0-411d-a30e-951adb90ed4f",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad8ea5f4-400b-4a83-88c8-1112bffe4675",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "940e3bbd-3a3e-4062-8b02-6b38b67cc827"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "968f3b2a-ced5-4e11-b534-43a8ef41c581",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a0348bab-186f-41fa-b5fd-b844425756fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82c0d441-cb7b-46c8-a1c9-c147eca204c6",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52c75ea1-02c4-4e05-9573-1e5d4f15384f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44e6869b-cafa-40a7-968c-2a77f828d15a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a38e758a-8d23-42ec-90c8-5338d27f33ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "200f1245-4e19-439b-bb36-e72f92c2db97"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "d5d06f75-613b-47b2-a355-7ddee4bbea0a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "88706ed2-ffc7-4418-8435-4f95d1497873",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21375072-5ee1-46f9-82f7-5e6e4f9793e0",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "275d8237-ff3f-43a5-bb91-d311f6607848"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3462c72-0861-4f07-9d58-f2bb21f555ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "05d0381b-64ca-4cd3-ba24-703206393e9b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b03c7945-2ebf-48de-9eec-e37eff0b4b88",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fec008c5-b15d-4a51-9c5d-241cd1ad908b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b7bd71c2-f627-4fb1-b73f-786e3f824a80",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5f2bf094-6f15-4d01-9c22-81f8ae2a46da"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2d7e303a-2e26-401d-b438-f238cd0285ed",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "100c5168-f671-46b7-a978-b7a62a50f817"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "36d3d44c-809c-4f78-a538-4970b2ef0b0e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a01906cd-1ffb-40a9-bdba-fac2511f38ba"
            }
          }
        ]
      },
      {
        "id": "68c1b2dc-13d5-4c4e-9e85-eb01c5ce5a13",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "2d50d970-d0d7-4d5a-b054-017835e1944f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5cceadaa-c30f-4e8e-a04f-afec31db7114",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "31cf936e-97c9-481e-ac86-43c8090210b2",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd2894f7-59c2-40cd-bf0e-0f80dd4e7a86",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "016b06e3-44c9-4027-acc5-81b9745a84d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90731b45-a7ce-4174-b6f5-007d35babade",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc735bb2-3122-4244-b5c7-dd09dc586d5a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49ccdf08-c041-4491-9508-5f04566f4b48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "839aef6d-6c40-48d1-97f7-7175cd20b11c",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63fc8083-cfd8-43bb-8e82-f61587f5de0c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b40fb89e-890f-4fd7-b277-198bbcce8179"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e1ea4c0-7e29-4aef-8e9f-f44263d83510",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14ca74f5-0988-4b24-afd7-21c43a44eb58",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a9fb234-3dbd-491b-8971-4757abd7be97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c5552d2-c0a9-46e3-86ed-925add81e867",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d8e4791-fce9-4fce-ba64-dca6fbba7811",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c660ea92-9850-43a4-bb76-6c0a8ba1daec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "973b6f7d-d7e3-4ac3-b133-528eac1cb775",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73202f34-85bb-408a-84bc-a8c5306a3771",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff12287d-b4e2-43ee-b973-cc43c1cfe183"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9cc61fa-ca8c-4eca-9bfe-9cbfebd5acb5",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f51c74ac-12b0-49a1-8799-cdd7a533d953",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "15472540-f49b-4667-8cc6-74f7a5522c27"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa9ccb70-0675-436e-a1f2-cc7ccc51cd42",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9bd96c9-1ca8-4099-a9ec-84668bb3c281"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34246ed7-2e6f-4edb-aca0-62777e282a5d",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7e024e7-b61a-4a1c-b60b-d9af7c7830e4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bffe6445-f56b-40f9-a782-c5c2030eda74"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c2b445b-c385-43bb-991e-d42cb3daec0c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41f98502-0da1-4907-8e86-fffec37dfe07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "330605a5-1edf-4ccb-818c-9a4373a4b612",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9810bf88-5bc7-499d-a74e-ff5d8ac6132c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "df80da1e-6c14-4d20-8ca5-bcb70fe4bca3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b2327d2-feae-4527-842e-ec6642f900b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd543af2-8036-4d6f-8707-fa51593507e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d66eb7c3-d41f-4cfd-b979-d3391ea982e0",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a90c63cc-33c5-41cc-a7f8-e35472c85ddf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eb4aeb46-9165-43fb-ba1d-9059fe1f108c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0bd4000-96ea-4d92-8e19-69001a4c120d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8b5e5cf-f2a5-476f-93ec-d6fb60f137e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "393d169f-aac8-4604-9c86-9e58ec42057e",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "674fdbde-0473-4ce6-9aeb-0b3e8807de6a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce20bb19-b300-4ae2-a98c-ba158204b168"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ef9546d-fcc9-43c9-a2d1-683cde39ca4a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8815a3c2-573f-4af6-bb9e-e290126ed07d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4628a2f-df15-40ec-ba62-09b770464663",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef9b2f4b-5ca1-445e-a2e0-896632a25f22",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "781fbde0-8bbb-4f83-b17b-1163db30f081"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4cad30d-ed89-4c0a-8458-b5b67a69bbc8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17eefb83-014e-45af-be0e-9886c7c5f6eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "522c8fa4-7afe-4437-a883-5e05473ab9f9",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9264a75-5373-47f6-a9ca-d9524f1ade86",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e0a16393-ce21-41e2-9da2-58c78d2566ac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f92f44c-dadd-49b5-ac1e-7747135b52d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0691d164-4459-4c2e-ab5b-34fe159ab826"
                        }
                      }
                    ]
                  },
                  {
                    "id": "669687aa-7c90-412d-b265-ac377cb99fdf",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acc68805-2b28-4ac1-bd4f-28bae1e8719e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c0452ba7-817b-40b2-a26d-76980e11b622"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cd57551-6964-4c3f-898a-8956d914c376",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc24026d-90b9-4fc8-aa6e-f54e5f333b3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9aeed4e9-99b5-4701-bd88-45d98712a616",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5a51406-28c8-4141-a944-c19832bec17b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7e4efba5-f8ae-468a-8ce0-6a971b1d320e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "09a7f039-7942-45a1-af38-05148325ad10",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5aaacdf0-4126-4599-a211-0df665f6be43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "145ecbf7-d9fa-40be-981e-449475933431",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1aa73ac5-c0b3-440b-aa9f-b611ed73c016",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "52759163-905a-41b2-817b-a41c1ecaa42a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "14046fad-a7fa-45d2-95e7-aaacf7a312cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cbd055d5-0e0f-4f1c-8bff-ac8f0f2cf9c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e85ffd36-ed38-4185-b3e3-57b42f6f6b97",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f86f92a1-8dee-4004-8c21-f4cb78cd46fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3a87897-e1da-4778-bf8d-7a1085a5b8ce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d02b5259-d036-4eed-8a9f-43e12b08a41c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd808986-9c20-481f-901c-264c70d4ff0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53ea52e0-e8e7-49ba-b884-28eca893cfdc",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7bfae01-60ba-42d3-a121-7afb904492a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2da2624-2a17-4b48-ac24-a489bcf5b88d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "43aa9ec2-a218-438d-a856-0d06507c99c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a825b8ca-32b5-4b8e-a514-6b5f74808fbf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0fb4093-293d-4b03-a7e6-c637153dd3c8",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abc3d39a-7a2c-4b13-9fea-1682c446b198",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d32c834-9b30-4e1b-ac98-70e64ac85631"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9453803f-a846-4aeb-b3f7-4a03a8744d83",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51960496-b69f-446f-ba36-a2c01cf468ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e0a6c25-edf6-43c1-89a3-2283aff7d652",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63382775-ef01-481c-84c0-fe0cb1cfecb8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5289eb14-1e5c-4d52-8973-0bd36ac3dbfa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1995f34f-0f9e-437f-add7-859278778f8f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa64e12a-e1cb-4684-89ed-4f2dceceec5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0cb50a3-52c5-4097-802d-1a63353bea25",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fcde4c0-dd56-444f-89ea-924a216032fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5a8bb4f-fe58-40af-8a43-54c3e8c74068"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "40a2d5ee-d91e-4c64-9186-a638ff2a0d8d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ffa7da98-d5d3-425d-9192-7661ca9fca4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01f7d38f-52f8-4e59-a845-18e3703d8918",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "772ba50a-b2f7-4cde-a65b-0e28d21de74b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ff41450-56ac-4347-965d-c99971e9259c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9f9ea6d-a08f-4b3d-ac97-ec9f983cb361",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c99782b-cb49-45f9-935c-29690430fc29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52f5941d-9ffa-4389-a798-59d915b75a86",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ef33d7e-b9e3-4d78-af95-b8c9b4678986",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da2ede6e-8606-4a9b-977f-5f9cfc940d9c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cedd624c-fe7d-4c3b-b1d8-ce94175601bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6003d7e-01b5-4723-83d0-11a9fabbb2f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b6a9dc0-62f1-4ed8-bcb6-5dd5efe8c009",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "044a3c45-d16e-410f-8a51-2ed68c63e2f2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "835a1b80-11f9-4ca6-8258-6328bdc25534"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "66b5257e-375e-422f-badd-448153e1d00d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99fe3ad7-d76b-4bab-95ee-74e5a31d5a65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d13b424-5eda-41e3-b535-93310f0eaeb6",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08fdaa33-a8c8-418a-99de-78e0053af343",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a65943bc-42b9-49a5-af2d-b712ae756df1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "92098e66-583f-40dd-a68b-d4a7df8ef893",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "063a0786-6c33-4090-8ea7-de5b4cf563c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30347101-79c5-495c-848e-ef9ee4792518",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6444aba9-4d83-4a78-8e85-7ece87326fec",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d6d3e609-c9bc-443a-8576-827e8a93b125"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5be0005-3ac1-439e-a44e-56e18d598b48",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d107efd-ac01-4e0f-8eaa-6c7057e26f8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "193e0eb2-9a03-42ff-8d05-99ded0608b93",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52be0d11-c2fe-4193-9550-cd68683e44f5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d59ec0b9-fd9f-47d7-9f58-709c407ee9e5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4438eeea-3a68-4ccb-adff-e5559432a583",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb3405fc-4114-40b4-b169-cd292f996b5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2e752bd-4c4a-457c-a295-e13a121ee93c",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54d45ce5-4561-4d97-a9b7-2adafe894e76",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2001789c-37f9-457f-99d8-f00c8198ad1d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4e3c416-ec3a-46ba-8ed9-c53ee02a3320",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be1b86a8-0175-4d95-9075-9a5eeaad6ed4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81e34feb-a6ae-4f3a-a8b8-5de364bd02b8",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4255da8-4ed6-42aa-9a7a-3056dc1d45ec",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2d79677d-0ae6-4cf3-a969-b10d8588abd9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7127af1-dec2-4156-85e2-9f1daa3930e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07a944ac-9696-4c39-80be-1649f367ef86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c13a11f7-b0f3-4dcf-8a9c-eadc47dee1e0",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ec915b0-9e0a-46a4-9540-0a07693c875f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "68cb1a5e-e549-4242-966c-cc262d16a249"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4aff0320-1e71-4b8c-9825-b70be84b0204",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e1b2590-70f4-4954-b2b1-af446466d318"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4c03e81-3db4-440c-aa3f-ccf76152d64e",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1bc08a46-f28e-4f86-8383-40970f87173b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d953ffd1-7459-4cc8-b90f-68e5bb551af9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "711da106-d60b-4f09-a65a-caf97ba4119d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a47d50a5-b7df-4057-bec1-0342ffdbc2fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "642d5f8e-2151-4052-be0d-c4de2b43dca9",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69b53bcc-28e6-49b8-9581-857f540714a0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c8c22e68-903c-4184-bb9b-3c511fcb54fc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "241a15f7-4663-4101-9bc2-011afee9b806",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "319e6ce5-0fc1-4d52-85e0-1a2d3047b242"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c793087-954c-48e0-bf48-f7b04f31f502",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07116176-2d80-4bbd-9017-35d1967cd315",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4eb5f21f-e1de-4319-8ea7-c667b07274a7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2d8cbf4-22a0-4aa1-b1d1-4e57a64606db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae2f7905-23ea-47c4-961e-f541bbe89a2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "500f9231-a2a9-4fff-9a79-3ccfd471d5fd",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0eefb3c9-a74b-4dff-b8bc-50f8dad6ce43",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4bcb590e-df42-481f-bd0b-b78fa9cf3ef4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "25eb2f9e-c43f-4f47-87e8-61e8c25aba14",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0697ee55-ab19-4209-80a9-c1231255890c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c1ccf0e-4f6e-460e-a60a-e94a33392390",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6a07b93-5024-40ce-9bb6-a4768f7fde52",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d425e9e2-84c7-44fd-9473-a1ec5b1f58d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e4a0069-b9ae-4623-827b-f66228def32f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa260cc7-9f5e-4e99-b3df-7b45c8f91be5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "463b1e03-62a5-4a06-8a45-039e7faa6d5d",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c9cf16d-0545-4fa2-b19d-2f2e42fd31d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68ae7d45-d7ab-476a-b1dc-fa9a345aaaee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "46fa7c03-2d04-43f9-86ef-f80eb2a8c40d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "528464c2-6b78-4eeb-af6f-9c5bed676db5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85807414-d485-4aee-b107-643c9c6d4eb1",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e64763e-3be3-4db6-9536-a5f5d6d2db79",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fea29d7d-06c9-4f32-882d-d42fb7cc33f3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f650fa85-7463-4b63-994c-074ec4e4886f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88934760-28f7-4891-93f5-dc9305278d31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5cefbfa8-e649-4668-9e10-0e6947860407",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddcda26b-5488-491c-bfc8-4fe54e15eebd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19d19b7d-b482-4fc0-b5c2-19f59b0d2df0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e8fe2be-5479-4dcb-b9fc-982b39904c79",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0f5884a-2ec1-4341-b2e6-7e90db3cb032"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95c25756-4eb9-47f6-9fde-34f109745f04",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c2a6697-cebf-45d7-93c7-d9a44a655422",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d40779bd-7f4c-448a-a5e2-8d18a34cca24"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "75d5eeb5-3139-41b1-aa26-58b841a969ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1af5f05-26f3-4a01-adc4-9ea1a96fa0a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c356925-c0be-41ff-9cee-5e16132e3bfe",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2c37874-cbec-4e32-abc5-15fa0ccc6903",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c77fc9df-3c87-4605-9ff7-981d10b4f326"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4a40191-369e-495c-bf7d-3e0a7a408c64",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b849bf7e-fa60-442e-9b5f-197c92e6594d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b12a8d2-a1ff-48cf-905c-ee53b49f6883",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fdbd9dd-bece-4448-90fa-f0c534167d99",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cceeef66-9a19-453a-9b32-1e8a3e24568c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e74cac49-9681-478c-9f3e-85394fa5d0a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94db542b-fe93-4e78-8bb9-e2ec11844e23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80ed8ac2-0725-4442-a745-9b914fe27544",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54dd7881-61cb-43cc-92b5-3b227ec86d35",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c8474c3-d34c-4f9b-977a-b8bc41d87d80"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "95522f50-7bbc-4da0-8bf2-51b520a632b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "852f2dd7-2ebe-4ede-86b5-d0073f479def"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c911adeb-55a9-46ad-82fd-ad02c3665159",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bea005c-7b7d-4889-8862-36a336c59c37",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5632ab4f-ccbe-45a9-a533-a5f7af7af1a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d059588-07ef-48a3-a338-2d1914db3dba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0d9a4a5-75c3-45ae-ab0b-4f910e71252d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "704b89e3-bd0c-4557-abea-10df9eb6bf53",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06f57921-5097-41ab-be2d-226e8e2b85dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63a382e1-7fef-48e2-8ff4-4b7924052a8e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ecc132c-798f-441c-a80a-fc6fafeb0e41",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "850241b1-3456-4126-8e0b-6c472e2b16cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26742e68-dfd1-47b4-96d1-d0d518c5fa88",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86db5169-a892-44c7-9df0-2a2e40b699cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "140aebcb-f03c-42b4-99ed-35d8b9200a6b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfa6872c-56f0-4e9f-b2f1-8bf9a4f2e0be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d638050a-82fd-483b-8c30-a15a755b75be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea534a07-5aeb-4f3b-9fa7-8d0b64097a97",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecee8e13-9051-420f-9664-82a033fdab6f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6adaf89f-e720-4384-b324-533498ef2b9e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "433dc761-2abb-4dd4-91cf-18e513bfa96d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "129a077a-30c0-4c55-81df-5ad2d98f8263"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33cab3ec-6237-409a-aeef-a58afd59a33b",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "831bd3a3-73f3-4f2a-b867-75b9972effb9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f6ec0af-54de-4b2e-94f3-c71eaf04b135"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bf6110d-da21-432f-ad00-ccb601297a70",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da32c16c-5059-44dc-a297-a029f7b12770"
                        }
                      }
                    ]
                  },
                  {
                    "id": "724b1e85-1c2a-4fc3-ba5f-e8c96c2e76e8",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a56a739f-e988-4779-9a1b-ea3014fcc35b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c396daba-dded-4ca9-a264-f9aea44ca63a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe4f73d7-226d-41e4-8fa5-7faf5282e67d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10596c6f-a3fc-4cea-8bdc-1dfc4b3e1daf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "407edc2b-9984-4ce5-8b66-e792a9be655f",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49cff743-2808-43c9-ad15-018fb7fdc2df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7eadec0f-82e2-48f6-ac50-23afb45d05ba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec2e5516-5540-44a0-82c4-022edb889961",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9489c02c-9f25-4a94-a9d7-68968c19381e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2bbd4364-76f4-4629-a968-6b4d1a8936f7",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1780dec-473f-496d-a833-d935e6bdd18e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf3f1af5-5625-46fa-bed6-763e7f6e81d6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "77ace67a-6d7c-42d5-ada2-bcc4a4aa597c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7bb0073b-c8ac-4198-a10e-a5d21c4c79ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70c9ad1b-85ed-4a14-946c-b0a168d4d88d",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1e5c0f0-6f2c-45c1-9da2-d71c95d4661a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6876d6f4-576b-4a86-bd4a-f1a50b7f702c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0927766e-a407-4dbf-9da6-b34e99609f4a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73e06fed-4ecb-4086-81f9-d30b164b671a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21792ad8-ee7a-4a25-87f3-52fbbfabe0f8",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba6b4d92-edea-4d7d-9299-419316f379c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b0735f6-04c1-41d2-8f21-bfbbf87e8969"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aefd0c2c-dd97-4fa0-96c6-19af97151f85",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba4c23ef-c66f-4a7e-b7c3-5302c843c516"
                        }
                      }
                    ]
                  },
                  {
                    "id": "616c3888-e630-46b0-bf48-ab8946b7bfb5",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df9084c3-e595-4bf0-ac13-444d654f49ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d779796-cc38-4b69-adf7-d26d3079491c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "78fb6534-6762-4766-bd76-421c8323898e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a62b25d-c1e0-415b-9782-142d5d5e677a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18fda501-33dd-453c-9774-e10f6b5cefb4",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1132415-d624-444f-9c7c-61a448fd19e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f5ddf38-fed2-45e3-b7a0-3bd557ccd538"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fba203ea-534c-453e-b05a-0983ac76f8d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e359a452-a520-412d-9ade-bef325c12555"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8022afc1-676b-4f8c-9059-ec0bd371efe4",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "299f8881-83e6-4ca2-844d-840e982cbb4c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e81e1553-16b7-4137-8413-0730122f2069"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0c061e8-a3af-463d-8f4e-cc4fbcce77b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7e885cb-9166-4cd5-8bc3-9fe665e04eb3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7404428d-c985-4ac1-97d6-362748ca2b3e",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52b69c16-86be-4b8d-a16d-f532fc6130b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "66aff60b-1800-4c03-8b21-acba34e76b29"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e167434c-5227-42d6-adc3-f8c316ae2534",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd8990cf-3f8e-4201-a637-25bf987e808a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3dae250c-0445-406f-9ca1-9efa44399889",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05793f0f-eefe-4d8a-88bc-50f835eeffa7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c641fa0-d8de-4860-bfb0-f826de245691"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a984c3fb-76a3-4e26-b299-bbab5a135a86",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87c2f2ff-210b-4ad2-8b07-3af165b4754d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "adbefe3a-9f1c-4b1b-b026-19b76f67fd83",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34fba7f9-25d3-4ab7-970a-710aeb9c4be9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85c2e67f-9e81-4fa1-a7fb-a5c6fbd69f6f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d07b64f3-7ed1-483f-9300-56e778aef732",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b7cdcb1-725d-41b9-a893-fd9a9ae10604"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e635e15a-16b6-4d42-ad5c-4f01bf0c53fa",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a7f0fc0-8fce-4306-b323-2575efa76411",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b17b2b13-98f5-40ca-b999-8a6f1af8954f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "daab2d47-330d-46a2-96ce-6b72b74ea72c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7359f53-2826-4bcc-bade-f82c93ae49fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74c3bfe9-45a4-400f-aecb-1abc429582bf",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51f7c0f5-c239-4d21-b7b9-62103742103c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5701a195-f87d-4947-9535-e2551dfaab6e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "21fd077b-b517-4688-8f2c-867a8339645f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49a82f70-a79e-4793-a58e-84b92b280b3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de168091-ebe5-4b7b-bbc9-08637761c8a9",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a502f91c-0d33-4d14-9583-20b40439e759",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2906431d-578b-4b92-9c43-45f8e044921b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "499157e8-c97e-4b10-82f2-ec401d064def",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf981af3-d962-4b99-8e5c-efaa411579db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2524602a-9266-4ad1-be94-33c42c5adfc5",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9912ce9e-78b7-46b6-9391-22494d439049",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9ee67f5-9a64-42e1-8a63-6621006f90e4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "04258132-0dd5-44d4-b10a-07ffadf303ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31dbda6d-aaf6-43a0-ba45-71c2d536f993"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29871ddb-865f-45bc-a368-fedf868e1a74",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ba7cb58-5832-474f-8ff7-c5bb83234813",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5319cd0c-b687-427b-977c-f0847d584c63"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ee6457c-146f-42e5-8004-bd0025cbbb42",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4544ac99-c9d8-42d6-9dd8-c41d5fe92627"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95a9787f-0511-47de-af4d-197a12ca57f7",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38c51c44-56b8-433f-934c-6dc43db57d69",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "419ccb9b-9a17-4ae4-b90b-c7d320658c94"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fe5d77c-854d-4c22-b8ef-ba3ba2280a63",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5424218d-0261-42f6-9851-5f8e80b79803"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea6ed01b-9edb-4c81-b4d9-0cae07047abb",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06e2f31e-7c0f-4965-a811-6132614d6fc1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ead80856-4d05-4508-9d6f-75569dec9ffe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0e5056b-4980-4fdd-af27-66ad634116ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2433a52-0b86-45b0-ac5b-56e9280d87b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8beaeb30-5766-4e95-a200-b6e8ffae5ee0",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e632eb94-0243-413c-9a77-2a8c0596c236",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "70cbf91c-9536-425b-98f0-b924ac98bfbc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "17ea9612-d6b6-4047-82ea-45e2c6499889",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f090cc3d-9565-43aa-9db0-93d1ad37cd00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fa56152-5356-4a72-89b8-983996f0fba2",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04346404-e2d4-4ffe-ab08-4f4f78504694",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d00c1577-c34a-40a4-9a0b-f24506c6560e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "107c4ac4-5912-4720-b8da-6dd59233d445",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7e704e6-a661-4857-8763-4c252616e17c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36347e96-0d9c-4ef3-a646-31c9fbe62fad",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7cf6dda-30c4-491e-92dd-78d3302aa2b8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0fd5348e-cd60-4dc6-a077-7010d83c96c8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6939d366-f870-4e8e-933c-98a25087b1d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e24fb85e-d411-478b-bce9-0701053b286e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f100819-ea3f-4951-a856-c0d3e77ce914",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21b9879c-1f81-4b19-b7e1-50b789b839ba",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "70d287df-c99e-4f2f-89a0-5cb01c3d1625"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eda46b03-17ac-459c-9e72-b777d6c7f567",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0834f329-a3bd-45a7-9754-64afe91dca3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "067dd5bc-ecb1-4d2e-89b4-dfbcbcef7c55",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d0cd095-0d64-48d6-aa72-def59cd6b560",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "abb1b569-eed6-4fff-8294-19845e094350"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f08a2ed-c00c-4652-ab4a-87fe374842be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76d0cd52-f2f0-4ab2-ba9a-cf803a7feede"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ceef5379-a47a-4162-9526-365bdf2c476f",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "856762f0-5398-451c-b26b-001553a33635",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2ac9f907-8f2c-45d1-b031-ab64b1da1d91"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f7693d3-55a3-48bb-9800-5e2d7985f014",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2ae0eb5-f5e0-40de-ac82-779d35345247"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f113a15a-e74c-452b-9642-c9dee45f2123",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00d17924-d028-4d29-9076-0ce9d7317755",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e1f954fb-d77c-4048-8b0e-454b7edfd503"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a06f29b-6b7b-4a2d-bc14-44dba253c56a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "610ecfe9-e72b-4939-a50f-2adbb35c0471"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84489baa-ef66-4592-b2f2-6492885089d1",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f6f0685-8f6a-4d80-b20c-6fc43f9f85a5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "37e32a1c-2dd8-4815-893b-8d2877a6253b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8615fc2-bc80-4e14-9980-d2ff2ccffc24",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "862860a8-e57a-4c4e-ab97-6b796fd48b15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14783f62-08d4-4766-8935-718c146462aa",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a9657e0-9311-40d8-9aba-9e6851e6bbd9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0bf6a02a-b98f-40b9-bfe6-d3f31f393e75"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ffc0f90-397d-4663-b64c-b24d62dbe9a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "079a6568-de56-47a4-96c5-56ec20de7676"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c60d51f-e6ee-497c-8a45-bd32a74a9930",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44bb3ee9-f293-4a9c-9e18-697ab43b7086",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3f971d8a-b76e-4eef-9aa1-024fac64e6c1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4ed24d2-26eb-45e2-8585-6e7d69c1e36d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bbb1bfa2-ff04-4c2a-ba9d-e6067216e35e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88044850-2f47-4072-b04a-6862ebf24ca7",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28217e27-69ec-40d1-9a98-7e0bc09cff3a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a9ccf79e-b029-4664-a884-946af357795d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d47deae4-8fd5-4a77-80ae-f8046a80d24b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "014c737d-9510-4f66-821e-bdcf00e202ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40c65d0a-85e9-4010-8468-cac87d680cd6",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1694ad48-16b3-49ba-99d2-bcf846c06a07",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bd43ae92-78f4-4cdd-a835-9ef516c24e77"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4413f411-9d76-433e-8c7c-ba150db95631",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93b03337-8b72-406a-928e-c45cab3934a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a975af35-e624-4fec-9363-dc3b20ff825f",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe78e64d-505d-468f-9b0e-3634f96e4827",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f3406e04-1450-405a-8995-fe7c8d5b07bc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6379ba09-3b51-4dc9-afb4-5c05066457c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "450141a1-9617-442d-97a6-06e7e9efd904"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb3de02d-d1b9-47c5-82e9-c8116616db24",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b770a51-170a-45d7-ad81-c3bdba4b67d2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "966a3226-9076-486f-bca1-b7d6958cd4a1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c850a198-e487-4345-b22c-14a09905c43d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c251358-cf90-4522-8dda-5ce803dd1798"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3fbd254-b006-46d2-8867-4529eb30732c",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c7ceeca-85ca-4815-84bf-eecd166d2e34",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3d736217-1c2d-47aa-89ff-596747af3b7c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1a9e58f-4d37-4f6d-9b5a-98cd55263e2b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76654340-baa0-4361-a237-8b3e0e10f6f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb8427d1-d63d-4d4a-aeed-d901f1789b07",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c77df99-38e1-4cbc-b825-4aa6859ae11a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2afbcdb8-3868-4f7f-bf4f-3493beaf9c4b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a2a0564-d756-4315-881a-76c64a57d730",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "070a8153-e071-4334-b9d9-28338afb1985"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9c791cb-7a5d-40f7-9238-08cfeccfa4ce",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cce2351f-5c5f-48f6-aa51-f6f801464bc7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e7847e2c-2ed9-45ef-834a-b9367e6fd453"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "23796fe5-24a5-416b-b0d0-9ffe6a2f8f1d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f94c658-bc27-41ed-9391-deee9210dfa0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "341e69a3-3028-4414-9f0d-ed3966901846",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9076a083-8820-4b86-b0eb-c69b8caa90d5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dd2c5bd7-a312-4724-8165-ded6d9719a11"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "86cb810a-fbcd-4891-802f-a99e7cf8fb36",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00bc1d6d-7921-4db5-84d5-bbde125821af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f498dd94-72c3-4b18-880f-77638645e9d0",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "181ef008-24d8-4e64-9206-81a45f6ea82a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2b08c6c5-5eb2-40c9-aed9-fbcf7cde6123"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "25c55918-8a01-4823-b3b1-b8362158c70b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31b1faf3-2122-44da-8746-0afeaa90bf23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58ea51b5-60b6-48bd-8067-c2b43686609f",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89cc0cc0-2a6a-4045-8018-771b1efc8419",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "104e57d0-959f-411c-b245-6753f093006a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2403f87-8b5a-4cbc-8454-ed03462a22bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3dbba08a-07f9-4d14-b781-aab5d38eb816"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f31d074-f4de-45c7-b8fa-e5a17b1bf44e",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a35ef112-6924-4afc-9804-f45d01b58013",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c0b051c6-3789-4ecb-b642-ca00a9496022"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1e155e2-8f15-4aea-b326-158153dd215e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "600e5606-1b9d-40e2-80fb-61efacebe655"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16b2103e-6578-4273-bf48-93fb8cadce89",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d8ebafa-031f-4bbb-9d85-3cda512857ad",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0b9b384b-9993-4e0f-912d-ec5f071d33c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a6f5a11-d231-455a-879e-2b7b4b050ee7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8e32b55-b329-4175-867d-edae151d638f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d78acbcf-8fce-4a26-bf4a-86e36f9adb4c",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a8bb93a-90a6-4594-8652-58ddb0c2955f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d6460a54-c8d0-4803-9b26-b7f2359b16e2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "03f887a1-368c-40de-b47e-c707b002a7b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd09f561-02fd-44c0-829e-eea19437ae62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e740a362-5652-4963-910c-20567a1c0490",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "640fe3ab-9865-4ae0-8e28-7b4932452dc1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d68cd991-2de2-406b-be54-49f5af1032d2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f56bfd7-397d-471d-aeba-98c73b41ac69",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3466bbb8-95e6-40f5-a217-e774facf4742"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8eab9226-a1ec-4ea9-8cba-2ff7a2cb5e66",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f90bb77-f4f7-43a6-bc59-53985ffc7c56",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ef8a598d-0883-4476-8b30-7a52a02c3baa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0dd4c3db-d3d2-4bf4-8f35-2a82218be1d1",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf3ca2af-b749-46eb-a95b-a2f45b1677f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3be6f2aa-a302-4daf-9c95-c70cc0fa7256",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f84d3fa-7361-4dd5-ab1e-a1f23fa2f0f0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "da9c73f0-2bc4-4714-b445-db80bdfbd396"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7280d36-47b8-45d8-bdca-f28df4e9363b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d40abf9f-9654-414d-adde-976e8a54ecda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f2e1d76-f3de-47c1-9533-62d7e821fb73",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca902a7b-c921-4798-9603-3936a966bcaa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c3a40f86-1e71-4219-89a6-a2d51986d2ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3892ad67-47d0-496d-9d31-5fdfa4fc2993",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a189c44-64ec-476f-aed5-687f66362dd2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2b7b074-f4b4-4512-b879-55657ddf255a",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10aa5945-71b7-4057-be2e-09c3ee9772ef",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "75ec86e1-0e82-4dcf-b83b-6ce9a3e86097"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "04b00c53-f1d2-4983-8e61-caf2eeae79fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aaa288e4-0697-4893-a3c0-e235573bbc2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65fb7a9c-9eea-4e79-ae0c-985008069ed6",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6642c1d5-cabd-476f-8dce-2e847389c719",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f704a5d7-3dd2-4ea2-bb21-c360cf842ebc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6346bf81-fafa-4773-9fbe-93d8c5284823",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59f42f62-20ee-4c55-9332-d6f39956028c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d0c9087-99b7-45e0-afcd-282fe6b50095",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "861ee7b6-f81c-4ffc-b55a-485270a63fb3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "74fccca0-56f9-41dd-b399-0680498a32cd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "06061c93-3167-4d91-ac60-c31acd01a8e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be29c620-d01d-4056-8d5f-239ccbf8ea3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e775e630-a142-4bc5-8757-f2c48350b42c",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5169ef03-3eaa-4784-b9e1-d044c90d1ed8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c4c28b70-3aef-4034-990d-377e4cdc5b4e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd0afb10-9b0f-4626-ad4b-a46f687dea14",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59019522-c0a0-4ae4-954c-3fe81fb5b136"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3392416c-63bd-4a00-b0b2-5458e0e9f2b1",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f416a28b-eb19-4dbe-90d9-c126c22adbdc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6969fdff-3ca3-4df7-a8e5-2190ad1f0f26"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "333f716f-36d3-4a49-a58a-ef8f0ceb01bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca922c87-372c-401e-b06f-72febc2ebd32"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0cadaffd-1f34-4b2e-8ec9-fbfb4bdddc97",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ca08d340-8e95-47b0-bf3b-54c8511a7c40"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8a355d70-b6cf-4bef-b1aa-4649d1020f05",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d5af502c-a4be-41c9-a5a8-d2a3b874cf87"
                    }
                  }
                ]
              },
              {
                "id": "924a89b4-4dce-473a-946b-80a496fafc09",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "16b441a8-6eb6-4484-9af9-b2d66e67dad3",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e62a1b95-2ffa-4608-9b89-6d98a16317e3",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "b38d6127-3cd1-47b4-81ef-302b46363e59"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cb30b2c-453c-4c21-acde-4c5cb5af3b60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8137d521-9250-4626-a684-c14765383423"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "35cf6ffd-7181-4c01-b4f7-e11a0722bda9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "210d70c9-37bc-41c3-bfdc-1bb6244d8469"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c3df602b-34fe-43ac-aae3-473cc0525490",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bac3ed74-1205-4bbb-bd6c-49b809216834"
                    }
                  }
                ]
              },
              {
                "id": "0597dc09-83bc-49c0-8dcf-272760f304df",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "5f4b93de-9c3b-4f85-b903-2df74aa47775",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44826f0d-677a-4a4d-b05a-bf2f1c61903e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "b2a41fc3-8c9e-42bd-b5f5-f68e516cb736"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86cac94a-1b5a-475b-b2b8-21d4d644c83a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c70b8fe-c72e-47e8-9d21-51690dbefe5e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "63c44d3e-422c-4b8e-aae9-357db464cb54",
            "name": "Positive Testing",
            "item": [
              {
                "id": "6550085d-21c6-419b-bfa7-ea5b76e01b1d",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "39d057ff-5f60-4f38-b11d-e2092ee2ef1b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "bb3e0fd2-5320-4842-bd3e-c4cb3f99b677"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d7254312-1f80-47e2-8d5f-c27e5dc14fb5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6ea32f4d-b80c-484f-8810-9ce0db0ba809"
                    }
                  }
                ]
              },
              {
                "id": "81233d2a-c253-4d9f-ab02-34e2fa981dfd",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f4d367cd-3736-427a-9042-4d7edc626458",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "889cfccc-60a7-42c7-ab6b-8e63d9b8b056"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6fae32af-de5a-409a-9c5e-b91a78bf86e7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b7c6d166-ecff-404c-b005-f8736fa54897"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "86e0706b-280d-4941-86f3-fce7ec6d5539",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "70af1606-be08-4afb-96da-559198ca108c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "19bdd18b-4d2a-44c2-8eee-d34956ad6c9b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e9c67ac4-3a4d-4ec7-81fd-4184c20a9f2e"
            }
          }
        ]
      },
      {
        "id": "c0bea44e-44b3-4ede-9d75-c16874a8b001",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "ebd065db-b33b-4574-ab2b-3093b69ec5d2",
            "name": "Negative Testing",
            "item": [
              {
                "id": "cf880f45-c756-472c-8c80-67a5fdc23305",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "3c5d3cf0-8d9e-4dd5-bcfe-2bfdd32d0f83",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4eab9205-0d8e-48b2-ba8c-da70abdae25b",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "7108a40b-b4ef-4089-bf55-328b0ef49bf1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aaa8f445-3dbc-477a-afde-c7b1e4abce16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e269b086-c4cb-4d83-acbc-53bd96fa99d0"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "268af5c3-9cec-4d71-9703-b2a8bab2a64f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "88b6778f-b35e-436f-8d04-bfad6407be5b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7faa1995-3948-492a-a080-9807457d1937",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3e66f8bf-4b9b-4e70-b1b6-976009a5ef71"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "047f83ad-f7bc-477a-aa64-2dfe095b4982",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "66845b69-14f5-44f7-9261-0d305446b630"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c0381dd1-cdd1-4f30-8fad-a8e2e76751bb",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6d57e977-d527-4e11-965e-725c013e9d15"
            }
          }
        ]
      },
      {
        "id": "feb046b5-40a3-4a03-8d25-be54dd75b075",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "b6be90b8-58a6-4735-929f-5b978f13bc23",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5bcf5f23-3df4-4d86-9155-e5d35a57163e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "da84d766-79b0-4f54-a7c8-3e4edd85a5a2",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6876c745-d198-4b82-939a-54ae170e8857",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7beced60-ac5b-4588-adce-fa82d8407914"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2202857d-e823-48ca-913c-cdaeb080c9f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e8539918-66e0-4ce5-82c9-ea5407f7ef9e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a0e880c7-917a-4302-a3c8-ac56893d31b1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c635cf9a-f9a3-474e-981b-8267d1ec9585"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "68d6c5ff-ea7a-4740-84a2-a9632904ad79",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4dca78ec-3635-4d81-a66f-67089066d776"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1ddd9077-e48f-4c19-a319-1a471bfa89e6",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "537bb04c-c23f-4523-b886-6f7b5d3e3c82"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e54a242a-c787-4d7b-aac0-9c21473982ca",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f812f960-9da1-4230-9504-91e251d83561"
            }
          }
        ]
      },
      {
        "id": "580a1b1d-03e0-4755-a9de-a5cfad5187ca",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "4da5233a-bbc8-43c4-8e11-d8c901222a16",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d9e7c3ed-5de9-4ee0-9ee8-4d34cc8e0f8c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ec46b0ce-24fa-4887-b2a0-b990cd588941",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49950965-21e2-4322-8f56-5ab93b3f4612",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "efc24238-b5c3-43ed-aa8c-cd26acb4aa05"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd277e6d-9d74-42fb-ba8e-08c6dfc467eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3660cc53-cc7c-464d-a592-3511ea02b968"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7d363295-64f5-453f-8f0f-f76280f45163",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e497311b-4064-4f49-a0b2-f20ac7f67a79"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "cdf1cafd-21e3-4b7a-be6e-64098299e660",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "47649a41-4b61-466f-a9e7-e0bc3d267cec"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c25f0f24-e0ed-475f-9ba0-1658c6a33d46",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "ec5182dd-864f-4719-bfd1-483e9dbb62a1"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "86c43c8a-4671-4270-aa4c-3691e807385a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4a714b8f-46a6-44c0-80ee-cf58b1805f82"
            }
          }
        ]
      },
      {
        "id": "b1105126-552c-4721-8ebd-9e85c84487c8",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8b02d7d7-8e17-4685-99ed-726d1ecd9be7",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6b81822a-fa38-4015-a929-80679a91a954",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "de3973f7-b50b-4706-95ac-23771e393025",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "283988bf-9323-4673-9e80-1c1e42a74f83",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f5f42ab4-bf02-4703-8543-093b46a4d047",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1891,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 507,
        "pending": 0,
        "failed": 264
      },
      "testScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 941,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 72.2023809523809,
      "responseMin": 17,
      "responseMax": 994,
      "responseSd": 92.99152288066053,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1720831177584,
      "completed": 1720831204213
    },
    "executions": [
      {
        "id": "2bc676c2-75ee-4a29-9476-06775baf4675",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 250,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "8a4aaff7-8db5-45af-a866-9369de22e659",
          "httpRequestId": "9d2cc913-0e9d-4925-bbd3-9777ebf01f94"
        },
        "item": {
          "id": "2bc676c2-75ee-4a29-9476-06775baf4675",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "6a004f70-3031-4592-b382-978b3aa06426",
          "status": "OK",
          "code": 200,
          "responseTime": 45,
          "responseSize": 0
        }
      },
      {
        "id": "f60d66fa-b7ef-4c68-a3bf-819c9e67a088",
        "cursor": {
          "ref": "4b1bc8aa-1590-4be4-b3c0-14e3572c917b",
          "length": 250,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "9d6ceb26-268c-4a3e-9a6f-c63cf797c447"
        },
        "item": {
          "id": "f60d66fa-b7ef-4c68-a3bf-819c9e67a088",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "bd158385-0be2-47b5-829e-628c43822198",
          "status": "OK",
          "code": 200,
          "responseTime": 17,
          "responseSize": 0
        }
      },
      {
        "id": "c05de520-e052-49ed-b8e5-edaaa079f38c",
        "cursor": {
          "ref": "851e1039-6e41-4b17-bb99-364bb2524d17",
          "length": 250,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "f8366df4-e4d1-4cbb-b839-ec31ed3d6cfb"
        },
        "item": {
          "id": "c05de520-e052-49ed-b8e5-edaaa079f38c",
          "name": "did_json"
        },
        "response": {
          "id": "cfecb731-7695-4a20-b94a-f870f4b17b79",
          "status": "OK",
          "code": 200,
          "responseTime": 280,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e85eec90-7fb2-438d-a8e4-c3a384d0ca7e",
        "cursor": {
          "ref": "3a47f042-ae13-4591-8d87-800bbd99ccff",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "eb9c77a5-13a7-4568-bbe3-1d431476cc84"
        },
        "item": {
          "id": "e85eec90-7fb2-438d-a8e4-c3a384d0ca7e",
          "name": "did:invalid"
        },
        "response": {
          "id": "94e6a59f-fdfa-49c2-acae-d715e823b53e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 216,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e85eec90-7fb2-438d-a8e4-c3a384d0ca7e",
        "cursor": {
          "ref": "3a47f042-ae13-4591-8d87-800bbd99ccff",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "eb9c77a5-13a7-4568-bbe3-1d431476cc84"
        },
        "item": {
          "id": "e85eec90-7fb2-438d-a8e4-c3a384d0ca7e",
          "name": "did:invalid"
        },
        "response": {
          "id": "94e6a59f-fdfa-49c2-acae-d715e823b53e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 216,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7ea8821-6cde-463d-b045-3048240d37c7",
        "cursor": {
          "ref": "063c077e-64c3-4562-9cf9-ecf874e1f945",
          "length": 250,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "f6ea64cf-586b-4ca8-b401-f3d95cc9024d"
        },
        "item": {
          "id": "c7ea8821-6cde-463d-b045-3048240d37c7",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "0346971b-97a1-4d50-beda-c13a4a772f3e",
          "status": "Not Found",
          "code": 404,
          "responseTime": 307,
          "responseSize": 49
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "316d7d8e-4f3c-4196-917b-64ade8aa81f1",
        "cursor": {
          "ref": "95c77d54-4b01-4556-aaea-56817fdd1448",
          "length": 250,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "00a238fa-995f-479b-b9b0-513fca4c63ad"
        },
        "item": {
          "id": "316d7d8e-4f3c-4196-917b-64ade8aa81f1",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "e6244e4c-2552-4427-a252-ed2ddc633de9",
          "status": "Not Found",
          "code": 404,
          "responseTime": 41,
          "responseSize": 82
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1ee3c2e-59fd-42fd-a90e-f7b3b5d2f4c6",
        "cursor": {
          "ref": "93dcdcec-bc66-4a44-aa25-fbc19a5bbbaf",
          "length": 250,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "0226745e-6e33-46c1-a881-ab42352b043f"
        },
        "item": {
          "id": "a1ee3c2e-59fd-42fd-a90e-f7b3b5d2f4c6",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "614a60e5-07b1-46e1-9d9a-ad27c6cc209f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 29,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be9dd3c6-251c-4e0c-b6fe-2c5c88d42263",
        "cursor": {
          "ref": "6c2b0567-8ab1-432c-a46f-b71ecb06d64e",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "cf526312-bc76-46f2-bc0f-3d548eb0b6b4"
        },
        "item": {
          "id": "be9dd3c6-251c-4e0c-b6fe-2c5c88d42263",
          "name": "identifiers"
        },
        "response": {
          "id": "72529dbc-33ae-4ec1-849e-1eb83b93d185",
          "status": "OK",
          "code": 200,
          "responseTime": 93,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5b62179-3f43-42f0-a137-99e2b7fedc3e",
        "cursor": {
          "ref": "32913b7e-b241-43b4-9c20-6c0dba285731",
          "length": 250,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "e4ce7c5f-6f05-4de1-b214-455587ef1aa3"
        },
        "item": {
          "id": "a5b62179-3f43-42f0-a137-99e2b7fedc3e",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "4ed2441d-6d6a-45e3-b9ca-2f2ec59142b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:9)"
            }
          }
        ]
      },
      {
        "id": "07545ffe-3164-4806-a1e3-7bc571d81b5a",
        "cursor": {
          "ref": "88f561b4-1680-4511-b59e-2c6d9e0f9455",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "739420bd-804b-4a2e-b178-7b4e4e818c22"
        },
        "item": {
          "id": "07545ffe-3164-4806-a1e3-7bc571d81b5a",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "3342b2a1-8bdf-491b-8d4e-d67827e7dbd2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 204
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "abfa48b1-93b4-47ad-b93f-8b8524fc590c",
        "cursor": {
          "ref": "115ccd97-b4b4-4e24-af78-0e08728b3f4b",
          "length": 250,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "e105e959-8abe-4d0f-92e5-b9671d13cccf"
        },
        "item": {
          "id": "abfa48b1-93b4-47ad-b93f-8b8524fc590c",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "7f3e990c-b03c-464d-b564-0416c8baecbd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 204
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "id": "f1ed3eb8-42a8-4576-a789-84dd669564e9",
        "cursor": {
          "ref": "54d7eaba-5004-4b3d-b392-6ddfbb219d3f",
          "length": 250,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "fc02b0e6-5d92-4a18-919d-b612e056b7f8"
        },
        "item": {
          "id": "f1ed3eb8-42a8-4576-a789-84dd669564e9",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "b87ea4f6-b430-4990-a197-48ce863e1144",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 204
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "5eb36560-0e2a-45f3-8d66-dda22efffd9c",
        "cursor": {
          "ref": "9a5d4dde-f45e-46a4-864f-b8d5aa380945",
          "length": 250,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "11d41833-f418-4aef-a029-b2dea70ed81f"
        },
        "item": {
          "id": "5eb36560-0e2a-45f3-8d66-dda22efffd9c",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "81ffac62-17e0-45c6-ab80-e9bc32bf597d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 204
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      },
      {
        "id": "a82577e0-ece9-4091-8559-1a37d704daae",
        "cursor": {
          "ref": "166cdc0c-6d5e-42d9-8ea7-5a4d2aec9b9d",
          "length": 250,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "c978c781-0e35-4490-a21d-11d2f9ba37bc"
        },
        "item": {
          "id": "a82577e0-ece9-4091-8559-1a37d704daae",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "d57d42a2-1be2-4f73-8044-ff9955790d33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 204
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:14)"
            }
          }
        ]
      },
      {
        "id": "b4d1c4bd-7c25-4dd5-9f74-e55979154e84",
        "cursor": {
          "ref": "29ea9d33-e452-4344-9bb9-3ecc60e6935f",
          "length": 250,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "b2fb9fbd-d651-4c89-b2dc-6198bc1c365a"
        },
        "item": {
          "id": "b4d1c4bd-7c25-4dd5-9f74-e55979154e84",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "ea43add4-e179-46f2-9a72-532d9d0ef779",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:15)"
            }
          }
        ]
      },
      {
        "id": "0f5ccf73-f823-49a3-b2f4-10bea0aec7b3",
        "cursor": {
          "ref": "6e0c27b1-f29d-4ef7-b6b6-ee9e5cd14474",
          "length": 250,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "729b8b8f-fcfe-4753-b202-181ae205513a"
        },
        "item": {
          "id": "0f5ccf73-f823-49a3-b2f4-10bea0aec7b3",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "5941453e-0493-42d0-98f9-66b6f34f3022",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "14183ab6-ba96-4458-83bc-f2d606c76798",
        "cursor": {
          "ref": "609e5b13-84bd-44e0-bf84-d53da80d0223",
          "length": 250,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "3f456e3d-b11a-4f6b-95ac-525dc277c7f2"
        },
        "item": {
          "id": "14183ab6-ba96-4458-83bc-f2d606c76798",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "79151078-828c-4fa8-b8cf-a45ca41ccda8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "b46c0d05-a330-4860-acfe-a6aa888dab7a",
        "cursor": {
          "ref": "e0eda25c-a737-43da-a882-f20a1ed489b7",
          "length": 250,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "cf2e60d4-fbe6-4a94-bec8-da3737ef747f"
        },
        "item": {
          "id": "b46c0d05-a330-4860-acfe-a6aa888dab7a",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "6aa9fb66-aa43-4220-9788-1a4bc0c7b5ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:18)"
            }
          }
        ]
      },
      {
        "id": "9a0e40b0-42e2-4d69-ad92-75289fccb9ab",
        "cursor": {
          "ref": "3a3407de-12ab-42d4-b541-07b84b6926fa",
          "length": 250,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "120d11d0-98c8-4e13-9aac-bab98bc81947"
        },
        "item": {
          "id": "9a0e40b0-42e2-4d69-ad92-75289fccb9ab",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "b5eac39e-7b6e-4159-b39b-124df287ade3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:19)"
            }
          }
        ]
      },
      {
        "id": "dee46254-cbb2-4442-abb6-e48d22c463fc",
        "cursor": {
          "ref": "423ef193-7c40-4506-a342-362411b6fc98",
          "length": 250,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "534e9a4a-d659-45a9-ba7d-ac3ccad576c7"
        },
        "item": {
          "id": "dee46254-cbb2-4442-abb6-e48d22c463fc",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "5e8ba03b-0550-4c02-901c-2453febcbad0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "573a7112-0a89-4f4e-923f-501357eed5c1",
        "cursor": {
          "ref": "6c61a1ae-4178-4ca8-a9e3-36e2a78f857e",
          "length": 250,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "96c2c91a-d811-4a06-8da9-e4f35e816244"
        },
        "item": {
          "id": "573a7112-0a89-4f4e-923f-501357eed5c1",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "052b7314-369f-40a8-a131-2805bc2b387f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "96c71af1-cf99-4c78-bcee-a5645160b025",
        "cursor": {
          "ref": "251c625b-79db-48af-b7a0-7cb453e5c81b",
          "length": 250,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "6abcedbb-8dd8-41a2-a7a1-5d31294742a9"
        },
        "item": {
          "id": "96c71af1-cf99-4c78-bcee-a5645160b025",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "aea02e79-a807-446a-b45b-c9e0826205a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "5b74e627-2ec9-4d41-b5bc-3846eff3f571",
        "cursor": {
          "ref": "31b82c7b-1b1f-4537-bc4a-f09eabc4b6e2",
          "length": 250,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "833498c7-6b78-42e6-a2a6-86e5772f86c4"
        },
        "item": {
          "id": "5b74e627-2ec9-4d41-b5bc-3846eff3f571",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "3607a3e1-1e33-46b0-9187-7fd9a648ec5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "a2335598-77e3-4b4d-aceb-ba5802d95cd3",
        "cursor": {
          "ref": "5cac0742-497a-4006-8f2a-7a4127e7db7f",
          "length": 250,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "c1a61a22-04d8-4d52-8305-d836cd2fbfdb"
        },
        "item": {
          "id": "a2335598-77e3-4b4d-aceb-ba5802d95cd3",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "21927a76-4cd1-4c00-8761-1f53171068b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "5144c716-fafb-4aaf-90db-a9c122422ee8",
        "cursor": {
          "ref": "79fdf38c-2abf-4bdb-8188-aba48d7f526b",
          "length": 250,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "0ce2985c-f135-4c13-ad2f-8e75c11e0ed1"
        },
        "item": {
          "id": "5144c716-fafb-4aaf-90db-a9c122422ee8",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "3b6dbc15-2f6e-410f-af8e-6938e68a0329",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "7e59e3d6-2a82-476e-b8c1-57fa3c4c0120",
        "cursor": {
          "ref": "3a756890-03c4-4725-9e7a-2149ac06ca1d",
          "length": 250,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "7fe88c9e-4a79-4b51-b99f-a52b0ac9c5e7"
        },
        "item": {
          "id": "7e59e3d6-2a82-476e-b8c1-57fa3c4c0120",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "9230b9d7-f650-4a19-b41c-a53b05b02377",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:26)"
            }
          }
        ]
      },
      {
        "id": "8e2cbfb6-6f32-4c4c-8737-1219805b056d",
        "cursor": {
          "ref": "daacac3f-c047-4f63-b8c8-bc8dd011a44f",
          "length": 250,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "dda89b2d-da08-48e6-addc-9d21edfc9d5c"
        },
        "item": {
          "id": "8e2cbfb6-6f32-4c4c-8737-1219805b056d",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "e46e7aa4-3222-4ce8-8ffb-c3fe3b495302",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:27)"
            }
          }
        ]
      },
      {
        "id": "65647a51-ef6a-4224-91a6-54ffde02cf34",
        "cursor": {
          "ref": "5188ba15-3a81-4e95-8cd5-603fb1591ca9",
          "length": 250,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "f99b7ad8-fd55-4e77-a24e-24ff2e6c9df2"
        },
        "item": {
          "id": "65647a51-ef6a-4224-91a6-54ffde02cf34",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "683ae1cd-8104-4c4a-a2d4-953801e7606c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:28)"
            }
          }
        ]
      },
      {
        "id": "18699435-dc94-4c44-98b8-66ec0ec7ac47",
        "cursor": {
          "ref": "c2cc1428-baaf-4557-8267-726ac4c6152b",
          "length": 250,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "1b2c209b-3636-4211-bdf2-38a785127a94"
        },
        "item": {
          "id": "18699435-dc94-4c44-98b8-66ec0ec7ac47",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "63f6469a-3432-45f0-8152-dd50efa823f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:29)"
            }
          }
        ]
      },
      {
        "id": "40d8bc57-20a1-4461-93a6-116889fdd4bb",
        "cursor": {
          "ref": "b891c6e3-0c77-44e8-93fb-aac5aed40c5c",
          "length": 250,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "b443a105-e668-4c67-830c-10d51219fd41"
        },
        "item": {
          "id": "40d8bc57-20a1-4461-93a6-116889fdd4bb",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "f306fa3a-6ce0-4ce3-a5c8-366411f2b9cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:30)"
            }
          }
        ]
      },
      {
        "id": "954c4872-d7b6-4b36-975c-7bbafa950c64",
        "cursor": {
          "ref": "81eb6e32-3cca-4d34-9d01-74eef00d5846",
          "length": 250,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "06248512-4a55-42a0-a14a-183d0f7f949f"
        },
        "item": {
          "id": "954c4872-d7b6-4b36-975c-7bbafa950c64",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "be016c82-0dea-4669-bc7c-58eb81ec97a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 103
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:31)"
            }
          }
        ]
      },
      {
        "id": "b1892abd-c97c-4b3e-97e0-542fce575558",
        "cursor": {
          "ref": "ef4213d4-b8f1-4639-a99b-a175c1683b59",
          "length": 250,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "ccab654f-442a-42af-a379-3d5cf4c4433f"
        },
        "item": {
          "id": "b1892abd-c97c-4b3e-97e0-542fce575558",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "2328f3a9-ba5a-482f-90c3-8909cf50aaa1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 103
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "0522c277-76b3-40f0-9829-aaee3f43a939",
        "cursor": {
          "ref": "0e02b3b3-a804-4ddd-8dca-a2ad851dcff0",
          "length": 250,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "792944a0-046a-4722-a4f0-1a5f447d3ff2"
        },
        "item": {
          "id": "0522c277-76b3-40f0-9829-aaee3f43a939",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "e89070f4-c241-4f7a-bca3-5338e930cffd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:33)"
            }
          }
        ]
      },
      {
        "id": "0fdbfa52-1b31-4658-9f77-dabbbb672572",
        "cursor": {
          "ref": "848ff9b9-b0b0-4022-9b5f-119abc26a1c4",
          "length": 250,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "216227f8-0f86-4c96-99f3-9183f472f482"
        },
        "item": {
          "id": "0fdbfa52-1b31-4658-9f77-dabbbb672572",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "66c12193-eb96-4e6b-830e-7227581d8988",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "7b29e9dc-be12-408e-bf66-dbabe9148466",
        "cursor": {
          "ref": "c1229804-0c86-4c07-b9b0-8c4c6d360cc0",
          "length": 250,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "068f4397-7276-4999-a382-ddc0d6c55f17"
        },
        "item": {
          "id": "7b29e9dc-be12-408e-bf66-dbabe9148466",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "621b339d-b408-4e66-8ccc-847693eb5743",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:35)"
            }
          }
        ]
      },
      {
        "id": "b7c5bb09-459b-4041-95a2-ae1d9360730a",
        "cursor": {
          "ref": "ce8e58f6-4d46-4acc-88d7-356e2809a819",
          "length": 250,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "87857e76-3662-494c-b8e6-6789d3697794"
        },
        "item": {
          "id": "b7c5bb09-459b-4041-95a2-ae1d9360730a",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "dd5a0ce5-d46a-4dad-a278-80268fa11443",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "id": "102a1673-d184-4049-9d88-0a9aef8a4179",
        "cursor": {
          "ref": "c9d8f987-aac9-46bd-89c7-9bb78c39fe90",
          "length": 250,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "7937363d-2624-428c-ad6b-14b1d1fa9e1b"
        },
        "item": {
          "id": "102a1673-d184-4049-9d88-0a9aef8a4179",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "6e747137-396a-410e-89ca-b1870f76fbb6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      },
      {
        "id": "473f40c3-1ee0-445d-a360-9180418b0f5c",
        "cursor": {
          "ref": "d9803cdc-7ed2-4764-a68b-2583aad5c857",
          "length": 250,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "958f6cd8-077e-4add-8634-369317341817"
        },
        "item": {
          "id": "473f40c3-1ee0-445d-a360-9180418b0f5c",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "08fe6c0b-d0d4-49ea-ba09-baacf6a480cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 92
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:38)"
            }
          }
        ]
      },
      {
        "id": "67ba6ca2-eb8a-441f-9d5d-56ed5ff5e78b",
        "cursor": {
          "ref": "ae988af1-5680-4760-99cb-eaca0058e8af",
          "length": 250,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "be9556b0-d8d0-42f6-a046-8e1540aad0bf"
        },
        "item": {
          "id": "67ba6ca2-eb8a-441f-9d5d-56ed5ff5e78b",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "782ae36c-dc52-4b18-ba1e-a7d83226512b",
          "status": "Created",
          "code": 201,
          "responseTime": 994,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "6078fe7d-a820-478b-88b0-0a237dbb1159",
        "cursor": {
          "ref": "63ff4336-7d33-498d-8fb2-c443a23d4271",
          "length": 250,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "ecef2e38-d8b0-4312-af50-37aefe249106"
        },
        "item": {
          "id": "6078fe7d-a820-478b-88b0-0a237dbb1159",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "05de5ce3-a0a6-491e-90aa-ab944b937d05",
          "status": "Created",
          "code": 201,
          "responseTime": 287,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "7c854509-7f4f-4415-864c-1212c53744a4",
        "cursor": {
          "ref": "f782ee7e-dd31-47ad-b98e-9c2200982827",
          "length": 250,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "6378906a-1a6c-4ad7-9cd8-110ee795d5b8"
        },
        "item": {
          "id": "7c854509-7f4f-4415-864c-1212c53744a4",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "86d291ad-75cb-4f43-ab2b-ebdb9cc0bee2",
          "status": "Created",
          "code": 201,
          "responseTime": 272,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "9f594364-def8-459d-9ca7-581e9bedf44a",
        "cursor": {
          "ref": "2f9f93b0-eb88-4e96-b6de-27ec96bf227c",
          "length": 250,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "7f3d6217-3eeb-476e-84bb-51ddb6220a6a"
        },
        "item": {
          "id": "9f594364-def8-459d-9ca7-581e9bedf44a",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "3bc31024-2c8b-47d8-96c8-b4658c273387",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 92
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:42)"
            }
          }
        ]
      },
      {
        "id": "9482a621-b20d-4283-887b-6ca20bd8e8ee",
        "cursor": {
          "ref": "736e23f1-c36e-4830-883a-8483e699b855",
          "length": 250,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "c0bde308-544e-40af-ae5a-449c813411ca"
        },
        "item": {
          "id": "9482a621-b20d-4283-887b-6ca20bd8e8ee",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "59632cce-e5bf-4144-afc2-0137374c6fa1",
          "status": "Created",
          "code": 201,
          "responseTime": 267,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "0571684e-7dc8-4129-a930-8a0488f0edc7",
        "cursor": {
          "ref": "032f9373-5ffb-4e7d-b4e7-8a3b10fa49ee",
          "length": 250,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "1fda7a67-2a7f-4e79-8226-06c2aa29e648"
        },
        "item": {
          "id": "0571684e-7dc8-4129-a930-8a0488f0edc7",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "a38e9eae-3687-4a54-afc4-4df575764668",
          "status": "Created",
          "code": 201,
          "responseTime": 269,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "73a253dd-a88f-4580-8fd9-3ec1f37b61de",
        "cursor": {
          "ref": "ab22980a-3896-4973-8852-58ac533c240a",
          "length": 250,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "ac86927c-06ce-401a-9250-6aea1a392c09"
        },
        "item": {
          "id": "73a253dd-a88f-4580-8fd9-3ec1f37b61de",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "88f3cbe9-c2e2-4e2b-adb4-3b666e8c4264",
          "status": "Created",
          "code": 201,
          "responseTime": 281,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "20eab9ea-88dc-4487-b9ab-44e5d0014ca2",
        "cursor": {
          "ref": "14a92521-ffbb-4b5c-8ecd-63ecc28016ea",
          "length": 250,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "06ce8a0c-54b3-40e6-b192-e3bce792a034"
        },
        "item": {
          "id": "20eab9ea-88dc-4487-b9ab-44e5d0014ca2",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "e22180fc-832e-49f7-a3a9-456bc0021f37",
          "status": "Created",
          "code": 201,
          "responseTime": 268,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "d1a883db-f863-4a76-89d0-1daf68acbf23",
        "cursor": {
          "ref": "ef64cae9-a8ec-471f-a87b-d6bd8382d0ed",
          "length": 250,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "e2273543-5511-400e-b7d9-5ccea653a663"
        },
        "item": {
          "id": "d1a883db-f863-4a76-89d0-1daf68acbf23",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "23e2821d-69c7-408b-89fa-4e20614b26a9",
          "status": "Created",
          "code": 201,
          "responseTime": 251,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "285fe8fa-e629-4730-ad83-8b8bd61d4d73",
        "cursor": {
          "ref": "989b299b-93da-408b-b47b-1162768f51ac",
          "length": 250,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "e9480bcf-7cb5-4281-8025-f18ac1a25622"
        },
        "item": {
          "id": "285fe8fa-e629-4730-ad83-8b8bd61d4d73",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "28da28de-24c2-4989-9133-a7fb46adce22",
          "status": "Created",
          "code": 201,
          "responseTime": 297,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "518a3c67-1f68-429c-b157-6b97c8f41d4b",
        "cursor": {
          "ref": "52c7ccf1-608a-4b72-8c75-45f9eb06e0ce",
          "length": 250,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "a2acae88-4807-456e-a6c3-09357fe75662"
        },
        "item": {
          "id": "518a3c67-1f68-429c-b157-6b97c8f41d4b",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "11ad1808-23c2-488b-915d-c897ee8794a7",
          "status": "Created",
          "code": 201,
          "responseTime": 260,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "33feb02a-14a3-4b11-8d82-aa79d161ae49",
        "cursor": {
          "ref": "140ce7c5-3186-42a9-a20d-0ffe44d5b752",
          "length": 250,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "f0e805b8-9ac3-4bec-b225-2a5d2dafb326"
        },
        "item": {
          "id": "33feb02a-14a3-4b11-8d82-aa79d161ae49",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "99dc77d6-f926-45e5-a37a-5579b4f08578",
          "status": "Created",
          "code": 201,
          "responseTime": 257,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "0e533af0-2905-40e3-954b-7724dac81e63",
        "cursor": {
          "ref": "6bc3d405-36e5-4261-98dc-30684127b730",
          "length": 250,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "a6d11410-a217-4cbc-9557-42db756d742b"
        },
        "item": {
          "id": "0e533af0-2905-40e3-954b-7724dac81e63",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "ad0aff2c-1763-4952-83bf-450d5cd1a1f4",
          "status": "Created",
          "code": 201,
          "responseTime": 286,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "7cd7afa1-9395-40f9-8cd6-bd0a840c55cf",
        "cursor": {
          "ref": "12e2be26-3ffd-49f3-b2e9-5fa25ea6fb9d",
          "length": 250,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "6941ae3e-5e19-47a1-960d-f73e97733b9b"
        },
        "item": {
          "id": "7cd7afa1-9395-40f9-8cd6-bd0a840c55cf",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "dc4c2adc-ae17-4274-a639-9ec6aa464456",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 161
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "61844c0f-98f8-4a70-a1ca-5336f445cc8a",
        "cursor": {
          "ref": "2ab45980-cee5-4bfa-9cd9-b38ae1f297e9",
          "length": 250,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "3c427117-8526-402f-b06b-7d8b6ed6773c"
        },
        "item": {
          "id": "61844c0f-98f8-4a70-a1ca-5336f445cc8a",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "701a8379-a201-4796-899e-6ae573472672",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "1ccf00a9-8baf-48f0-8284-5508ce5c0955",
        "cursor": {
          "ref": "b98cc60f-1c69-4f5a-95f6-7a14ba53f11a",
          "length": 250,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "a01ae16e-1394-4a0d-8d09-d6ae69f49829"
        },
        "item": {
          "id": "1ccf00a9-8baf-48f0-8284-5508ce5c0955",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "3f9429d5-f5a0-4855-b2a6-6386c1fc0103",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "04d7edbd-a8c4-4051-a25b-a11b4036853e",
        "cursor": {
          "ref": "d2c780de-b061-4758-8209-274b7f402e8c",
          "length": 250,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "a205e3dd-a28a-4542-aff3-37297e1c59bd"
        },
        "item": {
          "id": "04d7edbd-a8c4-4051-a25b-a11b4036853e",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "480aca01-4a51-49ad-9c70-f3532714a28b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:55)"
            }
          }
        ]
      },
      {
        "id": "01942ad8-2bfd-490e-b924-14d598c74961",
        "cursor": {
          "ref": "9b16bfa2-4768-4968-811f-2dd0955ce5c6",
          "length": 250,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "3ec63955-84e2-4d4d-a90f-646cbf39a42d"
        },
        "item": {
          "id": "01942ad8-2bfd-490e-b924-14d598c74961",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "2e49846a-479d-45f4-9ae6-75794ccbecba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 161
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:56)"
            }
          }
        ]
      },
      {
        "id": "f7a26652-cc6c-4b9c-b065-67373c77eb9f",
        "cursor": {
          "ref": "109fcbf3-a5de-4cd2-b32a-5e53576167ea",
          "length": 250,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "9250ebbc-8a8c-4b54-846e-1f5702073315"
        },
        "item": {
          "id": "f7a26652-cc6c-4b9c-b065-67373c77eb9f",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "289ae5c5-390a-4833-b6d8-f81595aa7046",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:57)"
            }
          }
        ]
      },
      {
        "id": "ed247380-254e-422e-a151-9c0bac05cc00",
        "cursor": {
          "ref": "861f2711-d6b6-4ee8-b13c-5f3574f6c5a2",
          "length": 250,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "38783b52-2440-42dc-9cb3-dc7d85f212d2"
        },
        "item": {
          "id": "ed247380-254e-422e-a151-9c0bac05cc00",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "ad5d379b-a197-43f8-b529-81ea0ea63157",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:58)"
            }
          }
        ]
      },
      {
        "id": "b563bb5b-cb98-4a04-a576-c534f3ec0c4c",
        "cursor": {
          "ref": "0f03166d-ddf3-46fd-9f9d-3f6dca9a075a",
          "length": 250,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "bf955822-182d-4ef3-8c6b-a2ad892452de"
        },
        "item": {
          "id": "b563bb5b-cb98-4a04-a576-c534f3ec0c4c",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "aaf52d44-2f38-4f0f-89fd-8f8bac1ec873",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:59)"
            }
          }
        ]
      },
      {
        "id": "d5d3c61d-6ddd-42d2-ac2b-62208dc25359",
        "cursor": {
          "ref": "b026c94a-ac63-45a7-8b3f-6d97f21d6ffd",
          "length": 250,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "e7b41615-788e-475c-81fb-47ef94f513b7"
        },
        "item": {
          "id": "d5d3c61d-6ddd-42d2-ac2b-62208dc25359",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "1ae4d3c1-c93b-42ef-88e2-3519d33ef740",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 197
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:60)"
            }
          }
        ]
      },
      {
        "id": "1d62628d-2e33-49ae-a463-5387ac08ec2c",
        "cursor": {
          "ref": "16834b05-0fd8-4814-ad83-d6ea1eee3cb3",
          "length": 250,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "74c482dc-d1b2-4f41-bf69-e8fa4dafaec8"
        },
        "item": {
          "id": "1d62628d-2e33-49ae-a463-5387ac08ec2c",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "f9784f5c-066e-46b8-a238-ebe08acac5a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:61)"
            }
          }
        ]
      },
      {
        "id": "128d54dd-7ea8-45a2-ad08-42f39d9fb21d",
        "cursor": {
          "ref": "9ec0f817-0d77-4437-b6e1-068fead02380",
          "length": 250,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "db0f5bfd-9b54-4832-92b0-4bda6beaf741"
        },
        "item": {
          "id": "128d54dd-7ea8-45a2-ad08-42f39d9fb21d",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "a0290990-fd58-4eec-be23-1c1fe08a3d44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:62)"
            }
          }
        ]
      },
      {
        "id": "050f0606-24bf-485f-a299-c62dcbee0d64",
        "cursor": {
          "ref": "42f865e5-97ef-4393-b0cf-50172dc9deb7",
          "length": 250,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "753f3220-749d-4679-81db-9fdd6e527c22"
        },
        "item": {
          "id": "050f0606-24bf-485f-a299-c62dcbee0d64",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "29cc2450-7109-4cfd-8d56-d2922e106237",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:63)"
            }
          }
        ]
      },
      {
        "id": "97915196-7651-4f4a-b85b-375946c10a07",
        "cursor": {
          "ref": "bdcf87af-428b-4aff-b90f-e3b3b3fa8626",
          "length": 250,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "c6fc4ea3-7905-4c81-88d2-81c5d653f0e6"
        },
        "item": {
          "id": "97915196-7651-4f4a-b85b-375946c10a07",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "e56e56ca-4044-4922-bdb3-15a1c5ad1f15",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:64)"
            }
          }
        ]
      },
      {
        "id": "48fd307a-f152-4c09-ac06-7f3f49648592",
        "cursor": {
          "ref": "246e14ef-4af3-4067-97fb-02531ebb697b",
          "length": 250,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "802febff-5065-456a-aaec-57e2e3bce7f9"
        },
        "item": {
          "id": "48fd307a-f152-4c09-ac06-7f3f49648592",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "ccf37353-62a7-4acc-9efe-6fbd0e822f15",
          "status": "Created",
          "code": 201,
          "responseTime": 307,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "0d6883d7-26ef-4d9b-a085-84343951d0bd",
        "cursor": {
          "ref": "d84fdbce-ac4b-4e45-898d-1c1d42cd7644",
          "length": 250,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "3f53b13d-0894-4a16-a56f-d4bf5c9420c2"
        },
        "item": {
          "id": "0d6883d7-26ef-4d9b-a085-84343951d0bd",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "f7c926eb-46d1-4c4e-801a-8c08a9289441",
          "status": "Created",
          "code": 201,
          "responseTime": 265,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "22f95d9a-1f2f-45e9-9336-9abee07b740f",
        "cursor": {
          "ref": "066bbe1e-c346-477f-9a84-eba0a90756c0",
          "length": 250,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "487d2efd-7d6f-45b4-96fd-62161f42ed73"
        },
        "item": {
          "id": "22f95d9a-1f2f-45e9-9336-9abee07b740f",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "eb313915-9d6a-4518-90f4-0fa49bc43674",
          "status": "Created",
          "code": 201,
          "responseTime": 274,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "979df531-b45d-4500-9875-4574995c100d",
        "cursor": {
          "ref": "8c8b9fe9-1682-4816-b55c-3d4e13ff6433",
          "length": 250,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "62e40f8b-56af-415e-86e7-ce53e0f9b74f"
        },
        "item": {
          "id": "979df531-b45d-4500-9875-4574995c100d",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "2016be0d-66cd-49cd-b0cf-4dafe83d2d76",
          "status": "Created",
          "code": 201,
          "responseTime": 270,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "9782941b-d9a7-4035-b0a8-a2c11a31f69a",
        "cursor": {
          "ref": "fdde3da8-fb81-4ead-8e83-b03534cc5560",
          "length": 250,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "22bb52b1-09a9-4de5-9203-1085dc40e6eb"
        },
        "item": {
          "id": "9782941b-d9a7-4035-b0a8-a2c11a31f69a",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "d200e27a-0e82-4e84-87ea-1198b3196d63",
          "status": "Created",
          "code": 201,
          "responseTime": 263,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "45b8abc2-db87-4bef-bdeb-7ee0f90f42ba",
        "cursor": {
          "ref": "dd60a8d9-4d5b-4407-b18f-35e50016d070",
          "length": 250,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "927d9df7-d211-419a-828a-9f2b540532c3"
        },
        "item": {
          "id": "45b8abc2-db87-4bef-bdeb-7ee0f90f42ba",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "a7187c28-bcc9-48a0-8935-5aa5e5a6acb9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:70)"
            }
          }
        ]
      },
      {
        "id": "95edf637-b881-45bf-9378-26324077d955",
        "cursor": {
          "ref": "f0c07ba3-0ee4-4869-9eea-acca0d4ad763",
          "length": 250,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "aeaf00b1-b41c-405e-9da3-9355827c3b66"
        },
        "item": {
          "id": "95edf637-b881-45bf-9378-26324077d955",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "edc20582-6e14-468a-b82c-dd8910a48427",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 80
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "7910874d-84be-42c9-9a6f-8ce67ad9186f",
        "cursor": {
          "ref": "6b27645b-a089-4710-b45f-de6344c66c4b",
          "length": 250,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "30a488f8-69f8-4433-9074-2ab81b5a7886"
        },
        "item": {
          "id": "7910874d-84be-42c9-9a6f-8ce67ad9186f",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "47991ae4-a86f-4155-ba1a-90254ac3e9ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:72)"
            }
          }
        ]
      },
      {
        "id": "336800cd-1b08-4965-a17c-7a7179ca8af1",
        "cursor": {
          "ref": "5bafcc6b-ed48-4fa0-94e8-bbafcb41f745",
          "length": 250,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "c91b59a3-38a4-4b9d-ab2e-c5b497a7a358"
        },
        "item": {
          "id": "336800cd-1b08-4965-a17c-7a7179ca8af1",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "e0edb685-e496-4e98-a2b4-d6011cd9ea13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:73)"
            }
          }
        ]
      },
      {
        "id": "185d2bf2-48b2-4784-9330-fa8b1f5ca473",
        "cursor": {
          "ref": "e552c962-f06b-4ba1-9aea-cf11fab9c95d",
          "length": 250,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "c051e7a4-1d41-4cda-a0c7-69ccb782c7ff"
        },
        "item": {
          "id": "185d2bf2-48b2-4784-9330-fa8b1f5ca473",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "b4d4457d-736c-472d-a257-61d6c63b8dca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 181
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:74)"
            }
          }
        ]
      },
      {
        "id": "6b0cf8bb-143c-499b-8b80-facadf791041",
        "cursor": {
          "ref": "c3a929e8-2b1f-4e00-b1c0-e11be13af435",
          "length": 250,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "38629234-55a9-44e4-aa19-0c0ca67de4b2"
        },
        "item": {
          "id": "6b0cf8bb-143c-499b-8b80-facadf791041",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "21d76391-5a7a-411d-93b0-e0f00c2f5fe1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 181
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:75)"
            }
          }
        ]
      },
      {
        "id": "f8323db9-70bb-42ec-9f90-da8dcab071c5",
        "cursor": {
          "ref": "1d3c421f-a7a1-4f3b-a9a7-866701847c1e",
          "length": 250,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "f7a687b3-6e5a-4d8c-8835-8b1eb1295b95"
        },
        "item": {
          "id": "f8323db9-70bb-42ec-9f90-da8dcab071c5",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "33ecc65e-2118-4fda-a73c-7dc4e845b478",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 270
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:76)"
            }
          }
        ]
      },
      {
        "id": "ff468434-10cf-45bc-8ffd-cf35827baf97",
        "cursor": {
          "ref": "a5eec135-b93c-4f7b-bd37-aa9a8ad27b53",
          "length": 250,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "dff6cc0a-c2ea-4cf0-b2be-1a51c4e64de3"
        },
        "item": {
          "id": "ff468434-10cf-45bc-8ffd-cf35827baf97",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "c57a5e0d-75b4-46d6-af53-f3fe4cf03fea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 235
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:77)"
            }
          }
        ]
      },
      {
        "id": "00a196ec-3c88-479b-b1aa-a7622a9cfa22",
        "cursor": {
          "ref": "a08c813c-d54d-4d49-ad40-21ed0024e728",
          "length": 250,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "53a12345-8b3b-4e23-9a65-cb39b0132bbe"
        },
        "item": {
          "id": "00a196ec-3c88-479b-b1aa-a7622a9cfa22",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "ecfe594c-4b5a-46b0-aa95-c737a534dad6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 235
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:78)"
            }
          }
        ]
      },
      {
        "id": "d1109a62-d168-4740-995d-3ec2428f1011",
        "cursor": {
          "ref": "88850edd-ddf0-4fda-9431-481abd1b6970",
          "length": 250,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "0240def7-a63b-49ab-b88c-75cecc7a8020"
        },
        "item": {
          "id": "d1109a62-d168-4740-995d-3ec2428f1011",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "52cd5861-a39a-465f-bb3f-7459bad21f7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 235
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:79)"
            }
          }
        ]
      },
      {
        "id": "3e220865-51c7-4f0a-9fd2-a1d3018d089b",
        "cursor": {
          "ref": "fc916ecc-1006-4707-b862-202be9fb472a",
          "length": 250,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "c3da47a5-01bd-43d3-8c8b-6f41f6bb8d4d"
        },
        "item": {
          "id": "3e220865-51c7-4f0a-9fd2-a1d3018d089b",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "fdeb6329-9ce6-42da-9dfd-416500ccd84d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 270
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:80)"
            }
          }
        ]
      },
      {
        "id": "73660acc-b675-47a6-b235-d94f9e24067d",
        "cursor": {
          "ref": "7e287577-69b8-4b56-9f9c-d8bd78dec3a0",
          "length": 250,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "efe50238-34f0-4088-b98a-4499743a01a6"
        },
        "item": {
          "id": "73660acc-b675-47a6-b235-d94f9e24067d",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "b5942a2d-1849-413b-a2d4-710aeba7f0a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 235
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:81)"
            }
          }
        ]
      },
      {
        "id": "58f35ef4-014d-484b-ae80-8f47b2bbb5b5",
        "cursor": {
          "ref": "c9f15d3a-c6ef-464b-b449-7a466c459f4e",
          "length": 250,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "0143b6a0-0d5d-456e-9a2c-0aefc11f9800"
        },
        "item": {
          "id": "58f35ef4-014d-484b-ae80-8f47b2bbb5b5",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "be58a706-7c5c-4886-9a12-5cda103c5fd7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:82)"
            }
          }
        ]
      },
      {
        "id": "6fa85dd3-19cb-46ea-ad30-ed1cb175c653",
        "cursor": {
          "ref": "916fa02f-7422-41e2-b098-97c5aa22ba95",
          "length": 250,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "7e62b3ac-80c4-4b4a-9cff-92f5d6b6c0cd"
        },
        "item": {
          "id": "6fa85dd3-19cb-46ea-ad30-ed1cb175c653",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "53e6e71a-7ffd-4db1-8d4c-0f24a27a481f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:83)"
            }
          }
        ]
      },
      {
        "id": "44882916-3e6e-4690-b965-a4300aba40fb",
        "cursor": {
          "ref": "d6e367e0-eace-4186-97cf-66695e41d57b",
          "length": 250,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "7796cf75-357e-4108-ad8e-591773cebb86"
        },
        "item": {
          "id": "44882916-3e6e-4690-b965-a4300aba40fb",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "9dd20fac-d3bf-4cb4-be41-a41abe7b8165",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:84)"
            }
          }
        ]
      },
      {
        "id": "33397289-1281-4270-a3f1-309fc36b9a95",
        "cursor": {
          "ref": "b7f641d7-2a52-446c-9910-1e5f05c7b043",
          "length": 250,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "7d5a8e51-533e-4c40-84bc-40613958b01c"
        },
        "item": {
          "id": "33397289-1281-4270-a3f1-309fc36b9a95",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "f0d6b91e-6b9b-4a37-b819-7c132f42aed5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:85)"
            }
          }
        ]
      },
      {
        "id": "1d357517-91d8-443c-b33b-571d0b9584da",
        "cursor": {
          "ref": "dad7acdd-9575-44c8-900f-e2af09ecfe1f",
          "length": 250,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "2af8a3a4-1d3d-4362-a3fb-ef11eefb2248"
        },
        "item": {
          "id": "1d357517-91d8-443c-b33b-571d0b9584da",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "ade184fb-f588-4a6c-a18a-78aa05cd31d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:86)"
            }
          }
        ]
      },
      {
        "id": "141c9d33-8444-4791-8e66-9e575dd2fd32",
        "cursor": {
          "ref": "694a27bd-a11e-4ed4-acf8-2b926a55c5d9",
          "length": 250,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "ed282459-79b1-456b-ad1c-346da1b038b4"
        },
        "item": {
          "id": "141c9d33-8444-4791-8e66-9e575dd2fd32",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "11f841ef-c791-49c1-a5ac-01bf10aadcb8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:87)"
            }
          }
        ]
      },
      {
        "id": "b5dde7cd-69a5-42fe-a730-45ad4fd37683",
        "cursor": {
          "ref": "26cde8b8-416d-44d7-a64e-925e1b8e4f9a",
          "length": 250,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "84e261e1-147c-41a6-8ed8-08ad88918cc9"
        },
        "item": {
          "id": "b5dde7cd-69a5-42fe-a730-45ad4fd37683",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "f608fd1e-9a8c-4a0a-9bb4-5544e422577e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:88)"
            }
          }
        ]
      },
      {
        "id": "b586009c-9bf6-4440-94b8-81e4ad0b6c0a",
        "cursor": {
          "ref": "d308e9f4-c3d6-4a42-a756-84e8ee30ce7b",
          "length": 250,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "3a03d659-dc4b-41ba-b9f0-04d6ca4b5240"
        },
        "item": {
          "id": "b586009c-9bf6-4440-94b8-81e4ad0b6c0a",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "571a27d4-370f-47bc-b794-9c2825f6bc53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 143
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:89)"
            }
          }
        ]
      },
      {
        "id": "e8b161c0-8020-4c2e-b5a3-27e216c6b713",
        "cursor": {
          "ref": "aedd6648-28fa-479d-9dfb-91e09ab7943c",
          "length": 250,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "92873630-0cdc-4dda-a104-3def3a8b017e"
        },
        "item": {
          "id": "e8b161c0-8020-4c2e-b5a3-27e216c6b713",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "2a38c7b1-6777-4faa-9c25-755278dd06da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:90)"
            }
          }
        ]
      },
      {
        "id": "9aaf1bbc-cc80-48d1-b031-b21ebf7dd276",
        "cursor": {
          "ref": "3e81c5c4-0954-41ce-af72-caf65043bd46",
          "length": 250,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "057a7171-1028-4478-8ab1-badcfae593de"
        },
        "item": {
          "id": "9aaf1bbc-cc80-48d1-b031-b21ebf7dd276",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "b1c1bae4-fe7c-4034-85cf-4400ea4344e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:91)"
            }
          }
        ]
      },
      {
        "id": "bf99cf9d-19b6-4784-8181-12bd3eab951a",
        "cursor": {
          "ref": "71060766-bd69-4622-bb49-b4ee8ef79eee",
          "length": 250,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "27c108e3-7cf1-4e0e-a0e5-d0a600c0a350"
        },
        "item": {
          "id": "bf99cf9d-19b6-4784-8181-12bd3eab951a",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "5f55414f-1c0b-4aa7-943b-f73056b107b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:92)"
            }
          }
        ]
      },
      {
        "id": "347de51b-6aab-4c89-9293-1e13a9d846e5",
        "cursor": {
          "ref": "813d0734-9f68-41b2-bdd7-d6703c2b5e31",
          "length": 250,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "a1aa51ce-6bf2-432c-a6f3-de71390787a7"
        },
        "item": {
          "id": "347de51b-6aab-4c89-9293-1e13a9d846e5",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "1137ad96-4029-4cc0-95e2-f27a394f9e5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:93)"
            }
          }
        ]
      },
      {
        "id": "f7a51d1c-9bb4-43ab-ab1c-9b6c7a9b88db",
        "cursor": {
          "ref": "3b3a70ed-3e98-480b-a5e9-2993112043a5",
          "length": 250,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "26d41e87-0b36-440b-97f6-a4964c3a5a2a"
        },
        "item": {
          "id": "f7a51d1c-9bb4-43ab-ab1c-9b6c7a9b88db",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "2876ceec-e9b9-4955-9c50-db1ca408b66e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 530
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:94)"
            }
          }
        ]
      },
      {
        "id": "41aa4621-aa95-4eb9-9ec9-5ebb2ba65852",
        "cursor": {
          "ref": "4c9c5bb4-df98-4234-9e54-0940dfd77a54",
          "length": 250,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "4c22ab0c-4d7c-4cdf-a1be-ddebc704098d"
        },
        "item": {
          "id": "41aa4621-aa95-4eb9-9ec9-5ebb2ba65852",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "4674a41c-ef4c-492a-955e-d9c967b5a3b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 530
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:95)"
            }
          }
        ]
      },
      {
        "id": "6fa929e3-3878-41cf-9c15-8ee135a3afdd",
        "cursor": {
          "ref": "2bd0bbe8-b5b0-475d-a35e-c89e1ac544ca",
          "length": 250,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "c39fae4b-3f21-4010-b508-dc799906deea"
        },
        "item": {
          "id": "6fa929e3-3878-41cf-9c15-8ee135a3afdd",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "167bc66b-6b13-47bd-9613-e6a22dda1180",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 530
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:96)"
            }
          }
        ]
      },
      {
        "id": "c740d785-b6f9-4cbd-a24f-db53bb0b2ec5",
        "cursor": {
          "ref": "1a117813-1601-4ef6-8f57-5c1be66c0d45",
          "length": 250,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "16a72b58-f49d-405a-be75-aa5c1b4d3e1c"
        },
        "item": {
          "id": "c740d785-b6f9-4cbd-a24f-db53bb0b2ec5",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "4fba3f50-9cd1-4ba5-8453-c9c4fedd372b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 530
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:97)"
            }
          }
        ]
      },
      {
        "id": "51c0eefd-cccc-406b-a76e-f59b29be659d",
        "cursor": {
          "ref": "49f46ad4-bdd6-40d1-83db-287e9dc65363",
          "length": 250,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "390c52cc-3c2b-454f-b497-47945caf9e1e"
        },
        "item": {
          "id": "51c0eefd-cccc-406b-a76e-f59b29be659d",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "0f8ba584-c091-4b71-ada8-dcd87a436505",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 530
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:98)"
            }
          }
        ]
      },
      {
        "id": "aff48c98-68a9-437d-a0e2-350e721a204f",
        "cursor": {
          "ref": "c8402663-4cf4-4d57-ab76-cd27567e86de",
          "length": 250,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "08dc6f33-3db7-4f5d-be9f-128046109662"
        },
        "item": {
          "id": "aff48c98-68a9-437d-a0e2-350e721a204f",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "2407a376-e29f-4f49-b671-71e2d6c469a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 530
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:99)"
            }
          }
        ]
      },
      {
        "id": "d01fe16f-4ca9-40b9-a850-9af54087a2bd",
        "cursor": {
          "ref": "7b9b607f-fd87-4924-8a8f-1e7e08c98680",
          "length": 250,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "1f17b0f0-3391-49e7-8a5d-48d876d22359"
        },
        "item": {
          "id": "d01fe16f-4ca9-40b9-a850-9af54087a2bd",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "c6231339-e1c9-48ec-8acd-c454a435abba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 530
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:100)"
            }
          }
        ]
      },
      {
        "id": "1d1f0110-883f-4d5d-bea2-bc6fb163860d",
        "cursor": {
          "ref": "64425e95-cb16-4030-82c6-3bed265d6bd3",
          "length": 250,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "0a188079-d3c2-47cf-9d0c-6e4876458d89"
        },
        "item": {
          "id": "1d1f0110-883f-4d5d-bea2-bc6fb163860d",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "f9d0a861-b009-4498-971c-2e644c9136b6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 31,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2c24745-96dc-47b8-aaba-6307f75b6968",
        "cursor": {
          "ref": "2faabf0c-37c8-48ba-8754-4d75edf2aa0a",
          "length": 250,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "a9ee3097-0dbf-4fc3-88f4-be115847cd24"
        },
        "item": {
          "id": "e2c24745-96dc-47b8-aaba-6307f75b6968",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "32915c5c-9d53-4af9-adbb-5c759b7b6962",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 143
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "974d46f8-256d-4b0c-8b4b-4f22096f5267",
        "cursor": {
          "ref": "460ca55d-8dd8-49ee-b9ea-c64a99c84b63",
          "length": 250,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "854508c7-e39b-4056-8e76-8b5804643c1e"
        },
        "item": {
          "id": "974d46f8-256d-4b0c-8b4b-4f22096f5267",
          "name": "credentials_issue"
        },
        "response": {
          "id": "3a46ed0f-14d1-4668-b781-89083b734a04",
          "status": "Created",
          "code": 201,
          "responseTime": 300,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3e469af-f618-43fd-a438-4c7f6318af92",
        "cursor": {
          "ref": "ecb4be6b-b1b1-4715-be9a-ae9c881e7f23",
          "length": 250,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "5bd5a6b0-63a3-4713-bd75-f744fc24b0e6"
        },
        "item": {
          "id": "a3e469af-f618-43fd-a438-4c7f6318af92",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "5588d3c8-27a4-41c0-8bc1-041937b8f6db",
          "status": "Created",
          "code": 201,
          "responseTime": 289,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "af93f7a2-7912-493f-8bf8-aada391d0ce7",
        "cursor": {
          "ref": "623e04f4-7f1c-47ba-97f0-8f4b0e6284dd",
          "length": 250,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "5cf86fa8-d6e6-466f-bc0c-f29543cc506a"
        },
        "item": {
          "id": "af93f7a2-7912-493f-8bf8-aada391d0ce7",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "c58b17d8-6242-43aa-9a2e-f3ac16137789",
          "status": "Created",
          "code": 201,
          "responseTime": 269,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "a18c5293-d023-4fb1-9732-f33abf1a930b",
        "cursor": {
          "ref": "eb080196-46a0-43b4-86eb-01ebae5b6030",
          "length": 250,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "5e6a0e31-de72-4d87-a9c5-7cee4c9b214b"
        },
        "item": {
          "id": "a18c5293-d023-4fb1-9732-f33abf1a930b",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "4956b9c8-4ab3-4bdc-8f69-a3ab7dcc7d34",
          "status": "Created",
          "code": 201,
          "responseTime": 324,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "5dc0a52f-3621-4662-bdb3-fb1217e94b47",
        "cursor": {
          "ref": "6b3e00a2-32ed-41cd-8ade-72e49032ff1a",
          "length": 250,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "5f0ab440-3ba8-4e17-b24b-0eb4a896fd2b"
        },
        "item": {
          "id": "5dc0a52f-3621-4662-bdb3-fb1217e94b47",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "c9a0f84e-85ce-4072-bf76-267baec887ea",
          "status": "Created",
          "code": 201,
          "responseTime": 276,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-07-13T00:39:52.507Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-07-13T00:39:52.507Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "49b9d853-4b57-4cb2-8cf7-d22f39198b60",
        "cursor": {
          "ref": "3ae5f9c3-e5ba-4982-8bae-15e4c407b23a",
          "length": 250,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "dea08500-fc9e-4eef-91f5-de638685c0e2"
        },
        "item": {
          "id": "49b9d853-4b57-4cb2-8cf7-d22f39198b60",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "aed9f822-99aa-4c1d-a6a1-6bd43a9b629b",
          "status": "Created",
          "code": 201,
          "responseTime": 262,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1879a05-d028-4c69-896b-ec51e54ea5a7",
        "cursor": {
          "ref": "9a2c9732-e60c-412d-ab03-1f922c92a867",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "7bfcaade-9116-4251-b9f9-d14d615b013f"
        },
        "item": {
          "id": "f1879a05-d028-4c69-896b-ec51e54ea5a7",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "e89568c0-8e48-4be9-9f31-939e1fe4d5c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:109)"
            }
          }
        ]
      },
      {
        "id": "b6e7ea64-1560-4977-b418-724a9a72bd88",
        "cursor": {
          "ref": "640f86e4-c845-41b7-83be-39b87f1c0edd",
          "length": 250,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "21808eb2-c7fc-4e58-9178-c1d64470d377"
        },
        "item": {
          "id": "b6e7ea64-1560-4977-b418-724a9a72bd88",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "57bfc312-236a-4e7c-80fa-d05aee5b72fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "9477bca3-3650-40d3-bf0d-23073903aa27",
        "cursor": {
          "ref": "9fa1a3f3-fcc1-4d9a-9c7a-e53249c8c6b3",
          "length": 250,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "9d29e9bb-0aaf-4976-86a0-f90801d516d0"
        },
        "item": {
          "id": "9477bca3-3650-40d3-bf0d-23073903aa27",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "e1b4d915-2980-4c7c-837b-861b70663eb9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "faed95b9-4646-4465-81fa-f144bfdc0033",
        "cursor": {
          "ref": "4e43eadb-3ec8-4a56-8e80-37b5079039a6",
          "length": 250,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "bc60cbfe-075e-432f-98f9-bbbfa9416e4a"
        },
        "item": {
          "id": "faed95b9-4646-4465-81fa-f144bfdc0033",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "ff05bb79-b220-4b70-96c5-98a4d3fd67d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "8b00265b-affe-44a8-8577-bded91e4e12e",
        "cursor": {
          "ref": "dead400f-1351-44b0-bd3c-70264b83a5b8",
          "length": 250,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "86529189-5b99-4d23-87c2-91f727eb2d81"
        },
        "item": {
          "id": "8b00265b-affe-44a8-8577-bded91e4e12e",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "2fd466b7-4c70-47e0-8056-7dc6918a1690",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "c3145ebc-a2b3-4f39-83a3-875cb8c92474",
        "cursor": {
          "ref": "36cffbe0-13dc-4139-8aac-0c112c31ec5e",
          "length": 250,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "8ed956b8-3e0f-438e-86cb-c56a0804cc9e"
        },
        "item": {
          "id": "c3145ebc-a2b3-4f39-83a3-875cb8c92474",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "f2647697-203a-4b47-bd4e-0233cedd64f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "ec781beb-5292-49a9-bead-64189fd7dfed",
        "cursor": {
          "ref": "7ec0c6ab-da5e-4c87-a4bd-b573ac1c4469",
          "length": 250,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "5bb074d5-dd3b-49fc-8f86-c2b7bdb7eaa3"
        },
        "item": {
          "id": "ec781beb-5292-49a9-bead-64189fd7dfed",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "f1be5dda-9dd2-4cba-a0fc-0934f42a488c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 140
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "09dea958-eacc-4683-8647-e592b03380d5",
        "cursor": {
          "ref": "feb2fd66-aad6-4afb-ac91-7a22d40c2c55",
          "length": 250,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "08b233bf-057c-4688-b217-005ec1defe81"
        },
        "item": {
          "id": "09dea958-eacc-4683-8647-e592b03380d5",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "31ef93b2-8085-484d-90b0-edf2df0ca622",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 220
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "f0124e35-e544-497f-adb9-acda8909990b",
        "cursor": {
          "ref": "a10479ce-476f-452a-87f9-0d02bbcc8fba",
          "length": 250,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "506f37b1-5821-4781-bb25-0eba3400118d"
        },
        "item": {
          "id": "f0124e35-e544-497f-adb9-acda8909990b",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "80919c71-b07a-4296-b847-a00d9864d7da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 220
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "dfb35822-974f-41f0-afb3-4a7f809632f8",
        "cursor": {
          "ref": "5d6aaee0-c150-4c7a-bb49-fe9060028ec4",
          "length": 250,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "1b0cebb4-b77f-4e79-805c-fcf65f222407"
        },
        "item": {
          "id": "dfb35822-974f-41f0-afb3-4a7f809632f8",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "80641b20-808d-45a2-9009-b120432f6bdc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 220
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "e8b969c7-7c81-4895-bba4-bbd603885ef9",
        "cursor": {
          "ref": "0aae1237-c446-4d40-861e-5d326137b99f",
          "length": 250,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "5a35c22c-048d-4264-93b9-1821754c144c"
        },
        "item": {
          "id": "e8b969c7-7c81-4895-bba4-bbd603885ef9",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "94d883cb-f3df-4d79-ba42-71d5f7f5641f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 118
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "741efa1d-b4c3-430c-b25d-61b9bf8fe95e",
        "cursor": {
          "ref": "82fbcb2d-6375-4f47-82f7-d51fdfb6ca88",
          "length": 250,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "88275138-f348-4c93-9d5a-a90e478f0311"
        },
        "item": {
          "id": "741efa1d-b4c3-430c-b25d-61b9bf8fe95e",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "7ed2cab7-4061-4302-8d7b-075f0b2f9d14",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 220
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "ddc094a9-1bac-4114-aeae-a20aaa2128bb",
        "cursor": {
          "ref": "fabd2203-2c3f-42b3-9f41-b02280f77061",
          "length": 250,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "dfb028c1-9a58-4240-9867-e4c1d76c983d"
        },
        "item": {
          "id": "ddc094a9-1bac-4114-aeae-a20aaa2128bb",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "253c9276-09b2-4e32-96a8-7c498f896f6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 188
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "3606a5de-eb6c-4528-b135-f71fa7d4f07e",
        "cursor": {
          "ref": "af862c75-2a25-433e-8411-dad4946a49a5",
          "length": 250,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "4188eb41-4c51-4cf0-9e78-427e114a66cb"
        },
        "item": {
          "id": "3606a5de-eb6c-4528-b135-f71fa7d4f07e",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "92e1bb9b-c946-41b5-b29c-640822509ae5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "df7e916e-c216-438e-8c0a-445dc8232c92",
        "cursor": {
          "ref": "115d2bc4-c379-4fa2-936b-f62c2ad9fcca",
          "length": 250,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "ceac0a73-6a75-48cd-a8b6-337050bb4d02"
        },
        "item": {
          "id": "df7e916e-c216-438e-8c0a-445dc8232c92",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "e68f8a50-ef64-47d1-9e28-a4c05477ce96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 149
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "5f3f1aab-3af7-4dc9-b311-3ff576d68ff1",
        "cursor": {
          "ref": "910b3077-3ccd-4821-96d6-d5d0ccfa5787",
          "length": 250,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "86de900a-a5ec-4775-b49c-7d5b751a8424"
        },
        "item": {
          "id": "5f3f1aab-3af7-4dc9-b311-3ff576d68ff1",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "0832e089-8e00-4182-b48e-2a01701daf9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 149
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "fa308aa5-dd66-4980-a9d0-182324f91f53",
        "cursor": {
          "ref": "33ce9725-f9b0-4bb3-8381-0929a4124cca",
          "length": 250,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "72a4c609-bc6e-43ae-a0b6-4d65210c22b4"
        },
        "item": {
          "id": "fa308aa5-dd66-4980-a9d0-182324f91f53",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "9fc74f71-c910-4360-b086-2598dc539ab4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 149
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "bd564590-f44e-4ddf-8e8b-1750535b5aec",
        "cursor": {
          "ref": "0e8bd4a8-1d09-48aa-885d-25aae95d3ff3",
          "length": 250,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "09a6d39b-c0c9-4ecf-9603-ee4568ff2e09"
        },
        "item": {
          "id": "bd564590-f44e-4ddf-8e8b-1750535b5aec",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "124f32ff-5676-4b9e-a282-e48b4d3e49c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 149
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "fda6c7ca-b8d8-49c3-8676-c705fc84dc77",
        "cursor": {
          "ref": "1464f857-7516-4fbf-ad80-a43315ed2e9b",
          "length": 250,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "f52ec9f2-a1fa-4f14-ba9d-52ed47375b52"
        },
        "item": {
          "id": "fda6c7ca-b8d8-49c3-8676-c705fc84dc77",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "74cddb32-b0ff-4efe-9e2a-332bc59cbc50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "452c72bb-105f-4200-8a96-05d184191302",
        "cursor": {
          "ref": "be54b34a-c207-4a57-a8e2-c6f17b84581e",
          "length": 250,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "362caca3-8a49-403b-883a-e6540e355098"
        },
        "item": {
          "id": "452c72bb-105f-4200-8a96-05d184191302",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "fc235baf-e1c4-4200-a2a1-6476db5db0e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "130b79c8-a585-453b-b679-92baf2e72a4b",
        "cursor": {
          "ref": "d5ca87af-7568-4a10-9499-d89986c54600",
          "length": 250,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "721ef35f-35d4-47f7-9ea3-f6bc589bd8ce"
        },
        "item": {
          "id": "130b79c8-a585-453b-b679-92baf2e72a4b",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "f776165f-3914-4b2f-8216-b0e4e263d5ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "afa4ba41-2501-4a70-aa8d-0fb193fd759b",
        "cursor": {
          "ref": "b5c4bf91-086f-460e-a480-c01b5793c36b",
          "length": 250,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "1e3c2628-7903-457c-875b-d6280203190e"
        },
        "item": {
          "id": "afa4ba41-2501-4a70-aa8d-0fb193fd759b",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "0bef95f4-1ad5-4675-9418-496b5e4e40ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "7fb3d28b-375f-4cea-aef4-1eeacc3da56c",
        "cursor": {
          "ref": "6a16423c-f877-412a-b8cb-59fcd1e92701",
          "length": 250,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "c0213b1d-819a-4130-9c0f-084eaae6069c"
        },
        "item": {
          "id": "7fb3d28b-375f-4cea-aef4-1eeacc3da56c",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "771db50c-f80e-44cf-aed2-e92f001f1f01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "02e665ef-1d92-43e6-95c9-a2f87976acf1",
        "cursor": {
          "ref": "1f80a469-9dcf-4628-acbf-6164247cabc9",
          "length": 250,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "6a45688e-e187-49fb-926f-13ea269e1137"
        },
        "item": {
          "id": "02e665ef-1d92-43e6-95c9-a2f87976acf1",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "58237a1f-75ef-4717-9d1c-a785d5bdb3f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "5ed80682-6e3a-4d42-b125-330618d5d54f",
        "cursor": {
          "ref": "a7b9c88f-ac4b-421d-96e4-5cdf4bc92550",
          "length": 250,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "5b9db4b5-4bc5-493f-9c21-b470c1608fde"
        },
        "item": {
          "id": "5ed80682-6e3a-4d42-b125-330618d5d54f",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "6719b49a-5fdf-4012-ac9b-63e938832547",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "b51adaf2-c901-4414-aae0-f728f0523570",
        "cursor": {
          "ref": "ba69f564-5dc4-4a76-8322-06527e355cb0",
          "length": 250,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "c6c1f2e1-6df5-482c-8925-ea9b846f939c"
        },
        "item": {
          "id": "b51adaf2-c901-4414-aae0-f728f0523570",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "e7706826-e4da-4b38-aedb-89d5b7284ca2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "bfa97aa4-2a7f-4716-bf19-7644968d6e90",
        "cursor": {
          "ref": "3dfbfabf-1171-49ec-b7da-66b1c702b6f4",
          "length": 250,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "559fc303-57d0-4ad5-bf0d-e1a97841e545"
        },
        "item": {
          "id": "bfa97aa4-2a7f-4716-bf19-7644968d6e90",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "a195c9f4-c90b-48f2-b45d-a706f6e91e2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "8f255fab-9d8b-4a57-9168-b05aaf7134a0",
        "cursor": {
          "ref": "00b216d2-0fd1-4749-869c-23186201255c",
          "length": 250,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "64a7155f-4afc-4c44-b3dd-5d47d98d2170"
        },
        "item": {
          "id": "8f255fab-9d8b-4a57-9168-b05aaf7134a0",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "650fe513-2630-4a85-814a-e5839b96950c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "e8f158b5-83f3-48a7-99f0-0b07111237d4",
        "cursor": {
          "ref": "5f5e32e2-3438-462f-bad5-49f89383a683",
          "length": 250,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "c978de33-2a0f-4d8a-a1fd-7d743ce99d29"
        },
        "item": {
          "id": "e8f158b5-83f3-48a7-99f0-0b07111237d4",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "4ef224b2-e88a-441a-870f-1c008e540a09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "826bc820-baa0-4f59-a22b-7e886d3018c1",
        "cursor": {
          "ref": "fc893298-95ab-4f3c-b9ae-fad2bd7f9310",
          "length": 250,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "a973e443-335b-4b34-a415-ae4bcaec1fc4"
        },
        "item": {
          "id": "826bc820-baa0-4f59-a22b-7e886d3018c1",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "91e124b9-4d75-48b4-b3eb-e1d8d49b5677",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "ad9cf0b9-dab3-4d83-881c-bbbae2d66e4b",
        "cursor": {
          "ref": "ac2995e8-e6e0-4d8a-b487-d36385c489f0",
          "length": 250,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "09ec5ecf-4e65-4607-87ed-868801c7f1d5"
        },
        "item": {
          "id": "ad9cf0b9-dab3-4d83-881c-bbbae2d66e4b",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "424617d5-d3b9-4301-aedd-ac2d381fbd88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "38a19bc6-940d-4a5f-bbc6-f4b29235dc66",
        "cursor": {
          "ref": "c5ef75a3-0dcd-4c0b-b5f0-8031b9fcef93",
          "length": 250,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "22b1dd55-ad08-483a-98f2-e5172550f365"
        },
        "item": {
          "id": "38a19bc6-940d-4a5f-bbc6-f4b29235dc66",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "8c1cae08-4b5d-44e2-9174-af57fd0cbc5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "bad4766c-db51-4fd7-90be-db98c238cdcf",
        "cursor": {
          "ref": "a1312124-5e29-43a4-9712-8aedc7916479",
          "length": 250,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "2f8d0342-41dc-40f7-a61d-830451204899"
        },
        "item": {
          "id": "bad4766c-db51-4fd7-90be-db98c238cdcf",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "b26ad5fe-043e-4c85-a822-0b374677a757",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "05632e1e-3491-45ab-b312-4e7603c21022",
        "cursor": {
          "ref": "6edd5ebf-9342-4cd9-93f2-23b4da186010",
          "length": 250,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "8ec86491-c517-46de-981d-46201d46799a"
        },
        "item": {
          "id": "05632e1e-3491-45ab-b312-4e7603c21022",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "4f05aacb-0f13-4bea-b522-c7758388fc8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "10b1679e-a906-4292-a131-fdcfd0de6633",
        "cursor": {
          "ref": "b6cc6819-49a9-475f-afb6-0eec36fe7dd2",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "91cb3397-d85d-40c6-aa9d-d8e4c0aa9a98"
        },
        "item": {
          "id": "10b1679e-a906-4292-a131-fdcfd0de6633",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "1840e5fe-ff47-448e-bdd4-3c74178bd70f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "68d22442-8ba0-411d-a30e-951adb90ed4f",
        "cursor": {
          "ref": "02d07ee8-8e43-40e5-8c8c-7083e9b779b2",
          "length": 250,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "c5e3782e-3b0d-418d-886f-4ae3c28652a3"
        },
        "item": {
          "id": "68d22442-8ba0-411d-a30e-951adb90ed4f",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "c2df9af3-8483-4049-8aeb-f56dd73e02ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:144)"
            }
          }
        ]
      },
      {
        "id": "82c0d441-cb7b-46c8-a1c9-c147eca204c6",
        "cursor": {
          "ref": "062656ce-ea73-4880-bd10-269215cd880c",
          "length": 250,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "43649b65-c52b-4ec7-8750-7a728d9548e1"
        },
        "item": {
          "id": "82c0d441-cb7b-46c8-a1c9-c147eca204c6",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "f26c9a3b-d6c9-4c8e-a109-8407ad5b35d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:145)"
            }
          }
        ]
      },
      {
        "id": "88706ed2-ffc7-4418-8435-4f95d1497873",
        "cursor": {
          "ref": "40053253-4ed0-4d86-92d4-436704973c20",
          "length": 250,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "38a83d43-df43-481e-bf9d-28cc4e9c1991"
        },
        "item": {
          "id": "88706ed2-ffc7-4418-8435-4f95d1497873",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "c9b24a9d-866e-4df3-840c-52b16c1830b3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 27,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31cf936e-97c9-481e-ac86-43c8090210b2",
        "cursor": {
          "ref": "ea57773a-a47c-4212-b261-5eabbdc2b14c",
          "length": 250,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "d0b7d18f-2dd9-4014-a11c-2307b1c91dcd"
        },
        "item": {
          "id": "31cf936e-97c9-481e-ac86-43c8090210b2",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "70bcfaa2-74cf-45d3-aae7-fbd8532c8ec5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:147)"
            }
          }
        ]
      },
      {
        "id": "90731b45-a7ce-4174-b6f5-007d35babade",
        "cursor": {
          "ref": "60eb3ccb-5cfd-46e4-b335-f983e812350a",
          "length": 250,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "fc5469a6-26ec-4f00-9395-f963e4d974d6"
        },
        "item": {
          "id": "90731b45-a7ce-4174-b6f5-007d35babade",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "fb02bf26-d39b-424f-9e81-149c7de5d71d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:148)"
            }
          }
        ]
      },
      {
        "id": "839aef6d-6c40-48d1-97f7-7175cd20b11c",
        "cursor": {
          "ref": "5246d5fc-50ea-4c17-aaf7-bc3aefc2dd1c",
          "length": 250,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "f49364b6-207b-44fd-a0d4-475d2742f25c"
        },
        "item": {
          "id": "839aef6d-6c40-48d1-97f7-7175cd20b11c",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "1c20af2a-9788-47a8-a6f7-57d840293e02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:149)"
            }
          }
        ]
      },
      {
        "id": "9e1ea4c0-7e29-4aef-8e9f-f44263d83510",
        "cursor": {
          "ref": "9e275593-99f3-47ad-a0fe-a482902d8652",
          "length": 250,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "bb689bcb-95b6-4b5e-99c8-c6035d2a9a5c"
        },
        "item": {
          "id": "9e1ea4c0-7e29-4aef-8e9f-f44263d83510",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "cce3dc39-4e31-42c8-af45-553e1d162815",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:150)"
            }
          }
        ]
      },
      {
        "id": "7c5552d2-c0a9-46e3-86ed-925add81e867",
        "cursor": {
          "ref": "24f1f7ff-f05d-4849-a8e9-eb07468d38b8",
          "length": 250,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "7923678a-a2eb-40cb-bd53-e79f5794f68a"
        },
        "item": {
          "id": "7c5552d2-c0a9-46e3-86ed-925add81e867",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "aec47f76-94c6-4b93-9e04-aa5f34b4286d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:151)"
            }
          }
        ]
      },
      {
        "id": "973b6f7d-d7e3-4ac3-b133-528eac1cb775",
        "cursor": {
          "ref": "c4f1e380-cff8-4418-8e77-fd2aec159403",
          "length": 250,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "7fba8075-0fc6-4a80-b63d-3bb0c1fa0f7d"
        },
        "item": {
          "id": "973b6f7d-d7e3-4ac3-b133-528eac1cb775",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "31a8a580-ad75-446e-a6e9-9382ff6526de",
          "status": "OK",
          "code": 200,
          "responseTime": 83,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "c9cc61fa-ca8c-4eca-9bfe-9cbfebd5acb5",
        "cursor": {
          "ref": "67956ad1-d8dd-4bdb-8ee3-329a28dc65b4",
          "length": 250,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "b569a6ef-07ba-4ae9-80d3-48f14ae66e8c"
        },
        "item": {
          "id": "c9cc61fa-ca8c-4eca-9bfe-9cbfebd5acb5",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "fce6bc82-8bc5-4577-94b3-d3e205677fa3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 234
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:153)"
            }
          }
        ]
      },
      {
        "id": "34246ed7-2e6f-4edb-aca0-62777e282a5d",
        "cursor": {
          "ref": "b68e9437-e731-4e96-b081-f726da302f23",
          "length": 250,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "873147da-35c2-4da0-bd49-5c1755aa5c2d"
        },
        "item": {
          "id": "34246ed7-2e6f-4edb-aca0-62777e282a5d",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "5c41cd2c-08ed-46e7-8503-3bd481bab10c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:154)"
            }
          }
        ]
      },
      {
        "id": "330605a5-1edf-4ccb-818c-9a4373a4b612",
        "cursor": {
          "ref": "d917191c-d6e1-4b7d-852f-d1f9fab8bc53",
          "length": 250,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "1774fc80-4271-48e5-abf9-444bad71389d"
        },
        "item": {
          "id": "330605a5-1edf-4ccb-818c-9a4373a4b612",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "9fc144ca-0026-49ac-a7ec-1b3075aa1884",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:155)"
            }
          }
        ]
      },
      {
        "id": "d66eb7c3-d41f-4cfd-b979-d3391ea982e0",
        "cursor": {
          "ref": "8d5cd058-7947-4ec1-9918-6673e87ceb4e",
          "length": 250,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "7579a29d-cbe0-4436-b748-0f6fc69ddfd0"
        },
        "item": {
          "id": "d66eb7c3-d41f-4cfd-b979-d3391ea982e0",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "e406979c-20f1-4ad2-88f3-b1fac071b22d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:156)"
            }
          }
        ]
      },
      {
        "id": "393d169f-aac8-4604-9c86-9e58ec42057e",
        "cursor": {
          "ref": "ffc0ba10-b711-44ad-852f-51760288b47f",
          "length": 250,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "c43be8f3-fb7b-4a24-a7ba-9c3e330d450b"
        },
        "item": {
          "id": "393d169f-aac8-4604-9c86-9e58ec42057e",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "bbb10025-cbeb-4c96-9d99-4d7095cfebb8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 234
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:157)"
            }
          }
        ]
      },
      {
        "id": "d4628a2f-df15-40ec-ba62-09b770464663",
        "cursor": {
          "ref": "70c431bf-fdd6-4d04-bbc7-1e4d100e6216",
          "length": 250,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "5905e164-ae7c-4d81-ae6f-ac7d5cf41f9a"
        },
        "item": {
          "id": "d4628a2f-df15-40ec-ba62-09b770464663",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "4f5061ef-3bfb-4478-80a7-304cca201445",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:158)"
            }
          }
        ]
      },
      {
        "id": "522c8fa4-7afe-4437-a883-5e05473ab9f9",
        "cursor": {
          "ref": "565babc4-dbe6-4056-92b0-2b2f50c4f2bd",
          "length": 250,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "340dd770-9bbf-48af-9277-578ae23d8ee2"
        },
        "item": {
          "id": "522c8fa4-7afe-4437-a883-5e05473ab9f9",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "7c60392d-04c2-4078-9129-99d41efa8267",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 181
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:159)"
            }
          }
        ]
      },
      {
        "id": "669687aa-7c90-412d-b265-ac377cb99fdf",
        "cursor": {
          "ref": "249933b7-0624-4f44-bb21-b720c1928760",
          "length": 250,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "71415e6d-faa4-46c1-bbe1-d05a21ccaa61"
        },
        "item": {
          "id": "669687aa-7c90-412d-b265-ac377cb99fdf",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "2fbe0027-8d1e-4257-ae80-89caee22fe75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 181
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:160)"
            }
          }
        ]
      },
      {
        "id": "9aeed4e9-99b5-4701-bd88-45d98712a616",
        "cursor": {
          "ref": "c97c962b-a509-4d4c-b3bb-f0468eaecd19",
          "length": 250,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "778dae52-efdf-4359-af5a-fa1dc4144cfb"
        },
        "item": {
          "id": "9aeed4e9-99b5-4701-bd88-45d98712a616",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "bd2becdb-38d5-46a4-9ae8-576a44591f0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 181
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:161)"
            }
          }
        ]
      },
      {
        "id": "145ecbf7-d9fa-40be-981e-449475933431",
        "cursor": {
          "ref": "62f5e1c8-0e50-47fa-b63e-cc8c3ec0825e",
          "length": 250,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "edb7c0fa-81ed-4e5a-8a1d-a9667e5e39ac"
        },
        "item": {
          "id": "145ecbf7-d9fa-40be-981e-449475933431",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "ece5686c-1f33-40c5-ba73-00b0bc4de164",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 181
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:162)"
            }
          }
        ]
      },
      {
        "id": "e85ffd36-ed38-4185-b3e3-57b42f6f6b97",
        "cursor": {
          "ref": "0633f434-efe6-4b89-8609-9a53dc18865f",
          "length": 250,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "4f331c3c-40b0-4517-b3a6-0993da8801fb"
        },
        "item": {
          "id": "e85ffd36-ed38-4185-b3e3-57b42f6f6b97",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "0ad5e5aa-cd21-474c-8fa2-2349533ff51e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:163)"
            }
          }
        ]
      },
      {
        "id": "53ea52e0-e8e7-49ba-b884-28eca893cfdc",
        "cursor": {
          "ref": "e26a4239-9ae8-4cec-9a35-2f4cc40be92b",
          "length": 250,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "cc09d63f-6c8b-466e-86a8-c34bdfa46815"
        },
        "item": {
          "id": "53ea52e0-e8e7-49ba-b884-28eca893cfdc",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "5b1fd1ad-cb04-4105-a204-44b14c09bf4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:164)"
            }
          }
        ]
      },
      {
        "id": "b0fb4093-293d-4b03-a7e6-c637153dd3c8",
        "cursor": {
          "ref": "893482f7-afb1-4370-9bec-60c04a7db8a6",
          "length": 250,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "22b9ba77-5e3e-4045-8b58-a5a050f1838a"
        },
        "item": {
          "id": "b0fb4093-293d-4b03-a7e6-c637153dd3c8",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "3b43bf40-8cde-47c8-9430-d0a647126da7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:165)"
            }
          }
        ]
      },
      {
        "id": "0e0a6c25-edf6-43c1-89a3-2283aff7d652",
        "cursor": {
          "ref": "1c4e2167-2d87-4978-a760-47bf9ebb487a",
          "length": 250,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "283c7095-1d8f-42e1-83bc-356f9ab02281"
        },
        "item": {
          "id": "0e0a6c25-edf6-43c1-89a3-2283aff7d652",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "6df1fc68-5609-49ed-982a-2839058362a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:166)"
            }
          }
        ]
      },
      {
        "id": "b0cb50a3-52c5-4097-802d-1a63353bea25",
        "cursor": {
          "ref": "8f522026-abe7-4cfc-b317-57f94cf89de1",
          "length": 250,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "6254dbd3-0a75-416a-9252-30716d83d05a"
        },
        "item": {
          "id": "b0cb50a3-52c5-4097-802d-1a63353bea25",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "c20ffbd9-bf58-455f-9d26-2f4f9186ea3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:167)"
            }
          }
        ]
      },
      {
        "id": "01f7d38f-52f8-4e59-a845-18e3703d8918",
        "cursor": {
          "ref": "93240ae2-b587-4e27-adcc-e4074834411a",
          "length": 250,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "a3e93aa9-37ef-4fb9-bf0c-d7cc05365b35"
        },
        "item": {
          "id": "01f7d38f-52f8-4e59-a845-18e3703d8918",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "7f40c039-caae-475e-98bd-72bfe424a8c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:168)"
            }
          }
        ]
      },
      {
        "id": "52f5941d-9ffa-4389-a798-59d915b75a86",
        "cursor": {
          "ref": "5cfa18e4-916c-4ac2-bb38-0b3c3571e05f",
          "length": 250,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "75cb78dc-bbb3-4003-b1ed-f3c6ad34ab72"
        },
        "item": {
          "id": "52f5941d-9ffa-4389-a798-59d915b75a86",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "1baab5d4-dc04-4ed4-80d1-2d847341c02a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:169)"
            }
          }
        ]
      },
      {
        "id": "9b6a9dc0-62f1-4ed8-bcb6-5dd5efe8c009",
        "cursor": {
          "ref": "cf33849f-c71b-487b-b552-853bde9ad541",
          "length": 250,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "26f71f6c-5b90-4b03-89d0-c0a6bf3fc959"
        },
        "item": {
          "id": "9b6a9dc0-62f1-4ed8-bcb6-5dd5efe8c009",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "c1ec64c1-e0fa-4553-9066-fc5fe10d4cfd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:170)"
            }
          }
        ]
      },
      {
        "id": "4d13b424-5eda-41e3-b535-93310f0eaeb6",
        "cursor": {
          "ref": "b15e1300-e719-4a0a-abbe-40b94392365a",
          "length": 250,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "377cc688-7bad-4e60-a177-12300c909f58"
        },
        "item": {
          "id": "4d13b424-5eda-41e3-b535-93310f0eaeb6",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "87fa98a9-37da-4df7-8d46-35edd44618b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:171)"
            }
          }
        ]
      },
      {
        "id": "30347101-79c5-495c-848e-ef9ee4792518",
        "cursor": {
          "ref": "32e04fb3-291a-4a50-bb12-dbf5bfd89126",
          "length": 250,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "7f0a0a40-996a-4d39-abd5-43768134f390"
        },
        "item": {
          "id": "30347101-79c5-495c-848e-ef9ee4792518",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "4936ab36-15c4-4bad-bfc9-80bb6885481a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:172)"
            }
          }
        ]
      },
      {
        "id": "193e0eb2-9a03-42ff-8d05-99ded0608b93",
        "cursor": {
          "ref": "c343d51a-66fa-464f-a9fe-3e972524c9ba",
          "length": 250,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "a4e1a486-f5f4-4ad5-a2f7-4616690b5485"
        },
        "item": {
          "id": "193e0eb2-9a03-42ff-8d05-99ded0608b93",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "9591164e-f6de-4b72-b7cc-27ba8f533c22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:173)"
            }
          }
        ]
      },
      {
        "id": "d2e752bd-4c4a-457c-a295-e13a121ee93c",
        "cursor": {
          "ref": "bd0917b7-c21c-45b7-873f-39050114fc4e",
          "length": 250,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "e1f9129c-15dd-4eda-8962-529eb98d2d81"
        },
        "item": {
          "id": "d2e752bd-4c4a-457c-a295-e13a121ee93c",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "3f5c03e0-ebef-4a85-bf2f-4d46d04765cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 113
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:174)"
            }
          }
        ]
      },
      {
        "id": "81e34feb-a6ae-4f3a-a8b8-5de364bd02b8",
        "cursor": {
          "ref": "696c11b4-5793-4e37-a4f9-25b37bd343e5",
          "length": 250,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "1f6ba17a-22d8-495a-a23c-eec6af823af1"
        },
        "item": {
          "id": "81e34feb-a6ae-4f3a-a8b8-5de364bd02b8",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "5a2d3e50-4a86-41fd-a5da-05d7fbf60d0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 113
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:175)"
            }
          }
        ]
      },
      {
        "id": "c13a11f7-b0f3-4dcf-8a9c-eadc47dee1e0",
        "cursor": {
          "ref": "d9110101-e0b4-4707-91bf-da5087b574b7",
          "length": 250,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "30655040-9660-4e35-ae7e-2386a8f8b997"
        },
        "item": {
          "id": "c13a11f7-b0f3-4dcf-8a9c-eadc47dee1e0",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "725c4512-a79d-4225-a76e-fe825f28529a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:176)"
            }
          }
        ]
      },
      {
        "id": "b4c03e81-3db4-440c-aa3f-ccf76152d64e",
        "cursor": {
          "ref": "ae6fe86b-8668-495d-8bbd-16092ce7f4c8",
          "length": 250,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "a0b5cf55-0547-452c-ae23-4e9f0d17743e"
        },
        "item": {
          "id": "b4c03e81-3db4-440c-aa3f-ccf76152d64e",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "d3de1c34-2d8d-43f8-803a-4b380798ff06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:177)"
            }
          }
        ]
      },
      {
        "id": "642d5f8e-2151-4052-be0d-c4de2b43dca9",
        "cursor": {
          "ref": "fcffd93e-ce01-423b-8556-886f6dd4f1e3",
          "length": 250,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "9c205c98-b025-4bc8-aa7c-755fa9dff60a"
        },
        "item": {
          "id": "642d5f8e-2151-4052-be0d-c4de2b43dca9",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "422b8cf2-61de-434b-823a-6ffb969e4e61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:178)"
            }
          }
        ]
      },
      {
        "id": "6c793087-954c-48e0-bf48-f7b04f31f502",
        "cursor": {
          "ref": "b2721787-e3b4-42fc-a724-2facfa839fd4",
          "length": 250,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "ff644547-1963-4497-857f-e32872c04aeb"
        },
        "item": {
          "id": "6c793087-954c-48e0-bf48-f7b04f31f502",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "a3cc46ef-9090-464c-ae49-db2a5a5c2ebe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:179)"
            }
          }
        ]
      },
      {
        "id": "500f9231-a2a9-4fff-9a79-3ccfd471d5fd",
        "cursor": {
          "ref": "3e92970e-1760-48b7-ae70-d055c14ee278",
          "length": 250,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "0a0af1ee-f5d1-4cfd-a7bd-9dad34550974"
        },
        "item": {
          "id": "500f9231-a2a9-4fff-9a79-3ccfd471d5fd",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "f419483a-91ca-4e0b-a0e1-98fc929cca9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:180)"
            }
          }
        ]
      },
      {
        "id": "7c1ccf0e-4f6e-460e-a60a-e94a33392390",
        "cursor": {
          "ref": "755df6b2-ec30-49fb-b2eb-d552cbbe6e56",
          "length": 250,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "3d65ff18-921a-4ce0-91f5-1a54f4f105e0"
        },
        "item": {
          "id": "7c1ccf0e-4f6e-460e-a60a-e94a33392390",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "7d71b7b4-405c-4baf-b957-1afdc9c24727",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 102
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:181)"
            }
          }
        ]
      },
      {
        "id": "463b1e03-62a5-4a06-8a45-039e7faa6d5d",
        "cursor": {
          "ref": "16d21d5a-5ec2-46fc-898b-e1f45c4ed505",
          "length": 250,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "e4c4a346-829e-4ed4-a2da-208b5400be96"
        },
        "item": {
          "id": "463b1e03-62a5-4a06-8a45-039e7faa6d5d",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "96b269c7-3c51-44d2-8d58-2b7686f53252",
          "status": "OK",
          "code": 200,
          "responseTime": 84,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "85807414-d485-4aee-b107-643c9c6d4eb1",
        "cursor": {
          "ref": "66ccc2e4-f6ad-4aa7-921f-20add1b14dd1",
          "length": 250,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "8127baeb-6014-43f4-9f6d-6b62f637b6a0"
        },
        "item": {
          "id": "85807414-d485-4aee-b107-643c9c6d4eb1",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "95d3784d-49d9-4a93-ae38-526a9121876b",
          "status": "OK",
          "code": 200,
          "responseTime": 80,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "5cefbfa8-e649-4668-9e10-0e6947860407",
        "cursor": {
          "ref": "bd3835ea-7a7c-4ec8-b04c-94d1906f47df",
          "length": 250,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "890a5be1-a314-4b7a-b58d-f8d7e2456bcb"
        },
        "item": {
          "id": "5cefbfa8-e649-4668-9e10-0e6947860407",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "48adfd4e-3675-403e-94b9-12d2eb8892c3",
          "status": "OK",
          "code": 200,
          "responseTime": 91,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "95c25756-4eb9-47f6-9fde-34f109745f04",
        "cursor": {
          "ref": "2f703c40-b35f-4b33-9289-deccf080ca2d",
          "length": 250,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "9eeb2e0a-197e-41f8-9ed0-841475e33528"
        },
        "item": {
          "id": "95c25756-4eb9-47f6-9fde-34f109745f04",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "b87ab0ba-7ce1-4972-9242-834e178e3ca2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 102
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "1c356925-c0be-41ff-9cee-5e16132e3bfe",
        "cursor": {
          "ref": "20d9e853-7faf-4a67-8458-29532426a0e4",
          "length": 250,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "6b19eba0-849b-41f1-8765-a950ff190be5"
        },
        "item": {
          "id": "1c356925-c0be-41ff-9cee-5e16132e3bfe",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "4365aec4-f58b-495f-8989-77001350479f",
          "status": "OK",
          "code": 200,
          "responseTime": 91,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "2b12a8d2-a1ff-48cf-905c-ee53b49f6883",
        "cursor": {
          "ref": "20a0908a-478b-4b5c-8398-638132cc0bc1",
          "length": 250,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "c58feba6-100f-4150-b4b8-8a341ac5d3aa"
        },
        "item": {
          "id": "2b12a8d2-a1ff-48cf-905c-ee53b49f6883",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "927ba45b-26d5-40a8-877f-1c2c2ad719ed",
          "status": "OK",
          "code": 200,
          "responseTime": 86,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "80ed8ac2-0725-4442-a745-9b914fe27544",
        "cursor": {
          "ref": "c5ad017d-8568-48db-8918-5738f209856b",
          "length": 250,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "1fef9fba-61ae-4955-a79c-cfaaca5439ed"
        },
        "item": {
          "id": "80ed8ac2-0725-4442-a745-9b914fe27544",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "c8818520-af53-4c5f-9ed2-9430aed9464e",
          "status": "OK",
          "code": 200,
          "responseTime": 85,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "c911adeb-55a9-46ad-82fd-ad02c3665159",
        "cursor": {
          "ref": "0f3cdd7c-30c6-4730-8c43-ed8e0cea898e",
          "length": 250,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "1aed5bfd-78ed-452d-b5e3-9de38deb2bd6"
        },
        "item": {
          "id": "c911adeb-55a9-46ad-82fd-ad02c3665159",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "e87fabb5-2c77-48e7-9691-d46d6f29a567",
          "status": "OK",
          "code": 200,
          "responseTime": 87,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "704b89e3-bd0c-4557-abea-10df9eb6bf53",
        "cursor": {
          "ref": "7ed87689-5e6b-4da0-8ef7-ffe2f1cbc580",
          "length": 250,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "6ed0aeb0-1862-4b78-ae8e-337197550ee5"
        },
        "item": {
          "id": "704b89e3-bd0c-4557-abea-10df9eb6bf53",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "54d958b5-a6e1-4649-8b54-19f404119402",
          "status": "OK",
          "code": 200,
          "responseTime": 82,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "26742e68-dfd1-47b4-96d1-d0d518c5fa88",
        "cursor": {
          "ref": "d28e4cbc-be6a-4d80-8e7b-dee954441fc6",
          "length": 250,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "7f7b00b0-cb4f-4b5b-9a76-1bfff35f0c01"
        },
        "item": {
          "id": "26742e68-dfd1-47b4-96d1-d0d518c5fa88",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "8a1d0533-06e8-4c38-ae70-c53fea7a3782",
          "status": "OK",
          "code": 200,
          "responseTime": 78,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "ea534a07-5aeb-4f3b-9fa7-8d0b64097a97",
        "cursor": {
          "ref": "43479a1b-edc8-4065-8633-bb3e4a32826e",
          "length": 250,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "e5d15fe4-28b2-4513-98f6-0cf9bcf1e0fd"
        },
        "item": {
          "id": "ea534a07-5aeb-4f3b-9fa7-8d0b64097a97",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "53d95f32-2a40-44d3-899f-6bb995aaca46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 181
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:192)"
            }
          }
        ]
      },
      {
        "id": "33cab3ec-6237-409a-aeef-a58afd59a33b",
        "cursor": {
          "ref": "70e40993-e8d8-4178-b53f-4d609415bee7",
          "length": 250,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "1a3f88cd-c93d-4f26-a86c-f351c014a725"
        },
        "item": {
          "id": "33cab3ec-6237-409a-aeef-a58afd59a33b",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "9e08d7d5-aaac-4c4b-afd8-a3ec2281c3e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 125
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:193)"
            }
          }
        ]
      },
      {
        "id": "724b1e85-1c2a-4fc3-ba5f-e8c96c2e76e8",
        "cursor": {
          "ref": "3ca46975-288d-4c13-8695-f81fa698ef4b",
          "length": 250,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "bcfb671c-7819-42f3-ae7a-955c881169a1"
        },
        "item": {
          "id": "724b1e85-1c2a-4fc3-ba5f-e8c96c2e76e8",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "bf4737dd-b169-4295-8338-90bef9ce18b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 125
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:194)"
            }
          }
        ]
      },
      {
        "id": "407edc2b-9984-4ce5-8b66-e792a9be655f",
        "cursor": {
          "ref": "2dd7b929-bc10-4a19-ae4c-5b3aeeddd284",
          "length": 250,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "738c783f-2648-49a7-a562-ad4f04da7c0e"
        },
        "item": {
          "id": "407edc2b-9984-4ce5-8b66-e792a9be655f",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "53fae75e-4eca-435f-a3e9-16287ff9a5e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 125
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:195)"
            }
          }
        ]
      },
      {
        "id": "2bbd4364-76f4-4629-a968-6b4d1a8936f7",
        "cursor": {
          "ref": "0599e1c9-f0ae-445d-b211-170c403492ff",
          "length": 250,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "6dc4b29f-ab1f-415e-80aa-005b17c91f78"
        },
        "item": {
          "id": "2bbd4364-76f4-4629-a968-6b4d1a8936f7",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "a28ef8eb-7189-4022-b680-54652aaa4523",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 181
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:196)"
            }
          }
        ]
      },
      {
        "id": "70c9ad1b-85ed-4a14-946c-b0a168d4d88d",
        "cursor": {
          "ref": "247010bc-11f0-48c6-ad55-6ee9d4699676",
          "length": 250,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "42bdb406-8ac9-4814-9578-30add24da182"
        },
        "item": {
          "id": "70c9ad1b-85ed-4a14-946c-b0a168d4d88d",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "278481df-08c0-48d4-ba03-4919616f1e70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 125
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:197)"
            }
          }
        ]
      },
      {
        "id": "21792ad8-ee7a-4a25-87f3-52fbbfabe0f8",
        "cursor": {
          "ref": "2b436141-0944-4a5f-98ac-6a5ebb54bceb",
          "length": 250,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "6b77488c-fb22-4722-9a93-da9ec77e7c84"
        },
        "item": {
          "id": "21792ad8-ee7a-4a25-87f3-52fbbfabe0f8",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "dda2a2e7-33a4-4daf-a7e3-62fbdb2802dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 125
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:198)"
            }
          }
        ]
      },
      {
        "id": "616c3888-e630-46b0-bf48-ab8946b7bfb5",
        "cursor": {
          "ref": "1489878f-fbb3-4001-9984-2ed0500d0a4e",
          "length": 250,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "1a3dfc03-0440-4922-beab-047bbc9c515a"
        },
        "item": {
          "id": "616c3888-e630-46b0-bf48-ab8946b7bfb5",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "e0b33ff6-c84b-4efc-9397-dddcbfef0573",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:199)"
            }
          }
        ]
      },
      {
        "id": "18fda501-33dd-453c-9774-e10f6b5cefb4",
        "cursor": {
          "ref": "34be6a59-2e7c-4148-92f8-f91ee97ba6a7",
          "length": 250,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "71628c46-a698-4393-bde8-84233ac313d9"
        },
        "item": {
          "id": "18fda501-33dd-453c-9774-e10f6b5cefb4",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "b154c902-0e0b-47af-95f8-1e121d3f740c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:200)"
            }
          }
        ]
      },
      {
        "id": "8022afc1-676b-4f8c-9059-ec0bd371efe4",
        "cursor": {
          "ref": "3326fc76-9bc2-4c51-956f-766442f18fc4",
          "length": 250,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "d75b9587-bb43-41e7-8c03-ff1522028ca8"
        },
        "item": {
          "id": "8022afc1-676b-4f8c-9059-ec0bd371efe4",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "6cbee626-41f6-4376-b68f-15ec1eeab552",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 199
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:201)"
            }
          }
        ]
      },
      {
        "id": "7404428d-c985-4ac1-97d6-362748ca2b3e",
        "cursor": {
          "ref": "9bb6e5bf-82e2-484f-84af-3522fe63f6ea",
          "length": 250,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "50917359-4c46-4629-9049-b25ebe0a9d09"
        },
        "item": {
          "id": "7404428d-c985-4ac1-97d6-362748ca2b3e",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "68ea2d5c-0ffb-44bb-af22-2306208743f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 199
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:202)"
            }
          }
        ]
      },
      {
        "id": "3dae250c-0445-406f-9ca1-9efa44399889",
        "cursor": {
          "ref": "143d0812-f4b0-474a-938d-2ba060e5b099",
          "length": 250,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "6f09e7da-19e8-4812-ad3c-e8c1d719d561"
        },
        "item": {
          "id": "3dae250c-0445-406f-9ca1-9efa44399889",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "6a0a97a3-7222-4e78-bd92-5f28187c1ae5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 260
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:203)"
            }
          }
        ]
      },
      {
        "id": "adbefe3a-9f1c-4b1b-b026-19b76f67fd83",
        "cursor": {
          "ref": "c7d5f35b-923d-46db-9050-55116e285937",
          "length": 250,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "e1f4edb2-e240-4bfe-9abf-b363662fa11a"
        },
        "item": {
          "id": "adbefe3a-9f1c-4b1b-b026-19b76f67fd83",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "3b378f68-27e3-490d-b600-71d2b08c70d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 199
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:204)"
            }
          }
        ]
      },
      {
        "id": "e635e15a-16b6-4d42-ad5c-4f01bf0c53fa",
        "cursor": {
          "ref": "5393f6cb-b9f2-45d3-a496-cd3e3f4be27d",
          "length": 250,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "3eb4f53c-900e-48d9-aaf2-bfbd43a00bb8"
        },
        "item": {
          "id": "e635e15a-16b6-4d42-ad5c-4f01bf0c53fa",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "e314ffda-17bd-4789-9141-3d9bd8412218",
          "status": "OK",
          "code": 200,
          "responseTime": 86,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "74c3bfe9-45a4-400f-aecb-1abc429582bf",
        "cursor": {
          "ref": "10c1a2d1-9da3-427d-ab5e-58c6b48f82b6",
          "length": 250,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "8c1b5505-bf9d-4742-83c9-defba430762a"
        },
        "item": {
          "id": "74c3bfe9-45a4-400f-aecb-1abc429582bf",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "d04f4477-817c-4a38-93f2-bae9ce9696b9",
          "status": "OK",
          "code": 200,
          "responseTime": 119,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "de168091-ebe5-4b7b-bbc9-08637761c8a9",
        "cursor": {
          "ref": "701f7d9a-d790-453d-9590-83c7fd7c5276",
          "length": 250,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "f9ca839f-b9a7-4a44-9438-c8eecde7490b"
        },
        "item": {
          "id": "de168091-ebe5-4b7b-bbc9-08637761c8a9",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "49c0180d-2a79-4a9d-8abd-e68c924704f8",
          "status": "OK",
          "code": 200,
          "responseTime": 78,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "2524602a-9266-4ad1-be94-33c42c5adfc5",
        "cursor": {
          "ref": "617dad5b-daf2-41b3-b3b9-79a930634a80",
          "length": 250,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "c59a527d-834c-45da-b8f8-2d75b49cb766"
        },
        "item": {
          "id": "2524602a-9266-4ad1-be94-33c42c5adfc5",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "7ec6f8a2-b135-42df-a2d6-d0ad6a60e55f",
          "status": "OK",
          "code": 200,
          "responseTime": 83,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "29871ddb-865f-45bc-a368-fedf868e1a74",
        "cursor": {
          "ref": "2d39177c-4133-43ed-9ddb-cbc21de9b01a",
          "length": 250,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "97d61d5b-609b-4848-b27b-53decc0feea3"
        },
        "item": {
          "id": "29871ddb-865f-45bc-a368-fedf868e1a74",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "6c08212b-caff-4f62-ac88-2cf0d654af55",
          "status": "OK",
          "code": 200,
          "responseTime": 87,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "95a9787f-0511-47de-af4d-197a12ca57f7",
        "cursor": {
          "ref": "08c9896a-0554-422d-ac43-0bf6991daf5e",
          "length": 250,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "5115b0a3-41e3-418f-a0dd-9b5b15e3a449"
        },
        "item": {
          "id": "95a9787f-0511-47de-af4d-197a12ca57f7",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "9a643812-4146-4114-85af-f89f37627cde",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:210)"
            }
          }
        ]
      },
      {
        "id": "ea6ed01b-9edb-4c81-b4d9-0cae07047abb",
        "cursor": {
          "ref": "70b75bb4-9fbd-4168-89ca-706273ede2e4",
          "length": 250,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "cf447104-0f97-4a7a-b174-5acbd5ab4f48"
        },
        "item": {
          "id": "ea6ed01b-9edb-4c81-b4d9-0cae07047abb",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "04886751-5682-4288-a2ca-f6579417536d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:211)"
            }
          }
        ]
      },
      {
        "id": "8beaeb30-5766-4e95-a200-b6e8ffae5ee0",
        "cursor": {
          "ref": "317cfd52-81ba-43e4-8ed7-8fc5ae0dfc1e",
          "length": 250,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "4f8c7c02-fc51-480f-850e-e145a0244520"
        },
        "item": {
          "id": "8beaeb30-5766-4e95-a200-b6e8ffae5ee0",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "f04b4c9f-d0ac-453d-9f04-d745b5d9d97d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 236
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:212)"
            }
          }
        ]
      },
      {
        "id": "2fa56152-5356-4a72-89b8-983996f0fba2",
        "cursor": {
          "ref": "ceac757a-7076-4d0f-93f2-b314ab575cd0",
          "length": 250,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "badce96a-19c7-40fb-ab82-9048772e21f1"
        },
        "item": {
          "id": "2fa56152-5356-4a72-89b8-983996f0fba2",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "7efe2ccd-04f1-4628-832d-0268b80991e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 236
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:213)"
            }
          }
        ]
      },
      {
        "id": "36347e96-0d9c-4ef3-a646-31c9fbe62fad",
        "cursor": {
          "ref": "0b62b951-30c0-4b6a-8e30-f4936047ccc7",
          "length": 250,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "47e666a5-e9ef-4cdf-b4a4-6ae144970dfe"
        },
        "item": {
          "id": "36347e96-0d9c-4ef3-a646-31c9fbe62fad",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "3fbd5cfd-9d8c-4a58-b199-c1d870c8db89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:214)"
            }
          }
        ]
      },
      {
        "id": "1f100819-ea3f-4951-a856-c0d3e77ce914",
        "cursor": {
          "ref": "65796b65-9499-47ad-a1c2-70d22a63d107",
          "length": 250,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "10c1d173-5374-4cfd-bacb-52be6c1ba39a"
        },
        "item": {
          "id": "1f100819-ea3f-4951-a856-c0d3e77ce914",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "2aac13cb-ab54-4093-a05b-e904d0df8d18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 236
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "067dd5bc-ecb1-4d2e-89b4-dfbcbcef7c55",
        "cursor": {
          "ref": "2bfbf2a2-587b-41ad-82ac-d482fc423343",
          "length": 250,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "df130962-a9ba-412d-b787-583a62b4639c"
        },
        "item": {
          "id": "067dd5bc-ecb1-4d2e-89b4-dfbcbcef7c55",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "3b909353-b08e-4c9d-b022-27bb2bb2ad61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 337
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "ceef5379-a47a-4162-9526-365bdf2c476f",
        "cursor": {
          "ref": "96c14595-c9b7-45e4-a40a-db442a5ff5d2",
          "length": 250,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "a6d24fcc-17a4-410a-95c2-afe114dbd4b7"
        },
        "item": {
          "id": "ceef5379-a47a-4162-9526-365bdf2c476f",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "c6482c61-ce74-43e2-bf52-0ea04e7ebe70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "f113a15a-e74c-452b-9642-c9dee45f2123",
        "cursor": {
          "ref": "452d2659-cd93-4cf3-b6bb-9041883037ae",
          "length": 250,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "c439da65-b8f6-43be-b800-470ab0689ba0"
        },
        "item": {
          "id": "f113a15a-e74c-452b-9642-c9dee45f2123",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "9ec97f8b-f581-4b6c-9610-78f027d822e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:218)"
            }
          }
        ]
      },
      {
        "id": "84489baa-ef66-4592-b2f2-6492885089d1",
        "cursor": {
          "ref": "c578355b-f4c6-4b38-ad0e-c12296ba3dea",
          "length": 250,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "bde01112-449f-40a2-9456-afbc993bb171"
        },
        "item": {
          "id": "84489baa-ef66-4592-b2f2-6492885089d1",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "1e844590-08ca-45dc-ad17-b4076e8d012b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "14783f62-08d4-4766-8935-718c146462aa",
        "cursor": {
          "ref": "6d5f4b4e-41e0-4333-988e-0db3c24fa8a7",
          "length": 250,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "bafc6b60-df5c-44b0-9d63-22d9599cf917"
        },
        "item": {
          "id": "14783f62-08d4-4766-8935-718c146462aa",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "df04f3c6-2a91-42a5-95ad-6e67604c9241",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 337
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "8c60d51f-e6ee-497c-8a45-bd32a74a9930",
        "cursor": {
          "ref": "50fc8c78-7f6b-45b4-bef5-4f862aa884da",
          "length": 250,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "0a539fb5-698d-4310-be7d-17fc9fda04ed"
        },
        "item": {
          "id": "8c60d51f-e6ee-497c-8a45-bd32a74a9930",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "b9a4f3a7-bf6e-4cc9-9ed2-18e4a25b704b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "88044850-2f47-4072-b04a-6862ebf24ca7",
        "cursor": {
          "ref": "866da938-c0d5-4980-bf55-8e57611875b5",
          "length": 250,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "19ab1516-f500-4e7f-854c-41c791993d6e"
        },
        "item": {
          "id": "88044850-2f47-4072-b04a-6862ebf24ca7",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "35f51725-3156-43d1-9d3f-df6047865d13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "40c65d0a-85e9-4010-8468-cac87d680cd6",
        "cursor": {
          "ref": "d1892680-d814-4a6a-8cd9-56c587c22c01",
          "length": 250,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "20abec10-65ef-4fe5-8d0b-7c9a799817e6"
        },
        "item": {
          "id": "40c65d0a-85e9-4010-8468-cac87d680cd6",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "bf4982e2-9bfc-4a2c-b45b-8d2867e66099",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "a975af35-e624-4fec-9363-dc3b20ff825f",
        "cursor": {
          "ref": "2aca2b12-64b0-4c86-884e-e7c25ec69a40",
          "length": 250,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "85ad45be-84b6-4b3b-9246-822ce8e0e0a8"
        },
        "item": {
          "id": "a975af35-e624-4fec-9363-dc3b20ff825f",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "c26fc4ad-fa60-48fb-af81-236440e7af56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "fb3de02d-d1b9-47c5-82e9-c8116616db24",
        "cursor": {
          "ref": "2b1c75aa-4fb8-4413-aa17-3dd345f8c1a8",
          "length": 250,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "6ecb57a5-4d6b-4afa-b0e4-e9f0b2aad492"
        },
        "item": {
          "id": "fb3de02d-d1b9-47c5-82e9-c8116616db24",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "0fa09d20-bfeb-4055-ab39-1db2e5041f96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:225)"
            }
          }
        ]
      },
      {
        "id": "d3fbd254-b006-46d2-8867-4529eb30732c",
        "cursor": {
          "ref": "9cabc195-ec25-4445-877d-5eabbff3b73c",
          "length": 250,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "36481b3e-6dff-4e42-bd69-e3f4c4e8302c"
        },
        "item": {
          "id": "d3fbd254-b006-46d2-8867-4529eb30732c",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "6e3b3e14-832c-46c5-b35d-57538128115e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:226)"
            }
          }
        ]
      },
      {
        "id": "fb8427d1-d63d-4d4a-aeed-d901f1789b07",
        "cursor": {
          "ref": "da95f0b8-0d74-4f4a-b4b4-e9301086eac0",
          "length": 250,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "013cac2d-36bc-4efc-b3c8-69d5ba7f4d91"
        },
        "item": {
          "id": "fb8427d1-d63d-4d4a-aeed-d901f1789b07",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "5fb6eb65-a863-43b3-8bf6-49a1aee372ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:227)"
            }
          }
        ]
      },
      {
        "id": "c9c791cb-7a5d-40f7-9238-08cfeccfa4ce",
        "cursor": {
          "ref": "8e7a46eb-21bb-40ca-9988-c8549c9a9222",
          "length": 250,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "b5651b57-7891-45b5-bb51-aeb45380ecec"
        },
        "item": {
          "id": "c9c791cb-7a5d-40f7-9238-08cfeccfa4ce",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "0e0c61a5-a9ff-4823-994b-c479f1bcdd6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:228)"
            }
          }
        ]
      },
      {
        "id": "341e69a3-3028-4414-9f0d-ed3966901846",
        "cursor": {
          "ref": "e4235405-fc17-49ef-a435-b12cbb559d6e",
          "length": 250,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "99c6605f-a3ed-4909-921f-3bb2605e225f"
        },
        "item": {
          "id": "341e69a3-3028-4414-9f0d-ed3966901846",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "cdd72e10-2172-462d-b78b-24afd3fa6073",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:229)"
            }
          }
        ]
      },
      {
        "id": "f498dd94-72c3-4b18-880f-77638645e9d0",
        "cursor": {
          "ref": "de93496b-bb17-4984-bac7-d2d5b4f5e783",
          "length": 250,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "6a880da5-aefa-4b77-82be-bc262258d590"
        },
        "item": {
          "id": "f498dd94-72c3-4b18-880f-77638645e9d0",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "64ac1f89-f979-46e5-8924-29e5e58f880a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:230)"
            }
          }
        ]
      },
      {
        "id": "58ea51b5-60b6-48bd-8067-c2b43686609f",
        "cursor": {
          "ref": "c80a66a7-f492-4061-b70b-f15e09e53404",
          "length": 250,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "1012c4b0-3b21-4660-8bc3-bfde90403340"
        },
        "item": {
          "id": "58ea51b5-60b6-48bd-8067-c2b43686609f",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "e96fa369-737f-4942-9697-166715951053",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 113
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:231)"
            }
          }
        ]
      },
      {
        "id": "8f31d074-f4de-45c7-b8fa-e5a17b1bf44e",
        "cursor": {
          "ref": "7eddf98b-4e27-49a6-a6a5-68ab1caa0a99",
          "length": 250,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "8e52391b-d36f-4fb1-a55b-1c7698b24e83"
        },
        "item": {
          "id": "8f31d074-f4de-45c7-b8fa-e5a17b1bf44e",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "144556fc-0ae7-4246-9e00-dbae87ea9536",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:232)"
            }
          }
        ]
      },
      {
        "id": "16b2103e-6578-4273-bf48-93fb8cadce89",
        "cursor": {
          "ref": "637e0e81-2017-43cd-8691-e99ad907aece",
          "length": 250,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "9f731a7a-dd0e-4bb5-b230-a91031c10675"
        },
        "item": {
          "id": "16b2103e-6578-4273-bf48-93fb8cadce89",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "f89d49f9-0ec1-4e93-bcbb-fd83e01c5fd8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 113
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:233)"
            }
          }
        ]
      },
      {
        "id": "d78acbcf-8fce-4a26-bf4a-86e36f9adb4c",
        "cursor": {
          "ref": "116dc28e-4639-42ec-a680-84ab8db8ada3",
          "length": 250,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "23984483-4d2b-4767-8939-59614688eaf7"
        },
        "item": {
          "id": "d78acbcf-8fce-4a26-bf4a-86e36f9adb4c",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "7132ddd6-e540-41b2-873d-d809d692af43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 113
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:234)"
            }
          }
        ]
      },
      {
        "id": "e740a362-5652-4963-910c-20567a1c0490",
        "cursor": {
          "ref": "3a073ef6-73db-4a51-94e3-fc4c08ee8053",
          "length": 250,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "9537cb55-2da6-4a18-95f8-4850fa4afc74"
        },
        "item": {
          "id": "e740a362-5652-4963-910c-20567a1c0490",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "163f412d-8e3a-4607-8a98-b4774844358f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 113
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:235)"
            }
          }
        ]
      },
      {
        "id": "8eab9226-a1ec-4ea9-8cba-2ff7a2cb5e66",
        "cursor": {
          "ref": "1371dfea-26f7-42bc-9cf0-fddfa686c317",
          "length": 250,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "5d0248b8-7430-47af-89e8-3424a69f3b2c"
        },
        "item": {
          "id": "8eab9226-a1ec-4ea9-8cba-2ff7a2cb5e66",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "2b09bdfa-8e68-4079-a97d-9244745d628a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:236)"
            }
          }
        ]
      },
      {
        "id": "3be6f2aa-a302-4daf-9c95-c70cc0fa7256",
        "cursor": {
          "ref": "a40cf396-c1b3-45cd-a3a0-aca0cdc220dc",
          "length": 250,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "08744392-3890-407a-adad-36adf27c899a"
        },
        "item": {
          "id": "3be6f2aa-a302-4daf-9c95-c70cc0fa7256",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "04e08775-7cd5-4983-b5b9-49f9c2b5c66e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 113
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:237)"
            }
          }
        ]
      },
      {
        "id": "1f2e1d76-f3de-47c1-9533-62d7e821fb73",
        "cursor": {
          "ref": "a4906a54-acc3-4b81-8c86-e2bb89c11507",
          "length": 250,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "734b0e10-2a73-4a28-af41-97075d172013"
        },
        "item": {
          "id": "1f2e1d76-f3de-47c1-9533-62d7e821fb73",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "590644d9-aa7d-4c32-af60-f5b8f123859c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "c2b7b074-f4b4-4512-b879-55657ddf255a",
        "cursor": {
          "ref": "2ae3483c-6d6e-4e6e-bd0a-150766df094d",
          "length": 250,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "130d0d5c-ed68-4e08-97ef-15570e5466f4"
        },
        "item": {
          "id": "c2b7b074-f4b4-4512-b879-55657ddf255a",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "91423c54-9dfd-4829-a2e1-ea5cf6e61c7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "65fb7a9c-9eea-4e79-ae0c-985008069ed6",
        "cursor": {
          "ref": "e6b18ec1-08b7-43a4-812b-bf307046536c",
          "length": 250,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "b06d3698-29ac-4155-a1a5-0aefade263cc"
        },
        "item": {
          "id": "65fb7a9c-9eea-4e79-ae0c-985008069ed6",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "1c470d52-0214-4b58-b0f0-5b9724ee1810",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "1d0c9087-99b7-45e0-afcd-282fe6b50095",
        "cursor": {
          "ref": "7d3a76c6-3d50-469b-9683-9061fb81f6a3",
          "length": 250,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "06fe8732-c472-4b79-8a55-5adc21569b4c"
        },
        "item": {
          "id": "1d0c9087-99b7-45e0-afcd-282fe6b50095",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "73979395-225e-420e-85f3-3af17c47e24b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "e775e630-a142-4bc5-8757-f2c48350b42c",
        "cursor": {
          "ref": "ed76d49b-9765-4ee9-9cea-4bc6bb599a9e",
          "length": 250,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "4ebe8c6b-f1a6-4923-a2c6-0a382bae20ab"
        },
        "item": {
          "id": "e775e630-a142-4bc5-8757-f2c48350b42c",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "71a0f978-d8de-409e-9e70-debb61902c55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "3392416c-63bd-4a00-b0b2-5458e0e9f2b1",
        "cursor": {
          "ref": "997b5734-b453-4f6e-b6d4-337fdc24116c",
          "length": 250,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "89d1d72c-d4b3-4798-8d5d-0fd48f9ea4fe"
        },
        "item": {
          "id": "3392416c-63bd-4a00-b0b2-5458e0e9f2b1",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "33615fc2-427a-4435-9892-1378965ed386",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:243)"
            }
          }
        ]
      },
      {
        "id": "16b441a8-6eb6-4484-9af9-b2d66e67dad3",
        "cursor": {
          "ref": "5a905fb7-e0ac-4e71-9b80-74445dce9751",
          "length": 250,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "4eaf1ab2-99b4-4cff-ae6b-a388216f9716"
        },
        "item": {
          "id": "16b441a8-6eb6-4484-9af9-b2d66e67dad3",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "10f03216-a478-4c9e-9864-9fd965ae7e94",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 27,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f4b93de-9c3b-4f85-b903-2df74aa47775",
        "cursor": {
          "ref": "0cfaf06c-a59f-4b02-8a02-144194e37dce",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "2b43e1e2-915c-470f-a188-6803ad7f410b"
        },
        "item": {
          "id": "5f4b93de-9c3b-4f85-b903-2df74aa47775",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "531c7ea2-e950-4146-bcf4-6f53e9066632",
          "status": "OK",
          "code": 200,
          "responseTime": 95,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "6550085d-21c6-419b-bfa7-ea5b76e01b1d",
        "cursor": {
          "ref": "08f13359-1c32-4e43-9f68-ebb72b52e719",
          "length": 250,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "8ba54079-438a-42f7-b9c6-62309dab919a"
        },
        "item": {
          "id": "6550085d-21c6-419b-bfa7-ea5b76e01b1d",
          "name": "credentials_verify"
        },
        "response": {
          "id": "03dd804a-6769-4719-8d2a-da66812b8360",
          "status": "OK",
          "code": 200,
          "responseTime": 112,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "81233d2a-c253-4d9f-ab02-34e2fa981dfd",
        "cursor": {
          "ref": "0680a58c-5cca-46d3-9a2a-a4c24a3cab3f",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "1c8d138a-1a25-4a0e-b585-a98ed7396879"
        },
        "item": {
          "id": "81233d2a-c253-4d9f-ab02-34e2fa981dfd",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "9d8eee47-8c23-48e3-ad9c-d62afec4ebad",
          "status": "OK",
          "code": 200,
          "responseTime": 91,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c5d3cf0-8d9e-4dd5-bcfe-2bfdd32d0f83",
        "cursor": {
          "ref": "f28e1504-b29f-4f6a-ae1b-cc359be84e3c",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "87232961-89a8-4e15-ad7c-33c78149eee5"
        },
        "item": {
          "id": "3c5d3cf0-8d9e-4dd5-bcfe-2bfdd32d0f83",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "ff3225d9-3f1b-447d-8bcc-06b34c1a3a3b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 28,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c5d3cf0-8d9e-4dd5-bcfe-2bfdd32d0f83",
        "cursor": {
          "ref": "f28e1504-b29f-4f6a-ae1b-cc359be84e3c",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "87232961-89a8-4e15-ad7c-33c78149eee5"
        },
        "item": {
          "id": "3c5d3cf0-8d9e-4dd5-bcfe-2bfdd32d0f83",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "ff3225d9-3f1b-447d-8bcc-06b34c1a3a3b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 28,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da84d766-79b0-4f54-a7c8-3e4edd85a5a2",
        "cursor": {
          "ref": "7686205e-d373-4082-bf29-7ba64828163d",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "9238bc22-1631-4a4b-b341-1b0963773dc9"
        },
        "item": {
          "id": "da84d766-79b0-4f54-a7c8-3e4edd85a5a2",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "7973c739-cfb3-4260-be9f-f32d605de943",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 28,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec46b0ce-24fa-4887-b2a0-b990cd588941",
        "cursor": {
          "ref": "3d27a774-5960-4aab-96f8-bb7d6fbf6c3a",
          "length": 250,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "62b20852-56c4-49fc-b6e8-7b9e394d1437"
        },
        "item": {
          "id": "ec46b0ce-24fa-4887-b2a0-b990cd588941",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "a92c6fb4-307c-4b6e-bf61-b6002e91023c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 33,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}