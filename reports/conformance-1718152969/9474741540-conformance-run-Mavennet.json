{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "b4142257-859e-47e8-b0dd-aabc2e3f3bc3",
        "name": "Clear Cache",
        "item": [
          {
            "id": "e4d678c4-cd8c-4575-87c3-0b1dc3f92345",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "8ba4fe1e-25a6-4aff-a1e4-24d8568a5caf",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "f400cbeb-cd8c-4cf2-a47e-d6967ad29121"
                }
              }
            ]
          },
          {
            "id": "354e53a7-31cd-4b97-837b-26d39c8907a8",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "d594388c-aa5f-4c86-b44e-6764ad2fc2a1",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "5fd2c63f-72ce-4e13-a6bf-5f3d0406ca8c"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "afe5e2db-c638-4729-b58c-c272c42209d6",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "a009f44c-1d2c-4a00-9ddf-fbb4ffb65b77",
            "name": "Positive Testing",
            "item": [
              {
                "id": "f2a0a8b2-526b-441d-9ab4-4284200bc0b2",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "fd84c1a3-0c03-43ee-8abc-457bc4b72e4d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "93bcd7e4-dad8-4965-82dc-88661d481638"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "2eced4cb-9b6b-4291-803d-46b374bcf17a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "0f42a4d3-98f8-47af-af0d-698873856b15"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "2c112271-85a5-4c1b-b117-4a6d8a31909a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "14f770cb-f65e-4710-a71e-e7bc017538f2"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0b1e15a2-534c-40a3-be91-cb553ba5a455",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "0e31e87f-08ec-483f-ad5e-f5a1303c18a1"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "26425995-fd96-40ce-90eb-8dc854492faa",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c2c26f50-dfc2-453e-80ef-21b1083e5e56"
            }
          }
        ]
      },
      {
        "id": "a695d777-a8e9-400c-9fc5-a1777f5c1779",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "e5841be8-b123-48cf-9c9b-410daae4a0d8",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b6ae31b3-ec30-455a-a19d-e02b7a6bd81c",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "782cafa4-f068-4cb1-9a4d-0406684cd3a7",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d10ff26-6286-497a-945c-04c5d83d8fe6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "000d9d53-024a-446a-8e93-93ac0c7f97c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "236eed93-3572-4655-8bcd-8e8004f62f2c",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57bbc629-42bc-4c6e-b02a-18c68a60981f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "91cf5120-0bf1-454d-afe3-ddf75918c4ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5708d47-efd3-465b-a3ee-6e82bd19ae19",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fb64b72-fab8-4b90-ac37-5a24acba424d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "47c154dd-cef1-44a3-a3eb-fed81046f816"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "8e218446-319a-4a7e-8d93-91dbcc0e0080",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ee152390-378d-4d62-ba55-432942f60c60",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69380542-95d5-48a2-a545-0c66f71643ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1a24cb81-d3a5-4a72-a337-0346e2102a34"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0abc0e9-d1e6-495e-ad54-417d1b57851b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d0cac68-9080-4c22-a8a8-19e40f600076"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "5317055f-61da-4b80-b60a-3bacd43a5dca",
            "name": "Positive Testing",
            "item": [
              {
                "id": "1f74fa78-b5c6-43bb-8e76-7f1348301868",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2f0cc6cd-4a22-4db0-a053-1c86e1e5daaf",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "a7cd2f61-21e9-4617-915a-eb95927c612b"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "44cfdbe1-1817-4eb7-9968-a8d40ae13226",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "ce70d5aa-caf0-4103-b4b2-0af0ac5557b2"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a90fb090-9a88-4fac-b4fb-dd2447f23ce3",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "7c39d402-2b77-4dbb-979e-e33fbf63a2f2"
            }
          }
        ]
      },
      {
        "id": "79d46c61-ac73-4e19-9e49-9151f4e69383",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "4fec7ea8-2f54-46cb-adf7-9a908b4a3860",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f1b41b09-7b3a-4b1a-b675-3bc204bdbc7b",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "cb2398fd-75b8-4f94-8885-7235c390ea7f",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0236e9b2-33a0-4e94-90ec-0eeae9b6f49e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb85217c-bdf3-4fce-8ead-86c92bf5f6a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24bb70a3-e427-4283-b395-aedfcf87245c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "589cd085-34cd-49a0-94dc-3c463f27263e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b09edc8d-5560-462d-b81d-4d541988bcfb",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a629c9c1-71d7-46b5-ac9d-8de1f67b5a35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7b62f8c-5576-4256-aa0a-7437d40c9735"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed6c8ade-91b3-42b9-a744-5171f02076fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4af3f4aa-fd3c-4edc-9c94-c1bfccc53e81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "834a2bd6-7b64-46c8-ac54-7271101ee0aa",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4530cb2c-9e94-41ff-bf2f-60f4bb385fa7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ba217a0-abac-4b3c-abd8-aa8a898d9cc7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aac98a24-8b06-4244-a1cf-128d50274a10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a160df7e-1876-47d6-8b2d-4d67cae2d8d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17cb931e-7cbb-47a5-8b97-9d9487982fad",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a39b9131-03ed-4481-b859-10d8a8b58f7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e25ad55-127f-4b2f-afd5-be3e6d6b65f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c1ef9e0-3855-4c0d-8e5f-7522f88c283c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e0ee33fb-a167-49bb-b4e3-a09a18993677"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd17af52-314d-44b9-aac0-b14c120ff255",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2a72553-50fc-4602-804f-c33852d783f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b93ccb52-8f50-4fb1-aa66-ab9b6b051c37"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f9fb677-ddb4-4c14-9dd8-a95fe743d7d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "73e68d22-998e-44e0-ad27-d8abd4deafcc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3188e7b-75ea-4156-90fa-783031ab68d6",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3eb5d770-d0ea-4f50-a0e3-dee0e3c6c415",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0fbea390-264b-4d8f-b5e9-4ed9dc0599fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "832024ff-8654-4b92-a74d-a277d5f5f676",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ebb7fbf5-c43d-4fdb-b002-b0150e490515"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41266a3a-a6c3-4191-be0f-fdd4b12369e5",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe53bd0b-af97-4bd4-bcaf-2ecaf7a08bbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eefe827c-fed4-4458-9870-9b23e44602c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c971828b-36d3-471f-9740-092edc9378cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7de6a11d-b2d1-4baa-8395-656d4da06d2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4443a3c-1c91-4eed-9d2e-15543b744613",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5821bb8d-14fe-4a61-bd2e-b974a41c2f9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1731836-233e-4512-bc48-676f24df3fb2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b50d691-9f6d-4e03-9a11-8566b19257e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b4bb35c5-3d8c-4f80-b0f3-8ab9f7c3cfbb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80c321df-d5f1-44f7-8aab-8669b7d306f9",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8d25cd0-bfc6-4348-a1e1-3da1b4c4cf24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "272efa57-7c7a-4d27-a69a-34b3cf5c8b54"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45647898-ef9d-459b-b4c0-ee128865c13e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "efd034bc-bded-4943-a239-ec75857f62a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6688f3e-23ec-4435-b462-014404e87245",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "023f605d-3bc1-4062-92cb-0732c41715c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b867cc9-c839-4551-b48f-7e4afb4286ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb3fa81f-b328-411c-9ea5-e8500848eee8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c5217c5f-4e6f-48c1-80d1-05ee8f57f959"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0e123c8-3118-45df-ac68-e6ff4158e41c",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c35f402-f15d-4fb0-86d0-151a27d88ce3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69c69d07-40e0-4676-b1fa-cf34e007ca74"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fab9743e-4500-4837-a220-df111039cb5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "40cfa724-b983-454a-a64e-4672c7c8d94c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8afda990-d712-444a-b990-cf7a94cf5262",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6f2dfce-ad45-4390-80d9-09a96b6ff7e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d90c71fa-1e2c-4c98-9167-a119826513ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d5be654-06e5-4953-b492-6f9f794a8855",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d40e3651-7655-4793-9789-7451c6a7e8fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c531802f-b2b6-4b1f-8c68-8bfc51762580",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40f92361-7b06-4d06-8b44-a9d9c404d2c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3c7355c-0500-4faa-94ee-ecd5cb501ab1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f104daa9-4af8-424b-b30f-c6fd131d943e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fee45f3a-1f43-4a9f-91ec-5c37c967c9d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd777ce5-4610-411b-9e22-15635d081804",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f1a47a6-ee5b-486b-83a6-387226d52fc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65863eef-b851-447f-ab3c-1f2f9696589d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a01f1314-c318-422a-8de9-0aea5eb21e53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4e1c2c38-5410-49f5-ae48-39cbbfbd7317"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d38e10d-f731-49a1-8f4a-d03db95d74ce",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "afb57b56-4fb9-4941-9732-43742b9caa39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee1edaaa-fff3-4e60-add8-da14f36b453f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26cfe9e2-991e-4a62-a6a9-077da459dde2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "90ae3668-b27a-4fcb-a20c-4b513b9b9e20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a666bf0-175b-47d2-ac34-c6e46d585790",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f03f52fe-3f7f-41d9-90d6-825a22a23a03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42cff8a1-fbb5-4eaf-a7fa-31bc266ac965"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2317924e-09c0-408b-910e-8daa1794eda1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0099d53c-6341-42c8-81de-1978e1044c2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58cbc2dd-7d35-4d5b-8a3b-a9b6ab44270c",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c24ae526-7870-4733-a9c9-d12da987d8f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2db223cf-3676-424d-b591-23186a564d21"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73dd5e18-4ddc-480c-8bb4-ee698e55b465",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "02957865-c23d-4045-a7ac-a0a82ba739b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53b59251-fc97-41f4-ab24-4754fe5ab1a5",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85108f74-a7b7-4eb5-b9be-6473e6d3eb5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ccedd7e9-8c91-4426-8f64-2c8cdd1a1cb4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2a26846-d6d9-4d02-a298-36ca2a87c4f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "9ed837be-bf8e-48a3-9784-55e37010966d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a21af2b-5eb8-4767-8243-b448124427f5",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fdc88a2-4b45-4444-83a3-e1a3dd4a6489",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e69d9c11-6fa5-4514-ac10-ded134ef80c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddab0661-a98c-49d2-aaa0-fa570137791d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d98ce818-339d-4f82-9cdf-729e50e8afd6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a25a1abd-9df3-4c37-96d5-120c6b7e4cbc",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "988883c8-d8b9-4ab8-b081-f8ffa8848eb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5c88f80-54d2-457e-8620-a804ecc12947"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da396bac-db4a-4951-8730-ef3b998171f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c6a89fcd-08a6-48f1-aa5e-409d42476e8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b6235cd-5118-4026-b277-5416f9e166ba",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bddab1c8-f607-493b-ac58-e3b52ce41f0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0abe3f29-232a-4099-95a7-9e4afe33d93f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36e746fc-4d06-4ea9-ba53-10f3999ccf74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "bc428421-f4f6-48f7-9a49-be14d7dbe4c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ab8fed5-2fb4-4c00-ae45-95f6efd58488",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63528643-fcf5-4fb2-b579-61872a0ceee1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "672a1103-369b-4d74-9c1f-8663d722619f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "142c0254-d883-439f-a31b-20cc2314d787",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "0e746921-2a36-4b4e-91c5-d6715115858d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bcb256d-96d3-43e1-8584-64b355d33c9b",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af91fbf6-f8e8-4656-9f4c-488219a28da1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ff1a69d-d6e1-40e1-b3da-ec481219b2ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51477b95-52f6-4e5b-b357-96c5962eacb6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "3928b0f1-9990-4b06-ad8a-9e7d369e2b19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e0518fb-02bf-4245-ab57-f7de281a2022",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0c559b0-5578-4be1-8e82-eb0aa1f8fd7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88760ade-d22d-4817-8ce3-6237c0a9493b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10340c2b-de8f-4b7a-9418-05caf5c1efb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "b84dd4e0-d16c-4e80-b726-6625a88ff52c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "886bbed6-22a8-4f2b-8442-f996f413bbcf",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e2ec6ac-deb6-4d7d-bb30-9fc4eb4de600",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5449b5b6-30b5-46ab-9b79-4153640594c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a39e9aa-96b8-4b7f-806a-95bc7b559565",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "f299b532-eade-4f7b-8d11-4f7d13b1674a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8ba45c0-64f4-46ff-a5b7-fed9bc0f0267",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01328e61-c616-4b2c-a147-7bdb8f7c9816",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99ed1abf-6729-4884-bc11-3d8999c1c541"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "027bd834-0fac-414d-b691-59d82252543b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "ab88bc74-7942-4da1-bfa4-4489b148dae0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52790b33-8779-4b10-ae3d-a2d4703eecbe",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be64ae71-59a4-45b9-bda1-979093c5dae2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "814d13c3-f560-4c70-8228-b0ecf7bc2aba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2db3a10-f66b-4dfa-9e99-34b558159e8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "95e13a50-0910-43a6-91d8-6b2b28c6739a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9d2fd17-5999-4bca-ad8e-a4daccd7390f",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8abbebf-4e59-490e-80f8-0139a8e25ddc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d640ecd-d4a4-44d3-bba3-0c46465d9f33"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1922aac0-c230-4e5a-9c2d-5151195f6fea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "79568f00-3654-4fd5-a14d-3a309f536ecb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "486a88b6-03db-4902-8469-658cd1e6bb64",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5f7e4e9-8756-4179-8ae5-e356f9b4c161",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f1a8696-8aec-43f4-b34d-be7ef06800ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43c2bf14-a1aa-4e32-937a-3c5b5b9b8614",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "8875f3eb-6cc2-4297-bc99-d27858fcb7f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32a6105a-0cb2-4d76-a431-176655fe07ab",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04b3d078-6725-40e5-8c8d-cd936e47ae3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ac3ac14-e163-4dc2-a85a-5214cc569acc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94c7639e-fc9a-4a89-a8cc-7407382a1caa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "96f30067-9d11-4129-87db-09b603807928"
                        }
                      }
                    ]
                  },
                  {
                    "id": "459946cb-4086-404b-bfa2-14a22855d672",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7450cdc1-8919-45dc-b05a-715e4c04f77e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2171893-f567-4d64-b4a2-05291a86b7a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "054dc482-d4ca-4c66-bc0b-26b9870fe8b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "4cdd2a59-e40e-40cd-ae9a-9d82f4c53a88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3eb47822-eb5e-479d-81a1-25b187885e79",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ba64f59-0001-47b6-8610-701420ca13f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f27b0bdd-7ec9-4064-ba44-80ad3193d5f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84ccffc1-f52c-457e-a19c-9340f1efd763",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4d1dd272-7fd2-4938-8353-fbbb7d8134df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9245e51-416a-423e-a4a9-26574f50f6e8",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1ffe3c1-3ba4-498e-ba1b-69feb816d5f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a265438c-31ae-4fe0-a2d8-8b0fb621a95b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db5a6d7e-4c4b-4074-b5ea-b306210fc777",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "11784668-6561-4d82-b12f-49905ea464f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d13d5af-82d0-452d-9d48-5f406da47176",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4e5a5a3-3ef0-4067-8868-0558a47e1aeb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "efb2bc3d-b11c-4395-91c3-e839ae40f302"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c24cc73-0f96-41a5-ab48-e756cb620c6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e0d14baa-f68c-4e34-bbf7-2fb95c17e92b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b620f27c-6c21-49aa-ab64-4109a5d3f125",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82080631-8bca-4286-a3ec-ef325cc864d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "481ea683-d7be-49f6-8f7b-490018dbea48"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f3fd578-dc6d-49e3-90d8-a6eed1df1b1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "1725b8c6-cec0-434d-81df-0b93301f7303"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36110d9b-10f2-4304-9819-d829db1535f0",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37a1d461-3486-40fe-a04e-30173a96fb25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "97b1939b-0d88-4902-a5c7-811696644919"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de36e07d-986a-4905-ba7f-cfdb69b32527",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "be55d34d-8d18-41a3-ab8a-e59cc872e831"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87c4f766-1640-4db4-a83b-e07d7b2883e7",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a95fae98-78d8-4545-89a2-ddf6022cde7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a291facb-8810-4d90-b3cd-98a63e36eab8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66792ad6-a9b2-4c94-9c46-65029862742d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "7e26befc-555f-4c8c-a769-c663a9e73167"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35558f60-5c26-4b99-856b-307578653d17",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f4af30c-48a5-4362-96be-8b76e119d95d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f49e513-1fff-4edd-a4ce-b71a0ee274df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a9d2fc6-7b39-4a2d-8042-01a943902098",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "46443820-ff20-432e-ac4d-8198bb7d4cb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a6aff37-9f7d-4a5b-94db-48ecad682178",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc591536-5d25-4ba1-a462-f3a07e5adbde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16975f39-1c4d-44fe-9e69-5a6004014dc4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55d27764-9ad3-4413-969c-868271194582",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "8af7b4e1-f464-4190-8bdb-69255184e02d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92436a0e-9f19-4edc-a199-4375c896e2da",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07af9700-5e89-48ae-87ce-bd5fdc5628e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "beaa9fde-e3e9-4e04-ad76-b30c6272f1af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be4cacd8-50e6-4d65-ac74-122129031c78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "d468f5c0-a764-477c-b081-a6fa4d89a934"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e17dedb-0748-4bd7-aafd-374a5f6793e5",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81117ffe-f763-4758-b476-3e5bc87fd5d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b45cbb5-1a52-4f70-b763-bb3cd79d00cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dda64d1a-d3fa-4edb-a3e4-74a9787cc56e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "3ecefba3-b2f1-4ee0-b2e1-ef9376dd54e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3eaffd5d-a989-4020-896c-ca282aaffbd8",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c2b4beb-eea1-4447-9757-543ad7ebba22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72a92fc9-f8f6-486c-88eb-c3467850f26c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a56dd2f4-a6fa-4890-a419-4c792d20146d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "db83ed25-2d5c-449d-8c1a-32e170b8d02f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6eb5b185-9221-47bc-8577-dde1e36ccb58",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd88cdcf-974b-4294-a0d7-7e8508c8dff0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d3dcdfd-4151-4543-bbdb-d7006f310aff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a2d7142-8744-4226-8c6d-2d471d20683d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "dc011e2c-0c15-4a06-9da9-cbfe224bfdac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6093a6cd-d016-49a6-9928-ee90731f2b60",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27198387-2df9-4e01-9af9-dcec649f8217",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b52163e1-945c-434b-8c88-e33c2b3e01f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c469a852-dfdc-4705-a682-7015bcc59b5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "a29083fb-db25-4254-ac90-56c1b14b35b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d925358e-845f-4224-8bd9-2fc81a4d8eb6",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed678f43-f1d7-4e5d-95dc-df4a585efe18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2520b6ea-e939-43ef-9c9c-8496183da138"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "751487fc-a4d5-4b13-8e2a-f5ffe43af2e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "f3c4ce08-e0e3-4801-bc5d-c70fcc19d7fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98f0568d-b07a-4dcc-b6fd-52530426bcb9",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "504f46a6-3e7e-40df-9828-60f1b869b786",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fbab7d2a-b9e1-411f-9bd0-8f6d09b5f23f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35503d60-2887-4391-8a48-584bfb137854",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b4f7ec03-d14e-431b-a48d-5dc287fceaad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0a6df14-8ae5-45fd-b5d3-7bd0a4b9a027",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25c2504c-4e53-46a9-bf6b-48959c9f17a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd5106f7-eef6-483e-8d0c-3d0f3f2a41f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b8672ae-8a5d-467c-a20b-508907630f63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e6611439-37b6-4684-ac87-a6e010fd8da6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "053c91ac-6ce5-4ce4-9fa8-15e10c161b76",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96af938b-72bc-40ab-9c56-8b4a534be940",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9be3400-3907-4649-91b7-e1408cc075c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51d69212-9f39-4bd0-88f9-1fb53c842ef9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5ffe7ad2-3879-4908-b508-bcb3a11631e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6f900bb-4d9c-499b-8da2-4748c7013500",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3243b31b-7377-4984-b3a5-6bb5e7fc26d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f784163-8295-41fa-8bb1-040aed1941bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ded4ecf-ad4e-40a4-8a75-b20a3320eafe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b4a8e857-526f-4f93-963a-73d65b9831ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19328e54-cae8-47cf-b232-c0f37e80721c",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f14915a-b18b-4631-a0fd-e280ce20187b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5dbffa9-ddb2-4c7c-b71d-f88f457634be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2fc083b-bd0e-4159-949c-408591aaf32c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "bfdcf586-3272-4421-bc3c-839e26c4f6dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7726bdc2-14a1-4ae5-a7d2-0cdc8150ee69",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6680aa97-c259-4eb1-b0e0-0b9a5f41f526",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7349f33-0d04-42a9-9023-f21956f5cc4d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59367d57-9fb8-4445-a774-14ad2625ca6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "e57b2e4a-c46a-43d3-94e6-8edb8ec7c68c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32ac85fe-6c96-46e2-81d9-bd9c2e610d61",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b4d79fe-ff5c-4658-9dae-5e703cc55668",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "442e6109-12e9-4db7-97b9-59ce63bfad35"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93d82d3a-6045-4d0d-9ac0-e4a653947afe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "4c902ff2-072b-41e4-b948-d624d9b2cd38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "392872e0-7418-4fc7-beab-bbcd40031851",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0722c8a-ab54-4ff2-adf8-0655551150b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e85d134-14b3-4c2b-aa57-fcc53cf2086c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05be8eab-5deb-4f73-aa2a-3bbdbe5c0414",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "46882064-15c7-483b-b86e-a98c2557d185"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a35a32e-47ab-4d89-b5ba-77cbafde1964",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "912ae98b-edd3-40bb-90a0-a98e1da09026",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49ac6118-002d-4539-bd6a-7d5adbcb12a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb1a5f2c-fe52-45b8-9faa-f004189b388b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "afb9727f-9e8c-4dff-b54b-5d5e84776dd3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4dc30271-ee4a-41f1-944b-896b023f7a74",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99b98a5e-6a47-46d7-83f4-2bbbd526ac71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b307d447-3e64-4ea9-b63b-1bf4fdb4b6ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05276a57-4ec0-44e0-8464-37e4d3637147",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1dd03cc6-57e8-4cac-a832-0c78d4db804a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "626984d2-a3af-4248-93c9-8acf3a31ce9e",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e783fb54-7158-4b34-b100-0ba7fefd2260",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "886f36ce-be2e-4d63-9a37-980d9b0bd015"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb23db01-c2d5-4273-94a4-fb3b0371e00e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "bd56dd82-acf2-4cdd-9b33-5d4a0df32c55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12e09318-bab4-47cc-a812-ad309a19a6e6",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffcee952-d1bb-4a88-96f9-6eb80ef1e0ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a4a67ac-b195-4072-8647-889166c4c1a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b184bf9-6af1-4c7a-98ab-8273df9e62d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "52c61fff-aaec-4e82-a021-2002fba3f4a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f49791cd-ec3a-46ab-92a8-d852b63ab964",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fb16a97-ce08-468f-b992-4d9a5084ec05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f118c4be-60e5-49db-927c-ff50e9497e19"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efb05617-6afd-4bda-8d96-1f8fdd24804b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "6dd9b1b7-8b00-48a8-9618-cd20e7502670"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1eab3f98-c77e-4679-9e1b-288110a34b81",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc4e3e3b-54dc-434b-873e-49f3ff814f69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c102ba0d-5190-479a-99d0-68faae55e5ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc323a07-8856-4593-832b-724939debc01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "4ef68df7-6c7a-407d-956a-833b41b03d7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c65a8c1-092b-458d-9c34-d5fbb537cf6f",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbf4a705-1a13-4e33-9a3b-5d5408ec35f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3279d9d-352b-4f3c-9eba-7a8fe593c063"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89775476-7f83-4e3c-a291-ebd736d90ee3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "a9c247a1-7e23-4cb8-8148-d7aec19eaef5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcee215f-6e2c-458d-bac1-7bba97ce100e",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8cd5154-7694-45c2-ab4f-f75bb8ae41f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "308a43a5-4af7-4b74-a6e1-c690adb0c122"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09e61a3c-512f-4a7b-b9ca-a8255a75e0f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "b210012b-8c18-4e22-b48c-489715081fb9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa37cc37-ed26-41eb-9850-aa12a9cadfdf",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7ba011c-282f-4523-9f13-898c0175787f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "733cc53d-0a11-4d8b-b9a9-190a03db642c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94ce797c-b5c0-4956-b0fe-7e21034e5550",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "f0f36ea6-ef21-49e8-9d89-b9b3c09ba960"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0b51809-bfd6-4e4f-bff7-ce3b762bee76",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5d534c9-0df4-47dc-ae6e-7fe062cdd2f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b5b71cc-69ac-4bee-8a4b-18de0ecfc2e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da52499c-43cd-4018-b172-e0ce9a51c1e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "94745405-214d-45d7-a8f4-0d2eb19c2e97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e078f89-2591-432d-911d-7281533e15df",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f1d2c6c-7541-467e-8345-828effe716c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d54f0a1b-21be-4838-813c-4d638c07f115"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c9f4d0c-db6d-4557-8705-180ef047ba96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ccfbbb53-6683-4482-b555-a4b9d11bd510"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55c94e1d-f5ef-4fa3-96b3-750edf00b685",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfae9765-052b-48a3-a0ed-431725ef7245",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "621c4d23-3441-4f7e-8390-57f59a6ae7b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8994bdeb-d42e-490c-abfa-35442c542b8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c7549de4-ae17-4891-a7ba-45f81bafe1d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84ed11d0-d7e7-4e93-840e-38a82fc909bd",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e661155d-bd9e-4871-ae5b-f3b4df237e84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "373b17eb-0c10-48c5-bddb-0ecef5e9f4aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f566e9cc-ea11-451d-ac1d-8a9d886424ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "72d27ff6-00aa-445c-805f-d0fe14d114e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c357997-a438-4add-b7de-213e4d31a95f",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4748b675-069e-434f-83e7-4d28eeddf759",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b95640f2-7e83-4ea1-a842-275ff7382399"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8782b354-ccd0-467f-8593-3c348153d43c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "49601dfa-6585-4729-aabc-93507f66154c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc8fdbc7-909a-4900-9651-a1876d7c6ab3",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fbbc3f4-667a-4c1f-90dc-0515f683c0c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0534939e-87b3-43c4-ad0d-2d4d0faad8bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad4452ce-c057-41b0-abf6-49a792062de5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "d7d7103a-4d2b-4ae6-8dc9-e572af789bbb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c991bc39-b970-4765-af12-87513cd5bb97",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc53d700-9507-4713-a8a3-5b9a02b1a2cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9988fdc-978b-495d-ac08-75665a1a8fc3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e92dfb1-c674-4436-95b7-cb1677c9d88f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "a0e22b3a-ba39-4678-b009-75fed12cb9b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95c0e2d7-e4f6-4d37-ab22-0cc542b9d3e1",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dad56e3b-f3f8-4b15-aca9-f7a12223686f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7244240-f307-4322-82df-7199b628a881"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17e2395d-0a61-490f-9a01-95e3ed40af7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e07af412-1e3d-4b5f-b935-e5e576900c88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a72b6f3-9113-485d-a7b2-a34463780920",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34a3103c-4841-408f-981f-3f6eccb931f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "821720cc-24e2-4b66-8245-7ffb23c98639"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a85f1b35-a083-4313-85e5-923345abfe95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7a74cdd2-f33d-4c23-b09f-d9224012a92c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "696ec2cb-7070-41d8-8232-2d42e640bd15",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a93888d-a1ae-4f8d-8967-05c830567da4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "681cc731-7b41-404b-b16c-e44de5c83fc3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "273124b0-a3d9-49ca-a46b-b1b3bd7fffb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "61872a6f-62c6-4092-ba25-4d620f83f627"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1c3cfd1-7b32-427f-bc65-93f61c3dc185",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5128ed42-7382-4a06-a6a6-4c76632d99a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a61bff75-3c92-4499-aab3-838fbbbcfbeb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a72482d9-f166-4202-9735-ca03b591c8ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "718b34d3-c3f9-4fa0-b918-77b5b40ea0cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e854e043-8f6a-40e4-bd30-20963a4e8793",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b76cf520-ca1d-4443-8892-72d631f67734",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df9ddcee-1ec5-426f-b0d6-154219d7611d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "911b02ac-6927-43a3-a5b5-a53c91976f06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "bf53608c-caf7-4997-8fb2-6b58417598d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea998c88-d2ce-4ca8-bf27-747d3e39e5cb",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28b0e3ae-230d-4f63-9403-dffd86182b4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f10aafba-b2c5-4cfb-8173-aab1dcd9fa39"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1cf1ff22-cb00-4102-be9c-bfed1117fa69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "9d8a9d51-5ed4-4762-9aa1-68c25d104b6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "668d23e5-2e5a-4ab2-85cd-44f66593f334",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ee1b39f-2012-4929-b2b3-7c4f74af668d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6e285ae-a473-4687-857f-66e933e6bcf6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7241becb-c695-48cc-aa3a-9e5116e7f382",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d74aacd0-290d-4c18-b463-23cd8bb116d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd974d9f-01e1-47f9-85e5-298960a13655",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6e67059-0715-4f91-a780-db49e3b994ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4385d873-ea20-47ac-9008-9f8388c687b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88d1cb62-d719-482d-99f5-e030154ba174",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "544bd909-ae9e-4ae3-a7d8-f28e95bf8108"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee96d3f3-1177-4410-a2e2-a7d33d6b1847",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36c1ecce-fe31-4644-9675-9589230e43e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96461c98-af22-47be-b467-2bec6f4d6988"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "790637a5-ca25-4563-ac43-680b478d215a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c7995633-a010-4bc5-9dfb-e054cd4213d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d9fed9c-7081-4288-a1f1-8979c7417bc6",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c39c2a57-ecd0-4b70-9d84-36af89f087b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "822bce84-1957-4620-a856-3552692f0550"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7e76f77-3002-42ca-b166-61c57a0ee8d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ef9ab014-c465-4cbb-b978-4d4b6c202164"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44e5ac50-03b1-4a60-aaa0-4c3f64c69e6a",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0266d4db-6b15-4556-868c-15344198e837",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8718d055-a060-4296-8174-eaeb79efdde8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1328c339-66a1-43da-b301-2e0c9df23ccf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "001f6bbf-a1e1-4944-b9a3-29c1f70612d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a744194-a7df-45b6-bff0-2b9cd559a6cf",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48fff291-25cf-4664-a6a7-23a5271903a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "082c72a5-24f1-4d58-8ba6-9daf83b1b03c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d157b91-6194-4ea6-845f-53e5f1acc441",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "73425dcb-5027-4a69-b10b-4fd31195fcbe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11ce8e68-a0a3-4340-b338-4c654a39397f",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20920375-eaa2-4e59-8434-fcac07477fa3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e060804e-9fbe-4210-9d8c-cb045b751008"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43405656-39ef-4b78-a334-ed5bef22faf2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7cca0221-a34d-40e7-8e7b-bd8be6d5c426"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2e90ded-6fa5-4aff-aa98-beb39c1eeef7",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e238b0ea-2529-4df0-9c94-a3e5e17e63f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ef68e04-8595-4d48-a558-e579693d1f78"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49147181-ed44-4aaa-be8e-7f744169be3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4c2faf12-57e5-41b4-8400-5fe6d6062dfa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab8164e7-b027-42fb-8ca9-50f262e06005",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56c9caa6-be0d-42f8-b09a-02887316d30a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc4bbb61-84b9-43bf-8fc9-48818c253658"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43c6dbda-d6ce-4d51-bb53-4d4c74218f53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "379b9051-ccbf-407c-a1d3-b77172349a2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17f41ac1-4a1b-4b07-8348-b7ce0def079c",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51bd7fec-de66-4b39-8605-7bfa3b557514",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ebe692c1-0ca1-421f-8e7f-e5666e59fcf8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73489439-d94e-442e-b80a-351f366e4953",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a99a3e7d-fd48-451e-a1f8-6051619fbede"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e08ad05f-61ab-4e94-85ff-cb4c5fbe6a21",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "569d99ea-dd5d-4dc1-a86a-1c4ac6914f20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4207540d-8e1e-4ec0-8bab-a9733ec35fa5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e7552a6-8c9d-4571-830e-4182cfa7e7d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "56fc0bfe-23d3-4c81-a3cf-7f7eb0f4ad41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89f52de7-0dff-41b2-bf21-190d2983f545",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b1d65e6-11b6-48a6-9058-9185ddff5421",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "138bfae8-7fd5-411c-9584-a328c96d2d4e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10ee7450-2773-4bcb-819d-ef85904ae3ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "7b047e64-9a37-4bd7-8537-3c3ae9915f4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "527ef8ab-1894-43e3-bf89-367386c73159",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cc98d3c-4b67-469a-ad0f-7d1020e3d2b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9fc023f2-e567-4b04-950e-1f21197990a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ded5bb2-1af1-4bcd-9beb-84b2964ee70a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "27526353-d1b1-4e3d-9ab0-4c4141d7c1c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1c96b04-6d33-49de-adf7-9d29a606e3c6",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f3a8f03-cc13-4286-a8e9-f525e89cba6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de2d22de-ed96-4a18-9101-43323eca5e07"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9451eab1-d00e-452e-b087-a908e9a0f33a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "41289a6f-a09a-456d-a6ab-bfb8b35ba583"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ca2e8f6-11eb-4855-a90c-8b6eedd100ad",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa75e63e-ef6a-44a7-b244-c9336a7f3b36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "592f6734-031c-4670-957d-f0de93c4edfc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "709c3ab1-6180-4f40-b0d6-c16bc58105b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "b7fa9532-22f9-4d72-ac7f-b717bcd18f8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea5d0f8d-0da6-4b64-8b12-783e1567d6ca",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "823bdaa8-543d-45be-9ca6-bf0deab33908",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ccfb8c25-9d8d-4773-a7e1-334bcb4b6f76"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09a14144-c520-4b07-8248-1ddd9f0a5051",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "dc02751b-3d18-46d7-afd4-5839c674f969"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa3e268a-41b1-4ca7-9640-1e5c583c8737",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b599b503-a3cd-49fd-a9d4-adc32ca3c38f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "d3042eb4-59ce-48d4-a981-20d12e60bdea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9373afb0-7da1-4060-82af-98c68cd62b8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "ef86621e-5601-4f6c-bf4a-b8a00adc2ced"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "b10686a2-1a61-466a-b0a1-9268d27c1c75",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "771c083f-8f1b-4319-b6d5-fe554aff822d",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04b2fa1f-2af1-458e-bc7a-a449032fb957",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "16f6fc58-ecf1-466c-b22f-c596a7a40153"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "925e5cb7-48a1-4a19-bf4c-fd3ba1753e2b",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2e67a5cc-c014-4de2-be5e-9950d776e7d4"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7e5a8d50-669f-48ba-bdae-9e719425899d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f6011195-88ed-4f6c-b3ef-639ea38c5a97"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "11fbbede-6e56-44b7-9a7c-0bee1b9db077",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c2abec97-f3c8-44fd-ad16-a12f00132bdd"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "19d6ad7b-5b7f-4a9f-86b8-add7a57348c4",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "e712ffde-b793-4cfe-ac42-dc352df53425"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "8aa1d8c6-2483-4073-a155-5ef018f31789",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "adcf3c89-c5d5-4f97-9c46-090fed7f8a65"
                }
              }
            ]
          },
          {
            "id": "59fc3107-d294-43cc-b966-a5ccd67e5337",
            "name": "Positive Testing",
            "item": [
              {
                "id": "49f26981-26b7-4066-8c4d-c8fc9bae5a0c",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "b6e18c4d-ae7a-40d7-a207-9658f6dc8728",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "edf4e10c-ee31-4ca9-bd76-7465f460616a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "220aa351-9ce8-452e-a432-64bf4c786925"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "970ae0bf-b2cd-4009-8e53-631c6268ae9f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29053140-6d86-47f9-bf5d-dcd756cec810"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "6788a6d9-8a52-482e-a4f7-e8e27de18c82",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "abc146e2-a768-4e1a-8f9b-ca9964a63d6e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2c538529-25c4-41d2-9d48-74476d1ff318"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "77b08755-de85-4ad9-a197-1b8575feaa3e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "f9c40cf1-ec70-496b-8a21-9881a7b25462"
                    }
                  }
                ]
              },
              {
                "id": "af545765-1cd8-4d63-90e3-0eca7c13d8ee",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0818fad0-0380-4465-bfcf-87ee77e77ef1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "48679063-4e67-4d4b-a701-ce60063aedd7"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "89deee86-8c9c-4b93-bcd2-e3b385955716",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "f4709cdb-77eb-4d9f-8907-0f0cab0e64f9"
                    }
                  }
                ]
              },
              {
                "id": "3477efc7-ce5f-42c9-b86c-a45c7eae2aae",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a3c48fe9-bc65-4cc4-a13c-1bf35db034ee",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "8c6a5b24-2c00-4cb8-ac5d-dcbcd50a0713"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "efd38360-a6d5-4ff3-9fba-353a6fbc145d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "479dd23e-9a88-447e-96ad-c8d5be262fcc"
                    }
                  }
                ]
              },
              {
                "id": "220ca84c-2c3a-460e-9a64-a79020948672",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ca1f75fe-3d7c-4c74-9876-1031fb729ddc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2f4ae871-701e-405c-b0a9-4825c27bd11c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1fc9f733-0b6d-4ca3-b000-c780b93c02d3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "e800ff8c-a7ee-41ae-9d86-6b6d765ed5b9"
                    }
                  }
                ]
              },
              {
                "id": "5970ca65-3346-44bf-b7c2-62e90abb7b65",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9ef854e0-3694-44f1-8e04-38498c5b9026",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "fc87b288-a8e6-4181-9f57-8f3d39d27246"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f353d3f7-dcc9-46d4-920e-416fd7f2410c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "3ac34a27-368d-4956-9699-33c318a9ae4a"
                    }
                  }
                ]
              },
              {
                "id": "0a4e0072-4b87-49e0-84b6-a0f3de787a89",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b61dc461-bc9a-4a7f-91d5-dba04b0505f1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f1c41e8f-ed8b-46d2-9638-7a11eb40f1f8"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "da520081-bc43-4d8a-95e0-e94cab1c64f8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "11b10548-81c3-4907-80a1-66b5633d3ac9"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "678d50d2-ee5b-4cde-aeae-3c4334a19ff4",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "6cd11038-f1b4-4608-8dc5-f022e2d965f3"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "5e11cf05-2654-47f6-8dc9-1c59eec116f7",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "32a8fb34-547a-47a0-9b1b-240aebb3ef2d"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "933c4b55-f46a-485e-bd26-8ce3e827d1e0",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "768c0de8-5215-49fe-94ea-01cfc7d79b77"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4a60b86a-3fa7-429e-8bf1-6383de2df432",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "28ddf4a5-8c10-4001-b605-a4ff33ad7df8"
            }
          }
        ]
      },
      {
        "id": "7edb45c0-db2d-4330-88ab-56a8fa9556e6",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "3ef401af-b541-4141-b7ea-683e6b9cef36",
            "name": "Negative Testing",
            "item": [
              {
                "id": "cbba8833-6dd9-4065-9f27-838ad55c56b0",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "8cf6a93a-2d8e-47e0-ab4f-84e17da20c8f",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73c8ff2b-ec5d-4f6d-99e9-3947dfc01ba3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea2f9611-dfe4-4c6a-839c-ed5e5546092d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "313038ae-01d0-408f-9fd7-e07a2b2b6857",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "9c10ddf7-13d4-45ba-a70f-38f4a1d56870"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09bde5c1-6ecd-4d67-bbe9-5f43d64cba88",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ef6f3b4-421b-4cab-bb05-42fc52254a49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "030042e6-84d9-464e-8caf-44f55b520944"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f70b7e8-0a9f-4129-a025-7a318d068ef3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "655ff3e4-0930-40ae-8d07-f1cfdcccda1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56326ece-eec9-4a90-addd-b6b355b24704",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e854095-550b-44bc-8030-6b32cce4402f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b8c0e58-143a-4217-b98f-f7a1a4c315ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6606c452-67f4-4407-a27e-29d718eafab9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5ffc9fb5-aeb3-402c-aebb-53b47b019598"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9dd10e17-4520-415f-8cff-20bfd2b7547c",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea0b02ca-02f2-4853-827f-e38cc7ba52ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80ad7f5b-fa38-4d86-975c-884add82722f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cac2a01-23eb-4423-9992-0bc718a7da60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e0b2dce8-9219-4384-86eb-541173748328"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16eded8a-ec55-44be-81ce-cd9abf721216",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e3cf14f-73f8-4431-b6ca-2df7380fb721",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c74dd06-c0e2-4840-b33c-17371cd669ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5207a70-907a-4571-b833-10ac6a103d20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3bbdc96f-ffe3-43f6-b0e7-52287377be03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1c28314-e8f9-4d67-83a0-806c2920f59a",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b8324fc-e161-4e9d-8071-29b9ecfba3ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37054058-5b76-4656-810b-c808329ff7fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ae6adc2-4627-42f4-a22e-2aa8b094948b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "379c1c5a-5057-4f21-b326-400e3f43a37d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "468d22cc-0113-4ca2-bed8-1aede101bf78",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23498e04-4741-46e6-900e-90fb68f0870a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37bd0b46-aaa0-43a6-a8a2-b27056d27748"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f62793c6-81f8-481a-8209-d0765412f3ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "4ed28f07-ccf8-43a3-a7e8-ec4af3f29d12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ec00b2f-13fa-4102-bdd5-a91469de543d",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0887a90-99a2-4cd7-88a0-b5fb04416752",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88369ac4-e34d-434d-b952-11b8de128d67"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "008a29e6-f356-4928-837e-82fa673f5cce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "72c64e9c-2600-4d72-bb19-98b3f869d6f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0164cb72-799b-4b11-ae70-d6390c0f1d2a",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "744ae158-8715-4dec-8d2f-f729c62ac4ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5aeb026a-1e9f-41a5-8e57-7a9adf82e921"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "465de946-d9f6-4920-a7fe-2cfc7fb57d9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "793ab3a4-3481-4242-8cf3-2d0cf1802f0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d323e31b-d8a9-472b-8c72-fa474fddc84a",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bf3f982-7654-47b0-a436-74526eb2edf9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa1b7744-f531-4f6e-b5e1-f4d3f74e5201"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cde6f9f-11d9-4de1-8cf0-fb6cec5e2e23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "bc8977b6-52c5-4bbb-8152-f48330315320"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46f03af9-5d0a-4e54-abfa-17da108489ef",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2a62460-d546-446c-a5de-d3ad659ced2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93c9b727-4c66-4c94-a7c9-d2fcd0f70484"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6ec83e4-a172-4d25-9a55-c801ad549798",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "6e4a0e76-7323-4e56-8c6c-bfda34becc78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38a8c567-c756-4ef5-8812-acee36c1cae2",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2776e858-2d60-42a5-8117-bb3645144612",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "641284f0-27cc-4bd1-8553-4b952ae0f2a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4653c784-0dfc-48b1-a8bb-95bc6de34680",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "6cc470fe-faf6-48c2-9519-5ec40808f939"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f36c3033-1684-4957-a6ce-0e5f4b584fec",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18b14d39-a528-4b76-bf14-6352a715c90a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01b1ad3e-d855-41a4-a7ac-dbad40882077"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1c8d6ff-b357-4176-aa6a-3cfdb65873b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "087cf078-481d-4552-bbf9-57d045c4852c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1dd98c1f-4d1d-4d2b-b2c2-508b64178b85",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49e36e82-ab7d-41be-b782-d000c04e2532",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc66bd4b-0624-4789-babc-d16de72872a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5c01c6f-b7cd-4245-99ec-9a5ddc6a2909",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "96964329-fa80-49cf-9c43-1bc0e6470d93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40d01352-9465-4c8f-afd2-70df024e9cac",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f85f54f5-9f8b-4c02-9df7-cb338e40c3b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c7fa2c3-78a6-4820-bf97-74ea9eaa7a61"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8e0d307-8103-49ac-8b57-342351d46a59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "954e7212-c708-4b1d-b9bd-04d828f0dd32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c36eecda-2dd3-4fe2-b91a-3ea8adb54c89",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "002a5ed8-5a0e-4800-a555-af23432ef1ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fbc840cf-4b2e-409c-b9f7-2d9c66e72079"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da14ba2b-4adc-44df-bc4f-76016d6768b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "ba1237e9-e297-4561-8d8f-6cc626b57adf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98b60ea7-2b30-44a4-9f7a-203c29958b1b",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "872ce562-c304-431a-b48e-e2f9e1a38eac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1822586-eaaf-45da-a313-7cc202b67883"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f600fe07-1196-4cac-a05a-19d665602ee0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "37e61f17-2bde-40d8-8be7-9dd905d2ce85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0d678db-8eca-4334-a75f-dbaac6a798d0",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0046a7c6-d7a5-4d8a-8ca4-532af8ea7061",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9480d10b-3f09-4735-bcb3-05b2e0a1eab1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c377bec-bd2a-4753-a0b4-108422527300",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "963c0ff5-7e3d-4adb-8efa-d20e46882bd1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca69719b-a4ee-48e6-b24e-63379b2a24a1",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8772df46-a065-4fab-9d7e-de8cce558745",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3fbb389f-a436-467a-9900-3bd5d9d2f3e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "125ef332-b2f7-43ba-82af-5f2ee6356fa9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1c1f1ad2-962e-48f3-9824-0eb921f8d9e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d98ed933-c57c-491b-8fef-b86b0cad978d",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6bd3856c-65f2-4a13-b0cb-1e2fb79737fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3523915-931e-4930-9262-f2dbfb47ec1d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c4cb8f4-4b44-4f65-93b8-6ca61a43cf97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8caffb56-3afb-45dc-9cd9-daf2ce84857b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f582a80-49d1-4420-94a5-f6ee6ecadbc0",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c43fc61-8d2c-41b9-9a50-62e086ca637e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "012c076f-ea2d-45eb-ac67-4a432002a26b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc0d6047-3346-4ffe-989f-c453db6c7673",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "77922729-0e9b-4055-894f-ec4fb4afdcba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "762cfd26-221c-43ab-b2b9-54887616dca3",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2d31f3e-4f11-4e3b-ae0b-4809581bbd44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d2580c3-2d6b-47e9-a706-911116f7fda5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8560e2dc-d908-4564-8504-67b2573b2ba8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ee3ed49e-7b99-42ea-95e0-30020ba92e33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e134b8ee-7361-4c0e-8806-5ec16ff0ea6d",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4976a6a8-b385-431d-8b5b-60f23786f18e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a10a126-9c17-4914-a658-d4f5c0d469c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4adb3b0-7768-43c3-a348-7a7dcbe86b52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3eed51bb-7271-4202-91b4-ac5e1b9a7f5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2cd69b63-8b5c-4f5e-be84-b6c70ead6188",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "154e4813-6452-4d2f-a9ee-1459ac48fec2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00b88db4-cc3d-450f-a3b8-9ab85b503982"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08d51057-c6f2-46e1-a4e0-57a5fccc5d47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3cda1047-d151-40ec-9487-a4e3b7ef1937"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2daa2df1-552c-4ec1-9186-5ef9a5df515b",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc80b361-c44f-4597-adce-3b855ab1c062",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6cc8023e-520c-4782-9862-9ac2dd751d9d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08982df0-d311-4498-afc5-9673706891ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "761a95d8-358f-4f19-9c17-642335eb2d65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f28776a0-3c38-42f4-9dff-30cc449cb383",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b4c50ed-614f-4d5a-b520-0ba4b533e918",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d289030-288e-4c2c-b5ad-05656b1d9cd6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2cbe952-4db9-4d16-80f5-7ea0cc9cc44b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a4ddab5a-d754-4fff-92b4-9d74f25cf8a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "091e9426-81d7-41c1-b67c-a43df40ab32b",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87b55a6f-2810-408f-85dd-7cb6ffe78ff0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "365f8e08-c5e4-4749-b144-9e54cc3bc2ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e42545c8-80c0-4d9e-b17f-ba8374904069",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6d969a72-383c-4679-be91-f5d391924af8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07bf0135-5644-44e1-a74d-09a15149091c",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "046682f7-7573-4115-92ce-0a5a4613ee8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f84e5f3e-c353-4f04-bba0-172db2deddbe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5ffdadd-8dbc-4780-bbc4-553d7a3deddb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5b4e6bcb-e0a6-42c6-b675-9c4f34a40225"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5214c1a8-a04e-4937-a6e5-6195980cbda0",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df16185b-3eb3-4eaa-9d04-7853aa583285",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5251174-89e7-4d0f-aa66-f926e7fd64a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8438e91c-040a-4281-8b7f-0efd8e79c3a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2c9e924b-1704-490e-af95-a1666396f29f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f643e167-4db0-4b29-8b3b-14e1fef76e11",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "574f77a4-be58-4365-a1d8-9fd19c79d192",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc5f1352-5d31-4887-9a30-8c6ec48135a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8de5772c-9122-4da5-9e22-8fc3c0df76b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5f990bee-e999-4dfd-8d48-e17f77441740"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bcd2b46-844e-444b-a158-cc5ebd8e1837",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0138dab0-1cd5-4ca5-80ac-bc6c491f6dbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa4b4904-c34a-4555-b952-a1dae7eca97a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6dfe7d3-3e29-4807-8fa9-21e6c37fe471",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cdf5eacf-433c-4257-9c56-6180ab62a9cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b132ecd1-295c-4a65-b6a9-9cefdcd789e9",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10f94e9f-f2e7-4d70-9e0f-32f4dc10fadd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0291f2cb-9d57-406b-9475-ae9eb848bbf1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de267c4d-b479-452f-b2bc-f9f3879f523d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f80136de-a4ac-470e-b0f5-5b32d6d708c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07efcb89-1f1e-4cce-aa2c-d5b73bf61663",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72df7f76-ed91-4741-93c3-3f43a8bc901b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a296639-078d-449c-8b7f-ff2b0e20e762"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "349c6268-fe34-4da3-87e1-142136c0912d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bdd3db86-e558-4515-93d7-896be0073beb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72aae698-ee16-48df-b34b-bef647c1e88c",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5303d157-055a-4fbe-b671-fcdce6e57be7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3091f06f-ceb7-44b6-b194-2054854a565e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5a493c1-bba6-42f9-8329-d3bba8f5f3fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bf52898d-bcef-45b9-bf73-74e8e6a288b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e723ed01-1013-4468-aa2e-9a5ca1972410",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "966d1bad-44a4-424d-a1a2-63fa33e56c83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "edfec2e4-2b48-4680-954d-9caea79b910f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6dd64a39-45b9-4124-828d-c2d8a05465ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "711488d7-3a82-454f-b64a-316c94b51e19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78c7b497-7b34-478c-862b-af9bdcf24fe0",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3179f2ab-5203-4604-b5ea-c16d8e008e04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f346faa-d1c2-42b1-8985-b2331a7bc16e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fb6d589-dfde-4252-9fa2-4dac21f1c8e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "04f2da95-874b-414a-9794-8a193800d28c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ceb02184-829d-40c7-89d1-7ca49221cccc",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fac3c5e8-a6f0-428d-8879-20e2a15baa52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04a0d432-8386-4b4e-9058-bedbb50f47d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76ed8051-e66f-4a1d-b865-5d9ebf540a4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7348d4f8-ba51-4579-8731-ebd713fdedf1"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "cf9ad2ed-ea6b-41f4-b225-7d589c23872d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "de940d13-e889-415e-a07c-ec3aa32716b0",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "adcef7b2-af1f-42a5-9d2b-47c59cd4d12d",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "b84b985d-adda-4b84-b6d9-b669608a40af"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd8a89a6-b854-4566-9596-2137333113c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "154fab99-099c-4d12-bf3a-a6b5c3e1525e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "092d6dd3-23d0-4937-893f-e3647e87f1ed",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5f24d0d9-4456-4877-b45d-3b21097e2271"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "cf1ffc33-2ff8-4640-8109-a6f52aa0d694",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "af079d8b-e77e-440e-9f0c-aba868410cf1"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "86c7af1b-ff82-414c-90d0-6d39c8a390de",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "89678954-3a9c-4ff8-a469-635fd10b2368"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0446c296-ca07-456e-8f81-aa660b5f7847",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0fee1c6b-bc7e-47b4-93c2-af4ec3d4620a"
            }
          }
        ]
      },
      {
        "id": "c7d14e28-cb16-49dc-a641-c60aaa1a1424",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "01fa794c-c61e-4f9e-b23d-c3e920e6a0d0",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c1857de0-43b5-47a2-9167-2d7b598157fe",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "a29e85b2-7e07-497d-8296-c5a7bdfcf816",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5400c7da-f480-4e0a-b813-90dd9723ae77",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7fd4642-2ab2-450b-ab16-86fbc5c0f547"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7826ab8-b58f-4c67-abd5-be5a9175bcb8",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02f18161-745c-42d8-8978-6e82c0458be3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "778cf28b-517d-49d3-9f2a-aed09f01a8e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84f5f4d9-6807-4b2c-bfd6-a0334cebf34d",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2beccaf-31fc-408b-99cb-4f903ccb45e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "12fb3e23-aad2-4659-9edb-e3ab5f7c18da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ddb0960-1d3d-4ca1-a2b8-830f38a69eda",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d626b87b-1b3f-442a-97d4-25f6e4bd8308",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee189815-c6e6-4186-a383-fe37ee34eebd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f79080e5-e436-40e9-9f8e-56ec6877ca33",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cea15d44-ffdf-4629-ae4a-cc2c19da7ce6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0bcdd0f-84d4-43f1-839c-c6cdfcb2b851"
                        }
                      }
                    ]
                  },
                  {
                    "id": "222d4ad8-428c-4945-bc1d-0363a0d8f723",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca2cd27f-9bc7-4130-b521-5b5c8254d25e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75d8d744-30e1-42a7-b1bf-61bd698b942c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71256dc5-f3a6-4dc9-b025-00f7f3032bf1",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01312383-05a4-444e-8454-b585069ef550",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a645044d-6f51-41e9-a1e0-36577f89d63d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1614c026-e5fa-4e23-8609-3bf8ea353385",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "392d71ea-fbf0-4ec1-97aa-c8e608043063"
                        }
                      }
                    ]
                  },
                  {
                    "id": "537cf116-1079-4c1a-9dae-19bceffe6dc3",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb36f28f-b90f-48b2-82d5-58e9fe0c4590",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8cfdb626-84aa-4c4d-889c-41877a6bf156"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b64608e7-9b94-4228-9bcc-a4a136d35408",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8de586cf-17f9-464d-a178-a26ec0fe8ef2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43be7d43-7da0-47ea-a1e6-7763b9818459",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bdbbf67-a6bc-437d-885c-408da44b1395",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "007fe5a9-e561-41c0-85a9-bbe84902d817"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d673f67-f255-4835-ab84-28c9d50cd2bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a732d495-f3fb-4854-aa1c-496dffba8e63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "faa20154-8979-4cda-b2c4-ecc0d9a68019",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "249a6999-f532-4046-ac73-d9b8d1b31613",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5eddd636-a581-417d-bbbf-31779d5abe2c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "32a128b9-4c4a-41ea-90c8-e66f8c927f54",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a467a889-22ca-4da3-8d89-c794ce1caf61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df709395-4a74-4bb5-8058-f119852c1eed",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "476042ef-2515-4a1c-a763-ac97cc45b646",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4cea4ab5-2f2e-47d4-a129-0d11b01afecd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "528c11c2-63c5-446b-979e-ae7af3ad90b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e97037c5-f6e0-406a-9fa3-7e7a8b4a6570"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d395ce5-e40c-43e8-adda-a4b495d7f5d8",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bd1ad49-9949-4b15-b537-2558a9a45044",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f999bab4-3cb3-46c0-b2c6-8c4c10fe9dda"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6073ac7-3adc-4657-bd5c-599471c4c594",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e213ebd7-bfe1-418f-bbd0-32f10609f572"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0b20b73-5804-4287-8722-a126dd384a1b",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50f7fa36-9ad0-456e-b2de-9d36ad68cc2f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "72c554e3-5f04-41e2-be99-421d0411637c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdaf464f-6989-465f-94ce-264930f53493",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e40868d7-417e-44ec-bb92-f7492cc03736"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4eea19d-5065-444c-8752-3b9e36117cba",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08956131-c83c-42ea-b1eb-6c3b166b7213",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "547ae595-f302-4dae-b567-cfc7609e213f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c38baeb-62a5-4cf4-8b4d-37513f2c2b45",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d8c030a-f1e5-4733-8735-a571db224ebc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2ff55c4-b411-497e-8360-9b8fcda2a5e6",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e87b1f0-eea4-41ae-ab94-f90578a118d6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4e0666f2-96c2-4910-bc94-acff789b7754"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "502b8fa5-84a2-4431-a3e7-59ed3e0248d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6acf7a41-f6bc-4ad5-ac73-40aa9a3fef1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d4ad389-c7fa-4b0a-baec-8e45c804dceb",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "924c6244-1811-4284-9b95-9629615cf8d7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aaa32379-e5d2-482e-99bd-ec1234f0b16c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fac2ddb5-be05-45b4-bf4d-57403d7211b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7b0a029-c046-461a-b752-0d067031058f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9549ee3-c1ae-4cf4-bc42-cea5f44c135e",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a09b259-8a30-4e81-899b-02c52b914af3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90cde9bc-e3e7-4a17-849a-b6d485f8e9f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8baa7a3-af26-4fb3-88c5-e9c8ca4dcca7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff60144a-d174-4f06-bf87-7f983e39e200"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e30cdcef-146b-485d-97e7-f729c18275ee",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5988330c-48c9-4df1-a0c1-177369deab09",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76f4d416-d654-46d3-a1cf-8d1242b78ea5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ffd4eff-9bb2-483a-8c2f-fdc5d4de3857",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b27f0c16-c0b0-4c13-849a-42845cc2eac0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef4eae7d-03b6-4a25-be42-e0490bfabdeb",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31de0e19-05bb-42ab-b728-113430774e93",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cfca6d39-0946-4649-a375-64424eaec698"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4214041e-3b6f-4522-b5ff-2eb03917904a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6394286-8dda-4d53-8859-db7caa03ee5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d0b97ef-5002-4d4a-986d-0666b3683ec0",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52517e4e-97d5-4de3-81cc-46fda81320f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c124835-2944-4e83-8b27-a5946ef64721"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecd9bbbe-7783-4c29-bfbd-f0dbc23f74b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8e718da-7f5f-4c89-97c6-c6ea0f473a96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eeea354c-86c9-48a6-9396-571e76848098",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "085dcf53-cdca-4e13-83dd-414ff55493ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "595451a5-342d-4d53-9cbc-2b200a3ab396"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d787e5d9-1eb1-4887-9d8b-8d31a452dd20",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97f50f13-eec5-4da7-aa4a-b5b228b434ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09761962-338e-4748-8f7f-42ab067c2465",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "727eecd6-664d-4a3c-88af-70ed2514cca0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f36721e6-4ce8-40a6-93e3-fce28314cf46"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a823fda-218e-4d44-b06b-ca5d9ad5e454",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e2d725e-ecc1-4e01-a1b0-0dd243c74505"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61e2d743-7bbc-498b-ab17-9aaeec9a1ab2",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20378e75-3b8f-4be0-8ac2-e964f7eb9284",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f582cc3-13fd-49c6-a3e8-faca35b5f465"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1dea85b9-67e6-419d-989f-31b65218eb0e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f3870b3-39f4-4ea7-a417-c0feef9645ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab779eee-1c0b-4194-bb79-154da2fdebb2",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d1505f5-0199-42c5-9f0b-8adb73c39af4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6dd1e4c8-95d9-475b-a2b6-778dac5427fe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "323ec79d-f680-43ac-b626-509c6af47bfe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49727406-5ab1-4ac7-8dfc-9f0f165ed5ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0686d1d9-c365-4f9e-b383-163e56139934",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72d3aa50-9205-44e6-b7ec-39abcc8b82b4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4224c35c-a8ff-4350-89f0-b6ea1594e28a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a58d939f-a2ed-4e29-9865-0397ecaa24cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b9bb6d6-0091-482e-89f7-8fd12bd0ce4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04db21f7-3612-4d57-952f-35eb3a8ae727",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53f5a82f-eb43-4975-b3c8-5144de6f3783",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b2b14f67-b976-465a-8b19-2e411acde13e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a62a3f12-90aa-4390-ba8a-e3f555dfddce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36d40328-4f21-48c6-a453-b9613ebcdc84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca194360-4a1e-47f3-bc5b-3f85ed4bcbba",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df2d6561-2080-4149-9741-f058eed756ed",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "016f8939-c2da-4939-9a50-a83afbe166dd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e0c25cc-0e13-4a14-8842-78580460bc09",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c74c379-b789-4611-914e-5e91dac0fe02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c7817b4-6377-4f54-8e41-53eb40c9e1cd",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03780314-0b04-4c21-a761-f2c0f5ec5763",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0295412b-0d9e-430e-b30b-6d556e86181f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "87519aa1-c65c-439d-bc90-2d003bdfc605",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3eba1b5f-d897-4cd6-a763-057192929847"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c201e4b0-b60d-4158-9d27-960792084619",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d208865-6c71-44ac-b209-4f97650684fc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c04570ae-45c6-4fe8-a124-f01ab45c2013"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c16dc545-6ae6-420a-83a1-a8722f7b1a01",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52f1c377-bda4-495c-900e-5cdfb10b1897"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2f6fc22-d7e5-446b-8e86-ad501230d825",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0530e45-ed1a-4273-9bb4-98abdc402c71",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4dff980a-1619-40e0-b5f0-f55d2ae66085"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "66050d74-fc04-4384-a14e-78e9eb85f6a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "588e3f7d-f3f9-4d4d-a1bc-06169dee2221"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ce7ae25-7d19-4fe9-8c21-4bd2d9bf8218",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c9183fd-a2e1-4d20-adbc-1fddd2fcd12f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "57679736-70d2-4757-afee-e9a2e67b0c46"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "40c0c98a-446e-49a1-b3d6-109e32eb2bb7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b0019e80-4898-4e8d-847e-2306bb0287d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0a0a343-7763-40d9-9bfa-6ca1a5a2f11d",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9f8a7cc-23d1-4506-852e-7e2fd15714c9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9517b469-8c1c-4aa0-a1cd-43b22b47dc45"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d03d0cb5-03e6-45c7-b54b-5f2ee5b24a6d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d46f26cf-e53f-4f9a-b8e0-e518cdf2c93d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fe3409f-ad66-443a-96d8-c9197d7b2305",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11de09ce-c612-4a20-a244-87c10f66ffb2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3d729272-7a3b-475c-b723-1919225c43b9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "10c8c112-f097-4633-8da9-aa4c17a616b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ca0a20a-2d76-4862-b99d-436548f2e065"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b50d2c63-8643-4ca2-a086-a4c4762210dd",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3de990e2-d7a1-4458-95c7-51f094f5bb0c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c17e7901-b1b8-4126-8ab7-d2568746c370"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6418808d-f0f1-4a7e-8a43-f5cc1dd13a40",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa6ba9e5-07ff-4355-bdce-0330f2e4d9dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19672271-4857-4f42-82a3-13dbdc624555",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "012b1b4c-bc43-41bc-a8c7-7fde318619fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1113f8ef-b36f-41ae-aa5e-6ad95e9fc750"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a17af84-a765-4a53-ae2a-dfa3727d6f4d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4bfbecda-f11a-4aef-897a-2f4e1a8d0b3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b88312a-600e-409c-9124-009a4ab9a484",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1841c4aa-99e2-418e-b7ce-3eec421a1d54",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52c423c0-4eb6-45d8-a0b8-b5fc8b9a1882"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb42f9e9-de6a-4235-ae7b-217d823ee7f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db447880-869c-4b1d-a835-62a09faaee7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b297075-7d13-4cd7-9e3d-fac6116f22c8",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f87fcd8-018e-48dd-a52d-701e4e2e54d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88acf6f1-9f73-44cd-9b23-4c09f05faf44"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5eac7e7a-2c3e-4b9d-a661-619ddf032b5e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1345dbe2-c564-4fef-a7d0-f72d560e039c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2bc6cbf-153e-47bd-a88e-25efd00f9f45",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2b84ac2-5c4e-45da-a06a-8e0d88b50d3e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eda1cdbe-4ee2-4f35-863f-08703e22ff15"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "34b3d81e-7d59-43a1-af70-6f2ae7e26064",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2787a166-1238-4ed5-b68d-b04a075334b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1bd9a40d-80f7-4822-8ca3-12412855cd88",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8e44412-a87b-493a-bf46-7f05afe1c70e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54fafd46-b6f3-495a-9827-25f651a07fab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "05fdf6c2-60f3-4055-9c98-2be95eadf242",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3eee2633-571c-4929-9de3-1d206dc0456e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fbd650d-0cd3-405f-b6c5-8760a427631e",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9d27060-7e09-4a14-aa2a-89e5d8e4b1c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e3e38a9-9ae2-4bf7-817e-84953f7ec0b3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b778d5c0-ed8c-4d69-81a5-362966f12fb6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d70bcc7d-5112-48fd-a049-10fead84a783"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d83b5147-486d-44b2-a9db-0baba8c752c4",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af644e76-ff45-478f-b655-18b37eeb089c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2ae8957-96db-47ff-8e8e-ef3d8370585d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e420af39-8250-477b-98ca-98906222d21d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f8df319-f164-45fd-99c7-4b854c233744"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24759318-a24a-4863-a303-651bde81b54a",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef69eb15-3c3a-48b5-bdea-00c263bb7141",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6ff6b61-a891-4c15-8e7e-c1f1c13ce559"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "43ee1197-84da-4c58-b820-c201a5813829",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0be9bb83-f9b1-413d-a895-79351de4873f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f68ac6c-2cdc-49c8-beb0-27dbde430d14",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d105ec61-d8d3-4f51-a41c-baf248e99cf4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27ec364d-416c-4e9f-805f-c73cb1b1c43f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc0fb0c3-c324-4344-b308-2e3097642f20",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51883fa1-699f-4007-bc17-da759daf2d2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fde86f79-3df4-49c8-b359-06382048faa6",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "638d8572-e035-42e5-bc7b-f7afbdf8ead9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ca6b61e-ba71-40ff-92c4-24e6fda101e0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0c85d0f-21a7-45ec-935e-86c25e4342aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d482a409-4442-4300-9354-9646e2182806"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8659831-6bf1-4d9f-abc1-a5606d62963d",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a52086af-b2fe-4147-92e6-a749352ebcb0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49fc5ad9-d3f0-4f39-88da-fa0aaa4bf101"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3a90181-7409-4b03-a2b5-69829ce9813e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2d398fb-84eb-4d2d-8eb9-96b11fef11a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12b99945-4727-4d9c-be87-163a52ecb063",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "453578db-2108-4ee5-abf1-8ad392098bda",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ffe4f5b-c98a-4e66-b835-67818bccf17f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfd49df3-47c3-4e6c-b8c6-000ca303f1f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3cad3de6-1020-42fc-97a9-0415773191dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4b75a98-2929-4be5-bd30-55f83ef5445e",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f67b6dff-9fa4-4e75-a101-8aa5e26aed26",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6554b774-bc65-4c3f-8bce-f12cd2045bc9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9323390a-77e8-406f-932c-9f6b308f0f9d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14a6a569-4956-46d3-b7fa-0b67e0ec59fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cca172d-6214-446c-998e-e3d3aeb7f8f4",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4dd15b24-50e0-4a68-ad1b-2b4dcdc232f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d88dc5ab-ba4e-44d8-921d-eaf2b22e42ea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "04282a6a-2fd2-4e4e-ba09-8d79a9f92b38",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95cbc479-c15a-4832-a120-4f36ecd0e0ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2eeeb977-b209-4643-a67c-5c84ccb7215e",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17dbd22e-5ec4-472b-a1fc-61292dfecc26",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "164155b2-5ae0-4a6e-bd70-3fc94adc1d4c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "47be1b4d-bff1-4beb-ae5c-7861611c66fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99d4384f-13e3-4510-bab9-bc7e41a4db46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce6e6be6-d469-4611-8285-2d534463fea9",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04ecb35d-e613-4701-8a56-9bbfddbe9527",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1d514a8-7d87-4977-b4ed-047bdb957e67"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "33bfed86-1bbf-4ffc-bc3e-6f12dbf84660",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d9175d6-cd39-4fcb-9269-94e6a0db3f65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "712e16a2-09c3-42b4-b418-7902deaa241c",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56166119-3f4a-4a6a-9e22-e9c6e02568a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fbbc8033-2cb1-4cdf-887f-bb000e1fe50c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "76c92a9a-cbfb-41e7-a6f0-7dbbd6c32ebb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44e70792-9a08-4660-b796-df610bc11606"
                        }
                      }
                    ]
                  },
                  {
                    "id": "401838f1-48ff-487e-b96b-5b25f8616e94",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac2dcc54-8f6b-4d6e-ada2-ceb1d5d3f927",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "143e04cd-5efa-4005-a88d-fe452ec5ef49"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b34d5c4f-3f1d-401f-8d73-eef8f8aabdfe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "495b90fd-5ae0-471e-9dd1-07020f5390b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "287bbc0c-1e37-4bdf-b8ee-6d9a43cd1c31",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43f1d775-7c7a-4456-ab64-a439ad6e8c94",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a26fb5b9-77cc-4228-b0e5-14d011bdee3d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f8db801-8b45-4a61-85b9-45a3d7ac27fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf664590-1350-45f0-825c-de72b53a5297"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df87147c-5a25-4007-a199-3c207652eb50",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49ada522-6afa-4349-a453-c7f25030a403",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c3f8177-4488-42eb-80eb-e0618ab9ce61"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f650c26-bc31-4b63-94a1-942df892ddf5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e89275b9-bb50-4466-a3e8-eaf226d49f42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a250c8d-1ad9-4e9b-969f-f38583cb4401",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a33f86e-48a8-41ff-8e52-f6de765c6987",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60a70179-c391-49f5-be18-7997ca5a83a4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e243d296-4020-4f65-940a-a3907598b998",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "352a59d2-a7ba-49bc-b99f-63959f323d7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2384bb45-c574-4d8a-b04f-7746dcd1130e",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "173312c9-347f-4dbc-9fe0-0bf4b9a8a7f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "640e3110-32fe-4656-beb9-882716dba9a4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5483ea7-2110-4bea-8de9-31e7fd5ca8d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27f5829c-4d53-4742-a604-3b6473dbb186"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cd63dfb-1dfa-43fc-938e-c02b64e01877",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c377f392-a979-4f94-b316-992cf5034707",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f92f703-74d7-4018-8bdc-3b744eb4bc8b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c90ad5b2-0505-419b-b47a-c603b2837626",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6eacbdc-7654-427f-bdf1-deaea2d41507"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65b28076-b405-47c5-9cf6-87aaaec3acce",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46f2a27b-9f7a-4c55-a954-affbb8f6cbc0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c91a929-094f-4667-8f66-b0047b3ecd11"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d2e8d38-9d3f-4b39-9f9f-80873e966a03",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0254411e-c151-4435-a58d-7624993ae748"
                        }
                      }
                    ]
                  },
                  {
                    "id": "138c131c-8303-4cad-90b4-451002f9e9d8",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a91442fe-3179-4fc9-bad6-b7227fff28a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d5e0154-4daa-40e3-944c-843b69abec8e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0790e876-87f7-440b-9ac7-3dc4bd4f7596",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90bdfdaa-641c-4928-adc4-ae166881d0bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14b6bf9f-6cd9-42e6-9d43-20e6cfb6b744",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cee929ff-a8ab-4ea5-9cf3-4be4bd7eb418",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f18fc2b9-2228-4b46-9426-6645aa1dd34f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "626c4e5c-f1ff-486e-b445-9eb36970bd31",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb243f2f-b025-424f-8070-5f21fe233931"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c94074c-eefd-4f67-abbf-4ab4bef9c9c8",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03678e5c-0cac-4a6a-b06c-bc2e825081f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec2bfea6-43bc-4231-9094-153752cd6ad9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ee5038a-599b-45d6-850f-62e4ebf8985e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6fb8b764-3cb2-4744-a69e-cf49ac676ffe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3989262-d68f-48cd-81db-3a1a3ed4727f",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "536191ab-b2b7-44d2-9151-4fffb6a37b65",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4bc3e78e-0293-4fd3-be31-d7059630d376"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "09b4d681-c486-4a33-9afa-9468b909df99",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "270f409d-f6b8-4714-931f-8967e8b01d0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce5a4c16-7951-4328-b27d-0e0729f1f383",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa3de379-d036-4db2-a78a-6fda362a7c75",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f970fb3c-708d-41f8-acce-5bbb3898b2ec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a3e8807-8f73-4f5a-9541-337ef7c75cad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a6b92b2-e618-4e24-9d98-496db7a132d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "902da487-bb8e-4aea-9d23-7318843bcc75",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3201aea-c34d-4533-841a-cd7d9829cf98",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f9ed5142-7b87-4ca0-a770-36f33fa5b6bc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e41314d4-859d-4e34-878d-ee269f1d398a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f92136aa-63ca-4892-bb3d-0c85a52d786d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11fb2d06-14fd-4cec-b1c4-74c3febe7c58",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9508d9f-f6df-40ff-a851-c58006d8f85e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "54e01654-16eb-4ebc-a850-8fe41b9be527"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8339b115-9aef-4077-b481-4e8fa0299d0c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fbd46d88-a8f1-4ee2-8f6f-6759f6d7c94c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "091a175c-15a8-460b-a9bb-66f9e29cb4f2",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "697ac855-e3fa-4368-8b14-fae6ce49e59b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4d0440a9-d545-454b-99bf-e60974fbc3c9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "db2a0a97-becb-4ce4-9cb4-17667bc31c84",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4988654-de66-4f44-b45b-e91cd53b4c7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66276b8e-be50-47d2-a662-a141f599b88f",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "652aef55-7bed-4d68-900c-2f2ee558c385",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e941494f-d630-48c0-bda8-253ad8d42f63"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af892c11-e5c1-4e94-9d32-3b9b4c29bad5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "abfb5b8e-c94c-49aa-8e4b-55052828ddc1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bb4cb02-3f27-4ebe-a815-285d3e0ed46e",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00de3056-e4f2-4fea-871e-23e47b631023",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aa0c90e1-ca9a-497f-b774-718c8d420e1a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "017a9b1a-182e-4d7f-b39a-432b9e2b38ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41a117f1-df98-41b3-b6d4-6adfe17dbd13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3da5bb97-487f-409c-bc5d-05a19d56fead",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05b1e6b8-4f47-4159-a316-d862b17405e4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9f0b19b8-7bdf-4d92-843c-6da49a585932"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b451e9e7-f5c4-453d-84a4-87d5c787edcc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d92f3913-1394-473a-8f55-2359c30fad6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1100e18a-6380-417d-88be-4d4c45b185d3",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab3209f0-d9ee-4fe5-b121-63381b0359e3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2cceb38b-b486-4342-a888-fd603d962fe0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e0e0606-52aa-451b-bdc4-b5417d58323b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1668f2e-efe8-44a4-8c15-97585799d352"
                        }
                      }
                    ]
                  },
                  {
                    "id": "334c3c79-7b0f-48df-8f3b-e6ddc45b4f54",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c875505c-fade-4166-8b46-1ea255e3493d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "557c93c4-b9d1-47df-8003-1f9568089182"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "19c30df3-25b3-424f-855b-318d452ad06b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "066bbaa0-5b30-4405-a7ad-1deb279d9464"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0ea9e58-e2c7-4b5c-ab1d-0e25e33a16b8",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08fbf448-befa-4e96-be7b-a248632fd89b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b8ddfdbc-caa8-457f-a01b-b941c9dd7148"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "66590628-35e6-4323-8a04-004a15d9a0e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32728127-3131-4780-8902-c4dcc0d801af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b5d802b-079f-4536-b805-dffe97566870",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3d173e1-1dce-4801-abdc-82c504886aa8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "97f1baab-4a04-4973-9967-b5a9588ba56d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c8c722f-3aa1-4062-b0e3-111a9c956f39",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e924d066-cc48-4d31-9766-771b939b2de1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db2da67c-445b-46fe-ba55-d65418d72eca",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96e4df70-d31c-4626-bf77-b9b8cd5a59ac",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6725e258-1aa2-4b7a-966e-b50de3c61a91"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "463c3b96-e1f1-4d13-8638-f68db02b99de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ace9287-fb4a-45ea-873f-23ac7fdeca28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b43519b1-0a56-4f19-ae7f-3d14bf8ed6fe",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c879cae-e22f-480b-8eea-631955fb0699",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "66f0cff7-a491-4ed8-abc6-670fffae496e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a90ed9c6-584f-4c5a-896b-58d281972263",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db58c530-b679-475c-afb2-986091c6cc9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38f2d69d-b026-42f4-9508-f833e24b2a46",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8889352-d703-48b1-96a3-56e7f0dffd09",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "54e3964b-ee37-4198-a882-2cb64cec0fe1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a145287d-d676-4a7d-971c-c03a8a10534a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82f34579-f1c4-43bc-9060-04eb45915840"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aca5c971-9cc7-48f9-825f-0868baa6daf9",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd7aa7b2-67d7-468d-8cf2-974884b3a05b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e94ce2b2-75ad-42ac-a185-cb45017f5008"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5eb30f45-5d1e-4c73-aff6-28d958cd40bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3cea4f94-638e-40e1-be97-47482b969c80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0021e2fb-70cf-4630-a41f-d934f5b0abfc",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f258331e-335a-48f4-86cb-549b591f9a05",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2927f6f8-6f08-44d1-be9f-8e590d50adb5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "23f1d887-3088-497d-9c6d-7c574ba1522e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac59b693-e823-496c-b36f-142b842bedc4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d026dad8-748e-46b2-aeff-0e8f4e2b533a",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6559373-b776-4283-8da3-c638e9385b12",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "368f2136-ec96-4fa7-b4b4-df063465104e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d60b907f-1e2c-43e9-bd35-a4f65faa71eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94a235e6-8a64-4829-8bf7-a794c290c854"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98371de3-db32-4e1d-b474-12648c8ebb08",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b72ee29-6a63-45fb-83f1-5c725a44b392",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "573b8f74-e1d6-4862-ad86-e7fbf5a24fe4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "817e05fb-c812-4bb6-80d0-7fb922c04c37",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b200ba1e-739e-4498-b3d4-23ce23e7b686"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b333f06-e508-40f7-bad8-95e67a40d30b",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24c2f7a1-72f1-4c51-9a37-e74f78cf5ac6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2b5d804a-85f6-474e-8146-3d18c70a0299"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ce997da-4d04-4aaf-9053-57a84c7710cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "974546f4-0077-4af2-856b-d5100bc09e3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56aba4fa-c9c4-46bc-9d2b-0aebcb14fd50",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f19f845-bfd8-49b6-b184-1974454dbb8d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "22901289-b23b-4ddb-930e-f9b7d087ca7a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "584e717e-f3d5-4e9f-8f5d-a3949976fe5c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c274036f-ca32-4fd9-8d49-fa7fafc3c132"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b109470d-55c2-4134-962f-59bd2b4467b9",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd602e7f-5038-4edb-b125-5c77c30c7a65",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "592c302e-2075-4158-9782-6f3b377bcff2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4cb2627-1250-4ab0-803d-4659b0b6575c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5be46493-81d1-478d-9fd8-d60c2ae744a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24568ae8-f241-4b94-b71a-34e4c1575955",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49235b2d-30a4-43ae-9f0f-a44d590efc6c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "968cc3e9-27a6-4c5f-944e-0488b502e00c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fedba086-c3f1-430a-9133-18488440d9ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "578c16c9-fccf-4f3d-b354-b01bb2805a4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43faf62f-2336-4aca-a8f4-192785cb6bdd",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71c9b3c1-f382-4dab-9351-09c0cb5d4714",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dab922fa-6e93-4b8b-9090-2caaa69d17ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "662e8f33-580a-424d-bfee-d131b4212329",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb5d3bb8-2c1f-4b31-af81-e2d0c8bf366d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4486112b-4425-4df1-b17c-53b7f5bec175",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ccadff2-f61b-4827-9c3e-3c70773da9d3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9d840ef7-a8e5-41a6-bc3b-a1e3b261cba9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ae4fc76-1150-4034-85f0-56d2f5e7d6db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91e2f1ef-9954-49bc-9cc0-bfdd35a4da72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8c4134e-24a5-4bf8-81a7-59b0a56cbf78",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "003d1e9c-f535-433a-8a9c-6bc594df29d4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "69c84244-b30c-4660-b204-13e011a4bb94"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9815f37b-76d5-4fff-a6d8-dc93e2a6f33d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af187185-fda8-4429-942e-c6cd0d2f25e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc9b999b-4801-4e95-8474-48ca9b738d64",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e32b853-d327-47bf-9eab-718bce7e1bc5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "00017d5b-6f52-451d-8ce7-8ab6595c61a9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "03156ca1-9f47-476a-929a-6b0ccf21b59d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c9ba17d-aadb-4faf-9946-d86327bc3c67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9086c1c8-0652-4211-839e-cc784d41d1db",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73498203-2bdd-47e6-81e5-48d58d9de294",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "86cee035-7b4d-4a21-b04b-2377d1778290"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0eb48c23-22fd-4fa5-bb3b-6696f27b7d7f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39e02a9c-67fe-4ced-8704-5056a4a2a8d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efc9ca6c-439a-4178-9f8a-dafe58c7674a",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74c1bcc9-aa84-4007-a38c-d3b0976e6684",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c75d56a7-afad-4582-be42-9d6cf3ea2a8f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b41ecf6-1532-40b1-8251-6d3ce976e80a",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96ff7378-9f50-4fe7-8d2d-dd25bece963f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a55b46c-39e2-4756-b8db-a8c5cdc19be9",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "906458f3-8816-43f6-b629-55045f11f48d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "718f2f94-770a-4c4f-bf66-31c14ba2291e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "22cb59d4-246a-4950-8862-ff7f7ce32786",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c8473b4-02d5-4a0b-a05c-3ad07314a836"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39d57b24-de18-4abc-86ae-739de4ff790c",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e5a63c5-c3fd-48bc-a882-db42bb0bf54a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5aed858c-7b5b-45b4-82aa-6aa1e035297d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc57be7a-e9be-46cf-93de-564680753d75",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb043eff-7c6c-48a5-a152-96429473c1d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0854269e-ef14-440f-94ca-17508e04065b",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc22e32e-d084-4739-ba58-945b5b429c41",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f0639924-e875-45da-b69c-f5c1e5824912"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d1ec0e4-a299-4596-a113-24a5e6f4747d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01f986fe-072d-4713-a123-e5f6c50e7e9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9036348d-a1f0-4816-85b7-feef2d3a5c11",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01b92486-dba6-432a-9e01-8eca10717955",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "79c90cc3-03f7-46f6-83c7-e369209dca4b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbc5996d-74d5-4d0b-b7b1-dfcd93ff72a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c1f8c54-0528-4425-96a4-00db6d3bc145"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b5675e7-a4f4-4597-9340-c9df9f295a80",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1cdc9ccd-3cd3-4ffc-9ba7-cb8320c29ab6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bdd6097b-3411-4afd-b814-6009672f8488"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb1f1298-9eba-4553-8508-0a9bca532427",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16506433-dbea-4bda-8982-3ee4030525a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8105e54d-0f0d-4b2f-9adf-5152e55d815a",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09761cfe-18cd-476c-b4ec-a92c315b6883",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "68d2549d-dc0d-44b1-9af4-30a8b977bf86"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "58873734-f124-4c40-b45b-88e217bf3252",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce114767-55bc-4554-a90b-bc92e857c8d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cff23edc-a36a-4c17-a31f-763ba5d0854d",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99db738f-2095-4dee-af35-2ccef24cc8cc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6ae0ac67-add6-4e0b-9c7a-d33d08fb5ab4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a445ddf3-3c18-4c6c-8c7c-d833566710c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4cdc4f4b-c195-4350-8281-5c61d9da67f7"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "74d505ce-1914-47c6-abef-a43b08ebbbfb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8e2b31e2-ce43-4e60-876f-a7a708939dea"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "08f976d1-c019-4c70-b2ff-540e39910963",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1d4b60e6-1df7-4911-bad7-abb520287eb1"
                    }
                  }
                ]
              },
              {
                "id": "1df35adc-aa62-4a12-99ac-aeb00aecc38d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "9c22ca47-73a0-481e-868f-08ad00d01204",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a630601a-8fcc-4fbe-ab8c-022d1c7028db",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "0ca00add-33b8-4ee0-897c-b4707aa91c24"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bece4231-b143-419a-ae82-863e432be3d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5ff04a4e-d2d7-4aea-92c3-fc026a21acdd"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d0a151d4-1b6b-4981-970c-4e6d7a78dfd3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3e2a1d7a-976a-4df2-b7b2-9bbe0cce2496"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "41f729e8-943a-4984-b2cf-7583648d5597",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5b3f12e7-8a25-4578-a508-a84fa0e518fa"
                    }
                  }
                ]
              },
              {
                "id": "9b83e58c-d239-4abf-8480-11ae3bb15cc2",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "59282fce-7ac6-4875-9077-f4002eda73c1",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb0b93f5-5693-48a9-b7ea-6efef9579630",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "9782be5c-cfe9-47fc-84e3-5561dd97d746"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b80d98d3-d03e-4ef5-bd48-b012b63808fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "291839bb-0d47-4861-af54-6ef2894f643d"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "3b8ae14a-e1ed-4f0c-bea1-d941d3590941",
            "name": "Positive Testing",
            "item": [
              {
                "id": "ba30c465-de85-4309-a9a5-5c3f57d7d649",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b3ef2942-e857-424f-a95f-67a46fe301f4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "8dfc005a-2561-4220-863a-25d764489d4b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0797b997-a41b-4093-b047-3e1bd59ee48e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ec7dd820-10c9-4a41-aa83-4234b29664a2"
                    }
                  }
                ]
              },
              {
                "id": "af5e0b6a-c610-4778-b1df-79a8f84700dc",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3e0ab1de-0856-455c-8530-d494b9db7a5f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "f2a82ff8-434e-477a-8afb-120fc5b4d7fe"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "99489b9a-ba1f-4d47-86b1-f0dd15ece8c7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5c1d1f85-145c-4f18-8b87-8a2aea9182fa"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "848e3262-7324-446e-928d-2ac43455181d",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "1d58c0c7-bca4-4141-8b89-d358edaf1ad4"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d11510c3-64cd-4eca-adba-3f5d745f99d3",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "03eea826-cb53-4a03-8676-549de6e0ec03"
            }
          }
        ]
      },
      {
        "id": "27ea1ffd-838e-49c9-b4b1-27b713bf142f",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "139a96b5-ee94-41e2-a683-71a358c7d54f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f5144ebf-59fd-49b5-bcf6-8cef2fde3f1f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a2ebf6de-980d-4643-816e-73a48ef0ac3c",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4a1f691-f027-4ddd-aeab-61538de2dcd8",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "76f0d7dd-31be-47a9-b3ed-913ed59bcc4e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ebd18d0-727a-49ef-aeef-ddc701290e3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7d8142eb-84e6-4579-b589-7b476ed103d3"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9abee540-86bb-4102-89b6-e3ea218c3443",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d1f7dacf-e687-4dc8-b9b6-41d191962557"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "cb2b1e26-663e-4c27-b63c-6f00d092def0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "428e999d-f8a6-4c40-a485-1a7a6ae89a3e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2ff05631-7728-4b38-a641-1434e52f4dc3",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "77588e5f-8aad-43b2-9fa2-b3da81d259bc"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "261479f3-d833-4c21-ad91-9d92fb035e5e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2f202340-43f7-4fd1-b34b-4d8017bb5624"
            }
          }
        ]
      },
      {
        "id": "42a11409-ef99-406e-8176-da1b5ffc2434",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "1417d40f-8eac-4b20-a4f0-e1ad3a1a23ac",
            "name": "Negative Testing",
            "item": [
              {
                "id": "222e19f3-f654-4797-85f3-1d90f1a50b6c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2b9a665e-d121-4ea3-a0f7-f064a7e9742c",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1bba7857-b662-40a5-93b1-e5e8d47a0bc1",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4229e9d9-00bd-4789-b3a8-3f51e9c79d50"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e1c390f-a4e3-4d03-a40b-33e4e85f6c98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2d2cc51e-132d-46ef-932b-cccc71073707"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "96fbbb32-fd39-4ef3-ab0e-1183214b2595",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b23026de-630d-428c-a406-6e498207d325"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "3e27bb4b-4dea-47c3-8074-eac84b4393b2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "12eda88b-fedf-4743-86c3-bbdf79f9021f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "93a3e60f-eb63-4924-8f52-9e6fb3be5078",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "f997d75f-9926-4f74-8dcb-50215131cab2"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "37acae8c-24a7-4585-84d4-6f17bcbfd8b0",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b187168f-2d3a-413c-bd35-c90353a1073e"
            }
          }
        ]
      },
      {
        "id": "65369aa9-e8a7-469c-aac6-c6343625716d",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "4af20684-2852-4e9d-9261-4781725e78ae",
            "name": "Negative Testing",
            "item": [
              {
                "id": "8e7f4229-f96a-49ce-b328-9837469f18da",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a18b4fd6-72de-41ca-b8b9-39308a3e5d0b",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "534b7245-7c2f-4eeb-8702-22738226339c",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9ddc0d75-d66c-4e2b-8dd1-ca1eb9967afd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b86ea10-4ba1-4415-9f39-69ee2fb6a334",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "916c1ff4-aa50-4171-a854-8a8fbdee6793"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4a54fdb6-d6cb-42f7-ab6f-a199b00deea9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b847d5a7-34e1-4bb2-b2a1-fc505e2a055c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "13e6a3be-910d-4c82-9065-3eff76a903a7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "99a16f82-8ec3-4a42-99c5-716f53f98845"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "887d1781-f69f-428f-8e82-905506258f09",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "cdffaab6-07e2-4eb3-ab1a-04f60eb90af6"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "fca847c7-eb13-4d61-ba1e-0a2a8c34d019",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "44ad5cb3-45d1-4cea-8cba-6722adf28d08"
            }
          }
        ]
      },
      {
        "id": "dd565f10-75e6-4ac6-a314-84924c40e253",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e64c97d0-525d-4bc0-8985-597240046023",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b142bc64-97e2-4f67-92d9-0c6198cc7b5b",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "7b22cd14-56ea-4015-9d98-c65d6d8bb59a",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d9994faf-26e9-4c98-8075-a87115cee8a4",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "cadd527d-91d6-461a-93e5-c144f821fb99",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1891,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 507,
        "pending": 0,
        "failed": 71
      },
      "testScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 941,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 66.8253968253968,
      "responseMin": 12,
      "responseMax": 688,
      "responseSd": 85.98464050410577,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1718152697688,
      "completed": 1718152722947
    },
    "executions": [
      {
        "id": "e4d678c4-cd8c-4575-87c3-0b1dc3f92345",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 250,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "14b278e3-6771-4fca-bb21-464f1b16fd70",
          "httpRequestId": "ce25d7de-1f8e-4f26-832e-1d1cc784723b"
        },
        "item": {
          "id": "e4d678c4-cd8c-4575-87c3-0b1dc3f92345",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "05ee6003-64b9-4d12-9c6c-8432255a5ecf",
          "status": "OK",
          "code": 200,
          "responseTime": 54,
          "responseSize": 0
        }
      },
      {
        "id": "354e53a7-31cd-4b97-837b-26d39c8907a8",
        "cursor": {
          "ref": "dc93982f-79f6-413a-8cdd-9e30f7eee94e",
          "length": 250,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "8a6b6500-0d7f-4741-921e-5731b45b3584"
        },
        "item": {
          "id": "354e53a7-31cd-4b97-837b-26d39c8907a8",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "2ccd528a-e61c-459a-b29e-fa06ff837795",
          "status": "OK",
          "code": 200,
          "responseTime": 12,
          "responseSize": 0
        }
      },
      {
        "id": "f2a0a8b2-526b-441d-9ab4-4284200bc0b2",
        "cursor": {
          "ref": "f59ca078-4686-40c0-af16-a3b5def94cb6",
          "length": 250,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "d1823ba1-b871-482d-aa8e-1b1deb6ba1d9"
        },
        "item": {
          "id": "f2a0a8b2-526b-441d-9ab4-4284200bc0b2",
          "name": "did_json"
        },
        "response": {
          "id": "c7c44474-7e6a-44c6-b95b-b75e89f64033",
          "status": "OK",
          "code": 200,
          "responseTime": 209,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "782cafa4-f068-4cb1-9a4d-0406684cd3a7",
        "cursor": {
          "ref": "8fe0837e-aba2-4d7b-a4fc-84b0016b54b6",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "6c86026e-d496-4dd4-bd9a-697c03017948"
        },
        "item": {
          "id": "782cafa4-f068-4cb1-9a4d-0406684cd3a7",
          "name": "did:invalid"
        },
        "response": {
          "id": "b6558996-61ab-4532-b252-a0ac605eaf10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "782cafa4-f068-4cb1-9a4d-0406684cd3a7",
        "cursor": {
          "ref": "8fe0837e-aba2-4d7b-a4fc-84b0016b54b6",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "6c86026e-d496-4dd4-bd9a-697c03017948"
        },
        "item": {
          "id": "782cafa4-f068-4cb1-9a4d-0406684cd3a7",
          "name": "did:invalid"
        },
        "response": {
          "id": "b6558996-61ab-4532-b252-a0ac605eaf10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "236eed93-3572-4655-8bcd-8e8004f62f2c",
        "cursor": {
          "ref": "8ba58e89-a84b-4a5e-822e-7631df3bbbc0",
          "length": 250,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "c8a355ab-e586-4ea9-a844-7736e502a2e1"
        },
        "item": {
          "id": "236eed93-3572-4655-8bcd-8e8004f62f2c",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "b222bb2d-8196-49b0-b3d9-2d19229037ce",
          "status": "Not Found",
          "code": 404,
          "responseTime": 312,
          "responseSize": 49
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5708d47-efd3-465b-a3ee-6e82bd19ae19",
        "cursor": {
          "ref": "e7221733-289a-4e7b-b173-893a9af7fe86",
          "length": 250,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "5e4d7b28-8d59-4de0-bd34-7238a0a11334"
        },
        "item": {
          "id": "f5708d47-efd3-465b-a3ee-6e82bd19ae19",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "d125b7c3-7bb0-4fb1-ab7c-3806d18c63e6",
          "status": "Not Found",
          "code": 404,
          "responseTime": 34,
          "responseSize": 82
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee152390-378d-4d62-ba55-432942f60c60",
        "cursor": {
          "ref": "2500e705-be71-48be-bf6c-96f314425356",
          "length": 250,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "3556206c-7161-4938-9919-c296ddd92309"
        },
        "item": {
          "id": "ee152390-378d-4d62-ba55-432942f60c60",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "f852d913-7610-4632-954c-4bd006f6754c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 23,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f74fa78-b5c6-43bb-8e76-7f1348301868",
        "cursor": {
          "ref": "a66bc31b-2a26-467a-a883-ba4df10ec4d3",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "68f93035-f807-4eb7-bf24-41680a5d35cf"
        },
        "item": {
          "id": "1f74fa78-b5c6-43bb-8e76-7f1348301868",
          "name": "identifiers"
        },
        "response": {
          "id": "75b8ac6d-ccb2-403b-b023-93ffc830ac22",
          "status": "OK",
          "code": 200,
          "responseTime": 87,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb2398fd-75b8-4f94-8885-7235c390ea7f",
        "cursor": {
          "ref": "214d4504-ab2e-4b0b-abc7-0171a34afd23",
          "length": 250,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "966bc0c9-6f78-4562-8584-af983e8642b6"
        },
        "item": {
          "id": "cb2398fd-75b8-4f94-8885-7235c390ea7f",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "d9c7cc1d-290d-4944-add5-8749af71f488",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b09edc8d-5560-462d-b81d-4d541988bcfb",
        "cursor": {
          "ref": "19355a18-72a5-42ca-889a-4098c93eba19",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "59060b4a-aba0-40c3-af48-7a50b053e1ea"
        },
        "item": {
          "id": "b09edc8d-5560-462d-b81d-4d541988bcfb",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "9be485a9-eb07-4c9e-9d46-83ec0c458916",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "834a2bd6-7b64-46c8-ac54-7271101ee0aa",
        "cursor": {
          "ref": "604fd870-89ab-416b-a403-8c892a764335",
          "length": 250,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "3cd0d4af-f0aa-4d42-b4ac-054992b15d2a"
        },
        "item": {
          "id": "834a2bd6-7b64-46c8-ac54-7271101ee0aa",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "5624b353-2f57-412a-8bdc-8d1e3ef0c766",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17cb931e-7cbb-47a5-8b97-9d9487982fad",
        "cursor": {
          "ref": "d1fc6585-5f43-4d7c-872b-582516b9858e",
          "length": 250,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "984b1c3e-c079-4570-aca4-3cd750e8be8d"
        },
        "item": {
          "id": "17cb931e-7cbb-47a5-8b97-9d9487982fad",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "f20ad5c5-50b5-4965-86b0-1be2fafa34eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd17af52-314d-44b9-aac0-b14c120ff255",
        "cursor": {
          "ref": "a28a6848-3297-40c9-8b34-75a666e1fa26",
          "length": 250,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "9b9469c7-30ad-4763-8bbb-0c65221b7002"
        },
        "item": {
          "id": "dd17af52-314d-44b9-aac0-b14c120ff255",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "7a1837a2-a2c9-48b7-9b80-e7fcaef2d580",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3188e7b-75ea-4156-90fa-783031ab68d6",
        "cursor": {
          "ref": "3f8774ef-8914-4320-ad01-a4ade22b209f",
          "length": 250,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "b5d2c111-b447-4892-ab20-dfef15dd6195"
        },
        "item": {
          "id": "b3188e7b-75ea-4156-90fa-783031ab68d6",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "469ccf41-6a6a-42f5-8fb3-0057bd349a63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41266a3a-a6c3-4191-be0f-fdd4b12369e5",
        "cursor": {
          "ref": "0f180386-cde0-4bc7-b31a-1055b71d0a05",
          "length": 250,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "09212324-9fc5-4898-a10f-22b440b0b567"
        },
        "item": {
          "id": "41266a3a-a6c3-4191-be0f-fdd4b12369e5",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "a3fda51d-71d2-4ed1-83e8-205bf43ef448",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4443a3c-1c91-4eed-9d2e-15543b744613",
        "cursor": {
          "ref": "5c9b9795-52fd-4de9-99d4-c24ba3d94023",
          "length": 250,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "d63baafb-dc1f-4cb8-a0d5-0c793b7114b0"
        },
        "item": {
          "id": "e4443a3c-1c91-4eed-9d2e-15543b744613",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "09ee708b-9d96-40a3-b8e2-d43e225fc2c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80c321df-d5f1-44f7-8aab-8669b7d306f9",
        "cursor": {
          "ref": "63793833-1c9b-4e2e-a1d4-7d0d82ddfca2",
          "length": 250,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "54e65d1c-5558-4ddd-be3a-5d7d62e4dd45"
        },
        "item": {
          "id": "80c321df-d5f1-44f7-8aab-8669b7d306f9",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "13e4ffa7-a9ce-48ea-a98c-322f8fbe4cbd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6688f3e-23ec-4435-b462-014404e87245",
        "cursor": {
          "ref": "c2218fdd-ca15-44f1-97e1-e070ccbfa74c",
          "length": 250,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "466f5885-ff85-43c6-8ee6-755b19499a7a"
        },
        "item": {
          "id": "e6688f3e-23ec-4435-b462-014404e87245",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "a51155b1-0a96-460a-a580-ddfc8ff0763e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0e123c8-3118-45df-ac68-e6ff4158e41c",
        "cursor": {
          "ref": "5ca76529-a812-4eb0-be3b-f65f29f25eec",
          "length": 250,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "8de87079-8ccd-4197-826b-62efba3b0240"
        },
        "item": {
          "id": "c0e123c8-3118-45df-ac68-e6ff4158e41c",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "e7be3e20-05eb-448d-8288-e9012403079c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8afda990-d712-444a-b990-cf7a94cf5262",
        "cursor": {
          "ref": "1b1d4a8d-5048-460d-8b2a-872e14892707",
          "length": 250,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "515a82f8-68a3-4664-83b7-fe595488fb1c"
        },
        "item": {
          "id": "8afda990-d712-444a-b990-cf7a94cf5262",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "118b11a1-7dc3-4459-a5a3-ea54e1758430",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c531802f-b2b6-4b1f-8c68-8bfc51762580",
        "cursor": {
          "ref": "c6f736f2-112e-45cd-b8ce-a7d37cfe0eb7",
          "length": 250,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "31ca30a6-a7f2-4164-8a91-927c2e64b81f"
        },
        "item": {
          "id": "c531802f-b2b6-4b1f-8c68-8bfc51762580",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "8ba1f698-54f3-4be9-b871-369d190acaee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd777ce5-4610-411b-9e22-15635d081804",
        "cursor": {
          "ref": "a368866e-1ee4-45b6-943b-0e8558b26b57",
          "length": 250,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "56d98e63-fc5e-4f04-bd0f-608315f0fb8a"
        },
        "item": {
          "id": "bd777ce5-4610-411b-9e22-15635d081804",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "ca475dd5-475e-40f1-ae2c-cd4a524e2e50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d38e10d-f731-49a1-8f4a-d03db95d74ce",
        "cursor": {
          "ref": "fde1057a-24b1-4ca8-9244-cb88314032d3",
          "length": 250,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "f063e840-9cba-4c19-8915-1150b4987a88"
        },
        "item": {
          "id": "3d38e10d-f731-49a1-8f4a-d03db95d74ce",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "78279370-6af9-44f7-b22a-078969db63a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a666bf0-175b-47d2-ac34-c6e46d585790",
        "cursor": {
          "ref": "159a8b1b-d91c-469f-8bd9-eca6927f01d5",
          "length": 250,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "dcddf933-62e7-451c-b048-c5cdfdde4d75"
        },
        "item": {
          "id": "2a666bf0-175b-47d2-ac34-c6e46d585790",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "ce949a9f-ae08-498f-8bcf-771f8bef467f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58cbc2dd-7d35-4d5b-8a3b-a9b6ab44270c",
        "cursor": {
          "ref": "03e8e950-ff50-4fd9-bd28-7fb230a42fcb",
          "length": 250,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "6c8c6c9b-d1f0-4e01-bfe3-db81b5da8eb9"
        },
        "item": {
          "id": "58cbc2dd-7d35-4d5b-8a3b-a9b6ab44270c",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "0750a8c2-9e24-49b2-bed9-85cedd672888",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53b59251-fc97-41f4-ab24-4754fe5ab1a5",
        "cursor": {
          "ref": "3136b520-2c67-498b-acda-b863041ea274",
          "length": 250,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "5cfb1131-1590-4d85-81bb-4db35f0cde5b"
        },
        "item": {
          "id": "53b59251-fc97-41f4-ab24-4754fe5ab1a5",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "6221b9db-e0f2-4e2e-95ff-6bff0be0a1bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a21af2b-5eb8-4767-8243-b448124427f5",
        "cursor": {
          "ref": "3e33f181-1dc7-4a8b-a448-9e8037cd6e9d",
          "length": 250,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "ac2b1588-85fe-4387-97f9-162e36f7f4ca"
        },
        "item": {
          "id": "2a21af2b-5eb8-4767-8243-b448124427f5",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "5a86db42-a1b4-448a-9988-4f611e5d28ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a25a1abd-9df3-4c37-96d5-120c6b7e4cbc",
        "cursor": {
          "ref": "d9b2c089-f03f-4a79-a55b-7f3251d1cf9d",
          "length": 250,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "dc551acc-3159-42da-b721-2c37087d412f"
        },
        "item": {
          "id": "a25a1abd-9df3-4c37-96d5-120c6b7e4cbc",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "d939fa25-fbf6-4b73-acd7-2b473abee2cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b6235cd-5118-4026-b277-5416f9e166ba",
        "cursor": {
          "ref": "910e6b32-cc30-454b-aa5c-06c64256b1df",
          "length": 250,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "aebbd875-61d5-462f-a93f-163aa57b28ae"
        },
        "item": {
          "id": "2b6235cd-5118-4026-b277-5416f9e166ba",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "42ee0e94-0fe8-43e7-89e2-88b65153fde1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ab8fed5-2fb4-4c00-ae45-95f6efd58488",
        "cursor": {
          "ref": "752197ac-7086-4ef2-956f-b2ecd398e88f",
          "length": 250,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "0e7f8ca9-da84-4b63-9648-d7ba4e95e7e9"
        },
        "item": {
          "id": "3ab8fed5-2fb4-4c00-ae45-95f6efd58488",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "4f5eaefd-e53a-49ce-a7bd-3b1186006833",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9bcb256d-96d3-43e1-8584-64b355d33c9b",
        "cursor": {
          "ref": "ddfa5021-95e9-45ce-b270-7c4ea5fbdc19",
          "length": 250,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "a8addb5b-49ec-4e10-ae2b-20849f14ecf1"
        },
        "item": {
          "id": "9bcb256d-96d3-43e1-8584-64b355d33c9b",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "0e3a9c94-fc97-465c-97ef-d9e2a22b0b32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e0518fb-02bf-4245-ab57-f7de281a2022",
        "cursor": {
          "ref": "c38a1ed0-bae2-475d-851f-606ca5688799",
          "length": 250,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "58406cee-fc23-4651-be09-76a32c0b9e2b"
        },
        "item": {
          "id": "2e0518fb-02bf-4245-ab57-f7de281a2022",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "6823c55b-3ea0-4a82-af5a-38493f2af9d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "886bbed6-22a8-4f2b-8442-f996f413bbcf",
        "cursor": {
          "ref": "ba1884ad-b66d-46ee-8a70-892fa11eaaf6",
          "length": 250,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "6a75bded-6596-48a2-ac42-e15f79c7e12a"
        },
        "item": {
          "id": "886bbed6-22a8-4f2b-8442-f996f413bbcf",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "1768c14e-ccd6-4de6-b0a9-7599f0211d2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8ba45c0-64f4-46ff-a5b7-fed9bc0f0267",
        "cursor": {
          "ref": "d5e505ec-9500-4b5f-9bb4-de1d97d57256",
          "length": 250,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "7e30b1b9-4440-4674-9828-c7e064d11ee9"
        },
        "item": {
          "id": "a8ba45c0-64f4-46ff-a5b7-fed9bc0f0267",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "679deee7-c674-40fd-aa0f-6b7d3067e418",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52790b33-8779-4b10-ae3d-a2d4703eecbe",
        "cursor": {
          "ref": "fce32fba-1c4e-4381-be6d-69ac3d6e0c99",
          "length": 250,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "aa0669d3-8179-4ea4-aa7e-d8d15c4cbbd7"
        },
        "item": {
          "id": "52790b33-8779-4b10-ae3d-a2d4703eecbe",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "ce3b09e1-8677-4972-a806-3df5a80e6f07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9d2fd17-5999-4bca-ad8e-a4daccd7390f",
        "cursor": {
          "ref": "592f357a-67b4-446a-bc65-789315251e71",
          "length": 250,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "83adff5e-d99b-4415-b0f4-e8215062993e"
        },
        "item": {
          "id": "e9d2fd17-5999-4bca-ad8e-a4daccd7390f",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "cdbdea8b-2662-41ca-adbf-04816080d380",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "486a88b6-03db-4902-8469-658cd1e6bb64",
        "cursor": {
          "ref": "c04c0dd1-0413-4a87-afb4-e16b0d2bc9ec",
          "length": 250,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "b020ab2c-5cb3-4812-81af-0f5f1cacf6f1"
        },
        "item": {
          "id": "486a88b6-03db-4902-8469-658cd1e6bb64",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "92b522fd-3bd2-4d61-82a5-b02bdbdda1c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32a6105a-0cb2-4d76-a431-176655fe07ab",
        "cursor": {
          "ref": "91a05ddc-d367-432f-a82c-5c7092d395a5",
          "length": 250,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "c2002202-9400-4ae4-9027-37dfad011764"
        },
        "item": {
          "id": "32a6105a-0cb2-4d76-a431-176655fe07ab",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "388cd797-c0f6-487c-b551-67b61b4e9469",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "459946cb-4086-404b-bfa2-14a22855d672",
        "cursor": {
          "ref": "68729228-c6ef-4eb4-b7bb-eafe40baad27",
          "length": 250,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "507e3154-95c7-4452-b807-c66f98653d36"
        },
        "item": {
          "id": "459946cb-4086-404b-bfa2-14a22855d672",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "29119681-91fd-4a33-8215-d0426d9ca002",
          "status": "Created",
          "code": 201,
          "responseTime": 688,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "3eb47822-eb5e-479d-81a1-25b187885e79",
        "cursor": {
          "ref": "350f201d-d3c5-40aa-b3b5-7eb90de9b243",
          "length": 250,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "dd24c907-c47b-4f5d-85f0-02ac18b306c7"
        },
        "item": {
          "id": "3eb47822-eb5e-479d-81a1-25b187885e79",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "e892c6c2-ffc5-4e9e-a6e6-d2cde8849ea9",
          "status": "Created",
          "code": 201,
          "responseTime": 270,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "f9245e51-416a-423e-a4a9-26574f50f6e8",
        "cursor": {
          "ref": "18c07e05-7e1b-4d2d-9b29-5aba92f762b4",
          "length": 250,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "0b3c0ce9-e4e3-4a7a-a0cf-43b5fcba73e5"
        },
        "item": {
          "id": "f9245e51-416a-423e-a4a9-26574f50f6e8",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "ed7ca4fa-12d1-4a11-aa3b-b803bd14cda9",
          "status": "Created",
          "code": 201,
          "responseTime": 343,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "1d13d5af-82d0-452d-9d48-5f406da47176",
        "cursor": {
          "ref": "3875bc0b-6e0b-406f-9019-05f9c16a7e12",
          "length": 250,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "5d818689-de2c-4ce8-835f-29f8bbf2d221"
        },
        "item": {
          "id": "1d13d5af-82d0-452d-9d48-5f406da47176",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "c4be2f5d-592d-4943-b043-585fbc1b4233",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b620f27c-6c21-49aa-ab64-4109a5d3f125",
        "cursor": {
          "ref": "9c24d0ee-07ea-42db-9078-02abce1b3b2d",
          "length": 250,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "1a67f55b-ffbe-4b80-8d7e-71eaef8dc5a6"
        },
        "item": {
          "id": "b620f27c-6c21-49aa-ab64-4109a5d3f125",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "2817cf21-74e3-4ad6-9e56-afe79ed90c0a",
          "status": "Created",
          "code": 201,
          "responseTime": 343,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "36110d9b-10f2-4304-9819-d829db1535f0",
        "cursor": {
          "ref": "924246b6-bbcc-4ba7-91d2-c4e65973cf7c",
          "length": 250,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "18c0d076-9b76-4c06-8b63-6df7c3537651"
        },
        "item": {
          "id": "36110d9b-10f2-4304-9819-d829db1535f0",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "2a088502-0b38-4894-824a-88c73e8134f4",
          "status": "Created",
          "code": 201,
          "responseTime": 312,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "87c4f766-1640-4db4-a83b-e07d7b2883e7",
        "cursor": {
          "ref": "42057938-52a8-4ee2-8a61-7aede06ee2d6",
          "length": 250,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "56c4628c-4119-41cc-9a84-b58f6cbd45da"
        },
        "item": {
          "id": "87c4f766-1640-4db4-a83b-e07d7b2883e7",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "7982db63-cbe2-4253-a5e9-6eb17f62e0f2",
          "status": "Created",
          "code": 201,
          "responseTime": 282,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "35558f60-5c26-4b99-856b-307578653d17",
        "cursor": {
          "ref": "26e9e838-2a1b-49a1-b1ae-55e262d7f8d8",
          "length": 250,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "1274ca58-2621-4964-bc81-f16058892c78"
        },
        "item": {
          "id": "35558f60-5c26-4b99-856b-307578653d17",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "a6833d4e-5753-407b-a7d5-a43d1b5c6198",
          "status": "Created",
          "code": 201,
          "responseTime": 282,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "5a6aff37-9f7d-4a5b-94db-48ecad682178",
        "cursor": {
          "ref": "844596d0-8bfb-46bf-bd3c-05d57d75b950",
          "length": 250,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "1bbad232-d725-4f87-bbc6-e1f7b6ddd900"
        },
        "item": {
          "id": "5a6aff37-9f7d-4a5b-94db-48ecad682178",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "abae9ac8-3b9b-45bd-a021-3ec667e849d5",
          "status": "Created",
          "code": 201,
          "responseTime": 273,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "92436a0e-9f19-4edc-a199-4375c896e2da",
        "cursor": {
          "ref": "e889d138-1989-4d26-aab2-7dcb484c7797",
          "length": 250,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "a8a148b4-8bcc-4c93-a545-c6f71db5c1c9"
        },
        "item": {
          "id": "92436a0e-9f19-4edc-a199-4375c896e2da",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "93913182-97b6-4a24-9b05-a94f1e5fe855",
          "status": "Created",
          "code": 201,
          "responseTime": 293,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "6e17dedb-0748-4bd7-aafd-374a5f6793e5",
        "cursor": {
          "ref": "07f89d22-8cbe-4ab1-ae79-fde5bb31b483",
          "length": 250,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "12eb68f9-8078-43a1-8a38-099a9648d55f"
        },
        "item": {
          "id": "6e17dedb-0748-4bd7-aafd-374a5f6793e5",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "7eb6c035-4c7e-4cbb-9709-162ac9f6d3c7",
          "status": "Created",
          "code": 201,
          "responseTime": 273,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "3eaffd5d-a989-4020-896c-ca282aaffbd8",
        "cursor": {
          "ref": "4269d380-2bcb-4b33-90b4-a9cffc6f8e4e",
          "length": 250,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "7aeded1d-9f1a-42d7-a800-0e6af0faa2a7"
        },
        "item": {
          "id": "3eaffd5d-a989-4020-896c-ca282aaffbd8",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "c855ab28-f5d5-4eb4-b5ec-ba9268fa4ee8",
          "status": "Created",
          "code": 201,
          "responseTime": 285,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "6eb5b185-9221-47bc-8577-dde1e36ccb58",
        "cursor": {
          "ref": "ffdc724f-cf85-4b2c-9b4f-dd259c5521ef",
          "length": 250,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "5e0b5baa-9bcc-426b-907a-66b1f6802e8f"
        },
        "item": {
          "id": "6eb5b185-9221-47bc-8577-dde1e36ccb58",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "6fc36965-b07d-4236-be46-e9ee9533851d",
          "status": "Created",
          "code": 201,
          "responseTime": 297,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "6093a6cd-d016-49a6-9928-ee90731f2b60",
        "cursor": {
          "ref": "a6465f38-1112-4963-b52c-0c8913e70014",
          "length": 250,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "73e5f907-6931-4fc7-9774-3541da92994b"
        },
        "item": {
          "id": "6093a6cd-d016-49a6-9928-ee90731f2b60",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "6552fca6-c6d8-4070-baa7-f0da09741077",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d925358e-845f-4224-8bd9-2fc81a4d8eb6",
        "cursor": {
          "ref": "f127ebd9-4654-466f-87bf-95795973a799",
          "length": 250,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "2876963e-4e87-472e-be2f-0d9a192c1114"
        },
        "item": {
          "id": "d925358e-845f-4224-8bd9-2fc81a4d8eb6",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "2b411de1-b856-497e-bfdb-b998e074924f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98f0568d-b07a-4dcc-b6fd-52530426bcb9",
        "cursor": {
          "ref": "9717691e-f305-484a-b6a6-523a746fc534",
          "length": 250,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "028e10ce-422c-4ea3-8f61-ad234623cf4b"
        },
        "item": {
          "id": "98f0568d-b07a-4dcc-b6fd-52530426bcb9",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "21b0a235-6ea4-43dc-b47a-8a8aaaa2dfb3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0a6df14-8ae5-45fd-b5d3-7bd0a4b9a027",
        "cursor": {
          "ref": "b32792a5-2199-4e15-9187-47ce8e7cb4db",
          "length": 250,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "5ac3cedd-a5c9-4bb7-b60a-334748a1be1f"
        },
        "item": {
          "id": "d0a6df14-8ae5-45fd-b5d3-7bd0a4b9a027",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "c2424395-183d-4294-88a4-157d4cc25ad4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "053c91ac-6ce5-4ce4-9fa8-15e10c161b76",
        "cursor": {
          "ref": "2fc810c6-c380-4e06-9bc5-6de462565ff9",
          "length": 250,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "c8ce73f5-2634-453f-83e8-6eb7566f2daa"
        },
        "item": {
          "id": "053c91ac-6ce5-4ce4-9fa8-15e10c161b76",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "bc63e684-62f4-4656-97d9-e907dd6a40c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6f900bb-4d9c-499b-8da2-4748c7013500",
        "cursor": {
          "ref": "25dc24da-4701-4811-9648-4828744dbbac",
          "length": 250,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "0a4dfd0f-2035-4058-a2d0-c8c7162dd6c6"
        },
        "item": {
          "id": "e6f900bb-4d9c-499b-8da2-4748c7013500",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "056a09ea-b475-4849-ad65-51bc5410fea2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19328e54-cae8-47cf-b232-c0f37e80721c",
        "cursor": {
          "ref": "df6cde81-83c9-402e-8949-b6367cb25845",
          "length": 250,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "b8ad4b01-02f4-4d6a-8513-fd1adedb9065"
        },
        "item": {
          "id": "19328e54-cae8-47cf-b232-c0f37e80721c",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "0ed45e22-2c47-4339-858b-273ecc74c74b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7726bdc2-14a1-4ae5-a7d2-0cdc8150ee69",
        "cursor": {
          "ref": "9ccc36e6-3b94-4e01-88f8-d52157d48acb",
          "length": 250,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "f9d8a575-1d20-406b-8b5f-63bd9d2dadb1"
        },
        "item": {
          "id": "7726bdc2-14a1-4ae5-a7d2-0cdc8150ee69",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "c6116220-d5b1-47ac-a993-2710918f50a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32ac85fe-6c96-46e2-81d9-bd9c2e610d61",
        "cursor": {
          "ref": "964b1068-1fe8-47f6-9635-b0689bbc46a7",
          "length": 250,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "d084e591-417e-4f01-b1bf-4c33d1b1cf5a"
        },
        "item": {
          "id": "32ac85fe-6c96-46e2-81d9-bd9c2e610d61",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "698b974e-a1a9-4898-a6e0-f06d68648259",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "392872e0-7418-4fc7-beab-bbcd40031851",
        "cursor": {
          "ref": "2531f222-8c66-47b7-913a-34f7bce4ed7d",
          "length": 250,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "3c34f372-eeaf-4f48-84e1-4d1e15f1c587"
        },
        "item": {
          "id": "392872e0-7418-4fc7-beab-bbcd40031851",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "c46eaf53-5dc4-4329-8d02-809a59bb0068",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a35a32e-47ab-4d89-b5ba-77cbafde1964",
        "cursor": {
          "ref": "ccf86189-42a7-4a61-91d7-844ca1ece111",
          "length": 250,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "5784a2b0-51a4-4928-bfa1-2bf431adac95"
        },
        "item": {
          "id": "8a35a32e-47ab-4d89-b5ba-77cbafde1964",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "cd8b0fbf-59b9-47b0-aeb2-84e08bb0e856",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4dc30271-ee4a-41f1-944b-896b023f7a74",
        "cursor": {
          "ref": "3ded981f-6a98-4215-a858-2cc9acb72c2d",
          "length": 250,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "5622a4db-6d49-422b-8e11-749d9da79491"
        },
        "item": {
          "id": "4dc30271-ee4a-41f1-944b-896b023f7a74",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "b72642e8-ab91-4ca4-a994-accc1c0716b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "626984d2-a3af-4248-93c9-8acf3a31ce9e",
        "cursor": {
          "ref": "4483c9de-fb87-402f-87b8-6a09a5861e29",
          "length": 250,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "3f5d0ad2-50b2-411e-8808-d0816aa07755"
        },
        "item": {
          "id": "626984d2-a3af-4248-93c9-8acf3a31ce9e",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "6f621826-11f4-49f9-9c90-886b42c23062",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12e09318-bab4-47cc-a812-ad309a19a6e6",
        "cursor": {
          "ref": "af28dcc4-1000-49fb-a0ca-724e31ab665e",
          "length": 250,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "25f5ebe9-2c70-4c52-b9e2-358458b26600"
        },
        "item": {
          "id": "12e09318-bab4-47cc-a812-ad309a19a6e6",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "1c517561-32d0-417d-b345-0ceb3df4ce98",
          "status": "Created",
          "code": 201,
          "responseTime": 281,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "f49791cd-ec3a-46ab-92a8-d852b63ab964",
        "cursor": {
          "ref": "34e05778-fffa-48c1-8198-9b2067f8dbb5",
          "length": 250,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "65f8109e-fe90-49e4-819d-34317aa2bfaa"
        },
        "item": {
          "id": "f49791cd-ec3a-46ab-92a8-d852b63ab964",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "c35d5521-34ad-43f0-bb54-6e48068a538a",
          "status": "Created",
          "code": 201,
          "responseTime": 272,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "1eab3f98-c77e-4679-9e1b-288110a34b81",
        "cursor": {
          "ref": "23e8112e-60dc-4d4a-bae0-b363c73328c8",
          "length": 250,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "8354b00c-8da8-44e5-bb02-cc24bf456bb9"
        },
        "item": {
          "id": "1eab3f98-c77e-4679-9e1b-288110a34b81",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "df6470ab-17aa-414b-8a76-320428ae3a7a",
          "status": "Created",
          "code": 201,
          "responseTime": 263,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "7c65a8c1-092b-458d-9c34-d5fbb537cf6f",
        "cursor": {
          "ref": "8716f3ad-d4ab-42cc-9399-981ae4ac9bb5",
          "length": 250,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "2cac7251-cd06-4347-9e52-8af9a7159dcb"
        },
        "item": {
          "id": "7c65a8c1-092b-458d-9c34-d5fbb537cf6f",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "cd28546c-0111-4acb-81bb-b8effe232065",
          "status": "Created",
          "code": 201,
          "responseTime": 266,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "dcee215f-6e2c-458d-bac1-7bba97ce100e",
        "cursor": {
          "ref": "e3205969-da75-4cd2-98e6-6be149ac3f4e",
          "length": 250,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "8480a462-2247-4b3b-848e-cee0cd9333d8"
        },
        "item": {
          "id": "dcee215f-6e2c-458d-bac1-7bba97ce100e",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "bbd0ea80-999c-469d-9b91-f7ab1de4a25b",
          "status": "Created",
          "code": 201,
          "responseTime": 281,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "aa37cc37-ed26-41eb-9850-aa12a9cadfdf",
        "cursor": {
          "ref": "3d448f92-bd7b-4af6-b10d-d117052c30d2",
          "length": 250,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "be666c1e-a914-44c4-b463-74b2c495aa5c"
        },
        "item": {
          "id": "aa37cc37-ed26-41eb-9850-aa12a9cadfdf",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "735b0700-edcb-468b-ab7d-9dcd54b86434",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0b51809-bfd6-4e4f-bff7-ce3b762bee76",
        "cursor": {
          "ref": "2be78b32-689b-4126-bafb-d845e307157e",
          "length": 250,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "6a07cb1a-1ec2-422e-a5bf-89fcedf30e51"
        },
        "item": {
          "id": "a0b51809-bfd6-4e4f-bff7-ce3b762bee76",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "3e5e1a95-482c-442f-aca2-d3bde9c80100",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e078f89-2591-432d-911d-7281533e15df",
        "cursor": {
          "ref": "6f9270eb-6d1c-44e1-be93-9b0888d34b74",
          "length": 250,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "0274745e-6a8b-4ac6-b5a3-adc7e9800b70"
        },
        "item": {
          "id": "9e078f89-2591-432d-911d-7281533e15df",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "4d4b8537-e5e9-4d20-8571-3bfa458b9201",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55c94e1d-f5ef-4fa3-96b3-750edf00b685",
        "cursor": {
          "ref": "14a8a839-8dd3-41a8-924c-e78df7e3d3d7",
          "length": 250,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "d394306b-333f-4c38-a464-d6c6acca1698"
        },
        "item": {
          "id": "55c94e1d-f5ef-4fa3-96b3-750edf00b685",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "5f7686cb-4168-4619-a9b0-753b7493739d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84ed11d0-d7e7-4e93-840e-38a82fc909bd",
        "cursor": {
          "ref": "af2f877f-4e19-45ed-ad9a-f99aa1f297aa",
          "length": 250,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "e5137a62-4965-4bac-941c-9741e0ecef34"
        },
        "item": {
          "id": "84ed11d0-d7e7-4e93-840e-38a82fc909bd",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "16caf2e5-0f42-4495-a126-cb92df2b7021",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c357997-a438-4add-b7de-213e4d31a95f",
        "cursor": {
          "ref": "738a043f-0d36-4ef8-96a5-4d19f13e827b",
          "length": 250,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "c35d4115-7031-4910-a975-15879f4bea01"
        },
        "item": {
          "id": "9c357997-a438-4add-b7de-213e4d31a95f",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "7386de2c-04af-4c40-92a6-7f801c2fba28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc8fdbc7-909a-4900-9651-a1876d7c6ab3",
        "cursor": {
          "ref": "171f7a78-ef18-48e3-be5c-3dc871037fb4",
          "length": 250,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "84072d38-1072-4894-b15f-5dd268e5f896"
        },
        "item": {
          "id": "cc8fdbc7-909a-4900-9651-a1876d7c6ab3",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "c7fdd578-0ce2-48a1-91b9-7aa29802c3da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c991bc39-b970-4765-af12-87513cd5bb97",
        "cursor": {
          "ref": "898621ec-f654-41ec-a654-a827cb736af4",
          "length": 250,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "66917d2c-521a-40bd-ae16-e58a20432f0c"
        },
        "item": {
          "id": "c991bc39-b970-4765-af12-87513cd5bb97",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "422cef4d-a08e-476d-8ac0-9b92c8193e83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95c0e2d7-e4f6-4d37-ab22-0cc542b9d3e1",
        "cursor": {
          "ref": "481bfddd-0f9d-4113-915f-037b42be90f0",
          "length": 250,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "0a4f1dfc-98cf-41ff-bda8-bb3343a08b4f"
        },
        "item": {
          "id": "95c0e2d7-e4f6-4d37-ab22-0cc542b9d3e1",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "b0ac1f3a-04b4-4fc7-a68d-01f7c062e6aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a72b6f3-9113-485d-a7b2-a34463780920",
        "cursor": {
          "ref": "c4d593aa-aecc-4ca8-8e67-28ffbde012e8",
          "length": 250,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "be407f6d-fc3e-42aa-8cfd-089223ac4e9a"
        },
        "item": {
          "id": "5a72b6f3-9113-485d-a7b2-a34463780920",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "420e4821-1737-44b4-975e-29140d68e4c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "696ec2cb-7070-41d8-8232-2d42e640bd15",
        "cursor": {
          "ref": "f689e26c-2822-47bd-a9b9-7d1021b05f7d",
          "length": 250,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "6e265324-9ad6-49d0-950f-f6ed7248612b"
        },
        "item": {
          "id": "696ec2cb-7070-41d8-8232-2d42e640bd15",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "5593f828-fa37-48f2-9d29-cf9e3a6a99aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1c3cfd1-7b32-427f-bc65-93f61c3dc185",
        "cursor": {
          "ref": "1aaa2b76-6891-4a86-9449-c489e1048dac",
          "length": 250,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "5420f694-da87-4ba9-a6db-a9a5ced0c5e2"
        },
        "item": {
          "id": "b1c3cfd1-7b32-427f-bc65-93f61c3dc185",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "1f51cbbe-7646-42e1-b4a0-4cfb95101d56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e854e043-8f6a-40e4-bd30-20963a4e8793",
        "cursor": {
          "ref": "b09cbc35-90fe-4576-bd4f-c8586d690b47",
          "length": 250,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "e96214b8-26de-4a69-9e79-12b01879cfa9"
        },
        "item": {
          "id": "e854e043-8f6a-40e4-bd30-20963a4e8793",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "d4b6fdc0-a5ef-41c3-adac-b3a1f9615954",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea998c88-d2ce-4ca8-bf27-747d3e39e5cb",
        "cursor": {
          "ref": "f15440b4-c2ea-49ca-b47b-926aa5235a8f",
          "length": 250,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "7f18e37d-74d8-4779-89f3-8566ebbf4ec1"
        },
        "item": {
          "id": "ea998c88-d2ce-4ca8-bf27-747d3e39e5cb",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "c9bd79c1-d807-4307-89f1-b6e4d1ca0014",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "668d23e5-2e5a-4ab2-85cd-44f66593f334",
        "cursor": {
          "ref": "1f3fc61e-8330-45b8-870c-ad59a2cbb8f3",
          "length": 250,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "1caac7da-6643-41b0-bbb9-a2e668b72c07"
        },
        "item": {
          "id": "668d23e5-2e5a-4ab2-85cd-44f66593f334",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "e9bd166b-ad02-45a8-9a8d-7cf8173e7255",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd974d9f-01e1-47f9-85e5-298960a13655",
        "cursor": {
          "ref": "7b2c74b7-ff41-4902-8ffd-928b48c5e1ce",
          "length": 250,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "47a93199-ce22-4826-854b-0ef486d1c4c3"
        },
        "item": {
          "id": "cd974d9f-01e1-47f9-85e5-298960a13655",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "f1295cb7-c702-4e5e-9e29-2329b69a443f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee96d3f3-1177-4410-a2e2-a7d33d6b1847",
        "cursor": {
          "ref": "102182f9-1a9c-4617-8e82-90595496905f",
          "length": 250,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "db41ef6d-df6f-45c9-85f3-ab654fb58c50"
        },
        "item": {
          "id": "ee96d3f3-1177-4410-a2e2-a7d33d6b1847",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "64cb49f0-34f3-4682-8ee9-d18d63933774",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d9fed9c-7081-4288-a1f1-8979c7417bc6",
        "cursor": {
          "ref": "325988d8-47b6-4f5b-a3a9-33aebcb5eae2",
          "length": 250,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "1f330858-1736-4642-be9c-89128e79a741"
        },
        "item": {
          "id": "2d9fed9c-7081-4288-a1f1-8979c7417bc6",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "dbd69d65-6142-43d4-99fd-e72fa0890fee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44e5ac50-03b1-4a60-aaa0-4c3f64c69e6a",
        "cursor": {
          "ref": "6bbe22dd-5ed3-4f2a-9a70-19af87cce2c0",
          "length": 250,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "9737f674-5a7b-48b6-8fe5-292fd2a40a1e"
        },
        "item": {
          "id": "44e5ac50-03b1-4a60-aaa0-4c3f64c69e6a",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "42e4faf6-f427-4c28-9247-3be1a98c86e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a744194-a7df-45b6-bff0-2b9cd559a6cf",
        "cursor": {
          "ref": "06157607-14f9-4924-a2d2-afc5121f69ca",
          "length": 250,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "dba9d564-118d-490a-a7cd-d8ce5ea645bf"
        },
        "item": {
          "id": "2a744194-a7df-45b6-bff0-2b9cd559a6cf",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "00f37ad8-288c-4fd2-b0c8-0dbf66c2a09b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11ce8e68-a0a3-4340-b338-4c654a39397f",
        "cursor": {
          "ref": "2061a2f8-be3d-4a82-8704-bec69c793c33",
          "length": 250,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "43de4619-8013-4689-aa05-19802f3201e2"
        },
        "item": {
          "id": "11ce8e68-a0a3-4340-b338-4c654a39397f",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "5b256fdf-feb8-4540-a2bf-a360082e3267",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2e90ded-6fa5-4aff-aa98-beb39c1eeef7",
        "cursor": {
          "ref": "e254ddde-35e4-496e-ad54-6e9e12eca485",
          "length": 250,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "74d9268e-5270-4790-a50f-cde09503f60a"
        },
        "item": {
          "id": "a2e90ded-6fa5-4aff-aa98-beb39c1eeef7",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "5423a4a2-f404-44d5-ade5-1e5e52fd726b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab8164e7-b027-42fb-8ca9-50f262e06005",
        "cursor": {
          "ref": "1427b3a9-930b-4cae-9031-2a1ff3d68a7b",
          "length": 250,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "12fea388-cb04-4d0b-b6d0-7f5fca11d254"
        },
        "item": {
          "id": "ab8164e7-b027-42fb-8ca9-50f262e06005",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "18aad65a-95fa-4925-921d-429943f824e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17f41ac1-4a1b-4b07-8348-b7ce0def079c",
        "cursor": {
          "ref": "3c5f5220-0e36-44a5-956a-af84a5649fa6",
          "length": 250,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "06baad7d-314d-4c6d-a863-d2ed77572360"
        },
        "item": {
          "id": "17f41ac1-4a1b-4b07-8348-b7ce0def079c",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "66e1ef40-d8e0-476e-aad3-7bf7606f23c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e08ad05f-61ab-4e94-85ff-cb4c5fbe6a21",
        "cursor": {
          "ref": "43856562-c74b-4180-abb0-bb36a41ac1af",
          "length": 250,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "6ac00d2d-b2b3-4d36-94d6-7346f5a22267"
        },
        "item": {
          "id": "e08ad05f-61ab-4e94-85ff-cb4c5fbe6a21",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "1eaa021c-e0b4-4f00-80e9-26af2d64046e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89f52de7-0dff-41b2-bf21-190d2983f545",
        "cursor": {
          "ref": "80b13a0f-664a-41ea-a2c3-cfbfb5c70c23",
          "length": 250,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "62b3fb75-4681-495a-9dc4-f9c2975c77ce"
        },
        "item": {
          "id": "89f52de7-0dff-41b2-bf21-190d2983f545",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "0aac59b2-4924-4abd-bbd5-d12c8ae32846",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "527ef8ab-1894-43e3-bf89-367386c73159",
        "cursor": {
          "ref": "d9c837d5-a112-4630-b790-bf32d660ac1e",
          "length": 250,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "857d6d15-09cd-40fa-8509-3d04323d3b91"
        },
        "item": {
          "id": "527ef8ab-1894-43e3-bf89-367386c73159",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "add6284b-f8d9-43c6-8937-ac04b4069038",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1c96b04-6d33-49de-adf7-9d29a606e3c6",
        "cursor": {
          "ref": "651290e1-6266-4626-9c44-1f5c92ba927f",
          "length": 250,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "dc1ba166-1d97-495c-b16c-6339c6f1cbc4"
        },
        "item": {
          "id": "e1c96b04-6d33-49de-adf7-9d29a606e3c6",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "7cf73dfc-22cc-4daf-867d-bc54e23f714d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ca2e8f6-11eb-4855-a90c-8b6eedd100ad",
        "cursor": {
          "ref": "3b487b6c-fd1b-418e-a4ff-a2628c9caa6a",
          "length": 250,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "1a0924cf-7a0f-47c3-9547-74e8dfc72b4c"
        },
        "item": {
          "id": "7ca2e8f6-11eb-4855-a90c-8b6eedd100ad",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "132891d8-c3a0-424b-9a93-c49f62970f99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea5d0f8d-0da6-4b64-8b12-783e1567d6ca",
        "cursor": {
          "ref": "b819c8dc-8045-4520-b4eb-5736c7a88390",
          "length": 250,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "3b4476f3-4477-48f5-ae78-041ff4724213"
        },
        "item": {
          "id": "ea5d0f8d-0da6-4b64-8b12-783e1567d6ca",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "75728ae4-ecfa-49a7-a930-40ff9752715d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa3e268a-41b1-4ca7-9640-1e5c583c8737",
        "cursor": {
          "ref": "a358a1e4-5eaf-47f1-b44a-4de189b79d0d",
          "length": 250,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "b3a82111-30a9-4537-bfd0-7876b8323c6c"
        },
        "item": {
          "id": "aa3e268a-41b1-4ca7-9640-1e5c583c8737",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "86f13846-4133-49ac-8819-bd4a146a238f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "771c083f-8f1b-4319-b6d5-fe554aff822d",
        "cursor": {
          "ref": "fbf984dc-201b-4785-bfb7-e5f189386a3b",
          "length": 250,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "d8653f20-4fa8-4b41-ad86-319c2b4ac455"
        },
        "item": {
          "id": "771c083f-8f1b-4319-b6d5-fe554aff822d",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "8f61ad7c-42ef-486c-a3d6-a4e04db09d9c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 25,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6e18c4d-ae7a-40d7-a207-9658f6dc8728",
        "cursor": {
          "ref": "ca8371f0-6652-4569-b24d-2f586f67ced9",
          "length": 250,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "5437ab8f-b80a-4dd9-8376-5bc52ede860b"
        },
        "item": {
          "id": "b6e18c4d-ae7a-40d7-a207-9658f6dc8728",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "01667988-c5f4-4151-9853-e90fa24c44df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "6788a6d9-8a52-482e-a4f7-e8e27de18c82",
        "cursor": {
          "ref": "2b9f432e-14d8-42ce-ba0e-254b2824443a",
          "length": 250,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "36069c3e-bba9-42eb-bf04-c69223fe1e93"
        },
        "item": {
          "id": "6788a6d9-8a52-482e-a4f7-e8e27de18c82",
          "name": "credentials_issue"
        },
        "response": {
          "id": "6c5a5321-b1d4-4b31-9e13-2b8acd68d4a2",
          "status": "Created",
          "code": 201,
          "responseTime": 291,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "af545765-1cd8-4d63-90e3-0eca7c13d8ee",
        "cursor": {
          "ref": "ab31c859-44a0-41f7-bacc-c3af847f56da",
          "length": 250,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "fa457e9d-3d1d-456d-8921-28ff7479a373"
        },
        "item": {
          "id": "af545765-1cd8-4d63-90e3-0eca7c13d8ee",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "c461bf97-2ff7-481b-93ae-c237f7e39e66",
          "status": "Created",
          "code": 201,
          "responseTime": 280,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "3477efc7-ce5f-42c9-b86c-a45c7eae2aae",
        "cursor": {
          "ref": "d7622179-8a16-4ebb-8db6-c2eed2c52e0d",
          "length": 250,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "e630ffac-bc59-4c1c-b6ab-33ceb61bd06e"
        },
        "item": {
          "id": "3477efc7-ce5f-42c9-b86c-a45c7eae2aae",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "46b47cd3-17b0-425e-a1f5-54624d80150b",
          "status": "Created",
          "code": 201,
          "responseTime": 294,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "220ca84c-2c3a-460e-9a64-a79020948672",
        "cursor": {
          "ref": "0e9763f9-2551-411d-b937-a34f437e6038",
          "length": 250,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "d0828c02-ccaf-4109-a6a2-98cc19f02134"
        },
        "item": {
          "id": "220ca84c-2c3a-460e-9a64-a79020948672",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "e8d2f2d7-35b9-49ed-b812-f90dece5410f",
          "status": "Created",
          "code": 201,
          "responseTime": 298,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "5970ca65-3346-44bf-b7c2-62e90abb7b65",
        "cursor": {
          "ref": "ef9db0ed-f7dc-4404-b1f1-a66f70d944fb",
          "length": 250,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "39f6b7a7-5cf8-4208-86cf-e71fdc4ca970"
        },
        "item": {
          "id": "5970ca65-3346-44bf-b7c2-62e90abb7b65",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "5acecef1-19b4-4e52-aa7f-6f86a20c98aa",
          "status": "Created",
          "code": 201,
          "responseTime": 357,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-06-12T00:38:32.055Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-06-12T00:38:32.055Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "0a4e0072-4b87-49e0-84b6-a0f3de787a89",
        "cursor": {
          "ref": "bd6d3808-7cde-49b6-be3a-ee9afd9025aa",
          "length": 250,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "0b2eb2cb-a43e-46f3-9fa1-eb013a115942"
        },
        "item": {
          "id": "0a4e0072-4b87-49e0-84b6-a0f3de787a89",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "c08e13b5-a245-44b1-a656-6bcd3ebe34aa",
          "status": "Created",
          "code": 201,
          "responseTime": 281,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8cf6a93a-2d8e-47e0-ab4f-84e17da20c8f",
        "cursor": {
          "ref": "05a5bd4f-c223-4e91-8847-5ec0bac598a7",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "ddab1c24-3ac9-48e0-a4b2-37bd10185093"
        },
        "item": {
          "id": "8cf6a93a-2d8e-47e0-ab4f-84e17da20c8f",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "40e8f6da-a47e-413c-8529-452d2175cd95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09bde5c1-6ecd-4d67-bbe9-5f43d64cba88",
        "cursor": {
          "ref": "7671b4d4-dfb7-41c9-b0f6-ea006ca2c577",
          "length": 250,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "222b95ab-786b-483b-ae7c-6f9a21174b43"
        },
        "item": {
          "id": "09bde5c1-6ecd-4d67-bbe9-5f43d64cba88",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "d6e23b9c-a773-42c5-a431-a402174e4a69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56326ece-eec9-4a90-addd-b6b355b24704",
        "cursor": {
          "ref": "baf25a43-a232-438f-a5bb-3348b1ce65c9",
          "length": 250,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "cf998b6b-80e6-4e15-8f42-b7b3ecd2baac"
        },
        "item": {
          "id": "56326ece-eec9-4a90-addd-b6b355b24704",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "ad9514c2-45d5-473a-bfd0-4dea52017005",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9dd10e17-4520-415f-8cff-20bfd2b7547c",
        "cursor": {
          "ref": "f812fa67-e5ee-494e-8a36-7e4a65c04a90",
          "length": 250,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "cafc901b-6558-40cd-a3a1-f47514ed2e14"
        },
        "item": {
          "id": "9dd10e17-4520-415f-8cff-20bfd2b7547c",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "2f87f753-b570-43ab-b739-b6d2aa861316",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16eded8a-ec55-44be-81ce-cd9abf721216",
        "cursor": {
          "ref": "ee12be42-3b0b-4a82-8bbe-ba4ee5615d8d",
          "length": 250,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "8e1f0712-fd50-407b-bd45-c85a4356f5c2"
        },
        "item": {
          "id": "16eded8a-ec55-44be-81ce-cd9abf721216",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "7dcbe0bb-f877-4d0d-8193-4ede7f4f8ff7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1c28314-e8f9-4d67-83a0-806c2920f59a",
        "cursor": {
          "ref": "3c5da994-d7d8-4678-801b-f095e473d1c6",
          "length": 250,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "6776f515-2f0e-405e-89c2-fdfa2ef4183e"
        },
        "item": {
          "id": "a1c28314-e8f9-4d67-83a0-806c2920f59a",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "dd3c98fa-f2ed-4563-bcfd-bf8fd86400e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "468d22cc-0113-4ca2-bed8-1aede101bf78",
        "cursor": {
          "ref": "c1a0891d-57bc-4b80-8e2f-713af702474a",
          "length": 250,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "4fd3b86a-d646-4cdc-9a98-2c4e3ae26843"
        },
        "item": {
          "id": "468d22cc-0113-4ca2-bed8-1aede101bf78",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "4e0b6338-ee72-4cb4-824e-414fc2741509",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ec00b2f-13fa-4102-bdd5-a91469de543d",
        "cursor": {
          "ref": "d61b5ac2-36a3-41c5-a4b4-a46277a628d0",
          "length": 250,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "4f5f0668-f7fa-42a4-82f3-9a9540d3efc8"
        },
        "item": {
          "id": "1ec00b2f-13fa-4102-bdd5-a91469de543d",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "16778ca6-c8aa-4762-8a94-a8d343e4e862",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0164cb72-799b-4b11-ae70-d6390c0f1d2a",
        "cursor": {
          "ref": "f5e31e7a-fda6-4d6d-b911-b1be61f0e008",
          "length": 250,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "06480311-75e4-44c0-9815-21210c2a80ce"
        },
        "item": {
          "id": "0164cb72-799b-4b11-ae70-d6390c0f1d2a",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "a788a625-3017-40be-a8ec-703ef8fa928e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d323e31b-d8a9-472b-8c72-fa474fddc84a",
        "cursor": {
          "ref": "aac6416c-667a-4afb-a8a1-b1d2b256061a",
          "length": 250,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "b15d2c70-da47-4e5c-8a4f-3c07c0a7c150"
        },
        "item": {
          "id": "d323e31b-d8a9-472b-8c72-fa474fddc84a",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "9ae009a9-ee03-42c8-965a-c03299675199",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46f03af9-5d0a-4e54-abfa-17da108489ef",
        "cursor": {
          "ref": "5bd507ac-14a7-4836-85c5-582d59de9265",
          "length": 250,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "2bae1258-5764-48c6-81c4-c6b062edf2f9"
        },
        "item": {
          "id": "46f03af9-5d0a-4e54-abfa-17da108489ef",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "a302effc-c085-4d2d-a701-826b89f8e080",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38a8c567-c756-4ef5-8812-acee36c1cae2",
        "cursor": {
          "ref": "1a19b246-99a2-4f65-aeaa-fab1cf4970c9",
          "length": 250,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "37699d1b-3563-4271-9f29-cf7141baeb42"
        },
        "item": {
          "id": "38a8c567-c756-4ef5-8812-acee36c1cae2",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "f82355f4-7eaa-4eb6-946b-cbc1cf58d99c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f36c3033-1684-4957-a6ce-0e5f4b584fec",
        "cursor": {
          "ref": "abf10d3e-6a51-4efa-bb62-0c2682413dce",
          "length": 250,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "18c434ab-2d94-4433-b892-013bcd0dcd54"
        },
        "item": {
          "id": "f36c3033-1684-4957-a6ce-0e5f4b584fec",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "745fca41-8b42-4b2f-aa69-644ab29e486b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 194
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1dd98c1f-4d1d-4d2b-b2c2-508b64178b85",
        "cursor": {
          "ref": "10d76334-73e5-430b-9114-b2e949a52fd7",
          "length": 250,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "513ac77f-721e-417a-a0a0-c2537cbb56ff"
        },
        "item": {
          "id": "1dd98c1f-4d1d-4d2b-b2c2-508b64178b85",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "4a083fd3-6778-41e5-a33d-d749d37ef164",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 59,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "40d01352-9465-4c8f-afd2-70df024e9cac",
        "cursor": {
          "ref": "a58f281d-014d-49bd-a38c-a544fd2c2890",
          "length": 250,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "06e0097a-c8ae-4f53-a02c-04a616f2e561"
        },
        "item": {
          "id": "40d01352-9465-4c8f-afd2-70df024e9cac",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "ab436730-116b-4bd4-8816-8892198de23a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c36eecda-2dd3-4fe2-b91a-3ea8adb54c89",
        "cursor": {
          "ref": "5913efda-a34c-454c-8f7f-bc2f033435ba",
          "length": 250,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "3d41df42-1466-46d8-a0df-3fa0136bf0b2"
        },
        "item": {
          "id": "c36eecda-2dd3-4fe2-b91a-3ea8adb54c89",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "7a021e42-9195-4f36-a5ba-d547ec354710",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98b60ea7-2b30-44a4-9f7a-203c29958b1b",
        "cursor": {
          "ref": "811c234c-4b85-43d8-ab7e-c5341ab26d2e",
          "length": 250,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "458b2c02-66e6-40ef-abd1-8095db8eb4be"
        },
        "item": {
          "id": "98b60ea7-2b30-44a4-9f7a-203c29958b1b",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "9098a816-cdcf-460a-bf6a-7648db95b13c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0d678db-8eca-4334-a75f-dbaac6a798d0",
        "cursor": {
          "ref": "7c5855cf-f80d-4609-9ba3-20a1306d7925",
          "length": 250,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "1e078a43-05bf-476f-937e-c9393d0cc6d0"
        },
        "item": {
          "id": "a0d678db-8eca-4334-a75f-dbaac6a798d0",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "019d8c74-cb3c-47fd-b2aa-e2a292b07d89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca69719b-a4ee-48e6-b24e-63379b2a24a1",
        "cursor": {
          "ref": "e10c9796-8d99-4fee-bb83-b1fdcae4b0b9",
          "length": 250,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "dacea47a-93e7-4fef-a1ac-92b6db78ed51"
        },
        "item": {
          "id": "ca69719b-a4ee-48e6-b24e-63379b2a24a1",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "4ecea37d-8bfd-42c6-9d94-32e7d23e078c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d98ed933-c57c-491b-8fef-b86b0cad978d",
        "cursor": {
          "ref": "ea53f729-8ced-4815-a4db-24851666e1e3",
          "length": 250,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "84231ab0-156e-4d7c-9c5b-18f31c1fa255"
        },
        "item": {
          "id": "d98ed933-c57c-491b-8fef-b86b0cad978d",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "5e2f6d58-d536-4abd-9855-acb6fec9ad49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f582a80-49d1-4420-94a5-f6ee6ecadbc0",
        "cursor": {
          "ref": "0b6abc86-51be-40e4-a9d7-4defe22a8dab",
          "length": 250,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "881f9dbc-000d-4ce0-9b47-63f77f483d24"
        },
        "item": {
          "id": "5f582a80-49d1-4420-94a5-f6ee6ecadbc0",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "ac4a7ed0-5f42-43d6-b87e-0035fd76b473",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "762cfd26-221c-43ab-b2b9-54887616dca3",
        "cursor": {
          "ref": "1c4f1957-c6b3-48b7-8d4e-c32b7d0b62db",
          "length": 250,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "54f6b6a0-42bd-402b-b9e1-3dc6e4aefc87"
        },
        "item": {
          "id": "762cfd26-221c-43ab-b2b9-54887616dca3",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "2225a2e1-1349-4fcd-b9b2-057cbd1bf7f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e134b8ee-7361-4c0e-8806-5ec16ff0ea6d",
        "cursor": {
          "ref": "67ddf3f3-af5a-41c8-8764-733105d9fe75",
          "length": 250,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "bae5ed0c-5b28-4681-9224-bcac1d5b16f1"
        },
        "item": {
          "id": "e134b8ee-7361-4c0e-8806-5ec16ff0ea6d",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "27e69145-535d-4610-9c96-516ffa35db96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2cd69b63-8b5c-4f5e-be84-b6c70ead6188",
        "cursor": {
          "ref": "f20590f1-2976-4882-ae90-84ef07b7dea3",
          "length": 250,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "5445d64e-2c9e-4f43-b13f-e2cdcf71a74d"
        },
        "item": {
          "id": "2cd69b63-8b5c-4f5e-be84-b6c70ead6188",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "acece01a-b906-40e0-8739-fc6e0012ddc6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2daa2df1-552c-4ec1-9186-5ef9a5df515b",
        "cursor": {
          "ref": "91d04971-ee69-46be-a8d1-f4e3d8745eb4",
          "length": 250,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "b0b7c884-c0ff-4197-8a73-7a1fafbcd282"
        },
        "item": {
          "id": "2daa2df1-552c-4ec1-9186-5ef9a5df515b",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "1475faad-f3a1-4646-a7d6-ac3268b3ae87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f28776a0-3c38-42f4-9dff-30cc449cb383",
        "cursor": {
          "ref": "3bbafe00-fdde-44d4-9002-4d68e9e68513",
          "length": 250,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "eda30e08-ee06-4a66-b477-5963e3ad0249"
        },
        "item": {
          "id": "f28776a0-3c38-42f4-9dff-30cc449cb383",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "94548fe6-1784-441a-b12b-8719f1fd2e42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "091e9426-81d7-41c1-b67c-a43df40ab32b",
        "cursor": {
          "ref": "15abea60-bd52-40f3-a164-5e1164592300",
          "length": 250,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "bb1ab112-3aff-4222-8838-27052df1c922"
        },
        "item": {
          "id": "091e9426-81d7-41c1-b67c-a43df40ab32b",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "7411bca0-2f67-4b09-bd75-a83424f35342",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07bf0135-5644-44e1-a74d-09a15149091c",
        "cursor": {
          "ref": "64d27a75-76ff-4af3-a734-c3f1e6ceebae",
          "length": 250,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "68a01169-b5b6-4243-af69-5d6eb62279bb"
        },
        "item": {
          "id": "07bf0135-5644-44e1-a74d-09a15149091c",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "f24c58a3-81b1-4e0e-8984-032c3392a6ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5214c1a8-a04e-4937-a6e5-6195980cbda0",
        "cursor": {
          "ref": "030b4f57-880d-46b4-a050-c0d544734b2c",
          "length": 250,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "6b755e15-8ba8-49dd-ae74-8debc77a4fd4"
        },
        "item": {
          "id": "5214c1a8-a04e-4937-a6e5-6195980cbda0",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "6bad0a79-40cd-41e0-b11f-1a20592c0f7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f643e167-4db0-4b29-8b3b-14e1fef76e11",
        "cursor": {
          "ref": "3a39140a-7b15-42bc-8594-d4428e3c6550",
          "length": 250,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "54400bff-30b7-4f61-8e76-912555824bfd"
        },
        "item": {
          "id": "f643e167-4db0-4b29-8b3b-14e1fef76e11",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "5c6f7215-2761-4b75-a3dc-df9cdb6672fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9bcd2b46-844e-444b-a158-cc5ebd8e1837",
        "cursor": {
          "ref": "9c1e44c4-7376-417d-a99d-65edf6e7b0d0",
          "length": 250,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "b5fddf0a-d747-472d-b0be-266890463ed8"
        },
        "item": {
          "id": "9bcd2b46-844e-444b-a158-cc5ebd8e1837",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "8c539d4c-cf43-4208-b79f-c467eca32e23",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b132ecd1-295c-4a65-b6a9-9cefdcd789e9",
        "cursor": {
          "ref": "eb734da8-2d36-411d-9d16-a8c66eeb0b79",
          "length": 250,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "150070cb-a69e-4351-a9ff-69a8241297ca"
        },
        "item": {
          "id": "b132ecd1-295c-4a65-b6a9-9cefdcd789e9",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "b56ddc46-85c0-4b32-aae6-f9be3603424c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07efcb89-1f1e-4cce-aa2c-d5b73bf61663",
        "cursor": {
          "ref": "e41ef8fa-08f7-4494-88e9-0216265ac3f1",
          "length": 250,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "fa6cf6c7-36c2-4c44-96af-2df0b4a21a99"
        },
        "item": {
          "id": "07efcb89-1f1e-4cce-aa2c-d5b73bf61663",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "23e2d078-d8ee-4389-8d20-b961ff9436dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72aae698-ee16-48df-b34b-bef647c1e88c",
        "cursor": {
          "ref": "2094837d-82d2-41fa-a5b0-4855f9bde6aa",
          "length": 250,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "d9dc63c2-cc7d-4a05-96b9-340a860233c8"
        },
        "item": {
          "id": "72aae698-ee16-48df-b34b-bef647c1e88c",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "04b9a134-16ab-4878-ada9-bf4c23ed122c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e723ed01-1013-4468-aa2e-9a5ca1972410",
        "cursor": {
          "ref": "7bdc35e1-724d-416a-9b9f-615c4a8f295e",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "bd00be99-d424-4a17-a812-c2fc2bfe475a"
        },
        "item": {
          "id": "e723ed01-1013-4468-aa2e-9a5ca1972410",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "78503343-ab55-4d25-80af-5d3e641440ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78c7b497-7b34-478c-862b-af9bdcf24fe0",
        "cursor": {
          "ref": "c7b1037d-0cb8-418f-9b02-6a998da7d590",
          "length": 250,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "3f329428-3d7e-43dc-a4b9-c1fe1a0eab2a"
        },
        "item": {
          "id": "78c7b497-7b34-478c-862b-af9bdcf24fe0",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "3a37f18b-18a3-4352-b774-d343b13b46bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ceb02184-829d-40c7-89d1-7ca49221cccc",
        "cursor": {
          "ref": "65c91693-385d-4bca-ab61-09ebd14f60c6",
          "length": 250,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "d996b380-3e9f-4ce4-a596-f1006eafc3b9"
        },
        "item": {
          "id": "ceb02184-829d-40c7-89d1-7ca49221cccc",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "40cc3b24-84ff-4f01-9d67-4a19fac1ecdd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de940d13-e889-415e-a07c-ec3aa32716b0",
        "cursor": {
          "ref": "83cf46f5-ec0e-4bef-9cb9-4468f702a8ab",
          "length": 250,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "3678ea0a-f33e-495e-8d69-0e3488baadc7"
        },
        "item": {
          "id": "de940d13-e889-415e-a07c-ec3aa32716b0",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "1275d91a-c284-4127-81a3-243f0632e050",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 28,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a29e85b2-7e07-497d-8296-c5a7bdfcf816",
        "cursor": {
          "ref": "bd4b4c60-54cb-493d-b25b-cf3b6193d1bb",
          "length": 250,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "70b888db-f16a-479d-a679-a204219738f8"
        },
        "item": {
          "id": "a29e85b2-7e07-497d-8296-c5a7bdfcf816",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "b33ea878-e8bb-424c-a708-ebb629e37764",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7826ab8-b58f-4c67-abd5-be5a9175bcb8",
        "cursor": {
          "ref": "02d439db-7e3f-4528-ba49-ba2a85a4f56a",
          "length": 250,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "2662e8dc-affe-4f42-bffc-407c6693d425"
        },
        "item": {
          "id": "e7826ab8-b58f-4c67-abd5-be5a9175bcb8",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "ead8be0f-bab6-4b3f-a4b4-2e23b7795b49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84f5f4d9-6807-4b2c-bfd6-a0334cebf34d",
        "cursor": {
          "ref": "8dca339e-0303-44c3-8733-752aea221bb6",
          "length": 250,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "b93c6c39-49db-4a17-a270-d60c26d0388d"
        },
        "item": {
          "id": "84f5f4d9-6807-4b2c-bfd6-a0334cebf34d",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "0eb3cf27-5256-48ab-89a1-472c4b7d499e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ddb0960-1d3d-4ca1-a2b8-830f38a69eda",
        "cursor": {
          "ref": "a4999233-9a96-47a2-8652-310a39c9fb15",
          "length": 250,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "648f16d4-730a-47bd-9807-8307d1cdd84e"
        },
        "item": {
          "id": "5ddb0960-1d3d-4ca1-a2b8-830f38a69eda",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "9a44d07b-2d53-42d6-90b3-77c9ff622049",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f79080e5-e436-40e9-9f8e-56ec6877ca33",
        "cursor": {
          "ref": "2a70a8e0-01a6-467c-882f-ebf81eed5415",
          "length": 250,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "f9df8ea4-feeb-44b9-be15-e392f26ec4db"
        },
        "item": {
          "id": "f79080e5-e436-40e9-9f8e-56ec6877ca33",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "dfd0d113-b2a8-4a27-84b8-41b7d92b3a2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "222d4ad8-428c-4945-bc1d-0363a0d8f723",
        "cursor": {
          "ref": "385adb34-c691-4e79-9dfc-ddd7187f8a9e",
          "length": 250,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "9af1f1c1-061f-407c-b004-989461fa6944"
        },
        "item": {
          "id": "222d4ad8-428c-4945-bc1d-0363a0d8f723",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "cdac2fad-0db3-4ee4-8df4-394d6bb07e14",
          "status": "OK",
          "code": 200,
          "responseTime": 84,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "71256dc5-f3a6-4dc9-b025-00f7f3032bf1",
        "cursor": {
          "ref": "51b055e3-92c0-4738-a4c1-ac98e63d8778",
          "length": 250,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "ee3a377c-12d0-419a-9b0d-ebee0a621873"
        },
        "item": {
          "id": "71256dc5-f3a6-4dc9-b025-00f7f3032bf1",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "4fbb4f91-76c4-40d1-be51-cb1b8813305c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "537cf116-1079-4c1a-9dae-19bceffe6dc3",
        "cursor": {
          "ref": "6b59a222-c2b7-4ef4-8b0e-45949f9b799d",
          "length": 250,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "721e796a-bd64-444b-a6f5-29cda9768fcd"
        },
        "item": {
          "id": "537cf116-1079-4c1a-9dae-19bceffe6dc3",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "83b4959f-d0e5-47dd-a2ae-d2668a1967f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43be7d43-7da0-47ea-a1e6-7763b9818459",
        "cursor": {
          "ref": "64407786-8f54-426e-a80a-c7a14f995bba",
          "length": 250,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "c667e1ff-ffde-44cf-9631-6362f461023f"
        },
        "item": {
          "id": "43be7d43-7da0-47ea-a1e6-7763b9818459",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "0bf46f2f-e136-4523-9ba3-5fc29613e815",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "faa20154-8979-4cda-b2c4-ecc0d9a68019",
        "cursor": {
          "ref": "d8756ad8-5ccf-4759-b729-de61490ef8f0",
          "length": 250,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "06f6f454-d221-41e1-8ca4-04f63f066677"
        },
        "item": {
          "id": "faa20154-8979-4cda-b2c4-ecc0d9a68019",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "dedac51c-3b34-4402-a055-4338855d7547",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df709395-4a74-4bb5-8058-f119852c1eed",
        "cursor": {
          "ref": "a452e474-0075-433f-8daf-855ad158cd5d",
          "length": 250,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "551ae71d-f70a-4261-9a85-4dad2fb7c326"
        },
        "item": {
          "id": "df709395-4a74-4bb5-8058-f119852c1eed",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "2cd78c5e-4488-47aa-a330-4dd9f88b9450",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d395ce5-e40c-43e8-adda-a4b495d7f5d8",
        "cursor": {
          "ref": "15a9230d-a8e4-43d7-b4ad-532aecb48542",
          "length": 250,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "33519e3b-4bd8-49b1-b66f-9e78bf58c2dc"
        },
        "item": {
          "id": "0d395ce5-e40c-43e8-adda-a4b495d7f5d8",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "e3d45802-bda2-4e60-ad40-a9259143387e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0b20b73-5804-4287-8722-a126dd384a1b",
        "cursor": {
          "ref": "e32cf9b4-72fb-44ff-9ce1-e59d99c0468c",
          "length": 250,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "38985c75-4437-4264-97c1-3f37820e0ea4"
        },
        "item": {
          "id": "a0b20b73-5804-4287-8722-a126dd384a1b",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "d6324ca6-36a6-4146-815a-0953974cc0cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4eea19d-5065-444c-8752-3b9e36117cba",
        "cursor": {
          "ref": "443af0b9-9f18-4ed2-8244-aa5cf20c8a6b",
          "length": 250,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "a5857ad7-031c-4bc7-b5e4-491e39faa4e7"
        },
        "item": {
          "id": "f4eea19d-5065-444c-8752-3b9e36117cba",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "bbee23f0-5f07-419b-aeb0-9b8d975ec29d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2ff55c4-b411-497e-8360-9b8fcda2a5e6",
        "cursor": {
          "ref": "1fcda008-af69-4f70-81a7-1c4805a550d7",
          "length": 250,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "d66b111e-42a2-4c6f-ba79-20e1aa6ce799"
        },
        "item": {
          "id": "e2ff55c4-b411-497e-8360-9b8fcda2a5e6",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "b76ce329-10c7-4ee0-84bc-42ac14f57598",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d4ad389-c7fa-4b0a-baec-8e45c804dceb",
        "cursor": {
          "ref": "1aa4051e-06e9-4f91-a61c-dfbecbe9b0da",
          "length": 250,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "a1186eda-a943-49bc-891b-6a815032503d"
        },
        "item": {
          "id": "0d4ad389-c7fa-4b0a-baec-8e45c804dceb",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "2826f4de-c74b-4bb7-a552-a90691e17e54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9549ee3-c1ae-4cf4-bc42-cea5f44c135e",
        "cursor": {
          "ref": "f318314a-c520-4c5e-a6e3-d054cbe62b77",
          "length": 250,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "331797f4-796c-445c-9f03-ef347b892d72"
        },
        "item": {
          "id": "c9549ee3-c1ae-4cf4-bc42-cea5f44c135e",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "f54a8fc3-daab-4435-95ae-6135a43cfc2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e30cdcef-146b-485d-97e7-f729c18275ee",
        "cursor": {
          "ref": "fa4e621b-9277-48a9-a0fb-0c10bfe003a4",
          "length": 250,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "48024ddf-21ae-456f-8529-e4aaade20f58"
        },
        "item": {
          "id": "e30cdcef-146b-485d-97e7-f729c18275ee",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "5e1c2b43-6fc0-4b39-a7f7-92f16c8b2556",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef4eae7d-03b6-4a25-be42-e0490bfabdeb",
        "cursor": {
          "ref": "deaa9b05-b966-4d04-a5a9-b151b7105a58",
          "length": 250,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "fa2c2bfc-d2b3-4a2e-b4b3-22d07353e9c3"
        },
        "item": {
          "id": "ef4eae7d-03b6-4a25-be42-e0490bfabdeb",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "e3f20192-516d-440e-a84f-de5e4facca8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d0b97ef-5002-4d4a-986d-0666b3683ec0",
        "cursor": {
          "ref": "4a653bc1-fadf-4b08-a531-d8acd8adc4ab",
          "length": 250,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "1c0a1cfc-7b92-46c0-b6fd-a20339fad200"
        },
        "item": {
          "id": "2d0b97ef-5002-4d4a-986d-0666b3683ec0",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "37cf94cf-1928-480d-ad51-de3611b1cc5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eeea354c-86c9-48a6-9396-571e76848098",
        "cursor": {
          "ref": "9ef992de-86db-4c55-b70c-c9e82cfbf8aa",
          "length": 250,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "0da75c94-256e-42a7-aa29-54c54f5276a9"
        },
        "item": {
          "id": "eeea354c-86c9-48a6-9396-571e76848098",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "a47c4af1-fd69-4a0f-b83d-d16e5df1909e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09761962-338e-4748-8f7f-42ab067c2465",
        "cursor": {
          "ref": "8d635684-3582-4cab-9ed8-fbe8e2fbc35a",
          "length": 250,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "a59c378a-d31e-4590-b2d0-64e662fac871"
        },
        "item": {
          "id": "09761962-338e-4748-8f7f-42ab067c2465",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "7317bb19-27dd-4599-9470-590e5c713c15",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61e2d743-7bbc-498b-ab17-9aaeec9a1ab2",
        "cursor": {
          "ref": "92a97f6b-db52-4bca-9b45-01dd0f5b5d5d",
          "length": 250,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "5b4589dc-2509-4e62-adae-1f2d6bc76287"
        },
        "item": {
          "id": "61e2d743-7bbc-498b-ab17-9aaeec9a1ab2",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "f1502f7f-2f26-40f9-8d2e-a4b024eae085",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab779eee-1c0b-4194-bb79-154da2fdebb2",
        "cursor": {
          "ref": "c0aee6fa-66ad-4a57-8747-8d7bde6129c5",
          "length": 250,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "b6d256c1-f5fb-4628-bed6-6b333a9cbf81"
        },
        "item": {
          "id": "ab779eee-1c0b-4194-bb79-154da2fdebb2",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "e04ef589-8f7e-413b-8455-67fdd7aebcc4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0686d1d9-c365-4f9e-b383-163e56139934",
        "cursor": {
          "ref": "5fd8fc2f-624a-4752-908d-b7e493a87c42",
          "length": 250,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "a7fb798e-46e6-40db-906c-0bceb20f20a5"
        },
        "item": {
          "id": "0686d1d9-c365-4f9e-b383-163e56139934",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "5006fe94-2673-4d97-85b8-e3cc49c6a5b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04db21f7-3612-4d57-952f-35eb3a8ae727",
        "cursor": {
          "ref": "93b5217a-1d4e-483a-aead-8781bb37182b",
          "length": 250,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "d9dcf963-29e1-43c8-9e95-f461e8d4481a"
        },
        "item": {
          "id": "04db21f7-3612-4d57-952f-35eb3a8ae727",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "93321233-0622-4889-9248-bb38ebbe2b6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca194360-4a1e-47f3-bc5b-3f85ed4bcbba",
        "cursor": {
          "ref": "f1a2acae-595a-4716-83a9-0ddf7513d18d",
          "length": 250,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "b266fa67-2314-4617-9bd4-3e486443cbaa"
        },
        "item": {
          "id": "ca194360-4a1e-47f3-bc5b-3f85ed4bcbba",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "c270cdd4-eaa2-46a2-8d0c-dc38ab9a3740",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c7817b4-6377-4f54-8e41-53eb40c9e1cd",
        "cursor": {
          "ref": "2898e160-59f9-4279-8f2c-bc075e168bb1",
          "length": 250,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "c4d38076-5e48-47e4-8e05-5eee0af49159"
        },
        "item": {
          "id": "9c7817b4-6377-4f54-8e41-53eb40c9e1cd",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "4e220969-528f-4405-9d4e-c99609bb02bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c201e4b0-b60d-4158-9d27-960792084619",
        "cursor": {
          "ref": "28ae7918-7d1b-4c45-8dd5-2bb848b482e5",
          "length": 250,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "d200b72f-d2d1-40b1-af79-f398543a0bd9"
        },
        "item": {
          "id": "c201e4b0-b60d-4158-9d27-960792084619",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "ec3c5a59-fb31-4fd3-adda-d76f93eb73f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2f6fc22-d7e5-446b-8e86-ad501230d825",
        "cursor": {
          "ref": "54617ef6-dcef-4697-9b77-0a2da7f3d141",
          "length": 250,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "2e784bfd-5aca-46e5-9e12-9c77b9f4b162"
        },
        "item": {
          "id": "f2f6fc22-d7e5-446b-8e86-ad501230d825",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "7af7d97d-b075-4aca-8bcf-9fd0416c9f15",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ce7ae25-7d19-4fe9-8c21-4bd2d9bf8218",
        "cursor": {
          "ref": "91f2774c-e19f-4545-afaf-231a8dcc5862",
          "length": 250,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "db7748bf-2331-41d7-8b5f-102b15a9c71b"
        },
        "item": {
          "id": "1ce7ae25-7d19-4fe9-8c21-4bd2d9bf8218",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "b7b0c087-f0aa-4cf4-b4a7-222882606796",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0a0a343-7763-40d9-9bfa-6ca1a5a2f11d",
        "cursor": {
          "ref": "f3e4f5b3-4f22-4d61-9eda-8e576eb7c24f",
          "length": 250,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "d2c0478c-0a09-415a-a4bd-df9556285231"
        },
        "item": {
          "id": "a0a0a343-7763-40d9-9bfa-6ca1a5a2f11d",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "be6ea0dd-38ba-4f22-8f1b-a82651d22c9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8fe3409f-ad66-443a-96d8-c9197d7b2305",
        "cursor": {
          "ref": "66ccbb9d-0f22-4d1e-a56d-a95115046b62",
          "length": 250,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "25277d6a-c634-43c6-b89c-4493c88325be"
        },
        "item": {
          "id": "8fe3409f-ad66-443a-96d8-c9197d7b2305",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "4bf077a5-ce6f-45f3-88f9-d73942cb4998",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b50d2c63-8643-4ca2-a086-a4c4762210dd",
        "cursor": {
          "ref": "a1e2b828-fc1e-40f5-9748-41a567c3e89f",
          "length": 250,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "5cab6c34-c69a-41f5-8401-8267bcc043eb"
        },
        "item": {
          "id": "b50d2c63-8643-4ca2-a086-a4c4762210dd",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "74719ebe-a549-404c-9588-1be27fab01c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19672271-4857-4f42-82a3-13dbdc624555",
        "cursor": {
          "ref": "1f79d976-4edb-4a0b-b250-7cb58041c0c7",
          "length": 250,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "8d06c4df-1203-4fd3-af12-701b1cb8fd09"
        },
        "item": {
          "id": "19672271-4857-4f42-82a3-13dbdc624555",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "c2c00a06-bdb5-429d-b5d0-74ef19703c63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b88312a-600e-409c-9124-009a4ab9a484",
        "cursor": {
          "ref": "e72237fb-837b-4411-aff7-4a71c9d00cb7",
          "length": 250,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "f5b73f58-e879-4f9a-b642-5f81ec0ab3af"
        },
        "item": {
          "id": "0b88312a-600e-409c-9124-009a4ab9a484",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "f7a2e40b-3753-492d-922e-8f82e8200131",
          "status": "OK",
          "code": 200,
          "responseTime": 86,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "5b297075-7d13-4cd7-9e3d-fac6116f22c8",
        "cursor": {
          "ref": "7b3f1365-f571-4b0c-a27c-1bdd97ef527f",
          "length": 250,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "2f923584-d1b5-4633-85ad-4ec7ab375e13"
        },
        "item": {
          "id": "5b297075-7d13-4cd7-9e3d-fac6116f22c8",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "0bd680a2-de46-4b61-84ec-128c731ee8b1",
          "status": "OK",
          "code": 200,
          "responseTime": 83,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "c2bc6cbf-153e-47bd-a88e-25efd00f9f45",
        "cursor": {
          "ref": "bb790b83-c24d-4fc7-abe7-bc0b3fed40f9",
          "length": 250,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "5036a327-34fb-435a-a21e-db917dae7a0b"
        },
        "item": {
          "id": "c2bc6cbf-153e-47bd-a88e-25efd00f9f45",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "bff5f647-91e8-4f7c-b6d5-c62296e92859",
          "status": "OK",
          "code": 200,
          "responseTime": 87,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "1bd9a40d-80f7-4822-8ca3-12412855cd88",
        "cursor": {
          "ref": "08334fcb-70bd-4b18-abaf-c68a1c820534",
          "length": 250,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "4353018f-10e9-451b-a32b-9d6a441111df"
        },
        "item": {
          "id": "1bd9a40d-80f7-4822-8ca3-12412855cd88",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "ee70606c-9132-4ecf-9dbe-6469bb2445a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8fbd650d-0cd3-405f-b6c5-8760a427631e",
        "cursor": {
          "ref": "33a0d034-fc3e-4ab9-bc05-f481780a7247",
          "length": 250,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "8f46b07a-f690-4ed1-a8e2-a3fdc40b9ec4"
        },
        "item": {
          "id": "8fbd650d-0cd3-405f-b6c5-8760a427631e",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "f2eaafa9-46ea-4ae0-912e-a02d5ce03ada",
          "status": "OK",
          "code": 200,
          "responseTime": 73,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "d83b5147-486d-44b2-a9db-0baba8c752c4",
        "cursor": {
          "ref": "7ac48acd-78bc-47ae-981e-56467dd90ac8",
          "length": 250,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "180c847f-36fd-401a-ae1c-3c1e02769e85"
        },
        "item": {
          "id": "d83b5147-486d-44b2-a9db-0baba8c752c4",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "de114782-0737-4fc0-8c99-dac7848154c0",
          "status": "OK",
          "code": 200,
          "responseTime": 82,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "24759318-a24a-4863-a303-651bde81b54a",
        "cursor": {
          "ref": "60088890-5c47-47e1-87cd-20c397e80a2e",
          "length": 250,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "cf09e1e5-8c82-4adb-9ed0-923aef79bdd0"
        },
        "item": {
          "id": "24759318-a24a-4863-a303-651bde81b54a",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "7f299255-41c2-4194-8e8c-2837e18d5622",
          "status": "OK",
          "code": 200,
          "responseTime": 76,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "3f68ac6c-2cdc-49c8-beb0-27dbde430d14",
        "cursor": {
          "ref": "d1f25ec3-8c9b-477a-86ff-8bd758ca0994",
          "length": 250,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "45f7bf23-f305-4e01-b77b-6ebf994d9e22"
        },
        "item": {
          "id": "3f68ac6c-2cdc-49c8-beb0-27dbde430d14",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "17a67ad9-dc39-4eb6-a57a-89c888418da7",
          "status": "OK",
          "code": 200,
          "responseTime": 88,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "fde86f79-3df4-49c8-b359-06382048faa6",
        "cursor": {
          "ref": "30ab4d22-1ee4-46e1-824e-d75653005acd",
          "length": 250,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "1b21b684-207c-40a1-ab0a-085891296d20"
        },
        "item": {
          "id": "fde86f79-3df4-49c8-b359-06382048faa6",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "78aeb220-3716-420c-b2a6-6158aec0a5d2",
          "status": "OK",
          "code": 200,
          "responseTime": 77,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "a8659831-6bf1-4d9f-abc1-a5606d62963d",
        "cursor": {
          "ref": "02ee0e99-879d-4192-b815-bc70a43ec9cb",
          "length": 250,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "645a346f-c793-4b9c-9b97-790c1c26c799"
        },
        "item": {
          "id": "a8659831-6bf1-4d9f-abc1-a5606d62963d",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "c1c3a3b1-0f28-4d4d-bd2c-5a5d5812dfd2",
          "status": "OK",
          "code": 200,
          "responseTime": 89,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "12b99945-4727-4d9c-be87-163a52ecb063",
        "cursor": {
          "ref": "36088356-d6c4-4025-af09-8bc9737e3308",
          "length": 250,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "864b02e1-4511-4460-b0bc-7a84085201d3"
        },
        "item": {
          "id": "12b99945-4727-4d9c-be87-163a52ecb063",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "ac0168d8-d802-414f-9cc6-45c1b5a0702b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4b75a98-2929-4be5-bd30-55f83ef5445e",
        "cursor": {
          "ref": "9dde7d39-0456-4c42-8410-d816055c4d74",
          "length": 250,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "4225b500-7eca-4784-a0d7-6b22995a4427"
        },
        "item": {
          "id": "a4b75a98-2929-4be5-bd30-55f83ef5445e",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "6e8e70e7-d66c-422c-a505-4df4d315619a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3cca172d-6214-446c-998e-e3d3aeb7f8f4",
        "cursor": {
          "ref": "c381a1e0-4e54-4490-b36b-4a2477fda33b",
          "length": 250,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "9f6f98ac-b7e3-426b-8623-2024a2159f69"
        },
        "item": {
          "id": "3cca172d-6214-446c-998e-e3d3aeb7f8f4",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "1a29b21f-b3a7-4a8c-bbfc-f95edf135149",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2eeeb977-b209-4643-a67c-5c84ccb7215e",
        "cursor": {
          "ref": "2c59cb7b-9cfd-47f4-aaf2-922d1e9041ca",
          "length": 250,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "99d77749-d4d8-4ec4-8cc2-7fb4f6f5ea4f"
        },
        "item": {
          "id": "2eeeb977-b209-4643-a67c-5c84ccb7215e",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "47828584-15a7-4020-b7da-b26d990c9cce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce6e6be6-d469-4611-8285-2d534463fea9",
        "cursor": {
          "ref": "1b8d5f0c-2bda-4165-b1e7-56f3cedcd080",
          "length": 250,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "e049153b-aa4c-4e04-9bd3-442924564664"
        },
        "item": {
          "id": "ce6e6be6-d469-4611-8285-2d534463fea9",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "92895374-b1f4-470e-b574-5f304cef95c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "712e16a2-09c3-42b4-b418-7902deaa241c",
        "cursor": {
          "ref": "a3ea69f9-e5d1-4c3f-9309-1c758dc2c278",
          "length": 250,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "c0b6a641-6be1-43f3-bb3c-d72ff3539d77"
        },
        "item": {
          "id": "712e16a2-09c3-42b4-b418-7902deaa241c",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "37f5a004-e289-45c0-849b-48eb8f6c2100",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "401838f1-48ff-487e-b96b-5b25f8616e94",
        "cursor": {
          "ref": "1fc92a87-50fe-4bb9-8991-9a57e6b5a07e",
          "length": 250,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "5dc6c2d2-d1d0-4f77-912e-d46276b60e6c"
        },
        "item": {
          "id": "401838f1-48ff-487e-b96b-5b25f8616e94",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "dde44a5b-12a2-4f30-8129-bd28bd83125b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "287bbc0c-1e37-4bdf-b8ee-6d9a43cd1c31",
        "cursor": {
          "ref": "3d772372-1523-4252-b73c-814efe64de98",
          "length": 250,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "06d3f12b-7559-46e8-9396-5f7df1cc8e45"
        },
        "item": {
          "id": "287bbc0c-1e37-4bdf-b8ee-6d9a43cd1c31",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "22d52a2c-672a-4c04-b72a-7cdc5559ae61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df87147c-5a25-4007-a199-3c207652eb50",
        "cursor": {
          "ref": "06436fc6-326b-46e3-a621-05146b565b3f",
          "length": 250,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "99f47778-f9ad-4cb0-8f3f-51a25d2196ac"
        },
        "item": {
          "id": "df87147c-5a25-4007-a199-3c207652eb50",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "7b0f6724-45f3-4833-b30c-dfac7546f34f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a250c8d-1ad9-4e9b-969f-f38583cb4401",
        "cursor": {
          "ref": "bf59a4c3-6e5a-430e-89e5-b3af2cfbd791",
          "length": 250,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "39cd082d-8a14-4060-a36f-fa9848294106"
        },
        "item": {
          "id": "3a250c8d-1ad9-4e9b-969f-f38583cb4401",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "557d8165-64b2-487f-ae4b-4b20360969e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2384bb45-c574-4d8a-b04f-7746dcd1130e",
        "cursor": {
          "ref": "4195a847-b5fd-4b48-8e83-e5f8078340eb",
          "length": 250,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "c256e4e1-0462-404c-8675-b718f84edd35"
        },
        "item": {
          "id": "2384bb45-c574-4d8a-b04f-7746dcd1130e",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "620964af-b3fb-4ed7-a064-20d822013ec6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cd63dfb-1dfa-43fc-938e-c02b64e01877",
        "cursor": {
          "ref": "61de0c6d-3caa-406c-9274-e40da0d46a86",
          "length": 250,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "49db0ecf-fc03-477a-b585-57a74dcbf1b4"
        },
        "item": {
          "id": "9cd63dfb-1dfa-43fc-938e-c02b64e01877",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "d70a8fd3-1c05-4eda-841a-72b7fb83f046",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65b28076-b405-47c5-9cf6-87aaaec3acce",
        "cursor": {
          "ref": "3eff738c-2e18-4af2-b39d-601053fad9b7",
          "length": 250,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "f0540ee7-281c-4ce4-be49-037e67f03eda"
        },
        "item": {
          "id": "65b28076-b405-47c5-9cf6-87aaaec3acce",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "80cb8fec-92ea-48af-ac78-1eafc6ebf5fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "138c131c-8303-4cad-90b4-451002f9e9d8",
        "cursor": {
          "ref": "8dc61f51-a668-44aa-96f9-cb7ac73733d3",
          "length": 250,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "b4f1ff7d-3955-4d2d-b48a-d442a1c3016a"
        },
        "item": {
          "id": "138c131c-8303-4cad-90b4-451002f9e9d8",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "89fd2c53-bb91-4c77-8919-c934938f2f43",
          "status": "OK",
          "code": 200,
          "responseTime": 82,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "14b6bf9f-6cd9-42e6-9d43-20e6cfb6b744",
        "cursor": {
          "ref": "51c1b99a-c852-4e31-ad2c-8bfdb38e780c",
          "length": 250,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "c6daadaf-362b-444c-972c-368022f63905"
        },
        "item": {
          "id": "14b6bf9f-6cd9-42e6-9d43-20e6cfb6b744",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "e4744dcc-278d-4e35-b026-9b150d1eca42",
          "status": "OK",
          "code": 200,
          "responseTime": 76,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "1c94074c-eefd-4f67-abbf-4ab4bef9c9c8",
        "cursor": {
          "ref": "673b2075-283d-4aa8-ad06-7211160a0a20",
          "length": 250,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "7a368dbc-209c-4545-8579-c87368efbf0d"
        },
        "item": {
          "id": "1c94074c-eefd-4f67-abbf-4ab4bef9c9c8",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "c0bc57d1-adea-42b6-8515-bacede9a9be6",
          "status": "OK",
          "code": 200,
          "responseTime": 74,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "d3989262-d68f-48cd-81db-3a1a3ed4727f",
        "cursor": {
          "ref": "e4b24e86-74a8-4ff8-b38a-457d1d16e258",
          "length": 250,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "58833cd6-d187-45d5-bcb6-be10ef3971af"
        },
        "item": {
          "id": "d3989262-d68f-48cd-81db-3a1a3ed4727f",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "b2523b99-3e05-443a-b47d-32acf5c36423",
          "status": "OK",
          "code": 200,
          "responseTime": 79,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "ce5a4c16-7951-4328-b27d-0e0729f1f383",
        "cursor": {
          "ref": "773eafe6-101f-4374-9490-038bf6a8f6df",
          "length": 250,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "9fa82227-d831-4aa2-b48c-3c0d3422d89b"
        },
        "item": {
          "id": "ce5a4c16-7951-4328-b27d-0e0729f1f383",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "029f918b-8ae9-480b-b626-2cc22b26fae0",
          "status": "OK",
          "code": 200,
          "responseTime": 81,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "902da487-bb8e-4aea-9d23-7318843bcc75",
        "cursor": {
          "ref": "2e8a0fd9-5f00-4840-bb49-37d80b2aca99",
          "length": 250,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "34c231a5-eb74-4a2c-bd95-4575d98505e7"
        },
        "item": {
          "id": "902da487-bb8e-4aea-9d23-7318843bcc75",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "461bb6b4-1426-4060-8867-f2f82be200db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11fb2d06-14fd-4cec-b1c4-74c3febe7c58",
        "cursor": {
          "ref": "ebd73946-f7ba-4093-be73-1f731974c90b",
          "length": 250,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "fe50f225-6fbc-461f-894a-b7bee0df05d5"
        },
        "item": {
          "id": "11fb2d06-14fd-4cec-b1c4-74c3febe7c58",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "524b55e6-4737-4cd8-92a3-fcd32c756439",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "091a175c-15a8-460b-a9bb-66f9e29cb4f2",
        "cursor": {
          "ref": "0da2d2c0-7686-4c73-b29e-14a0a2bfc2f2",
          "length": 250,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "199d7f72-f790-4f85-9e50-9a4483bd5b8d"
        },
        "item": {
          "id": "091a175c-15a8-460b-a9bb-66f9e29cb4f2",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "a1bcb155-c56a-46c9-8194-6f6a28866f58",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66276b8e-be50-47d2-a662-a141f599b88f",
        "cursor": {
          "ref": "8d8cc5f4-842c-409d-bb58-0c3c679f6a7b",
          "length": 250,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "2786124e-86b7-4bbc-9f37-7aaa5aadafe7"
        },
        "item": {
          "id": "66276b8e-be50-47d2-a662-a141f599b88f",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "a9ed81b6-70d2-4fc5-b01c-a1a4a54defb2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4bb4cb02-3f27-4ebe-a815-285d3e0ed46e",
        "cursor": {
          "ref": "d4a9f66f-efa8-4fcb-8704-a14316689ccc",
          "length": 250,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "6004ad6b-d713-4959-9078-011d8181eb0e"
        },
        "item": {
          "id": "4bb4cb02-3f27-4ebe-a815-285d3e0ed46e",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "4acfdad5-efac-4559-8cf3-2c068a4f97dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3da5bb97-487f-409c-bc5d-05a19d56fead",
        "cursor": {
          "ref": "5fa38451-aaa2-4279-9150-9b30444ff249",
          "length": 250,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "0fadfcf0-7525-459a-9522-9a6fcdc111cd"
        },
        "item": {
          "id": "3da5bb97-487f-409c-bc5d-05a19d56fead",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "31cf96b2-5a5b-40a1-bbba-d4c1e611d48c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1100e18a-6380-417d-88be-4d4c45b185d3",
        "cursor": {
          "ref": "9e41cae9-7117-4362-830f-11353724ee0f",
          "length": 250,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "ca29e199-3790-4dda-b038-b1f2b02607c3"
        },
        "item": {
          "id": "1100e18a-6380-417d-88be-4d4c45b185d3",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "03d8d522-8894-4cb6-8bf8-bf03c8720eaf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "334c3c79-7b0f-48df-8f3b-e6ddc45b4f54",
        "cursor": {
          "ref": "d4247cda-0dee-4195-97f2-6fc4a22dc54b",
          "length": 250,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "3079fb69-6ffc-4417-8c2e-abaf0f893904"
        },
        "item": {
          "id": "334c3c79-7b0f-48df-8f3b-e6ddc45b4f54",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "394d6eb5-e82b-4af0-b89a-f9cd8806f27e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0ea9e58-e2c7-4b5c-ab1d-0e25e33a16b8",
        "cursor": {
          "ref": "a7e47c01-1be6-4d49-8408-5aab8c2ab9bf",
          "length": 250,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "42150b48-6633-4d68-87ea-dd3602864487"
        },
        "item": {
          "id": "b0ea9e58-e2c7-4b5c-ab1d-0e25e33a16b8",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "8ae2278d-ac41-4714-a7c2-e5190158920b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b5d802b-079f-4536-b805-dffe97566870",
        "cursor": {
          "ref": "0c775242-0bb8-418c-8c8f-335b37fd2a83",
          "length": 250,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "78d958ae-3472-4499-b9e5-5ab4d4a7b92f"
        },
        "item": {
          "id": "5b5d802b-079f-4536-b805-dffe97566870",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "438568be-f611-47af-8633-4c790176a209",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db2da67c-445b-46fe-ba55-d65418d72eca",
        "cursor": {
          "ref": "b0e51625-2721-40f6-8135-e298e8da445c",
          "length": 250,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "a23711b9-b8c9-4884-878f-27bd6e235b71"
        },
        "item": {
          "id": "db2da67c-445b-46fe-ba55-d65418d72eca",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "9404fb93-4480-4430-88b3-570d854262c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b43519b1-0a56-4f19-ae7f-3d14bf8ed6fe",
        "cursor": {
          "ref": "82a0ecde-053a-4e68-a9da-5c2f9360324c",
          "length": 250,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "9ed8ef66-fc48-4346-ba67-02c0edfec3d6"
        },
        "item": {
          "id": "b43519b1-0a56-4f19-ae7f-3d14bf8ed6fe",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "762d8e87-a41b-4d52-b285-150240558e9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38f2d69d-b026-42f4-9508-f833e24b2a46",
        "cursor": {
          "ref": "0defe631-ad5e-4259-8da8-e8fc36138029",
          "length": 250,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "05aa8ff4-6f1e-48d9-a4d6-0302f9360531"
        },
        "item": {
          "id": "38f2d69d-b026-42f4-9508-f833e24b2a46",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "8e88a039-9b95-4f86-9978-db43417bb95b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aca5c971-9cc7-48f9-825f-0868baa6daf9",
        "cursor": {
          "ref": "40c8976e-0c0a-4b1f-94fc-6b17cb7ba7f8",
          "length": 250,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "ca548fe1-dabe-4fd8-8e2d-e72d4b9a12c9"
        },
        "item": {
          "id": "aca5c971-9cc7-48f9-825f-0868baa6daf9",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "7a789ac6-a05c-4c0f-802c-a4857d1b6423",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0021e2fb-70cf-4630-a41f-d934f5b0abfc",
        "cursor": {
          "ref": "d11c8b81-f5dc-4ec0-aded-c12a721a61ac",
          "length": 250,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "91b34aa5-7dbb-4dec-94ae-bb2ceeccdc85"
        },
        "item": {
          "id": "0021e2fb-70cf-4630-a41f-d934f5b0abfc",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "31e9df20-f7db-4ac7-b649-d0d2e7ada712",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d026dad8-748e-46b2-aeff-0e8f4e2b533a",
        "cursor": {
          "ref": "b7087e24-ad39-4188-a085-2ce046cae134",
          "length": 250,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "b0f8e21d-606c-4a2c-ba23-a84e221aa66b"
        },
        "item": {
          "id": "d026dad8-748e-46b2-aeff-0e8f4e2b533a",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "3b7dc0eb-1f62-4c43-80d9-f26c4bdfa4d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98371de3-db32-4e1d-b474-12648c8ebb08",
        "cursor": {
          "ref": "3257898d-4504-448f-85f0-4298b1ff2e9b",
          "length": 250,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "6e60ed9c-b674-48a5-81aa-a95fa5f0afa4"
        },
        "item": {
          "id": "98371de3-db32-4e1d-b474-12648c8ebb08",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "8865ef68-07d1-4e36-92d2-ea3a9854f9fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b333f06-e508-40f7-bad8-95e67a40d30b",
        "cursor": {
          "ref": "cbb1b88e-5316-4ba7-b362-55eb01b14c09",
          "length": 250,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "6c8f158b-b5fd-4149-88b1-fa61ae7df888"
        },
        "item": {
          "id": "8b333f06-e508-40f7-bad8-95e67a40d30b",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "ecbdd20d-5b76-464a-b090-de756c79b322",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56aba4fa-c9c4-46bc-9d2b-0aebcb14fd50",
        "cursor": {
          "ref": "b81ea0e1-5517-423d-9efe-d2524253dca1",
          "length": 250,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "a1dac5b6-5985-4efa-ab65-e4b7e3025d36"
        },
        "item": {
          "id": "56aba4fa-c9c4-46bc-9d2b-0aebcb14fd50",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "cd936888-21d4-4ff6-81a7-d315d6f39181",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b109470d-55c2-4134-962f-59bd2b4467b9",
        "cursor": {
          "ref": "06fcd95c-d869-40d9-8ef1-f018ac237b52",
          "length": 250,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "663fea1e-4fa5-49a3-b558-65e9c06708e3"
        },
        "item": {
          "id": "b109470d-55c2-4134-962f-59bd2b4467b9",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "4bad5583-8b10-4cc8-88cc-985542065939",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24568ae8-f241-4b94-b71a-34e4c1575955",
        "cursor": {
          "ref": "f7fbcab7-fcbc-4eaa-af43-cc7fdd905f39",
          "length": 250,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "31b8b705-7edf-4102-845b-bb9a0af6c26c"
        },
        "item": {
          "id": "24568ae8-f241-4b94-b71a-34e4c1575955",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "101a1560-5085-45cf-a040-fbce3e4239f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43faf62f-2336-4aca-a8f4-192785cb6bdd",
        "cursor": {
          "ref": "9c3db35a-24f5-4223-9617-26fe768d70a3",
          "length": 250,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "09681481-d6fe-4075-905d-4c71104391b6"
        },
        "item": {
          "id": "43faf62f-2336-4aca-a8f4-192785cb6bdd",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "00fd97f7-1263-4c52-8096-8cd32ce06524",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4486112b-4425-4df1-b17c-53b7f5bec175",
        "cursor": {
          "ref": "f003d395-0d45-44a9-9fc8-0c51f4d3f0ad",
          "length": 250,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "e7d0b907-66f2-41da-9465-53f8a9d5228a"
        },
        "item": {
          "id": "4486112b-4425-4df1-b17c-53b7f5bec175",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "2c2f644d-f78b-4fdb-b056-4593204f2ee5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8c4134e-24a5-4bf8-81a7-59b0a56cbf78",
        "cursor": {
          "ref": "720339ca-2faa-4529-a346-55aeb035eb3c",
          "length": 250,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "850a99e4-5a17-4e28-9511-447ffa4ac281"
        },
        "item": {
          "id": "e8c4134e-24a5-4bf8-81a7-59b0a56cbf78",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "4b2a48d9-5cfd-4076-b2e4-e054cbb7264b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc9b999b-4801-4e95-8474-48ca9b738d64",
        "cursor": {
          "ref": "2aee6034-08fd-413c-b001-238475484b61",
          "length": 250,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "c37a165c-8b6a-4f64-8241-6fa30d6eb5c3"
        },
        "item": {
          "id": "cc9b999b-4801-4e95-8474-48ca9b738d64",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "38d0937d-347e-4939-b3d5-9062c0dc17f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9086c1c8-0652-4211-839e-cc784d41d1db",
        "cursor": {
          "ref": "192044ba-c34f-4f0a-8f23-5374d780dae3",
          "length": 250,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "1c01c4d8-fee4-4e62-a422-bb81a0436d31"
        },
        "item": {
          "id": "9086c1c8-0652-4211-839e-cc784d41d1db",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "b8e691ec-63b6-432a-9720-43af0fe3ba9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efc9ca6c-439a-4178-9f8a-dafe58c7674a",
        "cursor": {
          "ref": "0b815321-0b07-416b-ba05-00bfc7b501f5",
          "length": 250,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "35a492ae-6c23-4816-9d56-b4529019cc2e"
        },
        "item": {
          "id": "efc9ca6c-439a-4178-9f8a-dafe58c7674a",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "8967e115-904c-44ad-bbf4-70eb7d574a68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a55b46c-39e2-4756-b8db-a8c5cdc19be9",
        "cursor": {
          "ref": "84fed9c1-467f-4257-8ad9-da506db7dbac",
          "length": 250,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "79666a7e-8ec1-447b-b086-db22bb865f0c"
        },
        "item": {
          "id": "2a55b46c-39e2-4756-b8db-a8c5cdc19be9",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "5f72e7a3-7ad1-48e9-872b-819bba83278a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39d57b24-de18-4abc-86ae-739de4ff790c",
        "cursor": {
          "ref": "3d5d780f-62e2-439e-9cb5-ea7ecc3c4764",
          "length": 250,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "c1c443e4-a9c7-4744-ad01-aac63a977dcd"
        },
        "item": {
          "id": "39d57b24-de18-4abc-86ae-739de4ff790c",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "6d6e5938-0b6f-4c5c-aafc-e5ece094246a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0854269e-ef14-440f-94ca-17508e04065b",
        "cursor": {
          "ref": "b9a6e731-6f77-4246-a9d5-f9a026d59062",
          "length": 250,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "4c77dd98-1f7d-4ab3-bae6-c6b3eb7dcf2c"
        },
        "item": {
          "id": "0854269e-ef14-440f-94ca-17508e04065b",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "69fd1bb2-9509-4f64-8253-727117f403e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9036348d-a1f0-4816-85b7-feef2d3a5c11",
        "cursor": {
          "ref": "4d8ee6fb-f292-4ee4-b16f-c3a04d071492",
          "length": 250,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "fd67f909-b99e-4057-bb46-a4bba709fca2"
        },
        "item": {
          "id": "9036348d-a1f0-4816-85b7-feef2d3a5c11",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "a3cde966-14d1-4ae1-8fe7-04b37c153d86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b5675e7-a4f4-4597-9340-c9df9f295a80",
        "cursor": {
          "ref": "2467413a-da48-48eb-90b5-47e088658524",
          "length": 250,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "2af28ede-0682-49c5-ba1c-9040de7211ab"
        },
        "item": {
          "id": "4b5675e7-a4f4-4597-9340-c9df9f295a80",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "1420c220-6238-4217-9cc1-d6724b220b31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8105e54d-0f0d-4b2f-9adf-5152e55d815a",
        "cursor": {
          "ref": "7cacb718-1505-4be2-922e-61740b4f88f2",
          "length": 250,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "b3877a06-f1e5-4548-9847-1232cd842636"
        },
        "item": {
          "id": "8105e54d-0f0d-4b2f-9adf-5152e55d815a",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "1cdadce7-9a3a-4940-9947-30f010cfa587",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cff23edc-a36a-4c17-a31f-763ba5d0854d",
        "cursor": {
          "ref": "55bdbe56-d357-4452-9c3f-7c93c123b13f",
          "length": 250,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "52acbeab-0ea5-4185-8683-9152295c31c1"
        },
        "item": {
          "id": "cff23edc-a36a-4c17-a31f-763ba5d0854d",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "82b76f4a-609e-45ce-869d-855f99ed48f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c22ca47-73a0-481e-868f-08ad00d01204",
        "cursor": {
          "ref": "4d26f22f-af6c-4997-83f7-f930a0a7d877",
          "length": 250,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "cc4ae6e1-16cb-415c-a00a-0a1f1d626d79"
        },
        "item": {
          "id": "9c22ca47-73a0-481e-868f-08ad00d01204",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "7088c109-8598-441d-8f47-f64b684f75e8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 24,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59282fce-7ac6-4875-9077-f4002eda73c1",
        "cursor": {
          "ref": "4e317041-e58e-4c15-a08b-9765fc1a0394",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "786d421e-3e85-42d8-a022-ec716b00675a"
        },
        "item": {
          "id": "59282fce-7ac6-4875-9077-f4002eda73c1",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "5ac6fe71-f01f-43be-acb5-4c9a110bc14a",
          "status": "OK",
          "code": 200,
          "responseTime": 85,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "ba30c465-de85-4309-a9a5-5c3f57d7d649",
        "cursor": {
          "ref": "dc15cc6d-ce8a-48de-99a8-9bddc5415a52",
          "length": 250,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "72796574-457b-4a23-86b0-7f79328005c6"
        },
        "item": {
          "id": "ba30c465-de85-4309-a9a5-5c3f57d7d649",
          "name": "credentials_verify"
        },
        "response": {
          "id": "938bb80d-ed33-4419-a6f9-312f0aa72572",
          "status": "OK",
          "code": 200,
          "responseTime": 96,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "af5e0b6a-c610-4778-b1df-79a8f84700dc",
        "cursor": {
          "ref": "8372e58b-bb9c-47d7-aa1f-70deefaa10a0",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "7ffef904-eb50-4c6c-9b90-e010efbd8ee0"
        },
        "item": {
          "id": "af5e0b6a-c610-4778-b1df-79a8f84700dc",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "32e617b2-1c26-4994-ab75-c920113c12dc",
          "status": "OK",
          "code": 200,
          "responseTime": 98,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2ebf6de-980d-4643-816e-73a48ef0ac3c",
        "cursor": {
          "ref": "59d80c36-09a4-43a9-9c0e-a9c4450fb160",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "d85b3fcc-6063-4aff-8df0-743bd7c931b6"
        },
        "item": {
          "id": "a2ebf6de-980d-4643-816e-73a48ef0ac3c",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "89bf9f9a-22c0-47dc-a2e4-38d8f1374752",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 22,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2ebf6de-980d-4643-816e-73a48ef0ac3c",
        "cursor": {
          "ref": "59d80c36-09a4-43a9-9c0e-a9c4450fb160",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "d85b3fcc-6063-4aff-8df0-743bd7c931b6"
        },
        "item": {
          "id": "a2ebf6de-980d-4643-816e-73a48ef0ac3c",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "89bf9f9a-22c0-47dc-a2e4-38d8f1374752",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 22,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b9a665e-d121-4ea3-a0f7-f064a7e9742c",
        "cursor": {
          "ref": "80a93f65-f3f2-412f-adb8-358b07915ba1",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "c26dee53-b7aa-4213-8686-c8a107cc0078"
        },
        "item": {
          "id": "2b9a665e-d121-4ea3-a0f7-f064a7e9742c",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "bb442f10-2117-46dd-a2cc-88c1cb244600",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 22,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a18b4fd6-72de-41ca-b8b9-39308a3e5d0b",
        "cursor": {
          "ref": "02b27a96-ff0a-4984-824a-01e59ab635ac",
          "length": 250,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "95cac5b8-5f98-4eb9-804a-97779e9b5121"
        },
        "item": {
          "id": "a18b4fd6-72de-41ca-b8b9-39308a3e5d0b",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "acd85681-61c0-4cd5-9774-78ae5aa7db20",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 22,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}